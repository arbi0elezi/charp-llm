[
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AnalyzeGCodeLines(CancellationToken cancellationToken,\n\t\t\tAction<double, string> progressReporter,\n\t\t\tVector4 maxAccelerationMmPerS2,\n\t\t\tVector4 maxVelocityMmPerS,\n\t\t\tVector4 velocitySameAsStopMmPerS,\n\t\t\tVector4 speedMultiplier)\n\t\t{\n\t\t\tdouble feedRateMmPerMin = 0;\n\t\t\tvar lastPrinterPosition = default(Vector3);\n\t\t\tdouble lastEPosition = 0;\n\n\t\t\tvar maxProgressReport = new Stopwatch();\n\t\t\tmaxProgressReport.Start();\n\n\t\t\tint currentTool = 0;\n\n\t\t\tfor (int lineIndex = 0; lineIndex < gCodeCommandQueue.Count; lineIndex++)\n\t\t\t{\n\t\t\t\tPrinterMachineInstruction instruction = gCodeCommandQueue[lineIndex];\n\t\t\t\tstring line = instruction.Line;\n\t\t\t\tvar deltaPositionThisLine = default(Vector3);\n\t\t\t\tdouble deltaEPositionThisLine = 0;\n\t\t\t\tstring lineToParse = line.ToUpper().Trim();\n\t\t\t\tif (lineToParse.StartsWith(\"G0\") || lineToParse.StartsWith(\"G1\"))\n\t\t\t\t{\n\t\t\t\t\tdouble newFeedRateMmPerMin = 0;\n\t\t\t\t\tif (GetFirstNumberAfter(\"F\", lineToParse, ref newFeedRateMmPerMin))\n\t\t\t\t\t{\n\t\t\t\t\t\tfeedRateMmPerMin = newFeedRateMmPerMin;\n\t\t\t\t\t}\n\n\t\t\t\t\tVector3 attemptedDestination = lastPrinterPosition;\n\t\t\t\t\tGetFirstNumberAfter(\"X\", lineToParse, ref attemptedDestination.X);\n\t\t\t\t\tGetFirstNumberAfter(\"Y\", lineToParse, ref attemptedDestination.Y);\n\t\t\t\t\tGetFirstNumberAfter(\"Z\", lineToParse, ref attemptedDestination.Z);\n\n\t\t\t\t\tdouble ePosition = lastEPosition;\n\t\t\t\t\tGetFirstNumberAfter(\"E\", lineToParse, ref ePosition);\n\n\t\t\t\t\tdeltaPositionThisLine = attemptedDestination - lastPrinterPosition;\n\t\t\t\t\tdeltaEPositionThis\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AnalyzeGCodeLines(CancellationToken cancellationToken,\n\t\t\tAction<double, string> progressReporter,\n\t\t\tVector4 maxAccelerationMmPerS2,\n\t\t\tVector4 maxVelocityMmPerS,\n\t\t\tVector4 velocitySameAsStopMmPerS,\n\t\t\tVector4 speedMultiplier)\n\t\t{\n\t\t\tdouble feedRateMmPerMin = 0;\n\t\t\tvar lastPrinterPosition = default(Vector3);\n\t\t\tdouble lastEPosition = 0;\n\n\t\t\tvar maxProgressReport = new Stopwatch();\n\t\t\tmaxProgressReport.Start();\n\n\t\t\tint currentTool = 0;\n\n\t\t\tfor (int lineIndex = 0; lineIndex < gCodeCommandQueue.Count; lineIndex++)\n\t\t\t{\n\t\t\t\tPrinterMachineInstruction instruction = gCodeCommandQueue[lineIndex];\n\t\t\t\tstring line = instruction.Line;\n\t\t\t\tvar deltaPositionThisLine = default(Vector3);\n\t\t\t\tdouble deltaEPositionThisLine = 0;\n\t\t\t\tstring lineToParse = line.ToUpper().Trim();\n\t\t\t\tif (lineToParse.StartsWith(\"G0\") || lineToParse.StartsWith(\"G1\"))\n\t\t\t\t{\n\t\t\t\t\tdouble newFeedRateMmPerMin = 0;\n\t\t\t\t\tif (GetFirstNumberAfter(\"F\", lineToParse, ref newFeedRateMmPerMin))\n\t\t\t\t\t{\n\t\t\t\t\t\tfeedRateMmPerMin = newFeedRateMmPerMin;\n\t\t\t\t\t}\n\n\t\t\t\t\tVector3 attemptedDestination = lastPrinterPosition;\n\t\t\t\t\tGetFirstNumberAfter(\"X\", lineToParse, ref attemptedDestination.X);\n\t\t\t\t\tGetFirstNumberAfter(\"Y\", lineToParse, ref attemptedDestination.Y);\n\t\t\t\t\tGetFirstNumberAfter(\"Z\", lineToParse, ref attemptedDestination.Z);\n\n\t\t\t\t\tdouble ePosition = lastEPosition;\n\t\t\t\t\tGetFirstNumberAfter(\"E\", lineToParse, ref ePosition);\n\n\t\t\t\t\tdeltaPositionThisLine = attemptedDestination - lastPrinterPosition;\n\t\t\t\t\tdeltaEPositionThis\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DrawText(Graphics g)\n        {\n            TextFormatFlags tff;\n\n            switch (TextAlign)\n            {\n                case ContentAlignment.TopLeft:\n                    tff = TextFormatFlags.Top | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.MiddleLeft:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.BottomLeft:\n                    tff = TextFormatFlags.Bottom | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.TopCenter:\n                    tff = TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;\n                    break;\n                default:\n                case ContentAlignment.MiddleCenter:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter;\n                    break;\n                case ContentAlignment.BottomCenter:\n                    tff = TextFormatFlags.Bottom | TextFormatFlags.HorizontalCenter;\n                    break;\n                case ContentAlignment.TopRight:\n                    tff = TextFormatFlags.Top | TextFormatFlags.Right;\n                    break;\n                case ContentAlignment.MiddleRight:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.Right;\n                    break;\n                case ContentAlignment.BottomRight:\n                    tff = TextFormatFlags.Bottom \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DrawText(Graphics g)\n        {\n            TextFormatFlags tff;\n\n            switch (TextAlign)\n            {\n                case ContentAlignment.TopLeft:\n                    tff = TextFormatFlags.Top | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.MiddleLeft:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.BottomLeft:\n                    tff = TextFormatFlags.Bottom | TextFormatFlags.Left;\n                    break;\n                case ContentAlignment.TopCenter:\n                    tff = TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;\n                    break;\n                default:\n                case ContentAlignment.MiddleCenter:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter;\n                    break;\n                case ContentAlignment.BottomCenter:\n                    tff = TextFormatFlags.Bottom | TextFormatFlags.HorizontalCenter;\n                    break;\n                case ContentAlignment.TopRight:\n                    tff = TextFormatFlags.Top | TextFormatFlags.Right;\n                    break;\n                case ContentAlignment.MiddleRight:\n                    tff = TextFormatFlags.VerticalCenter | TextFormatFlags.Right;\n                    break;\n                case ContentAlignment.BottomRight:\n                    tff = TextFormatFlags.Bottom \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Set required files from the XML document\n        /// </summary>\n        private void SetRequiredFiles()\n        {\n            // Itterate through the RF XML and populate the RF collection\n            XmlNodeList fileNodes = _requiredFilesXml.SelectNodes(\"/files/file\");\n\n            foreach (XmlNode file in fileNodes)\n            {\n                RequiredFile rf = new RequiredFile(); \n                \n                XmlAttributeCollection attributes = file.Attributes;\n\n                rf.FileType = attributes[\"type\"].Value;\n                rf.Downloading = false;\n                rf.Complete = false;\n                rf.LastChecked = DateTime.Now;\n                rf.ChunkOffset = 0;\n                rf.ChunkSize = 0;\n\n                // Fill in some information that we already know\n                if (rf.FileType == \"media\")\n                {\n                    rf.Id = int.Parse(attributes[\"id\"].Value);\n                    rf.Path = attributes[\"path\"].Value;\n                    rf.SaveAs = (attributes[\"saveAs\"] == null || string.IsNullOrEmpty(attributes[\"saveAs\"].Value)) ? rf.Path : attributes[\"saveAs\"].Value;\n                    rf.Http = (attributes[\"download\"].Value == \"http\");\n                    rf.ChunkSize = 512000;\n                }\n                else if (rf.FileType == \"layout\")\n                {\n                    rf.Id = int.Parse(attributes[\"id\"].Value);\n                    rf.Path = attributes[\"path\"].Value;\n                    rf.Http\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Set required files from the XML document\n        /// </summary>\n        private void SetRequiredFiles()\n        {\n            // Itterate through the RF XML and populate the RF collection\n            XmlNodeList fileNodes = _requiredFilesXml.SelectNodes(\"/files/file\");\n\n            foreach (XmlNode file in fileNodes)\n            {\n                RequiredFile rf = new RequiredFile(); \n                \n                XmlAttributeCollection attributes = file.Attributes;\n\n                rf.FileType = attributes[\"type\"].Value;\n                rf.Downloading = false;\n                rf.Complete = false;\n                rf.LastChecked = DateTime.Now;\n                rf.ChunkOffset = 0;\n                rf.ChunkSize = 0;\n\n                // Fill in some information that we already know\n                if (rf.FileType == \"media\")\n                {\n                    rf.Id = int.Parse(attributes[\"id\"].Value);\n                    rf.Path = attributes[\"path\"].Value;\n                    rf.SaveAs = (attributes[\"saveAs\"] == null || string.IsNullOrEmpty(attributes[\"saveAs\"].Value)) ? rf.Path : attributes[\"saveAs\"].Value;\n                    rf.Http = (attributes[\"download\"].Value == \"http\");\n                    rf.ChunkSize = 512000;\n                }\n                else if (rf.FileType == \"layout\")\n                {\n                    rf.Id = int.Parse(attributes[\"id\"].Value);\n                    rf.Path = attributes[\"path\"].Value;\n                    rf.Http\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int GetStringToNumber(string aString) {\n            bool xIsNegative = false;\n            int xNumber = 0;\n            if (!string.IsNullOrWhiteSpace(aString)) {\n                char[] xCharArray = aString.ToCharArray();\n                for (int i = 0; i < xCharArray.Length; i++) {\n                    if (char.IsDigit(xCharArray[i])) {\n                        int xValue = xCharArray[i] - '0';\n                        int xMax = xCharArray.Length - 1;\n                        for (int j = 0; j < xMax - i; i++) {\n                            xValue *= 10;\n                        }\n\n                        xNumber += xValue;\n                    } else if (xCharArray[i] == '-') {\n                        xIsNegative = true;\n                    } else if (xCharArray[i] == '.') {\n                        break;\n                    } else {\n                        throw new FormatException(\"The string parameter is not a number and is invalid.\");\n                    }\n                }\n            }\n\n            if (xIsNegative) {\n                xNumber *= -1;\n            }\n\n            return xNumber;\n        }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int GetStringToNumber(string aString) {\n            bool xIsNegative = false;\n            int xNumber = 0;\n            if (!string.IsNullOrWhiteSpace(aString)) {\n                char[] xCharArray = aString.ToCharArray();\n                for (int i = 0; i < xCharArray.Length; i++) {\n                    if (char.IsDigit(xCharArray[i])) {\n                        int xValue = xCharArray[i] - '0';\n                        int xMax = xCharArray.Length - 1;\n                        for (int j = 0; j < xMax - i; i++) {\n                            xValue *= 10;\n                        }\n\n                        xNumber += xValue;\n                    } else if (xCharArray[i] == '-') {\n                        xIsNegative = true;\n                    } else if (xCharArray[i] == '.') {\n                        break;\n                    } else {\n                        throw new FormatException(\"The string parameter is not a number and is invalid.\");\n                    }\n                }\n            }\n\n            if (xIsNegative) {\n                xNumber *= -1;\n            }\n\n            return xNumber;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void InternalFireEvents64(Native.Poll.zmq_pollitem_t_x64[] items)\n\t\t{\n\t\t\tbool hasRcv;\n\t\t\tbool hasSend;\n\n\t\t\t// for (int i = 0; i < items.Length; i++)\n\t\t\tforeach (var pollitem in items)\n\t\t\t{\n\t\t\t\tif (pollitem.revents != 0)\n\t\t\t\t{\n\t\t\t\t\thasRcv = ((pollitem.revents & Native.Poll.POLLIN) != 0);\n\t\t\t\t\thasSend = ((pollitem.revents & Native.Poll.POLLOUT) != 0);\n\n\t\t\t\t\tif (hasRcv || hasSend)\n\t\t\t\t\t{\n\t\t\t\t\t\t// get our socket given the pointer\n\t\t\t\t\t\tSocket socket;\n\t\t\t\t\t\tif (_ptr2Socket.TryGetValue(pollitem.socket, out socket))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// fire the events\n\t\t\t\t\t\t\tif (hasRcv)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ev = this.RecvReady;\n\t\t\t\t\t\t\t\tif (ev != null) ev(socket);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (hasSend)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ev = this.SendReady;\n\t\t\t\t\t\t\t\tif (ev != null) ev(socket);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void InternalFireEvents64(Native.Poll.zmq_pollitem_t_x64[] items)\n\t\t{\n\t\t\tbool hasRcv;\n\t\t\tbool hasSend;\n\n\t\t\t// for (int i = 0; i < items.Length; i++)\n\t\t\tforeach (var pollitem in items)\n\t\t\t{\n\t\t\t\tif (pollitem.revents != 0)\n\t\t\t\t{\n\t\t\t\t\thasRcv = ((pollitem.revents & Native.Poll.POLLIN) != 0);\n\t\t\t\t\thasSend = ((pollitem.revents & Native.Poll.POLLOUT) != 0);\n\n\t\t\t\t\tif (hasRcv || hasSend)\n\t\t\t\t\t{\n\t\t\t\t\t\t// get our socket given the pointer\n\t\t\t\t\t\tSocket socket;\n\t\t\t\t\t\tif (_ptr2Socket.TryGetValue(pollitem.socket, out socket))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// fire the events\n\t\t\t\t\t\t\tif (hasRcv)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ev = this.RecvReady;\n\t\t\t\t\t\t\t\tif (ev != null) ev(socket);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (hasSend)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ev = this.SendReady;\n\t\t\t\t\t\t\t\tif (ev != null) ev(socket);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void UpdateUneditedSpans(\n            List<RudeEditDiagnostic> diagnostics,\n            Match<SyntaxNode> topMatch,\n            SourceText oldText,\n            SourceText newText,\n            DocumentId documentId,\n            IActiveStatementTrackingService trackingService,\n            ImmutableArray<ActiveStatementSpan> oldActiveStatements,\n            [In, Out]LinePositionSpan[] newActiveStatements,\n            [In, Out]ImmutableArray<LinePositionSpan>[] newExceptionRegions,\n            [In, Out]List<KeyValuePair<ActiveStatementId, TextSpan>> updatedTrackingSpans)\n        {\n            Debug.Assert(oldActiveStatements.Length == newActiveStatements.Length);\n            Debug.Assert(oldActiveStatements.Length == newExceptionRegions.Length);\n\n            // Active statements in methods that were not updated \n            // are not changed but their spans might have been. \n\n            for (int i = 0; i < newActiveStatements.Length; i++)\n            {\n                if (newActiveStatements[i] == default(LinePositionSpan))\n                {\n                    Debug.Assert(newExceptionRegions[i].IsDefault);\n\n                    TextSpan trackedSpan = default(TextSpan);\n                    bool isTracked = trackingService != null &&\n                                     trackingService.TryGetSpan(new ActiveStatementId(documentId, i), newText, out trackedSpan);\n\n                    TextSpan oldStatementSpan;\n                    if (!TryGetTextSpan(oldText.Lines, oldActive\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void UpdateUneditedSpans(\n            List<RudeEditDiagnostic> diagnostics,\n            Match<SyntaxNode> topMatch,\n            SourceText oldText,\n            SourceText newText,\n            DocumentId documentId,\n            IActiveStatementTrackingService trackingService,\n            ImmutableArray<ActiveStatementSpan> oldActiveStatements,\n            [In, Out]LinePositionSpan[] newActiveStatements,\n            [In, Out]ImmutableArray<LinePositionSpan>[] newExceptionRegions,\n            [In, Out]List<KeyValuePair<ActiveStatementId, TextSpan>> updatedTrackingSpans)\n        {\n            Debug.Assert(oldActiveStatements.Length == newActiveStatements.Length);\n            Debug.Assert(oldActiveStatements.Length == newExceptionRegions.Length);\n\n            // Active statements in methods that were not updated \n            // are not changed but their spans might have been. \n\n            for (int i = 0; i < newActiveStatements.Length; i++)\n            {\n                if (newActiveStatements[i] == default(LinePositionSpan))\n                {\n                    Debug.Assert(newExceptionRegions[i].IsDefault);\n\n                    TextSpan trackedSpan = default(TextSpan);\n                    bool isTracked = trackingService != null &&\n                                     trackingService.TryGetSpan(new ActiveStatementId(documentId, i), newText, out trackedSpan);\n\n                    TextSpan oldStatementSpan;\n                    if (!TryGetTextSpan(oldText.Lines, oldActive\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.\n        /// </summary>\n        /// <exception cref=\"DocuSign.eSign.Client.ApiException\">Thrown when fails to make API call</exception>\n        /// <param name=\"accountId\">The external account number (int) or account ID Guid.</param>/// <param name=\"userId\">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>\n        /// <param name=\"cloudStorageProviders\"> (optional)</param>\n        \n        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>\n        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CreateProviderAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)\n        {\n            // verify the required parameter 'accountId' is set\n            if (accountId == null)\n                throw new ApiException(400, \"Missing required parameter 'accountId' when calling CloudStorageApi->CreateProvider\");\n            // verify the required parameter 'userId' is set\n            if (userId == null)\n                thr\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.\n        /// </summary>\n        /// <exception cref=\"DocuSign.eSign.Client.ApiException\">Thrown when fails to make API call</exception>\n        /// <param name=\"accountId\">The external account number (int) or account ID Guid.</param>/// <param name=\"userId\">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>\n        /// <param name=\"cloudStorageProviders\"> (optional)</param>\n        \n        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>\n        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CreateProviderAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)\n        {\n            // verify the required parameter 'accountId' is set\n            if (accountId == null)\n                throw new ApiException(400, \"Missing required parameter 'accountId' when calling CloudStorageApi->CreateProvider\");\n            // verify the required parameter 'userId' is set\n            if (userId == null)\n                thr\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Use(Player p, string message)\n        {\n            try\n            {\n                if (message == \"\") { Help(p); return; }\n                if (message.Split(' ').Length > 2) { Help(p); return; }\n                int pos = message.IndexOf(' ');\n                string phys = \"0\";\n                if (pos != -1)\n                {\n                    phys = message.Substring(pos + 1);\n                    message = message.Substring(0, pos).ToLower();\n                }\n                else\n                {\n                    message = message.ToLower();\n                }\n\n                while (Server.levels == null) Thread.Sleep(100); // Do nothing while we wait on the levels list...\n\n                foreach (Level l in Server.levels)\n                {\n                    if (l.name == message) { Player.SendMessage(p, message + \" is already loaded!\"); return; }\n                }\n\n                if (Server.levels.Count == Server.levels.Capacity)\n                {\n                    if (Server.levels.Capacity == 1)\n                    {\n                        Player.SendMessage(p, \"You can't load any levels!\");\n                    }\n                    else\n                    {\n                        Command.all.Find(\"unload\").Use(p, \"empty\");\n                        if (Server.levels.Capacity == 1)\n                        {\n                            Player.SendMessage(p, \"No maps are empty to unload. Cannot load map.\");\n                            re\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Use(Player p, string message)\n        {\n            try\n            {\n                if (message == \"\") { Help(p); return; }\n                if (message.Split(' ').Length > 2) { Help(p); return; }\n                int pos = message.IndexOf(' ');\n                string phys = \"0\";\n                if (pos != -1)\n                {\n                    phys = message.Substring(pos + 1);\n                    message = message.Substring(0, pos).ToLower();\n                }\n                else\n                {\n                    message = message.ToLower();\n                }\n\n                while (Server.levels == null) Thread.Sleep(100); // Do nothing while we wait on the levels list...\n\n                foreach (Level l in Server.levels)\n                {\n                    if (l.name == message) { Player.SendMessage(p, message + \" is already loaded!\"); return; }\n                }\n\n                if (Server.levels.Count == Server.levels.Capacity)\n                {\n                    if (Server.levels.Capacity == 1)\n                    {\n                        Player.SendMessage(p, \"You can't load any levels!\");\n                    }\n                    else\n                    {\n                        Command.all.Find(\"unload\").Use(p, \"empty\");\n                        if (Server.levels.Capacity == 1)\n                        {\n                            Player.SendMessage(p, \"No maps are empty to unload. Cannot load map.\");\n                            re\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static string GetCurrentToolTip(out string source)\n    {\n      // Update stored tooltip.  We do this here so change can be picked up after the current onGUI.  \n      // Tooltip will not display if changes are made during the current OnGUI.  \n      // (Unity uses onGUI async callbacks so we need to allow for the callback)\n\n      // Only one of these values can be active at a time (onMouseOver), so this will trap it.\n      // (Brute force, but functional)\n      string toolTip = \"\";\n      if (!string.IsNullOrEmpty(WindowTransfer.ToolTip))\n      {\n        toolTip = WindowTransfer.ToolTip;\n        source = \"WindowTransfer\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowRoster.ToolTip))\n      {\n        toolTip = WindowRoster.ToolTip;\n        source = \"WindowRoster\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowDebugger.ToolTip))\n      {\n        toolTip = WindowDebugger.ToolTip;\n        source = \"WindowDebugger\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowManifest.ToolTip))\n      {\n        toolTip = WindowManifest.ToolTip;\n        source = \"WindowManifest\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowControl.ToolTip))\n      {\n        toolTip = WindowControl.ToolTip;\n        source = \"WindowControl\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowSettings.ToolTip))\n      {\n        toolTip = WindowSettings.ToolTip;\n        source = \"WindowSettings\";\n    \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static string GetCurrentToolTip(out string source)\n    {\n      // Update stored tooltip.  We do this here so change can be picked up after the current onGUI.  \n      // Tooltip will not display if changes are made during the current OnGUI.  \n      // (Unity uses onGUI async callbacks so we need to allow for the callback)\n\n      // Only one of these values can be active at a time (onMouseOver), so this will trap it.\n      // (Brute force, but functional)\n      string toolTip = \"\";\n      if (!string.IsNullOrEmpty(WindowTransfer.ToolTip))\n      {\n        toolTip = WindowTransfer.ToolTip;\n        source = \"WindowTransfer\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowRoster.ToolTip))\n      {\n        toolTip = WindowRoster.ToolTip;\n        source = \"WindowRoster\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowDebugger.ToolTip))\n      {\n        toolTip = WindowDebugger.ToolTip;\n        source = \"WindowDebugger\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowManifest.ToolTip))\n      {\n        toolTip = WindowManifest.ToolTip;\n        source = \"WindowManifest\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowControl.ToolTip))\n      {\n        toolTip = WindowControl.ToolTip;\n        source = \"WindowControl\";\n        return toolTip;\n      }\n      if (!string.IsNullOrEmpty(WindowSettings.ToolTip))\n      {\n        toolTip = WindowSettings.ToolTip;\n        source = \"WindowSettings\";\n    \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n\t\t* Method wrap\n\t\t*\n\t\t* @param in\n\t\t* @param inOff\n\t\t* @param inLen\n\t\t* @return\n\t\t*/\n        public virtual byte[] Wrap(\n\t\t\tbyte[]\tinput,\n\t\t\tint\t\tinOff,\n\t\t\tint\t\tlength)\n\t\t{\n\t\t\tif (!forWrapping)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException(\"Not initialized for wrapping\");\n\t\t\t}\n\n\t\t\tint len = length + 1;\n\t\t\tif ((len % 8) != 0)\n\t\t\t{\n\t\t\t\tlen += 8 - (len % 8);\n\t\t\t}\n\n\t\t\tbyte [] keyToBeWrapped = new byte[len];\n\n\t\t\tkeyToBeWrapped[0] = (byte)length;\n\t\t\tArray.Copy(input, inOff, keyToBeWrapped, 1, length);\n\n\t\t\tbyte[] pad = new byte[keyToBeWrapped.Length - length - 1];\n\n\t\t\tif (pad.Length > 0)\n\t\t\t{\n\t\t\t\tsr.NextBytes(pad);\n\t\t\t\tArray.Copy(pad, 0, keyToBeWrapped, length + 1, pad.Length);\n\t\t\t}\n\n\t\t\t// Compute the CMS Key Checksum, (section 5.6.1), call this CKS.\n\t\t\tbyte[] CKS = CalculateCmsKeyChecksum(keyToBeWrapped);\n\n\t\t\t// Let WKCKS = WK || CKS where || is concatenation.\n\t\t\tbyte[] WKCKS = new byte[keyToBeWrapped.Length + CKS.Length];\n\n\t\t\tArray.Copy(keyToBeWrapped, 0, WKCKS, 0, keyToBeWrapped.Length);\n\t\t\tArray.Copy(CKS, 0, WKCKS, keyToBeWrapped.Length, CKS.Length);\n\n\t\t\t// Encrypt WKCKS in CBC mode using KEK as the key and IV as the\n\t\t\t// initialization vector. Call the results TEMP1.\n\t\t\tbyte [] TEMP1 = new byte[WKCKS.Length];\n\n\t\t\tArray.Copy(WKCKS, 0, TEMP1, 0, WKCKS.Length);\n\n\t\t\tint noOfBlocks = WKCKS.Length / engine.GetBlockSize();\n\t\t\tint extraBytes = WKCKS.Length % engine.GetBlockSize();\n\n\t\t\tif (extraBytes != 0)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException(\"Not multiple of block length\");\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n\t\t* Method wrap\n\t\t*\n\t\t* @param in\n\t\t* @param inOff\n\t\t* @param inLen\n\t\t* @return\n\t\t*/\n        public virtual byte[] Wrap(\n\t\t\tbyte[]\tinput,\n\t\t\tint\t\tinOff,\n\t\t\tint\t\tlength)\n\t\t{\n\t\t\tif (!forWrapping)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException(\"Not initialized for wrapping\");\n\t\t\t}\n\n\t\t\tint len = length + 1;\n\t\t\tif ((len % 8) != 0)\n\t\t\t{\n\t\t\t\tlen += 8 - (len % 8);\n\t\t\t}\n\n\t\t\tbyte [] keyToBeWrapped = new byte[len];\n\n\t\t\tkeyToBeWrapped[0] = (byte)length;\n\t\t\tArray.Copy(input, inOff, keyToBeWrapped, 1, length);\n\n\t\t\tbyte[] pad = new byte[keyToBeWrapped.Length - length - 1];\n\n\t\t\tif (pad.Length > 0)\n\t\t\t{\n\t\t\t\tsr.NextBytes(pad);\n\t\t\t\tArray.Copy(pad, 0, keyToBeWrapped, length + 1, pad.Length);\n\t\t\t}\n\n\t\t\t// Compute the CMS Key Checksum, (section 5.6.1), call this CKS.\n\t\t\tbyte[] CKS = CalculateCmsKeyChecksum(keyToBeWrapped);\n\n\t\t\t// Let WKCKS = WK || CKS where || is concatenation.\n\t\t\tbyte[] WKCKS = new byte[keyToBeWrapped.Length + CKS.Length];\n\n\t\t\tArray.Copy(keyToBeWrapped, 0, WKCKS, 0, keyToBeWrapped.Length);\n\t\t\tArray.Copy(CKS, 0, WKCKS, keyToBeWrapped.Length, CKS.Length);\n\n\t\t\t// Encrypt WKCKS in CBC mode using KEK as the key and IV as the\n\t\t\t// initialization vector. Call the results TEMP1.\n\t\t\tbyte [] TEMP1 = new byte[WKCKS.Length];\n\n\t\t\tArray.Copy(WKCKS, 0, TEMP1, 0, WKCKS.Length);\n\n\t\t\tint noOfBlocks = WKCKS.Length / engine.GetBlockSize();\n\t\t\tint extraBytes = WKCKS.Length % engine.GetBlockSize();\n\n\t\t\tif (extraBytes != 0)\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException(\"Not multiple of block length\");\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Reads the next type\n\t\t/// </summary>\n\t\t/// <returns>A new <see cref=\"TypeSig\"/> instance or <c>null</c> if invalid element type</returns>\n\t\tTypeSig ReadType() {\n\t\t\tif (!recursionCounter.Increment())\n\t\t\t\treturn null;\n\n\t\t\tuint num;\n\t\t\tTypeSig nextType, result = null;\n\t\t\tswitch ((ElementType)reader.ReadByte()) {\n\t\t\tcase ElementType.Void:\t\tresult = corLibTypes.Void; break;\n\t\t\tcase ElementType.Boolean:\tresult = corLibTypes.Boolean; break;\n\t\t\tcase ElementType.Char:\t\tresult = corLibTypes.Char; break;\n\t\t\tcase ElementType.I1:\t\tresult = corLibTypes.SByte; break;\n\t\t\tcase ElementType.U1:\t\tresult = corLibTypes.Byte; break;\n\t\t\tcase ElementType.I2:\t\tresult = corLibTypes.Int16; break;\n\t\t\tcase ElementType.U2:\t\tresult = corLibTypes.UInt16; break;\n\t\t\tcase ElementType.I4:\t\tresult = corLibTypes.Int32; break;\n\t\t\tcase ElementType.U4:\t\tresult = corLibTypes.UInt32; break;\n\t\t\tcase ElementType.I8:\t\tresult = corLibTypes.Int64; break;\n\t\t\tcase ElementType.U8:\t\tresult = corLibTypes.UInt64; break;\n\t\t\tcase ElementType.R4:\t\tresult = corLibTypes.Single; break;\n\t\t\tcase ElementType.R8:\t\tresult = corLibTypes.Double; break;\n\t\t\tcase ElementType.String:\tresult = corLibTypes.String; break;\n\t\t\tcase ElementType.TypedByRef:result = corLibTypes.TypedReference; break;\n\t\t\tcase ElementType.I:\t\t\tresult = corLibTypes.IntPtr; break;\n\t\t\tcase ElementType.U:\t\t\tresult = corLibTypes.UIntPtr; break;\n\t\t\tcase ElementType.Object:\tresult = corLibTypes.Object; break;\n\n\t\t\tcase ElementType.Ptr:\t\tresult = new PtrSig(Read\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Reads the next type\n\t\t/// </summary>\n\t\t/// <returns>A new <see cref=\"TypeSig\"/> instance or <c>null</c> if invalid element type</returns>\n\t\tTypeSig ReadType() {\n\t\t\tif (!recursionCounter.Increment())\n\t\t\t\treturn null;\n\n\t\t\tuint num;\n\t\t\tTypeSig nextType, result = null;\n\t\t\tswitch ((ElementType)reader.ReadByte()) {\n\t\t\tcase ElementType.Void:\t\tresult = corLibTypes.Void; break;\n\t\t\tcase ElementType.Boolean:\tresult = corLibTypes.Boolean; break;\n\t\t\tcase ElementType.Char:\t\tresult = corLibTypes.Char; break;\n\t\t\tcase ElementType.I1:\t\tresult = corLibTypes.SByte; break;\n\t\t\tcase ElementType.U1:\t\tresult = corLibTypes.Byte; break;\n\t\t\tcase ElementType.I2:\t\tresult = corLibTypes.Int16; break;\n\t\t\tcase ElementType.U2:\t\tresult = corLibTypes.UInt16; break;\n\t\t\tcase ElementType.I4:\t\tresult = corLibTypes.Int32; break;\n\t\t\tcase ElementType.U4:\t\tresult = corLibTypes.UInt32; break;\n\t\t\tcase ElementType.I8:\t\tresult = corLibTypes.Int64; break;\n\t\t\tcase ElementType.U8:\t\tresult = corLibTypes.UInt64; break;\n\t\t\tcase ElementType.R4:\t\tresult = corLibTypes.Single; break;\n\t\t\tcase ElementType.R8:\t\tresult = corLibTypes.Double; break;\n\t\t\tcase ElementType.String:\tresult = corLibTypes.String; break;\n\t\t\tcase ElementType.TypedByRef:result = corLibTypes.TypedReference; break;\n\t\t\tcase ElementType.I:\t\t\tresult = corLibTypes.IntPtr; break;\n\t\t\tcase ElementType.U:\t\t\tresult = corLibTypes.UIntPtr; break;\n\t\t\tcase ElementType.Object:\tresult = corLibTypes.Object; break;\n\n\t\t\tcase ElementType.Ptr:\t\tresult = new PtrSig(Read\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Adds the control.\n        /// </summary>\n        /// <param name=\"controls\">The controls.</param>\n        /// <param name=\"value\">The value.</param>\n        /// <param name=\"validationGroup\">The validation group.</param>\n        /// <param name=\"setValue\">if set to <c>true</c> [set value].</param>\n        /// <param name=\"setId\">if set to <c>true</c> [set id].</param>\n        /// <param name=\"required\">The required.</param>\n        /// <param name=\"labelText\">The label text.</param>\n        /// <param name=\"helpText\">The help text.</param>\n        /// <param name=\"warningText\">The warning text.</param>\n        /// <returns></returns>\n        public Control AddControl( ControlCollection controls, string value, string validationGroup, bool setValue, bool setId, bool? required = null, string labelText = null, string helpText = null, string warningText = null )\n        {\n            return AddControl( controls, value, validationGroup, setValue, setId, required, labelText, helpText, warningText, null );\n        }/// <summary>\n        /// Adds the control.\n        /// </summary>\n        /// <param name=\"controls\">The controls.</param>\n        /// <param name=\"value\">The value.</param>\n        /// <param name=\"validationGroup\">The validation group.</param>\n        /// <param name=\"setValue\">if set to <c>true</c> [set value].</param>\n        /// <param name=\"setId\">if set to <c>true</c> [set identifier].</param>\n        /// <param name=\"required\">The require\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Adds the control.\n        /// </summary>\n        /// <param name=\"controls\">The controls.</param>\n        /// <param name=\"value\">The value.</param>\n        /// <param name=\"validationGroup\">The validation group.</param>\n        /// <param name=\"setValue\">if set to <c>true</c> [set value].</param>\n        /// <param name=\"setId\">if set to <c>true</c> [set id].</param>\n        /// <param name=\"required\">The required.</param>\n        /// <param name=\"labelText\">The label text.</param>\n        /// <param name=\"helpText\">The help text.</param>\n        /// <param name=\"warningText\">The warning text.</param>\n        /// <returns></returns>\n        public Control AddControl( ControlCollection controls, string value, string validationGroup, bool setValue, bool setId, bool? required = null, string labelText = null, string helpText = null, string warningText = null )\n        {\n            return AddControl( controls, value, validationGroup, setValue, setId, required, labelText, helpText, warningText, null );\n        }/// <summary>\n        /// Adds the control.\n        /// </summary>\n        /// <param name=\"controls\">The controls.</param>\n        /// <param name=\"value\">The value.</param>\n        /// <param name=\"validationGroup\">The validation group.</param>\n        /// <param name=\"setValue\">if set to <c>true</c> [set value].</param>\n        /// <param name=\"setId\">if set to <c>true</c> [set identifier].</param>\n        /// <param name=\"required\">The require\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void BeginPickTarget(Mobile from, OrderType order)\n\t\t{\n\t\t\tif (m_Mobile.Deleted || !m_Mobile.Controlled || !from.InRange(m_Mobile, 14) || from.Map != m_Mobile.Map)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbool isOwner = (from == m_Mobile.ControlMaster);\n\t\t\tbool isFriend = (!isOwner && m_Mobile.IsPetFriend(from));\n\n\t\t\tif (!isOwner && !isFriend)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (isFriend && order != OrderType.Follow && order != OrderType.Stay && order != OrderType.Stop)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (from.Target == null)\n\t\t\t{\n\t\t\t\tif (order == OrderType.Transfer)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(502038); // Click on the person to transfer ownership to.\n\t\t\t\t}\n\t\t\t\telse if (order == OrderType.Friend)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(502020); // Click on the player whom you wish to make a co-owner.\n\t\t\t\t}\n\t\t\t\telse if (order == OrderType.Unfriend)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(1070948); // Click on the player whom you wish to remove as a co-owner.\n\t\t\t\t}\n\n\t\t\t\tfrom.Target = new AIControlMobileTarget(this, order);\n\t\t\t}\n\t\t\telse if (from.Target is AIControlMobileTarget)\n\t\t\t{\n\t\t\t\tAIControlMobileTarget t = (AIControlMobileTarget)from.Target;\n\n\t\t\t\tif (t.Order == order)\n\t\t\t\t{\n\t\t\t\t\tt.AddAI(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void BeginPickTarget(Mobile from, OrderType order)\n\t\t{\n\t\t\tif (m_Mobile.Deleted || !m_Mobile.Controlled || !from.InRange(m_Mobile, 14) || from.Map != m_Mobile.Map)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbool isOwner = (from == m_Mobile.ControlMaster);\n\t\t\tbool isFriend = (!isOwner && m_Mobile.IsPetFriend(from));\n\n\t\t\tif (!isOwner && !isFriend)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (isFriend && order != OrderType.Follow && order != OrderType.Stay && order != OrderType.Stop)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (from.Target == null)\n\t\t\t{\n\t\t\t\tif (order == OrderType.Transfer)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(502038); // Click on the person to transfer ownership to.\n\t\t\t\t}\n\t\t\t\telse if (order == OrderType.Friend)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(502020); // Click on the player whom you wish to make a co-owner.\n\t\t\t\t}\n\t\t\t\telse if (order == OrderType.Unfriend)\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(1070948); // Click on the player whom you wish to remove as a co-owner.\n\t\t\t\t}\n\n\t\t\t\tfrom.Target = new AIControlMobileTarget(this, order);\n\t\t\t}\n\t\t\telse if (from.Target is AIControlMobileTarget)\n\t\t\t{\n\t\t\t\tAIControlMobileTarget t = (AIControlMobileTarget)from.Target;\n\n\t\t\t\tif (t.Order == order)\n\t\t\t\t{\n\t\t\t\t\tt.AddAI(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void AppendTextFromTextNode(FormatterState state, XText element)\n        {\n            var rawText = element.Value;\n            var builder = new StringBuilder(rawText.Length);\n\n            // Normalize the whitespace.\n            var pendingWhitespace = false;\n            var hadAnyNonWhitespace = false;\n            for (int i = 0; i < rawText.Length; i++)\n            {\n                if (char.IsWhiteSpace(rawText[i]))\n                {\n                    // Whitespace. If it occurs at the beginning of the text we don't append it\n                    // at all; otherwise, we reduce it to a single space.\n                    if (!state.AtBeginning || hadAnyNonWhitespace)\n                    {\n                        pendingWhitespace = true;\n                    }\n                }\n                else\n                {\n                    // Some other character...\n                    if (pendingWhitespace)\n                    {\n                        if (builder.Length == 0)\n                        {\n                            state.AppendSingleSpace();\n                        }\n                        else\n                        {\n                            builder.Append(' ');\n                        }\n\n                        pendingWhitespace = false;\n                    }\n\n                    builder.Append(rawText[i]);\n                    hadAnyNonWhitespace = true;\n                }\n            }\n\n            if (builder.Length > 0)\n            {\n  \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void AppendTextFromTextNode(FormatterState state, XText element)\n        {\n            var rawText = element.Value;\n            var builder = new StringBuilder(rawText.Length);\n\n            // Normalize the whitespace.\n            var pendingWhitespace = false;\n            var hadAnyNonWhitespace = false;\n            for (int i = 0; i < rawText.Length; i++)\n            {\n                if (char.IsWhiteSpace(rawText[i]))\n                {\n                    // Whitespace. If it occurs at the beginning of the text we don't append it\n                    // at all; otherwise, we reduce it to a single space.\n                    if (!state.AtBeginning || hadAnyNonWhitespace)\n                    {\n                        pendingWhitespace = true;\n                    }\n                }\n                else\n                {\n                    // Some other character...\n                    if (pendingWhitespace)\n                    {\n                        if (builder.Length == 0)\n                        {\n                            state.AppendSingleSpace();\n                        }\n                        else\n                        {\n                            builder.Append(' ');\n                        }\n\n                        pendingWhitespace = false;\n                    }\n\n                    builder.Append(rawText[i]);\n                    hadAnyNonWhitespace = true;\n                }\n            }\n\n            if (builder.Length > 0)\n            {\n  \nAnswer: \n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string ToString(byte[] buffer, int offset, int count)\n        {\n            return UTF8Encoding.GetString(buffer, offset, count);\n        }public static string ToString(bool value)\n        {\n            return !value ? \"false\" : \"true\";\n        }public static string ToString(int value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(long value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(float value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(double value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(Decimal value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(TimeSpan value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(UniqueId value)\n        {\n            return value.ToString();\n        }public static string ToString(Guid value)\n        {\n            return value.ToString();\n        }public static string ToString(ulong value)\n        {\n            return value.ToString(NumberFormatInfo.InvariantInfo);\n        }public static string ToString(DateTime value)\n        {\n            var numArray = new byte[64];\n            int count = ToChars(value, numArray, 0);\n            return ToString(numArray, 0, count);\n        }private static string ToString(object value)\n \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string ToString(byte[] buffer, int offset, int count)\n        {\n            return UTF8Encoding.GetString(buffer, offset, count);\n        }public static string ToString(bool value)\n        {\n            return !value ? \"false\" : \"true\";\n        }public static string ToString(int value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(long value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(float value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(double value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(Decimal value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(TimeSpan value)\n        {\n            return XmlConvert.ToString(value);\n        }public static string ToString(UniqueId value)\n        {\n            return value.ToString();\n        }public static string ToString(Guid value)\n        {\n            return value.ToString();\n        }public static string ToString(ulong value)\n        {\n            return value.ToString(NumberFormatInfo.InvariantInfo);\n        }public static string ToString(DateTime value)\n        {\n            var numArray = new byte[64];\n            int count = ToChars(value, numArray, 0);\n            return ToString(numArray, 0, count);\n        }private static string ToString(object value)\n \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Equals(object obj)\n\t\t{\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\n\t\t\tFuncNode funcNode;\n\n\t\t\tif (obj is MathFunc)\n\t\t\t\tfuncNode = (obj as MathFunc).Root as FuncNode;\n\t\t\telse\n\t\t\t\tfuncNode = obj as FuncNode;\n\n\t\t\tif (funcNode != null)\n\t\t\t{\n\t\t\t\tif (Name != funcNode.Name || Children.Count != funcNode.Children.Count)\n\t\t\t\t\treturn false;\n\n\t\t\t\tbool allChildrenAreEqual = true;\n\t\t\t\tfor (int i = 0; i < funcNode.Children.Count; i++)\n\t\t\t\t\tif (!Children[i].Equals(funcNode.Children[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tallChildrenAreEqual = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif (!allChildrenAreEqual)\n\t\t\t\t\treturn false;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}public override bool Equals(string s)\n\t\t{\n\t\t\tif (s != null)\n\t\t\t\treturn Equals(new MathFunc(s));\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Equals(object obj)\n\t\t{\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\n\t\t\tFuncNode funcNode;\n\n\t\t\tif (obj is MathFunc)\n\t\t\t\tfuncNode = (obj as MathFunc).Root as FuncNode;\n\t\t\telse\n\t\t\t\tfuncNode = obj as FuncNode;\n\n\t\t\tif (funcNode != null)\n\t\t\t{\n\t\t\t\tif (Name != funcNode.Name || Children.Count != funcNode.Children.Count)\n\t\t\t\t\treturn false;\n\n\t\t\t\tbool allChildrenAreEqual = true;\n\t\t\t\tfor (int i = 0; i < funcNode.Children.Count; i++)\n\t\t\t\t\tif (!Children[i].Equals(funcNode.Children[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tallChildrenAreEqual = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif (!allChildrenAreEqual)\n\t\t\t\t\treturn false;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}public override bool Equals(string s)\n\t\t{\n\t\t\tif (s != null)\n\t\t\t\treturn Equals(new MathFunc(s));\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public int CalculateSize() {\n      int size = 0;\n      if (payload_ != null) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);\n      }\n      if (SequenceNr != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNr);\n      }\n      if (PersistenceId.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceId);\n      }\n      if (Deleted != false) {\n        size += 1 + 1;\n      }\n      if (Sender.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);\n      }\n      if (Manifest.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manifest);\n      }\n      if (WriterGuid.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterGuid);\n      }\n      return size;\n    }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public int CalculateSize() {\n      int size = 0;\n      if (payload_ != null) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);\n      }\n      if (SequenceNr != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNr);\n      }\n      if (PersistenceId.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceId);\n      }\n      if (Deleted != false) {\n        size += 1 + 1;\n      }\n      if (Sender.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);\n      }\n      if (Manifest.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manifest);\n      }\n      if (WriterGuid.Length != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterGuid);\n      }\n      return size;\n    }\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.I64) {\n                Start = iprot.ReadI64();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                Size = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 4:\n              if (field.Type == TType.String) {\n                Language = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 5:\n              if (field.Type == TType.String) {\n                Country = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            default: \n              TProtocolUtil.Skip(iprot, field.Type);\n              break;\n          }\n          iprot.ReadFieldEnd();\n        }\n        iprot.ReadStructEnd();\n      }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.I64) {\n                Start = iprot.ReadI64();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                Size = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 4:\n              if (field.Type == TType.String) {\n                Language = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 5:\n              if (field.Type == TType.String) {\n                Country = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            default: \n              TProtocolUtil.Skip(iprot, field.Type);\n              break;\n          }\n          iprot.ReadFieldEnd();\n        }\n        iprot.ReadStructEnd();\n      }\nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * Also taking into account the CSS properties of any parent tag in the given tag.\n         *\n         * @see com.itextpdf.tool.xml.pipeline.css.CSSResolver#resolveStyles(com.itextpdf.tool.xml.Tag)\n         */\n\n        virtual public void ResolveStyles(Tag t)\n        {\n            // get css for this tag from resolver\n            IDictionary<String, String> tagCss = new Dictionary<String, String>();\n            IDictionary<String, String> listCss = null;\n            if (null != cssFiles && cssFiles.HasFiles())\n            {\n                tagCss = cssFiles.GetCSS(t);\n                if (Util.EqualsIgnoreCase(t.Name, HTML.Tag.P) || Util.EqualsIgnoreCase(t.Name, HTML.Tag.TD))\n                {\n                    listCss = cssFiles.GetCSS(new Tag(HTML.Tag.UL));\n                }\n            }\n            // get css from style attr\n            if (null != t.Attributes && t.Attributes.Count != 0)\n            {\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLPADDING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLPADDING], \"cellpadding-\", \"\"));\n                }\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLSPACING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLSPACING], \"cellspacing-\", \"\"));\n                }\n     \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * Also taking into account the CSS properties of any parent tag in the given tag.\n         *\n         * @see com.itextpdf.tool.xml.pipeline.css.CSSResolver#resolveStyles(com.itextpdf.tool.xml.Tag)\n         */\n\n        virtual public void ResolveStyles(Tag t)\n        {\n            // get css for this tag from resolver\n            IDictionary<String, String> tagCss = new Dictionary<String, String>();\n            IDictionary<String, String> listCss = null;\n            if (null != cssFiles && cssFiles.HasFiles())\n            {\n                tagCss = cssFiles.GetCSS(t);\n                if (Util.EqualsIgnoreCase(t.Name, HTML.Tag.P) || Util.EqualsIgnoreCase(t.Name, HTML.Tag.TD))\n                {\n                    listCss = cssFiles.GetCSS(new Tag(HTML.Tag.UL));\n                }\n            }\n            // get css from style attr\n            if (null != t.Attributes && t.Attributes.Count != 0)\n            {\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLPADDING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLPADDING], \"cellpadding-\", \"\"));\n                }\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLSPACING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLSPACING], \"cellspacing-\", \"\"));\n                }\n     \nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override string ReadLine()\n\t\t{\n\t\t\tstring lineToSend = null;\n\t\t\t// lock queue\n\t\t\tlock (locker)\n\t\t\t{\n\t\t\t\tif (commandQueue.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tlineToSend = commandQueue[0];\n\t\t\t\t\tcommandQueue.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lineToSend == null)\n\t\t\t{\n\t\t\t\tif (!printer.Connection.Paused)\n\t\t\t\t{\n\t\t\t\t\tlineToSend = base.ReadLine();\n\t\t\t\t\tif (lineToSend == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lineToSend;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineToSend.EndsWith(\"; NO_PROCESSING\"))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lineToSend;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We got a line from the gcode we are sending check if we should queue a request for filament runout\n\t\t\t\t\tif (printer.Settings.GetValue<bool>(SettingsKey.filament_runout_sensor))\n\t\t\t\t\t{\n\t\t\t\t\t\t// request to read the endstop state\n\t\t\t\t\t\tif (!timeSinceLastEndstopRead.IsRunning || timeSinceLastEndstopRead.ElapsedMilliseconds > 5000)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprinter.Connection.QueueLine(\"M119\");\n\t\t\t\t\t\t\ttimeSinceLastEndstopRead.Restart();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlastSendTimeMs = UiThread.CurrentTimerMs;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlineToSend = \"\";\n\t\t\t\t\t// If more than 10 seconds have passed send a movement command so the motors will stay locked\n\t\t\t\t\tif (UiThread.CurrentTimerMs - lastSendTimeMs > 10000)\n\t\t\t\t\t{\n\t\t\t\t\t\tprinter.Connection.MoveRelative(PrinterAxis.X, .1, printer.Settings.Helpers.ManualMovementSpeeds().X);\n\t\t\t\t\t\tprinter.Connection.MoveRelative(PrinterAxis.X, -.1, printer.Settings.Helpers.ManualMovementSpeeds().X);\n\t\t\t\t\t\tlastSendTimeMs = UiThread.CurrentTimerMs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (GCodeFile.IsLa\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override string ReadLine()\n\t\t{\n\t\t\tstring lineToSend = null;\n\t\t\t// lock queue\n\t\t\tlock (locker)\n\t\t\t{\n\t\t\t\tif (commandQueue.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tlineToSend = commandQueue[0];\n\t\t\t\t\tcommandQueue.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lineToSend == null)\n\t\t\t{\n\t\t\t\tif (!printer.Connection.Paused)\n\t\t\t\t{\n\t\t\t\t\tlineToSend = base.ReadLine();\n\t\t\t\t\tif (lineToSend == null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lineToSend;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineToSend.EndsWith(\"; NO_PROCESSING\"))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lineToSend;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We got a line from the gcode we are sending check if we should queue a request for filament runout\n\t\t\t\t\tif (printer.Settings.GetValue<bool>(SettingsKey.filament_runout_sensor))\n\t\t\t\t\t{\n\t\t\t\t\t\t// request to read the endstop state\n\t\t\t\t\t\tif (!timeSinceLastEndstopRead.IsRunning || timeSinceLastEndstopRead.ElapsedMilliseconds > 5000)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprinter.Connection.QueueLine(\"M119\");\n\t\t\t\t\t\t\ttimeSinceLastEndstopRead.Restart();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlastSendTimeMs = UiThread.CurrentTimerMs;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlineToSend = \"\";\n\t\t\t\t\t// If more than 10 seconds have passed send a movement command so the motors will stay locked\n\t\t\t\t\tif (UiThread.CurrentTimerMs - lastSendTimeMs > 10000)\n\t\t\t\t\t{\n\t\t\t\t\t\tprinter.Connection.MoveRelative(PrinterAxis.X, .1, printer.Settings.Helpers.ManualMovementSpeeds().X);\n\t\t\t\t\t\tprinter.Connection.MoveRelative(PrinterAxis.X, -.1, printer.Settings.Helpers.ManualMovementSpeeds().X);\n\t\t\t\t\t\tlastSendTimeMs = UiThread.CurrentTimerMs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (GCodeFile.IsLa\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// <see cref=\"DynamicOctreeBase{T}.FindNearestPointBySphereExcludeChild(RenderContext, ref global::SharpDX.BoundingSphere, ref List{HitTestResult}, ref bool)\"/>\n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <param name=\"sphere\"></param>\n        /// <param name=\"result\"></param>\n        /// <param name=\"isIntersect\"></param>\n        /// <returns></returns>\n        public override bool FindNearestPointBySphereExcludeChild(RenderContext context, ref global::SharpDX.BoundingSphere sphere, ref List<HitTestResult> result, ref bool isIntersect)\n        {\n            bool isHit = false;\n            var containment = Bound.Contains(ref sphere);\n            if (containment == ContainmentType.Contains || containment == ContainmentType.Intersects)\n            {\n                isIntersect = true;\n                if (Objects.Count == 0)\n                {\n                    return false;\n                }\n                var tempResult = new HitTestResult();\n                tempResult.Distance = float.MaxValue;\n                for (int i = 0; i < Objects.Count; ++i)\n                {\n                    containment = Objects[i].Value.Contains(sphere);\n                    if (containment == ContainmentType.Contains || containment == ContainmentType.Intersects)\n                    {\n                        Vector3 cloestPoint;\n\n                        var idx = Objects[i].Key * 3;\n                        var t1 = Indices[idx];\n         \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// <see cref=\"DynamicOctreeBase{T}.FindNearestPointBySphereExcludeChild(RenderContext, ref global::SharpDX.BoundingSphere, ref List{HitTestResult}, ref bool)\"/>\n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <param name=\"sphere\"></param>\n        /// <param name=\"result\"></param>\n        /// <param name=\"isIntersect\"></param>\n        /// <returns></returns>\n        public override bool FindNearestPointBySphereExcludeChild(RenderContext context, ref global::SharpDX.BoundingSphere sphere, ref List<HitTestResult> result, ref bool isIntersect)\n        {\n            bool isHit = false;\n            var containment = Bound.Contains(ref sphere);\n            if (containment == ContainmentType.Contains || containment == ContainmentType.Intersects)\n            {\n                isIntersect = true;\n                if (Objects.Count == 0)\n                {\n                    return false;\n                }\n                var tempResult = new HitTestResult();\n                tempResult.Distance = float.MaxValue;\n                for (int i = 0; i < Objects.Count; ++i)\n                {\n                    containment = Objects[i].Value.Contains(sphere);\n                    if (containment == ContainmentType.Contains || containment == ContainmentType.Intersects)\n                    {\n                        Vector3 cloestPoint;\n\n                        var idx = Objects[i].Key * 3;\n                        var t1 = Indices[idx];\n         \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//------------------------------------------------------------------------------\n\n\t\tpublic TimeStampToken Generate(\n\t\t\tTimeStampRequest\trequest,\n\t\t\tBigInteger\t\t\tserialNumber,\n\t\t\tDateTime\t\t\tgenTime)\n\t\t{\n\t\t\tDerObjectIdentifier digestAlgOID = new DerObjectIdentifier(request.MessageImprintAlgOid);\n\n\t\t\tAlgorithmIdentifier algID = new AlgorithmIdentifier(digestAlgOID, DerNull.Instance);\n\t\t\tMessageImprint messageImprint = new MessageImprint(algID, request.GetMessageImprintDigest());\n\n\t\t\tAccuracy accuracy = null;\n\t\t\tif (accuracySeconds > 0 || accuracyMillis > 0 || accuracyMicros > 0)\n\t\t\t{\n\t\t\t\tDerInteger seconds = null;\n\t\t\t\tif (accuracySeconds > 0)\n\t\t\t\t{\n\t\t\t\t\tseconds = new DerInteger(accuracySeconds);\n\t\t\t\t}\n\n\t\t\t\tDerInteger millis = null;\n\t\t\t\tif (accuracyMillis > 0)\n\t\t\t\t{\n\t\t\t\t\tmillis = new DerInteger(accuracyMillis);\n\t\t\t\t}\n\n\t\t\t\tDerInteger micros = null;\n\t\t\t\tif (accuracyMicros > 0)\n\t\t\t\t{\n\t\t\t\t\tmicros = new DerInteger(accuracyMicros);\n\t\t\t\t}\n\n\t\t\t\taccuracy = new Accuracy(seconds, millis, micros);\n\t\t\t}\n\n\t\t\tDerBoolean derOrdering = null;\n\t\t\tif (ordering)\n\t\t\t{\n\t\t\t\tderOrdering = DerBoolean.GetInstance(ordering);\n\t\t\t}\n\n\t\t\tDerInteger nonce = null;\n\t\t\tif (request.Nonce != null)\n\t\t\t{\n\t\t\t\tnonce = new DerInteger(request.Nonce);\n\t\t\t}\n\n\t\t\tDerObjectIdentifier tsaPolicy = new DerObjectIdentifier(tsaPolicyOID);\n\t\t\tif (request.ReqPolicy != null)\n\t\t\t{\n\t\t\t\ttsaPolicy = new DerObjectIdentifier(request.ReqPolicy);\n\t\t\t}\n\n\t\t\tTstInfo tstInfo = new TstInfo(tsaPolicy, messageImprint,\n\t\t\t\tnew DerInteger(serialNumber)\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//------------------------------------------------------------------------------\n\n\t\tpublic TimeStampToken Generate(\n\t\t\tTimeStampRequest\trequest,\n\t\t\tBigInteger\t\t\tserialNumber,\n\t\t\tDateTime\t\t\tgenTime)\n\t\t{\n\t\t\tDerObjectIdentifier digestAlgOID = new DerObjectIdentifier(request.MessageImprintAlgOid);\n\n\t\t\tAlgorithmIdentifier algID = new AlgorithmIdentifier(digestAlgOID, DerNull.Instance);\n\t\t\tMessageImprint messageImprint = new MessageImprint(algID, request.GetMessageImprintDigest());\n\n\t\t\tAccuracy accuracy = null;\n\t\t\tif (accuracySeconds > 0 || accuracyMillis > 0 || accuracyMicros > 0)\n\t\t\t{\n\t\t\t\tDerInteger seconds = null;\n\t\t\t\tif (accuracySeconds > 0)\n\t\t\t\t{\n\t\t\t\t\tseconds = new DerInteger(accuracySeconds);\n\t\t\t\t}\n\n\t\t\t\tDerInteger millis = null;\n\t\t\t\tif (accuracyMillis > 0)\n\t\t\t\t{\n\t\t\t\t\tmillis = new DerInteger(accuracyMillis);\n\t\t\t\t}\n\n\t\t\t\tDerInteger micros = null;\n\t\t\t\tif (accuracyMicros > 0)\n\t\t\t\t{\n\t\t\t\t\tmicros = new DerInteger(accuracyMicros);\n\t\t\t\t}\n\n\t\t\t\taccuracy = new Accuracy(seconds, millis, micros);\n\t\t\t}\n\n\t\t\tDerBoolean derOrdering = null;\n\t\t\tif (ordering)\n\t\t\t{\n\t\t\t\tderOrdering = DerBoolean.GetInstance(ordering);\n\t\t\t}\n\n\t\t\tDerInteger nonce = null;\n\t\t\tif (request.Nonce != null)\n\t\t\t{\n\t\t\t\tnonce = new DerInteger(request.Nonce);\n\t\t\t}\n\n\t\t\tDerObjectIdentifier tsaPolicy = new DerObjectIdentifier(tsaPolicyOID);\n\t\t\tif (request.ReqPolicy != null)\n\t\t\t{\n\t\t\t\ttsaPolicy = new DerObjectIdentifier(request.ReqPolicy);\n\t\t\t}\n\n\t\t\tTstInfo tstInfo = new TstInfo(tsaPolicy, messageImprint,\n\t\t\t\tnew DerInteger(serialNumber)\nAnswer:?\n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Close()\n        {\n            lock (_InitializationLock)\n            {\n                try\n                {\n                    if (null != _Socket)\n                    {\n                        _Socket.Close();\n                        _Socket = null;\n                    }\n\n                    if (null != _IncomingStreamHandler)\n                    {\n                        _IncomingStreamHandler.Stop();\n                        _IncomingStreamHandler = null;\n                    }\n\n                    if (null != _OutgoingStreamHandler)\n                    {\n                        _OutgoingStreamHandler.Stop();\n                        _OutgoingStreamHandler = null;\n                    }\n\n                    //notify connection change\n                    if (null != _ConnectionListener)\n                        _ConnectionListener.OnGazeApiConnectionStateChanged(false);\n\n                    //We cancel queued requests\n                    if (null != _RequestQueue) \n                    {\n                        CancelAllRequests();\n                        _RequestQueue.Stop();\n                    }\n                    _RequestQueue = null;\n\n                    //We make sure we cancel currently ongoing requests\n                    if (null != _OngoingRequests)\n                    {\n                        IEnumerator<KeyValuePair<int, IRequest>> reqs = _OngoingRequests.GetEnumerator();\n\n                        while(reqs.MoveNext())\n                        {\n       \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Close()\n        {\n            lock (_InitializationLock)\n            {\n                try\n                {\n                    if (null != _Socket)\n                    {\n                        _Socket.Close();\n                        _Socket = null;\n                    }\n\n                    if (null != _IncomingStreamHandler)\n                    {\n                        _IncomingStreamHandler.Stop();\n                        _IncomingStreamHandler = null;\n                    }\n\n                    if (null != _OutgoingStreamHandler)\n                    {\n                        _OutgoingStreamHandler.Stop();\n                        _OutgoingStreamHandler = null;\n                    }\n\n                    //notify connection change\n                    if (null != _ConnectionListener)\n                        _ConnectionListener.OnGazeApiConnectionStateChanged(false);\n\n                    //We cancel queued requests\n                    if (null != _RequestQueue) \n                    {\n                        CancelAllRequests();\n                        _RequestQueue.Stop();\n                    }\n                    _RequestQueue = null;\n\n                    //We make sure we cancel currently ongoing requests\n                    if (null != _OngoingRequests)\n                    {\n                        IEnumerator<KeyValuePair<int, IRequest>> reqs = _OngoingRequests.GetEnumerator();\n\n                        while(reqs.MoveNext())\n                        {\n       \nAnswer:?\n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[MondFunction]\n        public MondValue Require(MondState state, string fileName)\n        {\n            if (_require.Loader == null)\n                throw new MondRuntimeException(\"require: module loader is not set\");\n\n            const string cacheObjectName = \"__modules\";\n\n            MondValue cacheObject;\n\n            // make sure we have somewhere to cache modules\n            if (state[cacheObjectName].Type != MondValueType.Object)\n            {\n                cacheObject = new MondValue(state);\n                cacheObject.Prototype = MondValue.Null;\n                state[cacheObjectName] = cacheObject;\n            }\n            else\n            {\n                cacheObject = state[cacheObjectName];\n            }\n\n            // return cached module if it exists\n            var cachedExports = cacheObject[fileName];\n            if (cachedExports.Type == MondValueType.Object)\n                return cachedExports;\n\n            // create a new object to store the exports\n            var exports = new MondValue(state);\n            exports.Prototype = MondValue.Null;\n\n            // instantly cache it so we can have circular dependencies\n            cacheObject[fileName] = exports;\n\n            try\n            {\n                IEnumerable<string> searchDirectories =\n                    _require.SearchDirectories ?? Array.Empty<string>();\n\n                if (_require.SearchBesideScript)\n                {\n                    var currentDir = Path.GetDirectoryName(state.Curr\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[MondFunction]\n        public MondValue Require(MondState state, string fileName)\n        {\n            if (_require.Loader == null)\n                throw new MondRuntimeException(\"require: module loader is not set\");\n\n            const string cacheObjectName = \"__modules\";\n\n            MondValue cacheObject;\n\n            // make sure we have somewhere to cache modules\n            if (state[cacheObjectName].Type != MondValueType.Object)\n            {\n                cacheObject = new MondValue(state);\n                cacheObject.Prototype = MondValue.Null;\n                state[cacheObjectName] = cacheObject;\n            }\n            else\n            {\n                cacheObject = state[cacheObjectName];\n            }\n\n            // return cached module if it exists\n            var cachedExports = cacheObject[fileName];\n            if (cachedExports.Type == MondValueType.Object)\n                return cachedExports;\n\n            // create a new object to store the exports\n            var exports = new MondValue(state);\n            exports.Prototype = MondValue.Null;\n\n            // instantly cache it so we can have circular dependencies\n            cacheObject[fileName] = exports;\n\n            try\n            {\n                IEnumerable<string> searchDirectories =\n                    _require.SearchDirectories ?? Array.Empty<string>();\n\n                if (_require.SearchBesideScript)\n                {\n                    var currentDir = Path.GetDirectoryName(state.Curr\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic List<IEntity> GetHouseEntities()\n        {\n            List<IEntity> list = new List<IEntity>();\n\n            if (this.MovingCrate != null)\n                this.MovingCrate.Hide();\n\n            if (this.m_Trash != null && this.m_Trash.Map != Map.Internal)\n                list.Add(this.m_Trash);\n\n            foreach (Item item in this.LockDowns)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (Item item in this.VendorRentalContracts)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (SecureInfo info in this.Secures)\n            {\n                Item item = info.Item;\n\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (Item item in this.Addons)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (PlayerVendor mobile in this.PlayerVendors)\n            {\n                mobile.Return();\n\n                if (mobile.Map != Map.Internal)\n                    list.Add(mobile);\n            }\n\n            foreach (Mobile mobile in this.PlayerBarkeepers)\n            {\n                if (mobile.Map != Map.Internal)\n                    list.Add(mobile);\n            }\n\n            return\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic List<IEntity> GetHouseEntities()\n        {\n            List<IEntity> list = new List<IEntity>();\n\n            if (this.MovingCrate != null)\n                this.MovingCrate.Hide();\n\n            if (this.m_Trash != null && this.m_Trash.Map != Map.Internal)\n                list.Add(this.m_Trash);\n\n            foreach (Item item in this.LockDowns)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (Item item in this.VendorRentalContracts)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (SecureInfo info in this.Secures)\n            {\n                Item item = info.Item;\n\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (Item item in this.Addons)\n            {\n                if (item.Parent == null && item.Map != Map.Internal)\n                    list.Add(item);\n            }\n\n            foreach (PlayerVendor mobile in this.PlayerVendors)\n            {\n                mobile.Return();\n\n                if (mobile.Map != Map.Internal)\n                    list.Add(mobile);\n            }\n\n            foreach (Mobile mobile in this.PlayerBarkeepers)\n            {\n                if (mobile.Map != Map.Internal)\n                    list.Add(mobile);\n            }\n\n            return\nAnswer: [Your Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void ConvertHouse_Callback(Mobile from, bool okay, object state)\n        {\n            BaseHouse house = (BaseHouse)state;\n\n            if (house.Deleted)\n                return;\n\n            if (okay && house.IsOwner(from) && !house.HasRentedVendors)\n            {\n                HousePlacementEntry e = house.ConvertEntry;\n\n                if (e != null)\n                {\n                    int cost = e.Cost - house.Price;\n\n                    if (cost > 0)\n                    {\n                        if (Banker.Withdraw(from, cost))\n                        {\n                            from.SendLocalizedMessage(1060398, cost.ToString()); // ~1_AMOUNT~ gold has been withdrawn from your bank box.\n                        }\n                        else\n                        {\n                            from.SendLocalizedMessage(1061624); // You do not have enough funds in your bank to cover the difference between your old house and your new one.\n                            return;\n                        }\n                    }\n                    else if (cost < 0)\n                    {\n                        if (Banker.Deposit(from, -cost))\n                            from.SendLocalizedMessage(1060397, (-cost).ToString()); // ~1_AMOUNT~ gold has been deposited into your bank box.\n                        else\n                            return;\n                    }\n\n                    BaseHouse newHouse = e.ConstructHouse(from);\n\n                    if (n\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void ConvertHouse_Callback(Mobile from, bool okay, object state)\n        {\n            BaseHouse house = (BaseHouse)state;\n\n            if (house.Deleted)\n                return;\n\n            if (okay && house.IsOwner(from) && !house.HasRentedVendors)\n            {\n                HousePlacementEntry e = house.ConvertEntry;\n\n                if (e != null)\n                {\n                    int cost = e.Cost - house.Price;\n\n                    if (cost > 0)\n                    {\n                        if (Banker.Withdraw(from, cost))\n                        {\n                            from.SendLocalizedMessage(1060398, cost.ToString()); // ~1_AMOUNT~ gold has been withdrawn from your bank box.\n                        }\n                        else\n                        {\n                            from.SendLocalizedMessage(1061624); // You do not have enough funds in your bank to cover the difference between your old house and your new one.\n                            return;\n                        }\n                    }\n                    else if (cost < 0)\n                    {\n                        if (Banker.Deposit(from, -cost))\n                            from.SendLocalizedMessage(1060397, (-cost).ToString()); // ~1_AMOUNT~ gold has been deposited into your bank box.\n                        else\n                            return;\n                    }\n\n                    BaseHouse newHouse = e.ConstructHouse(from);\n\n                    if (n\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static int TrrntZipStringCompare(string string1, string string2)\n        {\n            char[] bytes1 = string1.ToCharArray();\n            char[] bytes2 = string2.ToCharArray();\n\n            int pos1 = 0;\n            int pos2 = 0;\n\n            for (;;)\n            {\n                if (pos1 == bytes1.Length)\n                {\n                    return pos2 == bytes2.Length ? 0 : -1;\n                }\n                if (pos2 == bytes2.Length)\n                {\n                    return 1;\n                }\n\n                int byte1 = bytes1[pos1++];\n                int byte2 = bytes2[pos2++];\n\n                if ((byte1 >= 65) && (byte1 <= 90))\n                {\n                    byte1 += 0x20;\n                }\n                if ((byte2 >= 65) && (byte2 <= 90))\n                {\n                    byte2 += 0x20;\n                }\n\n                if (byte1 < byte2)\n                {\n                    return -1;\n                }\n                if (byte1 > byte2)\n                {\n                    return 1;\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static int TrrntZipStringCompare(string string1, string string2)\n        {\n            char[] bytes1 = string1.ToCharArray();\n            char[] bytes2 = string2.ToCharArray();\n\n            int pos1 = 0;\n            int pos2 = 0;\n\n            for (;;)\n            {\n                if (pos1 == bytes1.Length)\n                {\n                    return pos2 == bytes2.Length ? 0 : -1;\n                }\n                if (pos2 == bytes2.Length)\n                {\n                    return 1;\n                }\n\n                int byte1 = bytes1[pos1++];\n                int byte2 = bytes2[pos2++];\n\n                if ((byte1 >= 65) && (byte1 <= 90))\n                {\n                    byte1 += 0x20;\n                }\n                if ((byte2 >= 65) && (byte2 <= 90))\n                {\n                    byte2 += 0x20;\n                }\n\n                if (byte1 < byte2)\n                {\n                    return -1;\n                }\n                if (byte1 > byte2)\n                {\n                    return 1;\n                }\n            }\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Execute()\n        {\n            for (var j = 0; j < _activitySteps.Count; j++)\n            {\n                var step = _activitySteps[j];\n                for (var rc = 0; rc < step.RepeatCount; rc++)\n                {\n                    //\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0445 \u0442\u0438\u043f\u0430\u043c\n                    CheckActivityVariablesValues(step);\n                    //\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n                    var inputParameters = new object[step.InputParameters.Count];\n                    for (var i = 0; i < inputParameters.Length; i++)\n                    {\n                        object value = step.InputParameters[i].Value;\n                        var match = Regex.Match(value.ToString(), @\"\\[[\\w]*\\]\");\n                        while (match.Success)\n                        {\n                            var param = match.Value;\n                            param = param.Trim('[', ']');\n                            if (_globalParameters.ContainsKey(param))\n                                value = match.Value.Length != value.ToString().Length ? \n                                    value.ToString().Replace(match.Value, _globalParameters[param].ToString()) : \n                                    _globalParameters[param];\n                            match = match.NextMatch();\n                        }\n                        inputParameters[i] = value;\n                    }\n                    try\n                    {\n                        var m\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Execute()\n        {\n            for (var j = 0; j < _activitySteps.Count; j++)\n            {\n                var step = _activitySteps[j];\n                for (var rc = 0; rc < step.RepeatCount; rc++)\n                {\n                    //\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0445 \u0442\u0438\u043f\u0430\u043c\n                    CheckActivityVariablesValues(step);\n                    //\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n                    var inputParameters = new object[step.InputParameters.Count];\n                    for (var i = 0; i < inputParameters.Length; i++)\n                    {\n                        object value = step.InputParameters[i].Value;\n                        var match = Regex.Match(value.ToString(), @\"\\[[\\w]*\\]\");\n                        while (match.Success)\n                        {\n                            var param = match.Value;\n                            param = param.Trim('[', ']');\n                            if (_globalParameters.ContainsKey(param))\n                                value = match.Value.Length != value.ToString().Length ? \n                                    value.ToString().Replace(match.Value, _globalParameters[param].ToString()) : \n                                    _globalParameters[param];\n                            match = match.NextMatch();\n                        }\n                        inputParameters[i] = value;\n                    }\n                    try\n                    {\n                        var m\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitCreateTable(SqlCreateTableExpression expression)\n        {\n            SqlCreateTableExpression current;\n            if (!TryGetCurrent(expression, out current))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.IfNotExist == expression.IfNotExist))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.NodeType == expression.NodeType))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.Type == expression.Type))\n            {\n                return expression;\n            }\n\n            this.currentObject = current.Table;\n            this.VisitTable(expression.Table);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.OrganizationIndex;\n            this.VisitOrganizationIndex(expression.OrganizationIndex);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.TableOptions;\n            this.VisitObjectList(expression.TableOptions);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.TableConstraints;\n            this.VisitExpressionList(expression.TableConstraints);\n            if (!this.result)\n            {\n                return expression;\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitCreateTable(SqlCreateTableExpression expression)\n        {\n            SqlCreateTableExpression current;\n            if (!TryGetCurrent(expression, out current))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.IfNotExist == expression.IfNotExist))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.NodeType == expression.NodeType))\n            {\n                return expression;\n            }\n\n            if (!(this.result &= current.Type == expression.Type))\n            {\n                return expression;\n            }\n\n            this.currentObject = current.Table;\n            this.VisitTable(expression.Table);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.OrganizationIndex;\n            this.VisitOrganizationIndex(expression.OrganizationIndex);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.TableOptions;\n            this.VisitObjectList(expression.TableOptions);\n            if (!this.result)\n            {\n                return expression;\n            }\n\n            this.currentObject = current.TableConstraints;\n            this.VisitExpressionList(expression.TableConstraints);\n            if (!this.result)\n            {\n                return expression;\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override int Read(byte[] buffer, int offset, int count)\n        {\n            if (buffer == null)\n                throw new ArgumentNullException(nameof(buffer));\n\n            if (offset < 0 || offset > buffer.Length)\n                throw new ArgumentOutOfRangeException(nameof(offset));\n\n            if (count < 0 || count > buffer.Length - offset)\n                throw new ArgumentOutOfRangeException(nameof(count));\n\n            if (mReader == null)\n                throw new ObjectDisposedException(null);\n\n            var remaining = mLength - mOffset;\n            if (count > remaining)\n                count = (int)remaining;\n\n            if (count == 0)\n                return 0;\n\n            var result = mReader.Read(buffer, offset, count);\n            if (result <= 0 || result > count)\n                throw new InternalFailureException();\n\n            mOffset += result;\n            return result;\n        }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override int Read(byte[] buffer, int offset, int count)\n        {\n            if (buffer == null)\n                throw new ArgumentNullException(nameof(buffer));\n\n            if (offset < 0 || offset > buffer.Length)\n                throw new ArgumentOutOfRangeException(nameof(offset));\n\n            if (count < 0 || count > buffer.Length - offset)\n                throw new ArgumentOutOfRangeException(nameof(count));\n\n            if (mReader == null)\n                throw new ObjectDisposedException(null);\n\n            var remaining = mLength - mOffset;\n            if (count > remaining)\n                count = (int)remaining;\n\n            if (count == 0)\n                return 0;\n\n            var result = mReader.Read(buffer, offset, count);\n            if (result <= 0 || result > count)\n                throw new InternalFailureException();\n\n            mOffset += result;\n            return result;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string DetermineTypeOutput(CodeTypeReference type)\n        {\n            string typeOutput = null;\n            string baseType = type.BaseType;\n\n            if (type.Options == CodeTypeReferenceOptions.GlobalReference)\n            {\n                //typeOutput = GetSafeName(baseType);\n                typeOutput = baseType;\n                typeOutput = typeOutput.Replace('+', '.');\n                return typeOutput;\n            }\n\n            switch (baseType.ToLower(CultureInfo.InvariantCulture))\n            {\n                case \"system.int32\":\n                case \"int\":\n                    typeOutput = \"int\";\n                    break;\n                case \"system.int64\":\n                case \"long\":\n                    typeOutput = \"long\";\n                    break;\n                case \"system.int16\":\n                case \"short\":\n                    typeOutput = \"short\";\n                    break;\n                case \"system.boolean\":\n                case \"bool\":\n                case \"boolean\":\n                    typeOutput = \"boolean\";\n                    break;\n                case \"system.char\":\n                case \"char\":\n                    typeOutput = \"char\";\n                    break;\n                case \"system.string\":\n                case \"string\":\n                    typeOutput = \"system.String\";\n                    break;\n                case \"system.object\":\n                case \"object\":\n                    typeOutput = \"system.Object\";\n    \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string DetermineTypeOutput(CodeTypeReference type)\n        {\n            string typeOutput = null;\n            string baseType = type.BaseType;\n\n            if (type.Options == CodeTypeReferenceOptions.GlobalReference)\n            {\n                //typeOutput = GetSafeName(baseType);\n                typeOutput = baseType;\n                typeOutput = typeOutput.Replace('+', '.');\n                return typeOutput;\n            }\n\n            switch (baseType.ToLower(CultureInfo.InvariantCulture))\n            {\n                case \"system.int32\":\n                case \"int\":\n                    typeOutput = \"int\";\n                    break;\n                case \"system.int64\":\n                case \"long\":\n                    typeOutput = \"long\";\n                    break;\n                case \"system.int16\":\n                case \"short\":\n                    typeOutput = \"short\";\n                    break;\n                case \"system.boolean\":\n                case \"bool\":\n                case \"boolean\":\n                    typeOutput = \"boolean\";\n                    break;\n                case \"system.char\":\n                case \"char\":\n                    typeOutput = \"char\";\n                    break;\n                case \"system.string\":\n                case \"string\":\n                    typeOutput = \"system.String\";\n                    break;\n                case \"system.object\":\n                case \"object\":\n                    typeOutput = \"system.Object\";\n    \nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override IEnumerable<MethodSymbol> GetMethodsToEmit()\n        {\n            ImmutableArray<Symbol> members = GetMembers();\n\n            // Get to methods.\n            int index = GetIndexOfFirstMember(members, SymbolKind.Method);\n\n            if (!this.IsInterfaceType())\n            {\n                for (; index < members.Length; index++)\n                {\n                    if (members[index].Kind != SymbolKind.Method)\n                    {\n                        break;\n                    }\n\n                    var method = (MethodSymbol)members[index];\n\n                    // Don't emit the default value type constructor - the runtime handles that\n                    if (!method.IsDefaultValueTypeConstructor())\n                    {\n                        yield return method;\n                    }\n                }\n            }\n            else\n            {\n                // We do not create symbols for v-table gap methods, let's figure out where the gaps go.\n\n                if (index >= members.Length || members[index].Kind != SymbolKind.Method)\n                {\n                    // We didn't import any methods, it is Ok to return an empty set.\n                    yield break;\n                }\n\n                var method = (PEMethodSymbol)members[index];\n                var module = this.ContainingPEModule.Module;\n\n                var methodDefs = ArrayBuilder<MethodDefinitionHandle>.GetInstance();\n\n                try\n                {\n              \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override IEnumerable<MethodSymbol> GetMethodsToEmit()\n        {\n            ImmutableArray<Symbol> members = GetMembers();\n\n            // Get to methods.\n            int index = GetIndexOfFirstMember(members, SymbolKind.Method);\n\n            if (!this.IsInterfaceType())\n            {\n                for (; index < members.Length; index++)\n                {\n                    if (members[index].Kind != SymbolKind.Method)\n                    {\n                        break;\n                    }\n\n                    var method = (MethodSymbol)members[index];\n\n                    // Don't emit the default value type constructor - the runtime handles that\n                    if (!method.IsDefaultValueTypeConstructor())\n                    {\n                        yield return method;\n                    }\n                }\n            }\n            else\n            {\n                // We do not create symbols for v-table gap methods, let's figure out where the gaps go.\n\n                if (index >= members.Length || members[index].Kind != SymbolKind.Method)\n                {\n                    // We didn't import any methods, it is Ok to return an empty set.\n                    yield break;\n                }\n\n                var method = (PEMethodSymbol)members[index];\n                var module = this.ContainingPEModule.Module;\n\n                var methodDefs = ArrayBuilder<MethodDefinitionHandle>.GetInstance();\n\n                try\n                {\n              \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// MouseUp event handler of the Map control. Occurs when a mouse button have been released.\n        /// </summary>\n        /// <param name=\"sender\">The source object of this event.</param>\n        /// <param name=\"e\">The event parameters.</param>\n        private void MapControl_MouseUp(object sender, MouseEventArgs e)\n        {\n            forcePan = false;\n\n            if (inputMode == InputModes.Select)\n            {\n                //pointObj pt = new pointObj(Pixel2MapX(e.X), Pixel2MapY(e.Y), 0, 0);\n                //TestResult(pt);\n                //return;\n                \n                \n                using (pointObj imgpoint = new pointObj(Pixel2MapX(e.X), Pixel2MapY(e.Y), 0, 0))\n                {\n                    ClearResults(); // clear the previous results\n                    map.queryByPoint(imgpoint, mapscript.MS_MULTIPLE, 4);\n                    SetSelectionMode(true);\n                    this.target.RaiseSelectionChanged(this);\n                    this.RefreshView();\n                }\n                return;\n            }\n\n            if (magnify != 1)\n            {\n                double offsetX = ((double)1 - (double)1 / magnify) * mouseX;\n                double offsetY = ((double)1 - (double)1 / magnify) * mouseY;\n\n                if (dragging)\n                {\n                    dragging = false;\n                    dragRect.Width = e.X - dragRect.X;\n                    dragRect.Height = e.Y - dragRect.Y;\n                    o\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// MouseUp event handler of the Map control. Occurs when a mouse button have been released.\n        /// </summary>\n        /// <param name=\"sender\">The source object of this event.</param>\n        /// <param name=\"e\">The event parameters.</param>\n        private void MapControl_MouseUp(object sender, MouseEventArgs e)\n        {\n            forcePan = false;\n\n            if (inputMode == InputModes.Select)\n            {\n                //pointObj pt = new pointObj(Pixel2MapX(e.X), Pixel2MapY(e.Y), 0, 0);\n                //TestResult(pt);\n                //return;\n                \n                \n                using (pointObj imgpoint = new pointObj(Pixel2MapX(e.X), Pixel2MapY(e.Y), 0, 0))\n                {\n                    ClearResults(); // clear the previous results\n                    map.queryByPoint(imgpoint, mapscript.MS_MULTIPLE, 4);\n                    SetSelectionMode(true);\n                    this.target.RaiseSelectionChanged(this);\n                    this.RefreshView();\n                }\n                return;\n            }\n\n            if (magnify != 1)\n            {\n                double offsetX = ((double)1 - (double)1 / magnify) * mouseX;\n                double offsetY = ((double)1 - (double)1 / magnify) * mouseY;\n\n                if (dragging)\n                {\n                    dragging = false;\n                    dragRect.Width = e.X - dragRect.X;\n                    dragRect.Height = e.Y - dragRect.Y;\n                    o\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool Execute(EncapsulateFieldCommandArgs args, IWaitContext waitContext)\n        {\n            var text = args.TextView.TextBuffer.CurrentSnapshot.AsText();\n            var cancellationToken = waitContext.CancellationToken;\n\n            Workspace workspace;\n            if (!Workspace.TryGetWorkspace(text.Container, out workspace))\n            {\n                return false;\n            }\n\n            var documentId = workspace.GetDocumentIdInCurrentContext(text.Container);\n            if (documentId == null)\n            {\n                return false;\n            }\n\n            var document = workspace.CurrentSolution.GetDocument(documentId);\n            if (document == null)\n            {\n                return false;\n            }\n\n            var spans = args.TextView.Selection.GetSnapshotSpansOnBuffer(args.SubjectBuffer);\n\n            var service = document.GetLanguageService<AbstractEncapsulateFieldService>();\n\n            var result = service.EncapsulateFieldAsync(document, spans.First().Span.ToTextSpan(), true, cancellationToken).WaitAndGetResult(cancellationToken);\n\n            if (result == null)\n            {\n                var notificationService = workspace.Services.GetService<INotificationService>();\n                notificationService.SendNotification(EditorFeaturesResources.PleaseSelectTheDefinitionOf, severity: NotificationSeverity.Error);\n                return false;\n            }\n\n            waitContext.AllowCancel = false;\n\n            var finalS\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool Execute(EncapsulateFieldCommandArgs args, IWaitContext waitContext)\n        {\n            var text = args.TextView.TextBuffer.CurrentSnapshot.AsText();\n            var cancellationToken = waitContext.CancellationToken;\n\n            Workspace workspace;\n            if (!Workspace.TryGetWorkspace(text.Container, out workspace))\n            {\n                return false;\n            }\n\n            var documentId = workspace.GetDocumentIdInCurrentContext(text.Container);\n            if (documentId == null)\n            {\n                return false;\n            }\n\n            var document = workspace.CurrentSolution.GetDocument(documentId);\n            if (document == null)\n            {\n                return false;\n            }\n\n            var spans = args.TextView.Selection.GetSnapshotSpansOnBuffer(args.SubjectBuffer);\n\n            var service = document.GetLanguageService<AbstractEncapsulateFieldService>();\n\n            var result = service.EncapsulateFieldAsync(document, spans.First().Span.ToTextSpan(), true, cancellationToken).WaitAndGetResult(cancellationToken);\n\n            if (result == null)\n            {\n                var notificationService = workspace.Services.GetService<INotificationService>();\n                notificationService.SendNotification(EditorFeaturesResources.PleaseSelectTheDefinitionOf, severity: NotificationSeverity.Error);\n                return false;\n            }\n\n            waitContext.AllowCancel = false;\n\n            var finalS\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Authorize]\n        public async Task<CommandResponse<Models.Submission>> EditSubmission(int submissionID, UserSubmissionContent userSubmissionContent)\n        {\n            DemandAuthentication();\n\n            if (userSubmissionContent == null || (!userSubmissionContent.HasState && String.IsNullOrEmpty(userSubmissionContent.Content)))\n            {\n                throw new VoatValidationException(\"The submission must not be null or have invalid state\");\n            }\n\n            //if (String.IsNullOrEmpty(submission.Url) && String.IsNullOrEmpty(submission.Content)) {\n            //    throw new VoatValidationException(\"Either a Url or Content must be provided.\");\n            //}\n\n            var submission = _db.Submission.Where(x => x.ID == submissionID).FirstOrDefault();\n\n            if (submission == null)\n            {\n                throw new VoatNotFoundException(String.Format(\"Can't find submission with ID {0}\", submissionID));\n            }\n\n            if (submission.IsDeleted)\n            {\n                throw new VoatValidationException(\"Deleted submissions cannot be edited\");\n            }\n\n            if (submission.UserName != User.Identity.Name)\n            {\n                return CommandResponse.FromStatus((Models.Submission)null, Status.Denied, \"User does not have permissions to perform requested action\");\n            }\n\n            //Evaluate Rules\n            var context = new VoatRuleContext(User);\n            context.Subverse = DataCache.Subverse.R\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Authorize]\n        public async Task<CommandResponse<Models.Submission>> EditSubmission(int submissionID, UserSubmissionContent userSubmissionContent)\n        {\n            DemandAuthentication();\n\n            if (userSubmissionContent == null || (!userSubmissionContent.HasState && String.IsNullOrEmpty(userSubmissionContent.Content)))\n            {\n                throw new VoatValidationException(\"The submission must not be null or have invalid state\");\n            }\n\n            //if (String.IsNullOrEmpty(submission.Url) && String.IsNullOrEmpty(submission.Content)) {\n            //    throw new VoatValidationException(\"Either a Url or Content must be provided.\");\n            //}\n\n            var submission = _db.Submission.Where(x => x.ID == submissionID).FirstOrDefault();\n\n            if (submission == null)\n            {\n                throw new VoatNotFoundException(String.Format(\"Can't find submission with ID {0}\", submissionID));\n            }\n\n            if (submission.IsDeleted)\n            {\n                throw new VoatValidationException(\"Deleted submissions cannot be edited\");\n            }\n\n            if (submission.UserName != User.Identity.Name)\n            {\n                return CommandResponse.FromStatus((Models.Submission)null, Status.Denied, \"User does not have permissions to perform requested action\");\n            }\n\n            //Evaluate Rules\n            var context = new VoatRuleContext(User);\n            context.Subverse = DataCache.Subverse.R\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Having found the best member to override, we want to find members with the same signature on the\n        /// best member's containing type.\n        /// </summary>\n        /// <param name=\"representativeMember\">\n        /// The member that we consider to be overridden (may have different custom modifiers from the overriding member).\n        /// Assumed to already be in the overridden and runtime overridden lists.\n        /// </param>\n        /// <param name=\"overridingMemberIsFromSomeCompilation\">\n        /// If the best match was based on the custom modifier count, rather than the custom modifiers themselves \n        /// (because the overriding member is in the current compilation), then we should use the count when determining\n        /// whether the override is ambiguous.\n        /// </param>\n        /// <param name=\"overriddenBuilder\">\n        /// If the declaring type is constructed, it's possible that two (or more) members have the same signature\n        /// (including custom modifiers).  Return a list of such members so that we can report the ambiguity.\n        /// </param>\n        /// <param name=\"runtimeOverriddenBuilder\">\n        /// If the declaring type is constructed, it's possible that two (or more) members have the same signature\n        /// (including custom modifiers) in metadata (no ref/out distinction).  Return a list of such members so\n        /// that we can report the ambiguity.\n        /// \n        /// Even in a non-generic type\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Having found the best member to override, we want to find members with the same signature on the\n        /// best member's containing type.\n        /// </summary>\n        /// <param name=\"representativeMember\">\n        /// The member that we consider to be overridden (may have different custom modifiers from the overriding member).\n        /// Assumed to already be in the overridden and runtime overridden lists.\n        /// </param>\n        /// <param name=\"overridingMemberIsFromSomeCompilation\">\n        /// If the best match was based on the custom modifier count, rather than the custom modifiers themselves \n        /// (because the overriding member is in the current compilation), then we should use the count when determining\n        /// whether the override is ambiguous.\n        /// </param>\n        /// <param name=\"overriddenBuilder\">\n        /// If the declaring type is constructed, it's possible that two (or more) members have the same signature\n        /// (including custom modifiers).  Return a list of such members so that we can report the ambiguity.\n        /// </param>\n        /// <param name=\"runtimeOverriddenBuilder\">\n        /// If the declaring type is constructed, it's possible that two (or more) members have the same signature\n        /// (including custom modifiers) in metadata (no ref/out distinction).  Return a list of such members so\n        /// that we can report the ambiguity.\n        /// \n        /// Even in a non-generic type\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Renders the entity fields controls.\n        /// </summary>\n        /// <param name=\"entityType\">Type of the entity.</param>\n        /// <param name=\"filterControl\">The filter control.</param>\n        /// <param name=\"writer\">The writer.</param>\n        /// <param name=\"entityFields\">The entity fields.</param>\n        /// <param name=\"ddlEntityField\">The DDL entity field.</param>\n        /// <param name=\"propertyControls\">The property controls.</param>\n        /// <param name=\"propertyControlsPrefix\">The property controls prefix.</param>\n        /// <param name=\"filterMode\">The filter mode.</param>\n        public void RenderEntityFieldsControls( Type entityType, FilterField filterControl, HtmlTextWriter writer, List<EntityField> entityFields,\n            DropDownList ddlEntityField, List<Control> propertyControls, string propertyControlsPrefix, FilterMode filterMode )\n        {\n            string selectedEntityField = ddlEntityField.SelectedValue;\n\n            writer.AddAttribute( \"class\", \"row\" );\n            writer.RenderBeginTag( HtmlTextWriterTag.Div );\n\n            bool entityFieldPickerIsHidden = filterMode == FilterMode.SimpleFilter;\n\n            if ( entityFieldPickerIsHidden )\n            {\n                ddlEntityField.Style[HtmlTextWriterStyle.Display] = \"none\";\n            }\n\n            if ( !entityFieldPickerIsHidden )\n            {\n                writer.AddAttribute( \"class\", \"col-md-3\" );\n                writer.RenderBeginTag( HtmlTe\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Renders the entity fields controls.\n        /// </summary>\n        /// <param name=\"entityType\">Type of the entity.</param>\n        /// <param name=\"filterControl\">The filter control.</param>\n        /// <param name=\"writer\">The writer.</param>\n        /// <param name=\"entityFields\">The entity fields.</param>\n        /// <param name=\"ddlEntityField\">The DDL entity field.</param>\n        /// <param name=\"propertyControls\">The property controls.</param>\n        /// <param name=\"propertyControlsPrefix\">The property controls prefix.</param>\n        /// <param name=\"filterMode\">The filter mode.</param>\n        public void RenderEntityFieldsControls( Type entityType, FilterField filterControl, HtmlTextWriter writer, List<EntityField> entityFields,\n            DropDownList ddlEntityField, List<Control> propertyControls, string propertyControlsPrefix, FilterMode filterMode )\n        {\n            string selectedEntityField = ddlEntityField.SelectedValue;\n\n            writer.AddAttribute( \"class\", \"row\" );\n            writer.RenderBeginTag( HtmlTextWriterTag.Div );\n\n            bool entityFieldPickerIsHidden = filterMode == FilterMode.SimpleFilter;\n\n            if ( entityFieldPickerIsHidden )\n            {\n                ddlEntityField.Style[HtmlTextWriterStyle.Display] = \"none\";\n            }\n\n            if ( !entityFieldPickerIsHidden )\n            {\n                writer.AddAttribute( \"class\", \"col-md-3\" );\n                writer.RenderBeginTag( HtmlTe\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void GetChildPrivateProperties(IList<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr)\n        {\n            // fix weirdness with private PropertyInfos only being returned for the current Type\n            // find base type properties and add them to result\n\n            // also find base properties that have been hidden by subtype properties with the same name\n\n            while ((targetType = targetType.BaseType()) != null)\n            {\n                foreach (PropertyInfo propertyInfo in targetType.GetProperties(bindingAttr))\n                {\n                    PropertyInfo subTypeProperty = propertyInfo;\n\n                    if (!subTypeProperty.IsVirtual())\n                    {\n                        if (!IsPublic(subTypeProperty))\n                        {\n                            // have to test on name rather than reference because instances are different\n                            // depending on the type that GetProperties was called on\n                            int index = initialProperties.IndexOf(p => p.Name == subTypeProperty.Name);\n                            if (index == -1)\n                            {\n                                initialProperties.Add(subTypeProperty);\n                            }\n                            else\n                            {\n                                PropertyInfo childProperty = initialProperties[index];\n                                // don't replace public ch\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void GetChildPrivateProperties(IList<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr)\n        {\n            // fix weirdness with private PropertyInfos only being returned for the current Type\n            // find base type properties and add them to result\n\n            // also find base properties that have been hidden by subtype properties with the same name\n\n            while ((targetType = targetType.BaseType()) != null)\n            {\n                foreach (PropertyInfo propertyInfo in targetType.GetProperties(bindingAttr))\n                {\n                    PropertyInfo subTypeProperty = propertyInfo;\n\n                    if (!subTypeProperty.IsVirtual())\n                    {\n                        if (!IsPublic(subTypeProperty))\n                        {\n                            // have to test on name rather than reference because instances are different\n                            // depending on the type that GetProperties was called on\n                            int index = initialProperties.IndexOf(p => p.Name == subTypeProperty.Name);\n                            if (index == -1)\n                            {\n                                initialProperties.Add(subTypeProperty);\n                            }\n                            else\n                            {\n                                PropertyInfo childProperty = initialProperties[index];\n                                // don't replace public ch\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void UpdateModel(CPpmd7 p)\n        {\n            CPpmd_Void_Ref successor, fSuccessor = SUCCESSOR(p.FoundState);\n            CPpmd7_Context* c;\n            uint s0, ns;\n\n            if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0)\n            {\n                c = SUFFIX(p, p.MinContext);\n\n                if (c->NumStats == 1)\n                {\n                    CPpmd_State* s = ONE_STATE(c);\n                    if (s->Freq < 32)\n                        s->Freq++;\n                }\n                else\n                {\n                    CPpmd_State* s = STATS(p, c);\n                    if (s->Symbol != p.FoundState->Symbol)\n                    {\n                        do { s++; } while (s->Symbol != p.FoundState->Symbol);\n                        if (s[0].Freq >= s[-1].Freq)\n                        {\n                            SwapStates(&s[0], &s[-1]);\n                            s--;\n                        }\n                    }\n                    if (s->Freq < MAX_FREQ - 9)\n                    {\n                        s->Freq += 2;\n                        c->SummFreq += 2;\n                    }\n                }\n            }\n\n            if (p.OrderFall == 0)\n            {\n                p.MinContext = p.MaxContext = CreateSuccessors(p, true);\n                if (p.MinContext == null)\n                {\n                    RestartModel(p);\n                    return;\n                }\n                SetSuccessor(p.FoundSt\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void UpdateModel(CPpmd7 p)\n        {\n            CPpmd_Void_Ref successor, fSuccessor = SUCCESSOR(p.FoundState);\n            CPpmd7_Context* c;\n            uint s0, ns;\n\n            if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0)\n            {\n                c = SUFFIX(p, p.MinContext);\n\n                if (c->NumStats == 1)\n                {\n                    CPpmd_State* s = ONE_STATE(c);\n                    if (s->Freq < 32)\n                        s->Freq++;\n                }\n                else\n                {\n                    CPpmd_State* s = STATS(p, c);\n                    if (s->Symbol != p.FoundState->Symbol)\n                    {\n                        do { s++; } while (s->Symbol != p.FoundState->Symbol);\n                        if (s[0].Freq >= s[-1].Freq)\n                        {\n                            SwapStates(&s[0], &s[-1]);\n                            s--;\n                        }\n                    }\n                    if (s->Freq < MAX_FREQ - 9)\n                    {\n                        s->Freq += 2;\n                        c->SummFreq += 2;\n                    }\n                }\n            }\n\n            if (p.OrderFall == 0)\n            {\n                p.MinContext = p.MaxContext = CreateSuccessors(p, true);\n                if (p.MinContext == null)\n                {\n                    RestartModel(p);\n                    return;\n                }\n                SetSuccessor(p.FoundSt\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate DapperQuery BaseDomainObjectSearch(DomainType domainType, SearchOptions options)\n        {\n            var q = new DapperQuery();\n            var hasPhrase = !String.IsNullOrEmpty(options.Phrase);\n\n            switch (domainType)\n            {\n                case DomainType.Subverse:\n                    q.SelectColumns = \"@DomainType as \\\"Type\\\", s.\\\"Name\\\", s.\\\"Title\\\", s.\\\"Description\\\", s.\\\"CreatedBy\\\" AS \\\"OwnerName\\\", s.\\\"SubscriberCount\\\", s.\\\"CreationDate\\\"\";\n                    q.Select = $\"DISTINCT {\"{0}\"} FROM {SqlFormatter.Table(\"Subverse\", \"s\", null, \"NOLOCK\")}\";\n                    if (hasPhrase)\n                    {\n                        q.Where = \"(s.\\\"Name\\\" LIKE CONCAT('%', @SearchPhrase, '%') OR s.\\\"Title\\\" LIKE CONCAT('%', @SearchPhrase, '%') OR s.\\\"Description\\\" LIKE CONCAT('%', @SearchPhrase, '%'))\";\n                    }\n                    q.Append(x => x.Where, $\"s.\\\"IsAdminDisabled\\\" = {SqlFormatter.BooleanLiteral(false)} AND s.\\\"IsPrivate\\\" = {SqlFormatter.BooleanLiteral(false)}\");\n                    break;\n                case DomainType.Set:\n                    q.SelectColumns = \"@DomainType as \\\"Type\\\", s.\\\"Name\\\", s.\\\"Title\\\", s.\\\"Description\\\", s.\\\"UserName\\\" AS \\\"OwnerName\\\", s.\\\"SubscriberCount\\\", s.\\\"CreationDate\\\"\";\n                    q.Select = $\"DISTINCT {\"{0}\"} FROM {SqlFormatter.Table(\"SubverseSet\", \"s\", null, \"NOLOCK\")}\";\n                    if (hasPhrase)\n                    {\n                        q.Where = \"(s.\\\"Name\\\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate DapperQuery BaseDomainObjectSearch(DomainType domainType, SearchOptions options)\n        {\n            var q = new DapperQuery();\n            var hasPhrase = !String.IsNullOrEmpty(options.Phrase);\n\n            switch (domainType)\n            {\n                case DomainType.Subverse:\n                    q.SelectColumns = \"@DomainType as \\\"Type\\\", s.\\\"Name\\\", s.\\\"Title\\\", s.\\\"Description\\\", s.\\\"CreatedBy\\\" AS \\\"OwnerName\\\", s.\\\"SubscriberCount\\\", s.\\\"CreationDate\\\"\";\n                    q.Select = $\"DISTINCT {\"{0}\"} FROM {SqlFormatter.Table(\"Subverse\", \"s\", null, \"NOLOCK\")}\";\n                    if (hasPhrase)\n                    {\n                        q.Where = \"(s.\\\"Name\\\" LIKE CONCAT('%', @SearchPhrase, '%') OR s.\\\"Title\\\" LIKE CONCAT('%', @SearchPhrase, '%') OR s.\\\"Description\\\" LIKE CONCAT('%', @SearchPhrase, '%'))\";\n                    }\n                    q.Append(x => x.Where, $\"s.\\\"IsAdminDisabled\\\" = {SqlFormatter.BooleanLiteral(false)} AND s.\\\"IsPrivate\\\" = {SqlFormatter.BooleanLiteral(false)}\");\n                    break;\n                case DomainType.Set:\n                    q.SelectColumns = \"@DomainType as \\\"Type\\\", s.\\\"Name\\\", s.\\\"Title\\\", s.\\\"Description\\\", s.\\\"UserName\\\" AS \\\"OwnerName\\\", s.\\\"SubscriberCount\\\", s.\\\"CreationDate\\\"\";\n                    q.Select = $\"DISTINCT {\"{0}\"} FROM {SqlFormatter.Table(\"SubverseSet\", \"s\", null, \"NOLOCK\")}\";\n                    if (hasPhrase)\n                    {\n                        q.Where = \"(s.\\\"Name\\\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal static void SetAccessControlExtracted(FileSystemSecurity security, string name)\n\t\t{\n\t\t\t//security.WriteLock();\n\t\t\tAccessControlSections includeSections = AccessControlSections.Owner | AccessControlSections.Group;\n\t\t\tif(security.GetAccessRules(true, false, typeof(SecurityIdentifier)).Count > 0)\n\t\t\t{\n\t\t\t\tincludeSections |= AccessControlSections.Access;\n\t\t\t}\n\t\t\tif (security.GetAuditRules(true, false, typeof(SecurityIdentifier)).Count > 0)\n\t\t\t{\n\t\t\t\tincludeSections |= AccessControlSections.Audit;\n\t\t\t}\n\t\t\t\n\t\t\tSecurityInfos securityInfo = (SecurityInfos)0;\n\t\t\tSecurityIdentifier owner = null;\n\t\t\tSecurityIdentifier group = null;\n\t\t\tSystemAcl sacl = null;\n\t\t\tDiscretionaryAcl dacl = null;\n\t\t\tif ((includeSections & AccessControlSections.Owner) != AccessControlSections.None)\n\t\t\t{\n\t\t\t\towner = (SecurityIdentifier)security.GetOwner(typeof(SecurityIdentifier));\n\t\t\t\tif (owner != null)\n\t\t\t\t{\n\t\t\t\t\tsecurityInfo = securityInfo | SecurityInfos.Owner;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((includeSections & AccessControlSections.Group) != AccessControlSections.None)\n\t\t\t{\n\t\t\t\t@group = (SecurityIdentifier)security.GetGroup(typeof(SecurityIdentifier));\n\t\t\t\tif (@group != null)\n\t\t\t\t{\n\t\t\t\t\tsecurityInfo = securityInfo | SecurityInfos.Group;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar securityDescriptorBinaryForm = security.GetSecurityDescriptorBinaryForm();\n\t\t\tRawSecurityDescriptor rawSecurityDescriptor = null;\n\t\t\tbool isDiscretionaryAclPresent = false;\n\t\t\tif (securityDescriptorBinaryForm != null)\n\t\t\t{\n\t\t\t\trawSecurityDescriptor = new RawSecu\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal static void SetAccessControlExtracted(FileSystemSecurity security, string name)\n\t\t{\n\t\t\t//security.WriteLock();\n\t\t\tAccessControlSections includeSections = AccessControlSections.Owner | AccessControlSections.Group;\n\t\t\tif(security.GetAccessRules(true, false, typeof(SecurityIdentifier)).Count > 0)\n\t\t\t{\n\t\t\t\tincludeSections |= AccessControlSections.Access;\n\t\t\t}\n\t\t\tif (security.GetAuditRules(true, false, typeof(SecurityIdentifier)).Count > 0)\n\t\t\t{\n\t\t\t\tincludeSections |= AccessControlSections.Audit;\n\t\t\t}\n\t\t\t\n\t\t\tSecurityInfos securityInfo = (SecurityInfos)0;\n\t\t\tSecurityIdentifier owner = null;\n\t\t\tSecurityIdentifier group = null;\n\t\t\tSystemAcl sacl = null;\n\t\t\tDiscretionaryAcl dacl = null;\n\t\t\tif ((includeSections & AccessControlSections.Owner) != AccessControlSections.None)\n\t\t\t{\n\t\t\t\towner = (SecurityIdentifier)security.GetOwner(typeof(SecurityIdentifier));\n\t\t\t\tif (owner != null)\n\t\t\t\t{\n\t\t\t\t\tsecurityInfo = securityInfo | SecurityInfos.Owner;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((includeSections & AccessControlSections.Group) != AccessControlSections.None)\n\t\t\t{\n\t\t\t\t@group = (SecurityIdentifier)security.GetGroup(typeof(SecurityIdentifier));\n\t\t\t\tif (@group != null)\n\t\t\t\t{\n\t\t\t\t\tsecurityInfo = securityInfo | SecurityInfos.Group;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar securityDescriptorBinaryForm = security.GetSecurityDescriptorBinaryForm();\n\t\t\tRawSecurityDescriptor rawSecurityDescriptor = null;\n\t\t\tbool isDiscretionaryAclPresent = false;\n\t\t\tif (securityDescriptorBinaryForm != null)\n\t\t\t{\n\t\t\t\trawSecurityDescriptor = new RawSecu\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region UInt32\n        unsafe static bool TryParseUInt32(char* text, int length, out uint value)\n        {\n            if (length < 1)\n            {\n                value = default;\n                return false;\n            }\n\n            // Parse the first digit separately. If invalid here, we need to return false.\n            uint firstDigit = text[0] - 48u; // '0'\n            if (firstDigit > 9)\n            {\n                value = default;\n                return false;\n            }\n            uint parsedValue = firstDigit;\n\n            if (length < Parsers.Int32OverflowLength)\n            {\n                // Length is less than Parsers.Int32OverflowLength; overflow is not possible\n                for (int index = 1; index < length; index++)\n                {\n                    uint nextDigit = text[index] - 48u; // '0'\n                    if (nextDigit > 9)\n                    {\n                        value = parsedValue;\n                        return true;\n                    }\n                    parsedValue = parsedValue * 10 + nextDigit;\n                }\n            }\n            else\n            {\n                // Length is greater than Parsers.Int32OverflowLength; overflow is only possible after Parsers.Int32OverflowLength\n                // digits. There may be no overflow after Parsers.Int32OverflowLength if there are leading zeroes.\n                for (int index = 1; index < Parsers.Int32OverflowLength - 1; index++)\n                \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region UInt32\n        unsafe static bool TryParseUInt32(char* text, int length, out uint value)\n        {\n            if (length < 1)\n            {\n                value = default;\n                return false;\n            }\n\n            // Parse the first digit separately. If invalid here, we need to return false.\n            uint firstDigit = text[0] - 48u; // '0'\n            if (firstDigit > 9)\n            {\n                value = default;\n                return false;\n            }\n            uint parsedValue = firstDigit;\n\n            if (length < Parsers.Int32OverflowLength)\n            {\n                // Length is less than Parsers.Int32OverflowLength; overflow is not possible\n                for (int index = 1; index < length; index++)\n                {\n                    uint nextDigit = text[index] - 48u; // '0'\n                    if (nextDigit > 9)\n                    {\n                        value = parsedValue;\n                        return true;\n                    }\n                    parsedValue = parsedValue * 10 + nextDigit;\n                }\n            }\n            else\n            {\n                // Length is greater than Parsers.Int32OverflowLength; overflow is only possible after Parsers.Int32OverflowLength\n                // digits. There may be no overflow after Parsers.Int32OverflowLength if there are leading zeroes.\n                for (int index = 1; index < Parsers.Int32OverflowLength - 1; index++)\n                \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitFunctionCall(SqlFunctionCallExpression functionCallExpression)\n\t\t{\n\t\t\tvar result = ResolveSqlFunction(functionCallExpression);\n\n\t\t\tif (result.treatAsOperator)\n\t\t\t{\n\t\t\t\tWrite(\"(\");\n\n\t\t\t\tif (result.functionPrefix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionPrefix);\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0, n = result.arguments.Count - 1; i <= n; i++)\n\t\t\t\t{\n\t\t\t\t\tVisit(result.arguments[i]);\n\n\t\t\t\t\tif (i != n)\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite(' ');\n\t\t\t\t\t\tWrite(result.functionName);\n\t\t\t\t\t\tWrite(' ');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (result.functionSuffix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionSuffix);\n\t\t\t\t}\n\n\t\t\t\tWrite(\")\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tWrite(result.functionName);\n\n\t\t\t\tif (!result.excludeParenthesis)\n\t\t\t\t{\n\t\t\t\t\tWrite(\"(\");\n\t\t\t\t}\n\n\t\t\t\tif (result.functionPrefix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionPrefix);\n\t\t\t\t}\n\n\t\t\t\tif (result.argsBefore != null && result.argsBefore.Length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (int i = 0, n = result.argsBefore.Length - 1; i <= n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite(this.ParameterIndicatorPrefix);\n\t\t\t\t\t\tWrite(ParamNamePrefix);\n\t\t\t\t\t\tWrite(this.parameterValues.Count);\n\t\t\t\t\t\tthis.parameterValues.Add(new TypedValue(result.argsBefore[i].Type, result.argsBefore[i].Value));\n\n\t\t\t\t\t\tif (i != n || (functionCallExpression.Arguments.Count > 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWrite(\", \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0, n = result.arguments.Count - 1; i <= n; i++)\n\t\t\t\t{\n\t\t\t\t\tVisit(result.arguments[i]);\n\n\t\t\t\t\tif (i != n || (result.argsAfter != null && result.argsAfter.Length > 0))\n\t\t\t\t\t{\n\t\t\t\t\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitFunctionCall(SqlFunctionCallExpression functionCallExpression)\n\t\t{\n\t\t\tvar result = ResolveSqlFunction(functionCallExpression);\n\n\t\t\tif (result.treatAsOperator)\n\t\t\t{\n\t\t\t\tWrite(\"(\");\n\n\t\t\t\tif (result.functionPrefix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionPrefix);\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0, n = result.arguments.Count - 1; i <= n; i++)\n\t\t\t\t{\n\t\t\t\t\tVisit(result.arguments[i]);\n\n\t\t\t\t\tif (i != n)\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite(' ');\n\t\t\t\t\t\tWrite(result.functionName);\n\t\t\t\t\t\tWrite(' ');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (result.functionSuffix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionSuffix);\n\t\t\t\t}\n\n\t\t\t\tWrite(\")\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tWrite(result.functionName);\n\n\t\t\t\tif (!result.excludeParenthesis)\n\t\t\t\t{\n\t\t\t\t\tWrite(\"(\");\n\t\t\t\t}\n\n\t\t\t\tif (result.functionPrefix != null)\n\t\t\t\t{\n\t\t\t\t\tWrite(result.functionPrefix);\n\t\t\t\t}\n\n\t\t\t\tif (result.argsBefore != null && result.argsBefore.Length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (int i = 0, n = result.argsBefore.Length - 1; i <= n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite(this.ParameterIndicatorPrefix);\n\t\t\t\t\t\tWrite(ParamNamePrefix);\n\t\t\t\t\t\tWrite(this.parameterValues.Count);\n\t\t\t\t\t\tthis.parameterValues.Add(new TypedValue(result.argsBefore[i].Type, result.argsBefore[i].Value));\n\n\t\t\t\t\t\tif (i != n || (functionCallExpression.Arguments.Count > 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWrite(\", \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0, n = result.arguments.Count - 1; i <= n; i++)\n\t\t\t\t{\n\t\t\t\t\tVisit(result.arguments[i]);\n\n\t\t\t\t\tif (i != n || (result.argsAfter != null && result.argsAfter.Length > 0))\n\t\t\t\t\t{\n\t\t\t\t\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override SqlSelect VisitSelect(SqlSelect select)\n\t\t{\n\t\t\tSelectScope s = expressionSink;\n\n#warning [FB] REFACTOR SQL Server specific (TOP). Change it to reflect limiting but not through the usage of 'Top'.\n\t\t\t// Don't lift through a TOP.\n\t\t\tif(select.Top != null)\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\t// Don't lift through a GROUP BY (or implicit GROUP BY).\n\t\t\tif(select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates(select))\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\t// Don't lift through DISTINCT\n\t\t\tif(select.IsDistinct)\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\tif(expressionSink != null)\n\t\t\t{\n\t\t\t\tList<SqlColumn> keep = new List<SqlColumn>();\n\t\t\t\tList<SqlColumn> lift = new List<SqlColumn>();\n\n\t\t\t\tforeach(SqlColumn sc in select.Row.Columns)\n\t\t\t\t{\n\t\t\t\t\tbool referencesLeftsideAliases = SqlAliasesReferenced.ReferencesAny(sc.Expression, expressionSink.LeftProduction);\n\t\t\t\t\tbool isLockedExpression = expressionSink.ReferencedExpressions.Contains(sc);\n\t\t\t\t\tif(referencesLeftsideAliases && !isLockedExpression)\n\t\t\t\t\t{\n\t\t\t\t\t\tlift.Add(sc);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tkeep.Add(sc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tselect.Row.Columns.Clear();\n\t\t\t\tselect.Row.Columns.AddRange(keep);\n\t\t\t\tif(lift.Count > 0)\n\t\t\t\t{\n\t\t\t\t\texpressionSink.Lifted.Push(lift);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSqlSelect sel = base.VisitSelect(select);\n\t\t\texpressionSink = s;\n\t\t\treturn sel;\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override SqlSelect VisitSelect(SqlSelect select)\n\t\t{\n\t\t\tSelectScope s = expressionSink;\n\n#warning [FB] REFACTOR SQL Server specific (TOP). Change it to reflect limiting but not through the usage of 'Top'.\n\t\t\t// Don't lift through a TOP.\n\t\t\tif(select.Top != null)\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\t// Don't lift through a GROUP BY (or implicit GROUP BY).\n\t\t\tif(select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates(select))\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\t// Don't lift through DISTINCT\n\t\t\tif(select.IsDistinct)\n\t\t\t{\n\t\t\t\texpressionSink = null;\n\t\t\t}\n\n\t\t\tif(expressionSink != null)\n\t\t\t{\n\t\t\t\tList<SqlColumn> keep = new List<SqlColumn>();\n\t\t\t\tList<SqlColumn> lift = new List<SqlColumn>();\n\n\t\t\t\tforeach(SqlColumn sc in select.Row.Columns)\n\t\t\t\t{\n\t\t\t\t\tbool referencesLeftsideAliases = SqlAliasesReferenced.ReferencesAny(sc.Expression, expressionSink.LeftProduction);\n\t\t\t\t\tbool isLockedExpression = expressionSink.ReferencedExpressions.Contains(sc);\n\t\t\t\t\tif(referencesLeftsideAliases && !isLockedExpression)\n\t\t\t\t\t{\n\t\t\t\t\t\tlift.Add(sc);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tkeep.Add(sc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tselect.Row.Columns.Clear();\n\t\t\t\tselect.Row.Columns.AddRange(keep);\n\t\t\t\tif(lift.Count > 0)\n\t\t\t\t{\n\t\t\t\t\texpressionSink.Lifted.Push(lift);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSqlSelect sel = base.VisitSelect(select);\n\t\t\texpressionSink = s;\n\t\t\treturn sel;\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int Ppmd7_DecodeSymbol(CPpmd7 p, IPpmd7_RangeDec rc)\n        {\n            uint* charMask = stackalloc uint[256 / sizeof(uint)];\n            if (p.MinContext->NumStats != 1)\n            {\n                CPpmd_State* s = Ppmd7_GetStats(p, p.MinContext);\n                uint i;\n                uint count, hiCnt;\n                if ((count = rc.GetThreshold(rc, p.MinContext->SummFreq)) < (hiCnt = s->Freq))\n                {\n                    byte symbol;\n                    rc.Decode(rc, 0, s->Freq);\n                    p.FoundState = s;\n                    symbol = s->Symbol;\n                    Ppmd7_Update1_0(p);\n                    return symbol;\n                }\n                p.PrevSuccess = 0;\n                i = p.MinContext->NumStats - 1u;\n                do\n                {\n                    if ((hiCnt += (++s)->Freq) > count)\n                    {\n                        byte symbol;\n                        rc.Decode(rc, hiCnt - s->Freq, s->Freq);\n                        p.FoundState = s;\n                        symbol = s->Symbol;\n                        Ppmd7_Update1(p);\n                        return symbol;\n                    }\n                }\n                while (--i != 0);\n                if (count >= p.MinContext->SummFreq)\n                    return -2;\n                p.HiBitsFlag = p.HB2Flag[p.FoundState->Symbol];\n                rc.Decode(rc, hiCnt, p.MinContext->SummFreq - hiCnt);\n                PPMD_SetAllBitsIn256Bytes(charMas\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int Ppmd7_DecodeSymbol(CPpmd7 p, IPpmd7_RangeDec rc)\n        {\n            uint* charMask = stackalloc uint[256 / sizeof(uint)];\n            if (p.MinContext->NumStats != 1)\n            {\n                CPpmd_State* s = Ppmd7_GetStats(p, p.MinContext);\n                uint i;\n                uint count, hiCnt;\n                if ((count = rc.GetThreshold(rc, p.MinContext->SummFreq)) < (hiCnt = s->Freq))\n                {\n                    byte symbol;\n                    rc.Decode(rc, 0, s->Freq);\n                    p.FoundState = s;\n                    symbol = s->Symbol;\n                    Ppmd7_Update1_0(p);\n                    return symbol;\n                }\n                p.PrevSuccess = 0;\n                i = p.MinContext->NumStats - 1u;\n                do\n                {\n                    if ((hiCnt += (++s)->Freq) > count)\n                    {\n                        byte symbol;\n                        rc.Decode(rc, hiCnt - s->Freq, s->Freq);\n                        p.FoundState = s;\n                        symbol = s->Symbol;\n                        Ppmd7_Update1(p);\n                        return symbol;\n                    }\n                }\n                while (--i != 0);\n                if (count >= p.MinContext->SummFreq)\n                    return -2;\n                p.HiBitsFlag = p.HB2Flag[p.FoundState->Symbol];\n                rc.Decode(rc, hiCnt, p.MinContext->SummFreq - hiCnt);\n                PPMD_SetAllBitsIn256Bytes(charMas\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void StartL()\n        {\n            if (IsRunning)\n                return;\n            try\n            {\n\n                // construct a scheduler factory\n                ISchedulerFactory schedFact = new StdSchedulerFactory();\n\n                // get a scheduler, start the schedular before triggers or anything else\n                if (sched == null)\n                {\n                    sched = schedFact.GetScheduler().Result;\n                }\n\n                // create job\n                IJobDetail job = JobBuilder.Create<SimpleJob>()\n                    .WithIdentity(\"job1\", \"group1\")\n                    .Build();\n\n                // create trigger\n\n                var triggerB = TriggerBuilder.Create()\n                    .WithIdentity(\"trigger1\", \"group1\");\n\n                if (StartIn)\n                {\n                    triggerB =\n                        triggerB.StartAt(DateBuilder.FutureDate(\n                            (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond,\n                            IntervalUnit.Second));\n\n                }\n\n                if (StartAt)\n                {\n                    triggerB =\n                        triggerB.StartAt(DateBuilder.DateOf(StartHour, StartMinute, StartSecond, StartDate.Day,\n                            StartDate.Month, StartDate.Year));\n                }\n                if (StartDaily)\n                {\n                    ISet<DayOfWeek> days = new HashSet<DayOfWeek>();\n                    if (St\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void StartL()\n        {\n            if (IsRunning)\n                return;\n            try\n            {\n\n                // construct a scheduler factory\n                ISchedulerFactory schedFact = new StdSchedulerFactory();\n\n                // get a scheduler, start the schedular before triggers or anything else\n                if (sched == null)\n                {\n                    sched = schedFact.GetScheduler().Result;\n                }\n\n                // create job\n                IJobDetail job = JobBuilder.Create<SimpleJob>()\n                    .WithIdentity(\"job1\", \"group1\")\n                    .Build();\n\n                // create trigger\n\n                var triggerB = TriggerBuilder.Create()\n                    .WithIdentity(\"trigger1\", \"group1\");\n\n                if (StartIn)\n                {\n                    triggerB =\n                        triggerB.StartAt(DateBuilder.FutureDate(\n                            (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond,\n                            IntervalUnit.Second));\n\n                }\n\n                if (StartAt)\n                {\n                    triggerB =\n                        triggerB.StartAt(DateBuilder.DateOf(StartHour, StartMinute, StartSecond, StartDate.Day,\n                            StartDate.Month, StartDate.Year));\n                }\n                if (StartDaily)\n                {\n                    ISet<DayOfWeek> days = new HashSet<DayOfWeek>();\n                    if (St\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic CodeExpression[] Generate(Table table, HardwireCodeGenerationContext generator, CodeTypeMemberCollection members)\n\t\t{\n\t\t\tbool isArray = table.Get(\"arraytype\").IsNotNil();\n\t\t\tstring memberName = table.Get(\"name\").String;\n\t\t\t\n\t\t\t// Ignore arrays weird special members \n\t\t\tif (isArray)\n\t\t\t{\n\t\t\t\tif ((memberName == \"Get\") || (memberName == \"Set\") || (memberName == \"Address\"))\n\t\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Create the descriptor class\n\t\t\tstring className = m_Prefix + \"_\" + Guid.NewGuid().ToString(\"N\");\n\n\t\t\tCodeTypeDeclaration classCode = new CodeTypeDeclaration(className);\n\t\t\tclassCode.TypeAttributes = System.Reflection.TypeAttributes.NestedPrivate | System.Reflection.TypeAttributes.Sealed;\n\t\t\tclassCode.BaseTypes.Add(typeof(HardwiredMethodMemberDescriptor));\n\n\t\t\t// Create the class constructor\n\t\t\tCodeConstructor ctor = new CodeConstructor();\n\t\t\tctor.Attributes = MemberAttributes.Assembly;\n\t\t\tclassCode.Members.Add(ctor);\n\n\t\t\t// Create the parameters\n\t\t\tList<HardwireParameterDescriptor> paramDescs = HardwireParameterDescriptor.LoadDescriptorsFromTable(table.Get(\"params\").Table);\n\n\t\t\tint paramNum = paramDescs.Count;\n\t\t\tint optionalNum = paramDescs.Where(p => p.HasDefaultValue).Count();\n\n\t\t\t// Add initialize call to ctor\n\t\t\tList<CodeExpression> initParams = new List<CodeExpression>();\n\n\t\t\tinitParams.Add(new CodePrimitiveExpression(memberName));\n\t\t\tinitParams.Add(new CodePrimitiveExpression(table.Get(\"static\").Boolean || table.Get(\"ctor\").Boolean));\n\n\t\t\tinitParams.Add(new CodeArray\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic CodeExpression[] Generate(Table table, HardwireCodeGenerationContext generator, CodeTypeMemberCollection members)\n\t\t{\n\t\t\tbool isArray = table.Get(\"arraytype\").IsNotNil();\n\t\t\tstring memberName = table.Get(\"name\").String;\n\t\t\t\n\t\t\t// Ignore arrays weird special members \n\t\t\tif (isArray)\n\t\t\t{\n\t\t\t\tif ((memberName == \"Get\") || (memberName == \"Set\") || (memberName == \"Address\"))\n\t\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Create the descriptor class\n\t\t\tstring className = m_Prefix + \"_\" + Guid.NewGuid().ToString(\"N\");\n\n\t\t\tCodeTypeDeclaration classCode = new CodeTypeDeclaration(className);\n\t\t\tclassCode.TypeAttributes = System.Reflection.TypeAttributes.NestedPrivate | System.Reflection.TypeAttributes.Sealed;\n\t\t\tclassCode.BaseTypes.Add(typeof(HardwiredMethodMemberDescriptor));\n\n\t\t\t// Create the class constructor\n\t\t\tCodeConstructor ctor = new CodeConstructor();\n\t\t\tctor.Attributes = MemberAttributes.Assembly;\n\t\t\tclassCode.Members.Add(ctor);\n\n\t\t\t// Create the parameters\n\t\t\tList<HardwireParameterDescriptor> paramDescs = HardwireParameterDescriptor.LoadDescriptorsFromTable(table.Get(\"params\").Table);\n\n\t\t\tint paramNum = paramDescs.Count;\n\t\t\tint optionalNum = paramDescs.Where(p => p.HasDefaultValue).Count();\n\n\t\t\t// Add initialize call to ctor\n\t\t\tList<CodeExpression> initParams = new List<CodeExpression>();\n\n\t\t\tinitParams.Add(new CodePrimitiveExpression(memberName));\n\t\t\tinitParams.Add(new CodePrimitiveExpression(table.Get(\"static\").Boolean || table.Get(\"ctor\").Boolean));\n\n\t\t\tinitParams.Add(new CodeArray\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endif\n\n\t\t/*\n** Read a single page from either the journal file (if isMainJrnl==1) or\n** from the sub-journal (if isMainJrnl==0) and playback that page.\n** The page begins at offset *pOffset into the file. The *pOffset\n** value is increased to the start of the next page in the journal.\n**\n** The main rollback journal uses checksums - the statement journal does\n** not.\n**\n** If the page number of the page record read from the (sub-)journal file\n** is greater than the current value of Pager.dbSize, then playback is\n** skipped and SQLITE_OK is returned.\n**\n** If pDone is not NULL, then it is a record of pages that have already\n** been played back.  If the page at *pOffset has already been played back\n** (if the corresponding pDone bit is set) then skip the playback.\n** Make sure the pDone bit corresponding to the *pOffset page is set\n** prior to returning.\n**\n** If the page record is successfully read from the (sub-)journal file\n** and played back, then SQLITE_OK is returned. If an IO error occurs\n** while reading the record from the (sub-)journal file or while writing\n** to the database file, then the IO error code is returned. If data\n** is successfully read from the (sub-)journal file but appears to be\n** corrupted, SQLITE_DONE is returned. Data is considered corrupted in\n** two circumstances:\n**\n**   * If the record page-number is illegal (0 or PAGER_MJ_PGNO), or\n**   * If the record is being rolled back from the main journal file\n**     and the checksum field does not match\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endif\n\n\t\t/*\n** Read a single page from either the journal file (if isMainJrnl==1) or\n** from the sub-journal (if isMainJrnl==0) and playback that page.\n** The page begins at offset *pOffset into the file. The *pOffset\n** value is increased to the start of the next page in the journal.\n**\n** The main rollback journal uses checksums - the statement journal does\n** not.\n**\n** If the page number of the page record read from the (sub-)journal file\n** is greater than the current value of Pager.dbSize, then playback is\n** skipped and SQLITE_OK is returned.\n**\n** If pDone is not NULL, then it is a record of pages that have already\n** been played back.  If the page at *pOffset has already been played back\n** (if the corresponding pDone bit is set) then skip the playback.\n** Make sure the pDone bit corresponding to the *pOffset page is set\n** prior to returning.\n**\n** If the page record is successfully read from the (sub-)journal file\n** and played back, then SQLITE_OK is returned. If an IO error occurs\n** while reading the record from the (sub-)journal file or while writing\n** to the database file, then the IO error code is returned. If data\n** is successfully read from the (sub-)journal file but appears to be\n** corrupted, SQLITE_DONE is returned. Data is considered corrupted in\n** two circumstances:\n**\n**   * If the record page-number is illegal (0 or PAGER_MJ_PGNO), or\n**   * If the record is being rolled back from the main journal file\n**     and the checksum field does not match\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ApplyRoadLineSelection()\n        {\n            var mouseOverTerrian = GetMouseOverTerrain();\n\n            if ( mouseOverTerrian == null )\n            {\n                return;\n            }\n\n            var tile = mouseOverTerrian.Tile.Normal;\n            var sideNum = new XYInt();\n\n            if ( Map.SelectedTileA != null )\n            {\n                var num = 0;\n                var a = 0;\n                var b = 0;\n                if ( tile.X == Map.SelectedTileA.X )\n                {\n                    if ( tile.Y <= Map.SelectedTileA.Y )\n                    {\n                        a = tile.Y;\n                        b = Map.SelectedTileA.Y;\n                    }\n                    else\n                    {\n                        a = Map.SelectedTileA.Y;\n                        b = tile.Y;\n                    }\n                    for ( num = a + 1; num <= b; num++ )\n                    {\n                        Map.Terrain.SideH[Map.SelectedTileA.X, num].Road = App.SelectedRoad;\n                        sideNum.X = Map.SelectedTileA.X;\n                        sideNum.Y = num;\n                        Map.AutoTextureChanges.SideHChanged(sideNum);\n                        Map.SectorGraphicsChanges.SideHChanged(sideNum);\n                        Map.SectorTerrainUndoChanges.SideHChanged(sideNum);\n                    }\n\n                    broker.UpdateMap(this);\n\n                    Map.UndoStepCreate(\"Road Line\");\n\n                    Map.SelectedTileA =\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ApplyRoadLineSelection()\n        {\n            var mouseOverTerrian = GetMouseOverTerrain();\n\n            if ( mouseOverTerrian == null )\n            {\n                return;\n            }\n\n            var tile = mouseOverTerrian.Tile.Normal;\n            var sideNum = new XYInt();\n\n            if ( Map.SelectedTileA != null )\n            {\n                var num = 0;\n                var a = 0;\n                var b = 0;\n                if ( tile.X == Map.SelectedTileA.X )\n                {\n                    if ( tile.Y <= Map.SelectedTileA.Y )\n                    {\n                        a = tile.Y;\n                        b = Map.SelectedTileA.Y;\n                    }\n                    else\n                    {\n                        a = Map.SelectedTileA.Y;\n                        b = tile.Y;\n                    }\n                    for ( num = a + 1; num <= b; num++ )\n                    {\n                        Map.Terrain.SideH[Map.SelectedTileA.X, num].Road = App.SelectedRoad;\n                        sideNum.X = Map.SelectedTileA.X;\n                        sideNum.Y = num;\n                        Map.AutoTextureChanges.SideHChanged(sideNum);\n                        Map.SectorGraphicsChanges.SideHChanged(sideNum);\n                        Map.SectorTerrainUndoChanges.SideHChanged(sideNum);\n                    }\n\n                    broker.UpdateMap(this);\n\n                    Map.UndoStepCreate(\"Road Line\");\n\n                    Map.SelectedTileA =\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\n        {\n            //WriteContext(\"ConvertFrom\", context, value, Type.Missing.GetType());\n\n            ICollection<StandardValueAttribute> standardValueAttributes = null;\n            var propType = Type.Missing.GetType();\n            if (context?.PropertyDescriptor is CustomPropertyDescriptor)\n            {\n                var cpd = context.PropertyDescriptor as CustomPropertyDescriptor;\n                UpdateEnumDisplayText(cpd);\n                standardValueAttributes = cpd.StandardValues;\n                propType = cpd.PropertyType;\n            }\n            if (value == null)\n            {\n                return null;\n            }\n            if (value is string)\n            {\n                if (propType.IsEnum)\n                {\n                    var sInpuValue = value as string;\n                    var arrDispName = sInpuValue.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\n\n                    var sb = new StringBuilder(1000);\n                    foreach (var sDispName in arrDispName)\n                    {\n                        var sTrimValue = sDispName.Trim();\n                        foreach (var sva in standardValueAttributes)\n                        {\n                            if (string.Compare(sva.Value.ToString(), sTrimValue, true) == 0 ||\n                                string.Compare(sva.DisplayName, sTrimValue, true) == 0)\n            \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\n        {\n            //WriteContext(\"ConvertFrom\", context, value, Type.Missing.GetType());\n\n            ICollection<StandardValueAttribute> standardValueAttributes = null;\n            var propType = Type.Missing.GetType();\n            if (context?.PropertyDescriptor is CustomPropertyDescriptor)\n            {\n                var cpd = context.PropertyDescriptor as CustomPropertyDescriptor;\n                UpdateEnumDisplayText(cpd);\n                standardValueAttributes = cpd.StandardValues;\n                propType = cpd.PropertyType;\n            }\n            if (value == null)\n            {\n                return null;\n            }\n            if (value is string)\n            {\n                if (propType.IsEnum)\n                {\n                    var sInpuValue = value as string;\n                    var arrDispName = sInpuValue.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\n\n                    var sb = new StringBuilder(1000);\n                    foreach (var sDispName in arrDispName)\n                    {\n                        var sTrimValue = sDispName.Trim();\n                        foreach (var sva in standardValueAttributes)\n                        {\n                            if (string.Compare(sva.Value.ToString(), sTrimValue, true) == 0 ||\n                                string.Compare(sva.DisplayName, sTrimValue, true) == 0)\n            \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Add the necessary edits to uncomment out a single span.\n        /// </summary>\n        private void UncommentSpan(ICommentUncommentService service, SnapshotSpan span, List<TextChange> textChanges, List<ITrackingSpan> spansToSelect)\n        {\n            if (service.SupportsBlockComment)\n            {\n                var positionOfStart = -1;\n                var positionOfEnd = -1;\n                var spanText = span.GetText();\n                var trimmedSpanText = spanText.Trim();\n\n                // See if the selection includes just a block comment (plus whitespace)\n                if (trimmedSpanText.StartsWith(service.BlockCommentStartString) && trimmedSpanText.EndsWith(service.BlockCommentEndString))\n                {\n                    positionOfStart = span.Start + spanText.IndexOf(service.BlockCommentStartString);\n                    positionOfEnd = span.Start + spanText.LastIndexOf(service.BlockCommentEndString);\n                }\n                else\n                {\n                    // See if we are (textually) contained in a block comment.\n                    // This could allow a selection that spans multiple block comments to uncomment the beginning of\n                    // the first and end of the last.  Oh well.\n                    var text = span.Snapshot.AsText();\n                    positionOfStart = text.LastIndexOf(service.BlockCommentStartString, span.Start, caseSensitive: true);\n\n                    // If we found a start\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Add the necessary edits to uncomment out a single span.\n        /// </summary>\n        private void UncommentSpan(ICommentUncommentService service, SnapshotSpan span, List<TextChange> textChanges, List<ITrackingSpan> spansToSelect)\n        {\n            if (service.SupportsBlockComment)\n            {\n                var positionOfStart = -1;\n                var positionOfEnd = -1;\n                var spanText = span.GetText();\n                var trimmedSpanText = spanText.Trim();\n\n                // See if the selection includes just a block comment (plus whitespace)\n                if (trimmedSpanText.StartsWith(service.BlockCommentStartString) && trimmedSpanText.EndsWith(service.BlockCommentEndString))\n                {\n                    positionOfStart = span.Start + spanText.IndexOf(service.BlockCommentStartString);\n                    positionOfEnd = span.Start + spanText.LastIndexOf(service.BlockCommentEndString);\n                }\n                else\n                {\n                    // See if we are (textually) contained in a block comment.\n                    // This could allow a selection that spans multiple block comments to uncomment the beginning of\n                    // the first and end of the last.  Oh well.\n                    var text = span.Snapshot.AsText();\n                    positionOfStart = text.LastIndexOf(service.BlockCommentStartString, span.Start, caseSensitive: true);\n\n                    // If we found a start\nAnswer:?\nWait, I'm getting"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int ProcessArgs(string argsInString)\n\t\t{\n\t\t\tCanceled = false;\n\t\t\tList<string> commands = new List<string>();\n\t\t\tforeach (string command in SplitCommandLine.DoSplit(argsInString))\n\t\t\t{\n\t\t\t\tcommands.Add(command);\n\t\t\t}\n\n\t\t\tstring[] args = commands.ToArray();\n\t\t\treturn ProcessArgs(args);\n\t\t}public static int ProcessArgs(string[] args)\n\t\t{\n\t\t\tif (args.Length == 0)\n\t\t\t{\n\t\t\t\tprint_usage();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tConfigSettings config = new ConfigSettings();\n\t\t\tFffProcessor processor = new FffProcessor(config);\n\n\t\t\tLogOutput.Log(\"\\nMatterSlice version {0}\\n\\n\".FormatWith(ConfigConstants.VERSION));\n\n\t\t\tif (ProcessArgs(args, config, processor) == 0)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (!Canceled)\n\t\t\t{\n\t\t\t\tprocessor.DoProcessing();\n\t\t\t}\n\n\t\t\tif (!Canceled)\n\t\t\t{\n\t\t\t\tprocessor.Finalize();\n\t\t\t}\n\n\t\t\tif (Canceled)\n\t\t\t{\n\t\t\t\tprocessor.Cancel();\n\t\t\t}\n\n\t\t\tCanceled = true;\n\n\t\t\treturn 0;\n\t\t}public static int ProcessArgs(string[] args, ConfigSettings config, FffProcessor processor)\n\t\t{\n\t\t\tfor (int argn = 0; argn < args.Length; argn++)\n\t\t\t{\n\t\t\t\tstring str = args[argn];\n\t\t\t\tif (str[0] == '-')\n\t\t\t\t{\n\t\t\t\t\tfor (int stringIndex = 1; stringIndex < str.Length; stringIndex++)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (str[stringIndex])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\t\tprint_usage();\n\t\t\t\t\t\t\t\treturn 0;\n\n\t\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\t\tLogOutput.verbose_level++;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'o':\n\t\t\t\t\t\t\t\targn++;\n\t\t\t\t\t\t\t\tif (!processor.SetTargetFile(args[argn]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tLogOutput.LogError(\"Failed to open {0} for output.\\n\"\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static int ProcessArgs(string argsInString)\n\t\t{\n\t\t\tCanceled = false;\n\t\t\tList<string> commands = new List<string>();\n\t\t\tforeach (string command in SplitCommandLine.DoSplit(argsInString))\n\t\t\t{\n\t\t\t\tcommands.Add(command);\n\t\t\t}\n\n\t\t\tstring[] args = commands.ToArray();\n\t\t\treturn ProcessArgs(args);\n\t\t}public static int ProcessArgs(string[] args)\n\t\t{\n\t\t\tif (args.Length == 0)\n\t\t\t{\n\t\t\t\tprint_usage();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tConfigSettings config = new ConfigSettings();\n\t\t\tFffProcessor processor = new FffProcessor(config);\n\n\t\t\tLogOutput.Log(\"\\nMatterSlice version {0}\\n\\n\".FormatWith(ConfigConstants.VERSION));\n\n\t\t\tif (ProcessArgs(args, config, processor) == 0)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (!Canceled)\n\t\t\t{\n\t\t\t\tprocessor.DoProcessing();\n\t\t\t}\n\n\t\t\tif (!Canceled)\n\t\t\t{\n\t\t\t\tprocessor.Finalize();\n\t\t\t}\n\n\t\t\tif (Canceled)\n\t\t\t{\n\t\t\t\tprocessor.Cancel();\n\t\t\t}\n\n\t\t\tCanceled = true;\n\n\t\t\treturn 0;\n\t\t}public static int ProcessArgs(string[] args, ConfigSettings config, FffProcessor processor)\n\t\t{\n\t\t\tfor (int argn = 0; argn < args.Length; argn++)\n\t\t\t{\n\t\t\t\tstring str = args[argn];\n\t\t\t\tif (str[0] == '-')\n\t\t\t\t{\n\t\t\t\t\tfor (int stringIndex = 1; stringIndex < str.Length; stringIndex++)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch (str[stringIndex])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\t\tprint_usage();\n\t\t\t\t\t\t\t\treturn 0;\n\n\t\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\t\tLogOutput.verbose_level++;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'o':\n\t\t\t\t\t\t\t\targn++;\n\t\t\t\t\t\t\t\tif (!processor.SetTargetFile(args[argn]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tLogOutput.LogError(\"Failed to open {0} for output.\\n\"\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override ECPoint Add(ECPoint b)\n        {\n            if (this.IsInfinity)\n                return b;\n            if (b.IsInfinity)\n                return this;\n            if (this == b)\n                return Twice();\n\n            ECCurve curve = this.Curve;\n\n            SecP521R1FieldElement X1 = (SecP521R1FieldElement)this.RawXCoord, Y1 = (SecP521R1FieldElement)this.RawYCoord;\n            SecP521R1FieldElement X2 = (SecP521R1FieldElement)b.RawXCoord, Y2 = (SecP521R1FieldElement)b.RawYCoord;\n\n            SecP521R1FieldElement Z1 = (SecP521R1FieldElement)this.RawZCoords[0];\n            SecP521R1FieldElement Z2 = (SecP521R1FieldElement)b.RawZCoords[0];\n\n            uint[] t1 = Nat.Create(17);\n            uint[] t2 = Nat.Create(17);\n            uint[] t3 = Nat.Create(17);\n            uint[] t4 = Nat.Create(17);\n\n            bool Z1IsOne = Z1.IsOne;\n            uint[] U2, S2;\n            if (Z1IsOne)\n            {\n                U2 = X2.x;\n                S2 = Y2.x;\n            }\n            else\n            {\n                S2 = t3;\n                SecP521R1Field.Square(Z1.x, S2);\n\n                U2 = t2;\n                SecP521R1Field.Multiply(S2, X2.x, U2);\n\n                SecP521R1Field.Multiply(S2, Z1.x, S2);\n                SecP521R1Field.Multiply(S2, Y2.x, S2);\n            }\n\n            bool Z2IsOne = Z2.IsOne;\n            uint[] U1, S1;\n            if (Z2IsOne)\n            {\n                U1 = X1.x;\n                S1 = Y1.x;\n            }\n            else\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override ECPoint Add(ECPoint b)\n        {\n            if (this.IsInfinity)\n                return b;\n            if (b.IsInfinity)\n                return this;\n            if (this == b)\n                return Twice();\n\n            ECCurve curve = this.Curve;\n\n            SecP521R1FieldElement X1 = (SecP521R1FieldElement)this.RawXCoord, Y1 = (SecP521R1FieldElement)this.RawYCoord;\n            SecP521R1FieldElement X2 = (SecP521R1FieldElement)b.RawXCoord, Y2 = (SecP521R1FieldElement)b.RawYCoord;\n\n            SecP521R1FieldElement Z1 = (SecP521R1FieldElement)this.RawZCoords[0];\n            SecP521R1FieldElement Z2 = (SecP521R1FieldElement)b.RawZCoords[0];\n\n            uint[] t1 = Nat.Create(17);\n            uint[] t2 = Nat.Create(17);\n            uint[] t3 = Nat.Create(17);\n            uint[] t4 = Nat.Create(17);\n\n            bool Z1IsOne = Z1.IsOne;\n            uint[] U2, S2;\n            if (Z1IsOne)\n            {\n                U2 = X2.x;\n                S2 = Y2.x;\n            }\n            else\n            {\n                S2 = t3;\n                SecP521R1Field.Square(Z1.x, S2);\n\n                U2 = t2;\n                SecP521R1Field.Multiply(S2, X2.x, U2);\n\n                SecP521R1Field.Multiply(S2, Z1.x, S2);\n                SecP521R1Field.Multiply(S2, Y2.x, S2);\n            }\n\n            bool Z2IsOne = Z2.IsOne;\n            uint[] U1, S1;\n            if (Z2IsOne)\n            {\n                U1 = X1.x;\n                S1 = Y1.x;\n            }\n            else\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static int Main(string[] args)\n        {\n            try\n            {\n                Console.SetWindowSize(85, 40);\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.Green;\n            }\n            catch {/* DO NOTHING */}\n\n#if (DEBUG)\n            // give the progie some dumby data to work with\n            args = new string[]\n            {\n                \"-input=D:\\\\Temp\\\\PeppaPig_p.psarc\", \n                \"-sourceplatform=Pc\", \n                \"-targetplatform=Mac\", \n                \"-appid=248750\",\n                \"-v\"\n            };\n\n            // args = new string[] {\"-?\"};\n            Console.WriteLine(\"Running in Debug Mode ... help is not available\");\n#endif\n            var arguments = new Arguments();\n            var options = GetOptions(arguments);\n\n            try\n            {\n                options.Parse(args);\n                if (arguments.ShowHelp)\n                {\n                    options.WriteOptionDescriptions(Console.Out);\n                    Console.WriteLine(\"\");\n                    Console.WriteLine(\"Press any key to close window ...\");\n                    Console.ReadLine();\n                    return 0;\n                }\n\n                // VALIDATIONS\n                if (arguments.SourcePlatform == null || arguments.SourcePlatform.platform == GamePlatform.Non\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static int Main(string[] args)\n        {\n            try\n            {\n                Console.SetWindowSize(85, 40);\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.Green;\n            }\n            catch {/* DO NOTHING */}\n\n#if (DEBUG)\n            // give the progie some dumby data to work with\n            args = new string[]\n            {\n                \"-input=D:\\\\Temp\\\\PeppaPig_p.psarc\", \n                \"-sourceplatform=Pc\", \n                \"-targetplatform=Mac\", \n                \"-appid=248750\",\n                \"-v\"\n            };\n\n            // args = new string[] {\"-?\"};\n            Console.WriteLine(\"Running in Debug Mode ... help is not available\");\n#endif\n            var arguments = new Arguments();\n            var options = GetOptions(arguments);\n\n            try\n            {\n                options.Parse(args);\n                if (arguments.ShowHelp)\n                {\n                    options.WriteOptionDescriptions(Console.Out);\n                    Console.WriteLine(\"\");\n                    Console.WriteLine(\"Press any key to close window ...\");\n                    Console.ReadLine();\n                    return 0;\n                }\n\n                // VALIDATIONS\n                if (arguments.SourcePlatform == null || arguments.SourcePlatform.platform == GamePlatform.Non\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test\n         * \n         * Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an\n         * alternative to {@link #isMRProbablePrime(BigInteger, SecureRandom, int)} that provides more\n         * information about a composite candidate, which may be useful when generating or validating\n         * RSA moduli.\n         * \n         * @param candidate\n         *            the {@link BigInteger} instance to test for primality.\n         * @param random\n         *            the source of randomness to use to choose bases.\n         * @param iterations\n         *            the number of randomly-chosen bases to perform the test for.\n         * @return an {@link MROutput} instance that can be further queried for details.\n         */\n        public static MROutput EnhancedMRProbablePrimeTest(BigInteger candidate, SecureRandom random, int iterations)\n        {\n            CheckCandidate(candidate, \"candidate\");\n\n            if (random == null)\n                throw new ArgumentNullException(\"random\");\n            if (iterations < 1)\n                throw new ArgumentException(\"must be > 0\", \"iterations\");\n\n            if (candidate.BitLength == 2)\n                return MROutput.ProbablyPrime();\n\n            if (!candidate.TestBit(0))\n                return MROutput.ProvablyCompositeWithFactor(Two);\n\n            BigInteger w = candidate;\n            BigInteger wSubOne = \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test\n         * \n         * Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an\n         * alternative to {@link #isMRProbablePrime(BigInteger, SecureRandom, int)} that provides more\n         * information about a composite candidate, which may be useful when generating or validating\n         * RSA moduli.\n         * \n         * @param candidate\n         *            the {@link BigInteger} instance to test for primality.\n         * @param random\n         *            the source of randomness to use to choose bases.\n         * @param iterations\n         *            the number of randomly-chosen bases to perform the test for.\n         * @return an {@link MROutput} instance that can be further queried for details.\n         */\n        public static MROutput EnhancedMRProbablePrimeTest(BigInteger candidate, SecureRandom random, int iterations)\n        {\n            CheckCandidate(candidate, \"candidate\");\n\n            if (random == null)\n                throw new ArgumentNullException(\"random\");\n            if (iterations < 1)\n                throw new ArgumentException(\"must be > 0\", \"iterations\");\n\n            if (candidate.BitLength == 2)\n                return MROutput.ProbablyPrime();\n\n            if (!candidate.TestBit(0))\n                return MROutput.ProvablyCompositeWithFactor(Two);\n\n            BigInteger w = candidate;\n            BigInteger wSubOne = \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnTick()\n\t\t\t{\n\t\t\t\t// check the sectors\n\n\t\t\t\t// check all active players\n\t\t\t\tif (NetState.Instances != null)\n\t\t\t\t{\n\t\t\t\t\tforeach (NetState state in NetState.Instances)\n\t\t\t\t\t{\n\t\t\t\t\t\tMobile m = state.Mobile;\n\n\t\t\t\t\t\tif (m != null && (m.AccessLevel <= SmartSpawnAccessLevel || !m.Hidden))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// activate any spawner in the sector they are in\n\t\t\t\t\t\t\tif (m.Map != null && m.Map != Map.Internal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSector s = m.Map.GetSector(m.Location);\n\n\t\t\t\t\t\t\t\tif (s != null && GlobalSectorTable[m.Map.MapID] != null)\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tList<XmlSpawner> spawnerlist;// = GlobalSectorTable[m.Map.MapID][s];\n\t\t\t\t\t\t\t\t\tif (GlobalSectorTable[m.Map.MapID].TryGetValue(s, out spawnerlist) && spawnerlist != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tforeach (XmlSpawner spawner in spawnerlist)\n\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\tif (spawner != null && !spawner.Deleted && spawner.Running && spawner.SmartSpawning && spawner.IsInactivated)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tspawner.SmartRespawn();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnTick()\n\t\t\t{\n\t\t\t\t// check the sectors\n\n\t\t\t\t// check all active players\n\t\t\t\tif (NetState.Instances != null)\n\t\t\t\t{\n\t\t\t\t\tforeach (NetState state in NetState.Instances)\n\t\t\t\t\t{\n\t\t\t\t\t\tMobile m = state.Mobile;\n\n\t\t\t\t\t\tif (m != null && (m.AccessLevel <= SmartSpawnAccessLevel || !m.Hidden))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// activate any spawner in the sector they are in\n\t\t\t\t\t\t\tif (m.Map != null && m.Map != Map.Internal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSector s = m.Map.GetSector(m.Location);\n\n\t\t\t\t\t\t\t\tif (s != null && GlobalSectorTable[m.Map.MapID] != null)\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tList<XmlSpawner> spawnerlist;// = GlobalSectorTable[m.Map.MapID][s];\n\t\t\t\t\t\t\t\t\tif (GlobalSectorTable[m.Map.MapID].TryGetValue(s, out spawnerlist) && spawnerlist != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tforeach (XmlSpawner spawner in spawnerlist)\n\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\tif (spawner != null && !spawner.Deleted && spawner.Running && spawner.SmartSpawning && spawner.IsInactivated)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tspawner.SmartRespawn();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nAnswer: \n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsSegmentValid(Context context, List<RoutePatternPart> parts)\n        {\n            // If a segment has multiple parts, then it can't contain a catch all.\n            for (var i = 0; i < parts.Count; i++)\n            {\n                var part = parts[i];\n                if (part is RoutePatternParameterPart parameter && parameter.IsCatchAll && parts.Count > 1)\n                {\n                    context.Error = Resources.TemplateRoute_CannotHaveCatchAllInMultiSegment;\n                    return false;\n                }\n            }\n\n            // if a segment has multiple parts, then only the last one parameter can be optional \n            // if it is following a optional seperator. \n            for (var i = 0; i < parts.Count; i++)\n            {\n                var part = parts[i];\n\n                if (part is RoutePatternParameterPart parameter && parameter.IsOptional && parts.Count > 1)\n                {\n                    // This optional parameter is the last part in the segment\n                    if (i == parts.Count - 1)\n                    {\n                        var previousPart = parts[i - 1];\n\n                        if (!previousPart.IsLiteral && !previousPart.IsSeparator)\n                        {\n                            // The optional parameter is preceded by something that is not a literal or separator\n                            // Example of error message:\n                            // \"In the segment '{RouteValue}{param?}',\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsSegmentValid(Context context, List<RoutePatternPart> parts)\n        {\n            // If a segment has multiple parts, then it can't contain a catch all.\n            for (var i = 0; i < parts.Count; i++)\n            {\n                var part = parts[i];\n                if (part is RoutePatternParameterPart parameter && parameter.IsCatchAll && parts.Count > 1)\n                {\n                    context.Error = Resources.TemplateRoute_CannotHaveCatchAllInMultiSegment;\n                    return false;\n                }\n            }\n\n            // if a segment has multiple parts, then only the last one parameter can be optional \n            // if it is following a optional seperator. \n            for (var i = 0; i < parts.Count; i++)\n            {\n                var part = parts[i];\n\n                if (part is RoutePatternParameterPart parameter && parameter.IsOptional && parts.Count > 1)\n                {\n                    // This optional parameter is the last part in the segment\n                    if (i == parts.Count - 1)\n                    {\n                        var previousPart = parts[i - 1];\n\n                        if (!previousPart.IsLiteral && !previousPart.IsSeparator)\n                        {\n                            // The optional parameter is preceded by something that is not a literal or separator\n                            // Example of error message:\n                            // \"In the segment '{RouteValue}{param?}',\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static float ComboDamage(Obj_AI_Hero hero)\n        {\n            var dmg = 0d;\n\n            if (_q.IsReady())\n            {\n                if (_w.IsReady())\n                {\n                    dmg += _player.GetSpellDamage(hero, SpellSlot.Q) + (23 + 6.5*ObjectManager.Player.Level) +\n                           (1.2*_player.FlatMagicDamageMod);\n                }\n                else dmg += _player.GetSpellDamage(hero, SpellSlot.Q);\n            }\n\n            if (_e.IsReady())\n            {\n                if (_w.IsReady())\n                {\n                    dmg += _player.GetSpellDamage(hero, SpellSlot.E) + (23 + 6.5*ObjectManager.Player.Level) +\n                           (1.2*_player.FlatMagicDamageMod);\n                }\n                else dmg += _player.GetSpellDamage(hero, SpellSlot.E);\n            }\n            if (_r.IsReady())\n                dmg += _player.GetSpellDamage(hero, SpellSlot.R);\n            if (Items.HasItem(3153) && Items.CanUseItem(3153))\n                dmg += _player.GetItemDamage(hero, Damage.DamageItems.Botrk);\n            if (Items.HasItem(3146) && Items.CanUseItem(3146))\n                dmg += _player.GetItemDamage(hero, Damage.DamageItems.Hexgun);\n            if (ObjectManager.Player.HasBuff(\"LichBane\"))\n            {\n                dmg += _player.BaseAttackDamage * 0.75 + _player.FlatMagicDamageMod * 0.5;\n            }\n            if (ObjectManager.Player.GetSpellSlot(\"SummonerIgnite\") != SpellSlot.Unknown)\n            {\n         \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static float ComboDamage(Obj_AI_Hero hero)\n        {\n            var dmg = 0d;\n\n            if (_q.IsReady())\n            {\n                if (_w.IsReady())\n                {\n                    dmg += _player.GetSpellDamage(hero, SpellSlot.Q) + (23 + 6.5*ObjectManager.Player.Level) +\n                           (1.2*_player.FlatMagicDamageMod);\n                }\n                else dmg += _player.GetSpellDamage(hero, SpellSlot.Q);\n            }\n\n            if (_e.IsReady())\n            {\n                if (_w.IsReady())\n                {\n                    dmg += _player.GetSpellDamage(hero, SpellSlot.E) + (23 + 6.5*ObjectManager.Player.Level) +\n                           (1.2*_player.FlatMagicDamageMod);\n                }\n                else dmg += _player.GetSpellDamage(hero, SpellSlot.E);\n            }\n            if (_r.IsReady())\n                dmg += _player.GetSpellDamage(hero, SpellSlot.R);\n            if (Items.HasItem(3153) && Items.CanUseItem(3153))\n                dmg += _player.GetItemDamage(hero, Damage.DamageItems.Botrk);\n            if (Items.HasItem(3146) && Items.CanUseItem(3146))\n                dmg += _player.GetItemDamage(hero, Damage.DamageItems.Hexgun);\n            if (ObjectManager.Player.HasBuff(\"LichBane\"))\n            {\n                dmg += _player.BaseAttackDamage * 0.75 + _player.FlatMagicDamageMod * 0.5;\n            }\n            if (ObjectManager.Player.GetSpellSlot(\"SummonerIgnite\") != SpellSlot.Unknown)\n            {\n         \nAnswer: ComplexConditional_positive\n```"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion        \n\n        /// <summary>\n        /// Checks if the current file implements the html attribute interfaces and returns the appropriate html attributes\n        /// </summary>\n        /// <param name=\"file\"></param>\n        /// <returns></returns>\n        private static IDictionary<string, string> GetHtmlAttributes(IClientDependencyFile file)\n        {\n            IDictionary<string, string> attributes = new Dictionary<string, string>();\n\n            var htmlAttributes = file as IHaveHtmlAttributes;\n            if (htmlAttributes != null)\n            {\n                var fileWithAttributes = htmlAttributes;\n                attributes = fileWithAttributes.HtmlAttributes;\n\n                var parsing = file as IRequiresHtmlAttributesParsing;\n                if (parsing != null)\n                {\n                    //we need to parse the attributes into the dictionary\n                    HtmlAttributesStringParser.ParseIntoDictionary(parsing.HtmlAttributesAsString, attributes);                    \n                }                \n            }\n\n            //now we must ensure that the correct js/css attribute exist!\n            switch(file.DependencyType)\n            {\n                case ClientDependencyType.Javascript:\n                    if (!attributes.ContainsKey(\"type\") && ClientDependencySettings.Instance.HtmlCompatibility == \"html4\")\n                        attributes.Add(\"type\", \"text/javascript\");\n                    if (attributes.ContainsKey(\"src\"))\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion        \n\n        /// <summary>\n        /// Checks if the current file implements the html attribute interfaces and returns the appropriate html attributes\n        /// </summary>\n        /// <param name=\"file\"></param>\n        /// <returns></returns>\n        private static IDictionary<string, string> GetHtmlAttributes(IClientDependencyFile file)\n        {\n            IDictionary<string, string> attributes = new Dictionary<string, string>();\n\n            var htmlAttributes = file as IHaveHtmlAttributes;\n            if (htmlAttributes != null)\n            {\n                var fileWithAttributes = htmlAttributes;\n                attributes = fileWithAttributes.HtmlAttributes;\n\n                var parsing = file as IRequiresHtmlAttributesParsing;\n                if (parsing != null)\n                {\n                    //we need to parse the attributes into the dictionary\n                    HtmlAttributesStringParser.ParseIntoDictionary(parsing.HtmlAttributesAsString, attributes);                    \n                }                \n            }\n\n            //now we must ensure that the correct js/css attribute exist!\n            switch(file.DependencyType)\n            {\n                case ClientDependencyType.Javascript:\n                    if (!attributes.ContainsKey(\"type\") && ClientDependencySettings.Instance.HtmlCompatibility == \"html4\")\n                        attributes.Add(\"type\", \"text/javascript\");\n                    if (attributes.ContainsKey(\"src\"))\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// INCOMPLETE \n        // section begins at @ 9,820 in NumberThirteen_Lead.sng\n        private static void WriteRocksmithSngLevels(EndianBinaryWriter w, XML.SongLevel[] levels, Single songLength, List<PhraseIterationInfo> iterationInfo, ArrangementType arrangementType)\n        {\n            // output header\n            if (levels == null || levels.Length == 0)\n            {\n                w.Write(new byte[4]); // empty header\n                return;\n            }\n\n            // output header count\n            w.Write(levels.Length);\n\n            // output\n            foreach (var level in levels)\n            {\n                // level difficulty tag\n                w.Write(level.Difficulty);\n\n                // anchors\n                WriteRocksmithSngLevelAnchors(w, level.Anchors, level, iterationInfo, songLength);\n\n                // slide properties\n                WriteRockmithSngLevelSlideProperties(w, level.Notes);\n\n                // handshapes\n                WriteRocksmithSngLevelHandShapes(w, level.HandShapes, level, songLength);\n\n                // notes and chords\n                WriteRocksmithSngLevelNotes(w, iterationInfo, level.Notes, level.Chords, songLength, arrangementType);\n\n                var iterationNotes = new List<int>();\n                foreach (var iteration in iterationInfo)\n                {\n                    int num = 0;\n                    if (level.Notes != null)\n                    {\n                        num += level.Notes.Count(n => n.\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// INCOMPLETE \n        // section begins at @ 9,820 in NumberThirteen_Lead.sng\n        private static void WriteRocksmithSngLevels(EndianBinaryWriter w, XML.SongLevel[] levels, Single songLength, List<PhraseIterationInfo> iterationInfo, ArrangementType arrangementType)\n        {\n            // output header\n            if (levels == null || levels.Length == 0)\n            {\n                w.Write(new byte[4]); // empty header\n                return;\n            }\n\n            // output header count\n            w.Write(levels.Length);\n\n            // output\n            foreach (var level in levels)\n            {\n                // level difficulty tag\n                w.Write(level.Difficulty);\n\n                // anchors\n                WriteRocksmithSngLevelAnchors(w, level.Anchors, level, iterationInfo, songLength);\n\n                // slide properties\n                WriteRockmithSngLevelSlideProperties(w, level.Notes);\n\n                // handshapes\n                WriteRocksmithSngLevelHandShapes(w, level.HandShapes, level, songLength);\n\n                // notes and chords\n                WriteRocksmithSngLevelNotes(w, iterationInfo, level.Notes, level.Chords, songLength, arrangementType);\n\n                var iterationNotes = new List<int>();\n                foreach (var iteration in iterationInfo)\n                {\n                    int num = 0;\n                    if (level.Notes != null)\n                    {\n                        num += level.Notes.Count(n => n.\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override RuleOutcome EvaluateRule(VoatRuleContext context)\n        {\n            //bool isModerator = context.UserData.Information.Moderates.Any(x => x.Subverse.Equals(context.Subverse.Name, StringComparison.OrdinalIgnoreCase));\n            bool isModerator = ModeratorPermission.IsModerator(context.User, context.Subverse.Name, null);\n\n            // check posting quotas if user is posting to subs they do not moderate\n            if (!isModerator)\n            {\n                // reject if user has reached global daily submission quota\n                if (UserDailyGlobalPostingQuotaUsed(context))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your daily global submission quota\");\n                }\n\n                // reject if user has reached global hourly submission quota\n                if (UserHourlyGlobalPostingQuotaUsed(context))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your hourly global submission quota\");\n                }\n\n                // check if user has reached hourly posting quota for target subverse\n                if (UserHourlyPostingQuotaForSubUsed(context, context.Subverse.Name))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your hourly submission quota for this subverse\");\n                }\n\n                // check if user has reached daily posting quota for target subverse\n                if\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override RuleOutcome EvaluateRule(VoatRuleContext context)\n        {\n            //bool isModerator = context.UserData.Information.Moderates.Any(x => x.Subverse.Equals(context.Subverse.Name, StringComparison.OrdinalIgnoreCase));\n            bool isModerator = ModeratorPermission.IsModerator(context.User, context.Subverse.Name, null);\n\n            // check posting quotas if user is posting to subs they do not moderate\n            if (!isModerator)\n            {\n                // reject if user has reached global daily submission quota\n                if (UserDailyGlobalPostingQuotaUsed(context))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your daily global submission quota\");\n                }\n\n                // reject if user has reached global hourly submission quota\n                if (UserHourlyGlobalPostingQuotaUsed(context))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your hourly global submission quota\");\n                }\n\n                // check if user has reached hourly posting quota for target subverse\n                if (UserHourlyPostingQuotaForSubUsed(context, context.Subverse.Name))\n                {\n                    return CreateOutcome(RuleResult.Denied, \"You have reached your hourly submission quota for this subverse\");\n                }\n\n                // check if user has reached daily posting quota for target subverse\n                if\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nvoid PopulateBlockHeaders(HashSet<Instruction> blockHeaders, HashSet<Instruction> entryHeaders) {\n\t\t\tfor (int i = 0; i < body.Instructions.Count; i++) {\n\t\t\t\tInstruction instr = body.Instructions[i];\n\n\t\t\t\tif (instr.Operand is Instruction) {\n\t\t\t\t\tblockHeaders.Add((Instruction)instr.Operand);\n\t\t\t\t\tif (i + 1 < body.Instructions.Count)\n\t\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t\telse if (instr.Operand is Instruction[]) {\n\t\t\t\t\tforeach (Instruction target in (Instruction[])instr.Operand)\n\t\t\t\t\t\tblockHeaders.Add(target);\n\t\t\t\t\tif (i + 1 < body.Instructions.Count)\n\t\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t\telse if ((instr.OpCode.FlowControl == FlowControl.Throw || instr.OpCode.FlowControl == FlowControl.Return) &&\n\t\t\t\t         i + 1 < body.Instructions.Count) {\n\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tblockHeaders.Add(body.Instructions[0]);\n\t\t\tforeach (ExceptionHandler eh in body.ExceptionHandlers) {\n\t\t\t\tblockHeaders.Add(eh.TryStart);\n\t\t\t\tblockHeaders.Add(eh.HandlerStart);\n\t\t\t\tblockHeaders.Add(eh.FilterStart);\n\t\t\t\tentryHeaders.Add(eh.HandlerStart);\n\t\t\t\tentryHeaders.Add(eh.FilterStart);\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nvoid PopulateBlockHeaders(HashSet<Instruction> blockHeaders, HashSet<Instruction> entryHeaders) {\n\t\t\tfor (int i = 0; i < body.Instructions.Count; i++) {\n\t\t\t\tInstruction instr = body.Instructions[i];\n\n\t\t\t\tif (instr.Operand is Instruction) {\n\t\t\t\t\tblockHeaders.Add((Instruction)instr.Operand);\n\t\t\t\t\tif (i + 1 < body.Instructions.Count)\n\t\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t\telse if (instr.Operand is Instruction[]) {\n\t\t\t\t\tforeach (Instruction target in (Instruction[])instr.Operand)\n\t\t\t\t\t\tblockHeaders.Add(target);\n\t\t\t\t\tif (i + 1 < body.Instructions.Count)\n\t\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t\telse if ((instr.OpCode.FlowControl == FlowControl.Throw || instr.OpCode.FlowControl == FlowControl.Return) &&\n\t\t\t\t         i + 1 < body.Instructions.Count) {\n\t\t\t\t\tblockHeaders.Add(body.Instructions[i + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tblockHeaders.Add(body.Instructions[0]);\n\t\t\tforeach (ExceptionHandler eh in body.ExceptionHandlers) {\n\t\t\t\tblockHeaders.Add(eh.TryStart);\n\t\t\t\tblockHeaders.Add(eh.HandlerStart);\n\t\t\t\tblockHeaders.Add(eh.FilterStart);\n\t\t\t\tentryHeaders.Add(eh.HandlerStart);\n\t\t\t\tentryHeaders.Add(eh.FilterStart);\n\t\t\t}\n\t\t}\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Save settings\n        /// </summary>\n        public void Save()\n        {\n            if (_instance == null)\n                return;\n\n            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n            string fileName = Path.GetFileNameWithoutExtension(Application.ExecutablePath);\n\n            // Write the global settings file\n            using (XmlWriter writer = XmlWriter.Create(path + Path.DirectorySeparatorChar + fileName + \".xml\"))\n            {\n                writer.WriteStartDocument();\n                writer.WriteStartElement(\"ApplicationSettings\");\n\n                foreach (PropertyInfo property in _instance.GetType().GetProperties())\n                {\n                    if (property.CanRead && _globalProperties.Contains(property.Name))\n                    {\n                        writer.WriteElementString(property.Name, \"\" + property.GetValue(_instance));\n                    }\n                }\n\n                writer.WriteEndElement();\n                writer.WriteEndDocument();\n            }\n\n            // Write the hardware key file\n            File.WriteAllText(_instance.LibraryPath + \"\\\\hardwarekey\", _instance.HardwareKey);\n\n            // Write the player settings file\n            using (XmlWriter writer = XmlWriter.Create(_instance.LibraryPath + \"\\\\config.xml\"))\n            {\n                writer.WriteStartDocument();\n                writer.WriteStartElement(\"PlayerSettings\");\n\n           \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Save settings\n        /// </summary>\n        public void Save()\n        {\n            if (_instance == null)\n                return;\n\n            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n            string fileName = Path.GetFileNameWithoutExtension(Application.ExecutablePath);\n\n            // Write the global settings file\n            using (XmlWriter writer = XmlWriter.Create(path + Path.DirectorySeparatorChar + fileName + \".xml\"))\n            {\n                writer.WriteStartDocument();\n                writer.WriteStartElement(\"ApplicationSettings\");\n\n                foreach (PropertyInfo property in _instance.GetType().GetProperties())\n                {\n                    if (property.CanRead && _globalProperties.Contains(property.Name))\n                    {\n                        writer.WriteElementString(property.Name, \"\" + property.GetValue(_instance));\n                    }\n                }\n\n                writer.WriteEndElement();\n                writer.WriteEndDocument();\n            }\n\n            // Write the hardware key file\n            File.WriteAllText(_instance.LibraryPath + \"\\\\hardwarekey\", _instance.HardwareKey);\n\n            // Write the player settings file\n            using (XmlWriter writer = XmlWriter.Create(_instance.LibraryPath + \"\\\\config.xml\"))\n            {\n                writer.WriteStartDocument();\n                writer.WriteStartElement(\"PlayerSettings\");\n\n           \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Accept(ITextControl textControl, TextRange nameRange, LookupItemInsertType lookupItemInsertType, Suffix suffix, ISolution solution, bool keepCaretStill)\n      {\n        /* PLEASE DO NOT OBSERVE THIS */\n        string text;\n\n        if (lookupItemInsertType == LookupItemInsertType.Insert)\n        {\n          if (Info.InsertText.IndexOf(')') == -1) Info.InsertText += \")\";\n\n          text = Info.Text + Info.InsertText;\n          textControl.Document.ReplaceText(Info.Ranges.InsertRange.JoinRight(nameRange), text);\n        }\n        else\n        {\n          if (Info.ReplaceText.IndexOf(')') == -1) Info.ReplaceText += \")\";\n\n          text = Info.Text + Info.ReplaceText;\n          textControl.Document.ReplaceText(Info.Ranges.ReplaceRange.JoinRight(nameRange), text);\n        }\n\n        var tailType = Info.TailType;\n        if (tailType != null)\n        {\n          LookupUtil.InsertTailType(textControl, nameRange.StartOffset + text.Length, tailType, solution, emulateTypingOfSpace: false);\n        }\n\n        /* PLEASE DO NOT OBSERVE THIS */\n\n        var psiServices = solution.GetPsiServices();\n        psiServices.Files.CommitAllDocuments();\n\n        var referenceExpression = TextControlToPsi.GetElement<IReferenceExpression>(solution, textControl.Document, nameRange.StartOffset);\n        if (referenceExpression == null || myMethods.Count == 0) return;\n\n        var existingArgumentsCount = GetExistingArgumentsCount(referenceExpression);\n        var referencePointer = referenc\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Accept(ITextControl textControl, TextRange nameRange, LookupItemInsertType lookupItemInsertType, Suffix suffix, ISolution solution, bool keepCaretStill)\n      {\n        /* PLEASE DO NOT OBSERVE THIS */\n        string text;\n\n        if (lookupItemInsertType == LookupItemInsertType.Insert)\n        {\n          if (Info.InsertText.IndexOf(')') == -1) Info.InsertText += \")\";\n\n          text = Info.Text + Info.InsertText;\n          textControl.Document.ReplaceText(Info.Ranges.InsertRange.JoinRight(nameRange), text);\n        }\n        else\n        {\n          if (Info.ReplaceText.IndexOf(')') == -1) Info.ReplaceText += \")\";\n\n          text = Info.Text + Info.ReplaceText;\n          textControl.Document.ReplaceText(Info.Ranges.ReplaceRange.JoinRight(nameRange), text);\n        }\n\n        var tailType = Info.TailType;\n        if (tailType != null)\n        {\n          LookupUtil.InsertTailType(textControl, nameRange.StartOffset + text.Length, tailType, solution, emulateTypingOfSpace: false);\n        }\n\n        /* PLEASE DO NOT OBSERVE THIS */\n\n        var psiServices = solution.GetPsiServices();\n        psiServices.Files.CommitAllDocuments();\n\n        var referenceExpression = TextControlToPsi.GetElement<IReferenceExpression>(solution, textControl.Document, nameRange.StartOffset);\n        if (referenceExpression == null || myMethods.Count == 0) return;\n\n        var existingArgumentsCount = GetExistingArgumentsCount(referenceExpression);\n        var referencePointer = referenc\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate PagingResource<QueueResource> GetQueue(PagingResource<QueueResource> pagingResource)\n        {\n            var pagingSpec = pagingResource.MapToPagingSpec<QueueResource, NzbDrone.Core.Queue.Queue>(\"timeleft\", SortDirection.Ascending);\n            var includeUnknownSeriesItems = Request.GetBooleanQueryParameter(\"includeUnknownSeriesItems\");\n            var includeSeries = Request.GetBooleanQueryParameter(\"includeSeries\");\n            var includeEpisode = Request.GetBooleanQueryParameter(\"includeEpisode\");\n\n            return ApplyToPage((spec) => GetQueue(spec, includeUnknownSeriesItems), pagingSpec, (q) => MapToResource(q, includeSeries, includeEpisode));\n        }private PagingSpec<NzbDrone.Core.Queue.Queue> GetQueue(PagingSpec<NzbDrone.Core.Queue.Queue> pagingSpec, bool includeUnknownSeriesItems)\n        {\n            var ascending = pagingSpec.SortDirection == SortDirection.Ascending;\n            var orderByFunc = GetOrderByFunc(pagingSpec);\n\n            var queue = _queueService.GetQueue();\n            var filteredQueue = includeUnknownSeriesItems ? queue : queue.Where(q => q.Series != null);\n            var pending = _pendingReleaseService.GetPendingQueue();\n            var fullQueue = filteredQueue.Concat(pending).ToList();\n            IOrderedEnumerable<NzbDrone.Core.Queue.Queue> ordered;\n\n            if (pagingSpec.SortKey == \"episode\")\n            {\n                ordered = ascending\n                    ? fullQueue.OrderBy(q => q.Episode?.SeasonNumber).ThenB\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate PagingResource<QueueResource> GetQueue(PagingResource<QueueResource> pagingResource)\n        {\n            var pagingSpec = pagingResource.MapToPagingSpec<QueueResource, NzbDrone.Core.Queue.Queue>(\"timeleft\", SortDirection.Ascending);\n            var includeUnknownSeriesItems = Request.GetBooleanQueryParameter(\"includeUnknownSeriesItems\");\n            var includeSeries = Request.GetBooleanQueryParameter(\"includeSeries\");\n            var includeEpisode = Request.GetBooleanQueryParameter(\"includeEpisode\");\n\n            return ApplyToPage((spec) => GetQueue(spec, includeUnknownSeriesItems), pagingSpec, (q) => MapToResource(q, includeSeries, includeEpisode));\n        }private PagingSpec<NzbDrone.Core.Queue.Queue> GetQueue(PagingSpec<NzbDrone.Core.Queue.Queue> pagingSpec, bool includeUnknownSeriesItems)\n        {\n            var ascending = pagingSpec.SortDirection == SortDirection.Ascending;\n            var orderByFunc = GetOrderByFunc(pagingSpec);\n\n            var queue = _queueService.GetQueue();\n            var filteredQueue = includeUnknownSeriesItems ? queue : queue.Where(q => q.Series != null);\n            var pending = _pendingReleaseService.GetPendingQueue();\n            var fullQueue = filteredQueue.Concat(pending).ToList();\n            IOrderedEnumerable<NzbDrone.Core.Queue.Queue> ordered;\n\n            if (pagingSpec.SortKey == \"episode\")\n            {\n                ordered = ascending\n                    ? fullQueue.OrderBy(q => q.Episode?.SeasonNumber).ThenB\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Both &lt;Issuer> and &lt;NameID> are of NameIDType. This method reads\n        /// the content of either one of those elements.\n        /// </summary>\n        /// <param name=\"reader\">A <see cref=\"XmlReader\"/> positioned at a <see cref=\"Saml2NameIdentifier\"/> element.</param>\n        /// <returns>An instance of <see cref=\"Saml2NameIdentifier\"/></returns>\n        internal Saml2NameIdentifier ReadNameIdType(XmlDictionaryReader reader)\n        {\n            // check that reader is on correct element is made by caller\n            try\n            {\n                // @xsi:type\n                XmlUtil.ValidateXsiType(reader, Saml2Constants.Types.NameIDType, Saml2Constants.Namespace);\n\n                var nameIdentifier = new Saml2NameIdentifier(\"__TemporaryName__\");\n                // @Format - optional\n                string value = reader.GetAttribute(Saml2Constants.Attributes.Format);\n                if (!string.IsNullOrEmpty(value))\n                {\n                    if (!CanCreateValidUri(value, UriKind.Absolute))\n                        throw LogReadException(LogMessages.IDX13107, Saml2Constants.Types.NameIDType, Saml2Constants.Attributes.Format, value);\n\n                    nameIdentifier.Format = new Uri(value);\n                }\n\n                // @NameQualifier - optional\n                value = reader.GetAttribute(Saml2Constants.Attributes.NameQualifier);\n                if (!string.IsNullOrEmpty(value))\n                    nameIdentifier.Nam\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Both &lt;Issuer> and &lt;NameID> are of NameIDType. This method reads\n        /// the content of either one of those elements.\n        /// </summary>\n        /// <param name=\"reader\">A <see cref=\"XmlReader\"/> positioned at a <see cref=\"Saml2NameIdentifier\"/> element.</param>\n        /// <returns>An instance of <see cref=\"Saml2NameIdentifier\"/></returns>\n        internal Saml2NameIdentifier ReadNameIdType(XmlDictionaryReader reader)\n        {\n            // check that reader is on correct element is made by caller\n            try\n            {\n                // @xsi:type\n                XmlUtil.ValidateXsiType(reader, Saml2Constants.Types.NameIDType, Saml2Constants.Namespace);\n\n                var nameIdentifier = new Saml2NameIdentifier(\"__TemporaryName__\");\n                // @Format - optional\n                string value = reader.GetAttribute(Saml2Constants.Attributes.Format);\n                if (!string.IsNullOrEmpty(value))\n                {\n                    if (!CanCreateValidUri(value, UriKind.Absolute))\n                        throw LogReadException(LogMessages.IDX13107, Saml2Constants.Types.NameIDType, Saml2Constants.Attributes.Format, value);\n\n                    nameIdentifier.Format = new Uri(value);\n                }\n\n                // @NameQualifier - optional\n                value = reader.GetAttribute(Saml2Constants.Attributes.NameQualifier);\n                if (!string.IsNullOrEmpty(value))\n                    nameIdentifier.Nam\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnInit(EventArgs e)\n\t\t{\n\t\t\tbase.OnInit(e);\n\n\t\t\t_Table = new Table();\n\n\t\t\t_tableRow = new TableRow();\n\n\t\t\t_tCellFirst = new TableCell {VerticalAlign = VerticalAlign.Top, Width = 260};\n\t\t\t_tableRow.Cells.Add(_tCellFirst);\n\t\t\t_tCellSecond = new TableCell {VerticalAlign = VerticalAlign.Middle};\n\t\t\t_tableRow.Cells.Add(_tCellSecond);\n\t\t\t_tCellThird = new TableCell {VerticalAlign = VerticalAlign.Top, Width = 260};\n\t\t\t_tableRow.Cells.Add(_tCellThird);\n\n\t\t\t_Table.Rows.Add(_tableRow);\n\n\n\t\t\tvar items = StoreHelper.GetAllCountries().Select(country => new ListItem(country.Name, country.Code)).OrderBy(x => x.Text).ToList();\n\t\t\tvar selectedItems = GetSelectedCountries().Select(country => new ListItem(country.Name, country.Code)).OrderBy(x => x.Text).ToList();\n\n\t\t\tforeach (var selectedItem in selectedItems)\n\t\t\t{\n\t\t\t\tif (items.Contains(selectedItem))\n\t\t\t\t{\n\t\t\t\t\titems.Remove(selectedItem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_lbAllItems = new ListBox {SelectionMode = ListSelectionMode.Multiple, Width = 250, Rows = 10};\n\t\t\tforeach (var item in items)\n\t\t\t{\n\t\t\t\t_lbAllItems.Items.Add(new ListItem(item.Text, item.Value));\n\t\t\t}\n\t\t\t_lbAllItems.DataBind();\n\n\t\t\tvar allItemsText = library.GetDictionaryItem(\"AllItems\");\n\t\t\tif (string.IsNullOrEmpty(allItemsText))\n\t\t\t{\n\t\t\t\tallItemsText = \"All items\";\n\t\t\t}\n\n\t\t\t_lblAllItems = new Label {Text = allItemsText, AssociatedControlID = _lbAllItems.ID};\n\n\n\t\t\tvar addText = library.GetDictionaryItem(\"Add\");\n\t\t\tif (string.IsNullOrEmpty(addText))\n\t\t\t{\n\t\t\t\taddText = \"\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "AddText\"",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnInit(EventArgs e)\n\t\t{\n\t\t\tbase.OnInit(e);\n\n\t\t\t_Table = new Table();\n\n\t\t\t_tableRow = new TableRow();\n\n\t\t\t_tCellFirst = new TableCell {VerticalAlign = VerticalAlign.Top, Width = 260};\n\t\t\t_tableRow.Cells.Add(_tCellFirst);\n\t\t\t_tCellSecond = new TableCell {VerticalAlign = VerticalAlign.Middle};\n\t\t\t_tableRow.Cells.Add(_tCellSecond);\n\t\t\t_tCellThird = new TableCell {VerticalAlign = VerticalAlign.Top, Width = 260};\n\t\t\t_tableRow.Cells.Add(_tCellThird);\n\n\t\t\t_Table.Rows.Add(_tableRow);\n\n\n\t\t\tvar items = StoreHelper.GetAllCountries().Select(country => new ListItem(country.Name, country.Code)).OrderBy(x => x.Text).ToList();\n\t\t\tvar selectedItems = GetSelectedCountries().Select(country => new ListItem(country.Name, country.Code)).OrderBy(x => x.Text).ToList();\n\n\t\t\tforeach (var selectedItem in selectedItems)\n\t\t\t{\n\t\t\t\tif (items.Contains(selectedItem))\n\t\t\t\t{\n\t\t\t\t\titems.Remove(selectedItem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_lbAllItems = new ListBox {SelectionMode = ListSelectionMode.Multiple, Width = 250, Rows = 10};\n\t\t\tforeach (var item in items)\n\t\t\t{\n\t\t\t\t_lbAllItems.Items.Add(new ListItem(item.Text, item.Value));\n\t\t\t}\n\t\t\t_lbAllItems.DataBind();\n\n\t\t\tvar allItemsText = library.GetDictionaryItem(\"AllItems\");\n\t\t\tif (string.IsNullOrEmpty(allItemsText))\n\t\t\t{\n\t\t\t\tallItemsText = \"All items\";\n\t\t\t}\n\n\t\t\t_lblAllItems = new Label {Text = allItemsText, AssociatedControlID = _lbAllItems.ID};\n\n\n\t\t\tvar addText = library.GetDictionaryItem(\"Add\");\n\t\t\tif (string.IsNullOrEmpty(addText))\n\t\t\t{\n\t\t\t\taddText = \"\nAnswer: AddText\"\n\t\t\t;"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Get the first annotation object of the specified type from this PartContainer.\n        /// </summary>\n        /// <typeparam name=\"T\">The type of the annotation to retrieve.</typeparam>\n        /// <returns>The first annotation object of the specified type.</returns>\n        public T Annotation<T>() where T : class\n        {\n            if (_annotations != null)\n            {\n                var annotations = _annotations as object[];\n\n                if (annotations == null)\n                {\n                    return _annotations as T;\n                }\n\n                for (var i = 0; i < annotations.Length; i++)\n                {\n                    var obj = annotations[i];\n\n                    if (obj == null)\n                    {\n                        break;\n                    }\n\n                    if (obj is T t)\n                    {\n                        return t;\n                    }\n                }\n            }\n\n            return null;\n        }/// <summary>\n        /// Get the first annotation object of the specified type from this PartContainer.\n        /// </summary>\n        /// <param name=\"type\">The type of the annotation to retrieve.</param>\n        /// <returns>The first annotation object of the specified type.</returns>\n        public object Annotation(Type type)\n        {\n            if (type == null)\n            {\n                throw new ArgumentNullException(nameof(type));\n            }\n\n            if (_annotati\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Get the first annotation object of the specified type from this PartContainer.\n        /// </summary>\n        /// <typeparam name=\"T\">The type of the annotation to retrieve.</typeparam>\n        /// <returns>The first annotation object of the specified type.</returns>\n        public T Annotation<T>() where T : class\n        {\n            if (_annotations != null)\n            {\n                var annotations = _annotations as object[];\n\n                if (annotations == null)\n                {\n                    return _annotations as T;\n                }\n\n                for (var i = 0; i < annotations.Length; i++)\n                {\n                    var obj = annotations[i];\n\n                    if (obj == null)\n                    {\n                        break;\n                    }\n\n                    if (obj is T t)\n                    {\n                        return t;\n                    }\n                }\n            }\n\n            return null;\n        }/// <summary>\n        /// Get the first annotation object of the specified type from this PartContainer.\n        /// </summary>\n        /// <param name=\"type\">The type of the annotation to retrieve.</param>\n        /// <returns>The first annotation object of the specified type.</returns>\n        public object Annotation(Type type)\n        {\n            if (type == null)\n            {\n                throw new ArgumentNullException(nameof(type));\n            }\n\n            if (_annotati\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Executes the specified workflow.\n        /// </summary>\n        /// <param name=\"rockContext\">The rock context.</param>\n        /// <param name=\"action\">The action.</param>\n        /// <param name=\"entity\">The entity.</param>\n        /// <param name=\"errorMessages\">The error messages.</param>\n        /// <returns></returns>\n        public override bool Execute( RockContext rockContext, WorkflowAction action, Object entity, out List<string> errorMessages )\n        {\n            errorMessages = new List<string>();\n            var workflowTypeGuid = GetAttributeValue( action, \"WorkflowType\" ).AsGuidOrNull();\n            var workflowTypeFromAttributeGuid = GetAttributeValue( action, \"WorkflowTypefromAttribute\", true ).AsGuidOrNull();\n            var workflowName = GetAttributeValue( action, \"WorkflowName\" );\n\n            WorkflowTypeCache workflowType = null;\n\n            if ( workflowTypeGuid.HasValue )\n            {\n                workflowType = WorkflowTypeCache.Get( workflowTypeGuid.Value );\n            }\n            else if ( workflowTypeFromAttributeGuid.HasValue )\n            {\n                workflowType = WorkflowTypeCache.Get( workflowTypeFromAttributeGuid.Value );\n            }\n\n            if ( workflowType == null )\n            {\n                errorMessages.Add( \"Workflow type is required\" );\n                return false;\n            }\n\n            if ( string.IsNullOrEmpty( workflowName ) )\n            {\n                errorMessages.Ad\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Executes the specified workflow.\n        /// </summary>\n        /// <param name=\"rockContext\">The rock context.</param>\n        /// <param name=\"action\">The action.</param>\n        /// <param name=\"entity\">The entity.</param>\n        /// <param name=\"errorMessages\">The error messages.</param>\n        /// <returns></returns>\n        public override bool Execute( RockContext rockContext, WorkflowAction action, Object entity, out List<string> errorMessages )\n        {\n            errorMessages = new List<string>();\n            var workflowTypeGuid = GetAttributeValue( action, \"WorkflowType\" ).AsGuidOrNull();\n            var workflowTypeFromAttributeGuid = GetAttributeValue( action, \"WorkflowTypefromAttribute\", true ).AsGuidOrNull();\n            var workflowName = GetAttributeValue( action, \"WorkflowName\" );\n\n            WorkflowTypeCache workflowType = null;\n\n            if ( workflowTypeGuid.HasValue )\n            {\n                workflowType = WorkflowTypeCache.Get( workflowTypeGuid.Value );\n            }\n            else if ( workflowTypeFromAttributeGuid.HasValue )\n            {\n                workflowType = WorkflowTypeCache.Get( workflowTypeFromAttributeGuid.Value );\n            }\n\n            if ( workflowType == null )\n            {\n                errorMessages.Add( \"Workflow type is required\" );\n                return false;\n            }\n\n            if ( string.IsNullOrEmpty( workflowName ) )\n            {\n                errorMessages.Ad\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n                /// Gets the index of the child.\n                /// </summary>\n                /// <param name=\"index\">The index.</param>\n                /// <returns></returns>\n                [MethodImpl(MethodImplOptions.AggressiveInlining)]\n                public int GetChildIndex(int index)\n                {\n                    switch (index)\n                    {\n                        case 0: return c0;\n                        case 1: return c1;\n                        case 2: return c2;\n                        case 3: return c3;\n                        case 4: return c4;\n                        case 5: return c5;\n                        case 6: return c6;\n                        case 7: return c7;\n                        default:\n                            return -1;\n                    }\n                }\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n                /// Gets the index of the child.\n                /// </summary>\n                /// <param name=\"index\">The index.</param>\n                /// <returns></returns>\n                [MethodImpl(MethodImplOptions.AggressiveInlining)]\n                public int GetChildIndex(int index)\n                {\n                    switch (index)\n                    {\n                        case 0: return c0;\n                        case 1: return c1;\n                        case 2: return c2;\n                        case 3: return c3;\n                        case 4: return c4;\n                        case 5: return c5;\n                        case 6: return c6;\n                        case 7: return c7;\n                        default:\n                            return -1;\n                    }\n                }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SetToken(JToken token)\n        {\n            switch (token.Type)\n            {\n                case JTokenType.Object:\n                    SetToken(JsonToken.StartObject);\n                    break;\n                case JTokenType.Array:\n                    SetToken(JsonToken.StartArray);\n                    break;\n                case JTokenType.Constructor:\n                    SetToken(JsonToken.StartConstructor, ((JConstructor)token).Name);\n                    break;\n                case JTokenType.Property:\n                    SetToken(JsonToken.PropertyName, ((JProperty)token).Name);\n                    break;\n                case JTokenType.Comment:\n                    SetToken(JsonToken.Comment, ((JValue)token).Value);\n                    break;\n                case JTokenType.Integer:\n                    SetToken(JsonToken.Integer, ((JValue)token).Value);\n                    break;\n                case JTokenType.Float:\n                    SetToken(JsonToken.Float, ((JValue)token).Value);\n                    break;\n                case JTokenType.String:\n                    SetToken(JsonToken.String, ((JValue)token).Value);\n                    break;\n                case JTokenType.Boolean:\n                    SetToken(JsonToken.Boolean, ((JValue)token).Value);\n                    break;\n                case JTokenType.Null:\n                    SetToken(JsonToken.Null, ((JValue)token).Value);\n                    break;\n                case JTokenType.Unde\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SetToken(JToken token)\n        {\n            switch (token.Type)\n            {\n                case JTokenType.Object:\n                    SetToken(JsonToken.StartObject);\n                    break;\n                case JTokenType.Array:\n                    SetToken(JsonToken.StartArray);\n                    break;\n                case JTokenType.Constructor:\n                    SetToken(JsonToken.StartConstructor, ((JConstructor)token).Name);\n                    break;\n                case JTokenType.Property:\n                    SetToken(JsonToken.PropertyName, ((JProperty)token).Name);\n                    break;\n                case JTokenType.Comment:\n                    SetToken(JsonToken.Comment, ((JValue)token).Value);\n                    break;\n                case JTokenType.Integer:\n                    SetToken(JsonToken.Integer, ((JValue)token).Value);\n                    break;\n                case JTokenType.Float:\n                    SetToken(JsonToken.Float, ((JValue)token).Value);\n                    break;\n                case JTokenType.String:\n                    SetToken(JsonToken.String, ((JValue)token).Value);\n                    break;\n                case JTokenType.Boolean:\n                    SetToken(JsonToken.Boolean, ((JValue)token).Value);\n                    break;\n                case JTokenType.Null:\n                    SetToken(JsonToken.Null, ((JValue)token).Value);\n                    break;\n                case JTokenType.Unde\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Serialize(ref JsonWriter writer, DateTimeOffset value, IJsonFormatterResolver formatterResolver)\n        {\n            var year = value.Year;\n            var month = value.Month;\n            var day = value.Day;\n            var hour = value.Hour;\n            var minute = value.Minute;\n            var second = value.Second;\n            var nanosec = value.Ticks % TimeSpan.TicksPerSecond;\n\n            const int baseLength = 19 + 2; // {YEAR}-{MONTH}-{DAY}T{Hour}:{Minute}:{Second} + quotation\n            const int nanosecLength = 8; // .{nanoseconds}\n\n            // +{Hour}:{Minute}\n            writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength) + 6);\n\n            writer.WriteRawUnsafe((byte)'\\\"');\n\n            if (year < 10)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            else if (year < 100)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            else if (year < 1000)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            writer.WriteInt32(year);\n            writer.WriteRawUnsafe((byte)'-');\n\n            if (month < 10)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            writer.WriteInt32(month);\n            writer.WriteRawUnsafe((byte)'-');\n\n         \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Serialize(ref JsonWriter writer, DateTimeOffset value, IJsonFormatterResolver formatterResolver)\n        {\n            var year = value.Year;\n            var month = value.Month;\n            var day = value.Day;\n            var hour = value.Hour;\n            var minute = value.Minute;\n            var second = value.Second;\n            var nanosec = value.Ticks % TimeSpan.TicksPerSecond;\n\n            const int baseLength = 19 + 2; // {YEAR}-{MONTH}-{DAY}T{Hour}:{Minute}:{Second} + quotation\n            const int nanosecLength = 8; // .{nanoseconds}\n\n            // +{Hour}:{Minute}\n            writer.EnsureCapacity(baseLength + ((nanosec == 0) ? 0 : nanosecLength) + 6);\n\n            writer.WriteRawUnsafe((byte)'\\\"');\n\n            if (year < 10)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            else if (year < 100)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            else if (year < 1000)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            writer.WriteInt32(year);\n            writer.WriteRawUnsafe((byte)'-');\n\n            if (month < 10)\n            {\n                writer.WriteRawUnsafe((byte)'0');\n            }\n            writer.WriteInt32(month);\n            writer.WriteRawUnsafe((byte)'-');\n\n         \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void HandleMouse(ref INTs.IRQContext context)\n        {\n            if (mMouseCycle == 0)\n            {\n                mMouseByte[0] = IO.Data.Byte;\n\n                //Bit 3 of byte 0 is 1, then we have a good package\n                if ((mMouseByte[0] & (1 << 3)) == (1 << 3))\n                {\n                    mMouseCycle++;\n                }\n            }\n            else if (mMouseCycle == 1)\n            {\n                mMouseByte[1] = IO.Data.Byte;\n                mMouseCycle++;\n            }\n            else if (mMouseCycle == 2)\n            {\n                mMouseByte[2] = IO.Data.Byte;\n\n                if (HasScrollWheel)\n                {\n                    mMouseCycle++;\n                }\n            }\n\n            // TODO: move conditions to the if statement when stack corruption detection\n            //       works better for complex conditions\n            var xTest1 = (mMouseCycle == 2 && !HasScrollWheel);\n            var xTest2 = (mMouseCycle == 3 && HasScrollWheel);\n\n            if (xTest1 || xTest2)\n            {\n                int xDeltaX = 0;\n                int xDeltaY = 0;\n                int xScrollWheel = 0;\n                int xMouseState;\n\n                if ((mMouseByte[0] & (1 << 4)) == (1 << 4))\n                {\n                    xDeltaX = (mMouseByte[1] | ~0xFF);\n                }\n                else\n                {\n                    xDeltaX = mMouseByte[1];\n                }\n\n                if ((mMouseByte[0] & (1 << 5)) ==\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void HandleMouse(ref INTs.IRQContext context)\n        {\n            if (mMouseCycle == 0)\n            {\n                mMouseByte[0] = IO.Data.Byte;\n\n                //Bit 3 of byte 0 is 1, then we have a good package\n                if ((mMouseByte[0] & (1 << 3)) == (1 << 3))\n                {\n                    mMouseCycle++;\n                }\n            }\n            else if (mMouseCycle == 1)\n            {\n                mMouseByte[1] = IO.Data.Byte;\n                mMouseCycle++;\n            }\n            else if (mMouseCycle == 2)\n            {\n                mMouseByte[2] = IO.Data.Byte;\n\n                if (HasScrollWheel)\n                {\n                    mMouseCycle++;\n                }\n            }\n\n            // TODO: move conditions to the if statement when stack corruption detection\n            //       works better for complex conditions\n            var xTest1 = (mMouseCycle == 2 && !HasScrollWheel);\n            var xTest2 = (mMouseCycle == 3 && HasScrollWheel);\n\n            if (xTest1 || xTest2)\n            {\n                int xDeltaX = 0;\n                int xDeltaY = 0;\n                int xScrollWheel = 0;\n                int xMouseState;\n\n                if ((mMouseByte[0] & (1 << 4)) == (1 << 4))\n                {\n                    xDeltaX = (mMouseByte[1] | ~0xFF);\n                }\n                else\n                {\n                    xDeltaX = mMouseByte[1];\n                }\n\n                if ((mMouseByte[0] & (1 << 5)) ==\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates a new name by parsing 'original' and replacing pieces or adding to it.</summary>\n        /// <param name=\"original\">The original name. Can't be null.</param>\n        /// <param name=\"prefix\">Optional prefix that is placed at the beginning of the result. Can be null.\n        /// If 'original' already has the prefix, it won't be added a 2nd time.</param>\n        /// <param name=\"baseName\">Optional base name that is concatenated with the prefix. If null, then\n        /// the corresponding part of 'original' is used, otherwise 'original' is ignored.</param>\n        /// <param name=\"suffix\">Optional suffix that is placed after the base name. Can be null.</param>\n        /// <param name=\"numericSuffix\">Optional numeric suffix that is placed after 'suffix'.\n        /// If negative, then this parameter is ignored. If non-negative, then any existing numeric\n        /// suffix on 'original' will be removed.</param>\n        /// <returns>The new name</returns>\n        /// <note>I considered using a nullable 'long' for numericSuffix, but it's less convenient for\n        /// the caller and for unit tests, and I think that negative #s for suffixes are very rare. --Ron</note>\n        public static string Rename(string original,\n            string prefix, string baseName, string suffix, long numericSuffix = -1)\n        {\n            // Do we keep the existing base? If not, then set original to be just the base portion.\n            if (baseName != null)\n      \nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "None",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates a new name by parsing 'original' and replacing pieces or adding to it.</summary>\n        /// <param name=\"original\">The original name. Can't be null.</param>\n        /// <param name=\"prefix\">Optional prefix that is placed at the beginning of the result. Can be null.\n        /// If 'original' already has the prefix, it won't be added a 2nd time.</param>\n        /// <param name=\"baseName\">Optional base name that is concatenated with the prefix. If null, then\n        /// the corresponding part of 'original' is used, otherwise 'original' is ignored.</param>\n        /// <param name=\"suffix\">Optional suffix that is placed after the base name. Can be null.</param>\n        /// <param name=\"numericSuffix\">Optional numeric suffix that is placed after 'suffix'.\n        /// If negative, then this parameter is ignored. If non-negative, then any existing numeric\n        /// suffix on 'original' will be removed.</param>\n        /// <returns>The new name</returns>\n        /// <note>I considered using a nullable 'long' for numericSuffix, but it's less convenient for\n        /// the caller and for unit tests, and I think that negative #s for suffixes are very rare. --Ron</note>\n        public static string Rename(string original,\n            string prefix, string baseName, string suffix, long numericSuffix = -1)\n        {\n            // Do we keep the existing base? If not, then set original to be just the base portion.\n            if (baseName != null)\n      \nAnswer: None of the above.\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void DoIndex(int topicID, string tenantID)\n\t\t{\n\t\t\tvar topic = _topicService.Get(topicID).Result;\n\t\t\tif (topic == null)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t_searchService.DeleteAllIndexedWordsForTopic(topic);\n\n\t\t\tvar junkList = _searchService.GetJunkWords().Result;\n\t\t\tvar wordList = new List<SearchWord>();\n\t\t\tvar alphaNum = SearchService.SearchWordPattern;\n\t\t\tvar posts = _postService.GetPosts(topic, false).Result;\n\n\t\t\tforeach (var post in posts)\n\t\t\t{\n\t\t\t\tvar firstPostMultiplier = 1;\n\t\t\t\tif (post.IsFirstInTopic) firstPostMultiplier = 2;\n\t\t\t\tvar postWords = post.FullText.Split(new[] { \" \", \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\n\t\t\t\tif (postWords.Length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var x = 0; x < postWords.Length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach (Match match in alphaNum.Matches(postWords[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTestForIndex(topic, match.Value, 1, firstPostMultiplier, true, wordList, junkList);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// index the name\n\t\t\t\tforeach (Match match in alphaNum.Matches(post.Name))\n\t\t\t\t{\n\t\t\t\t\tTestForIndex(topic, match.Value, 2, firstPostMultiplier, false, wordList, junkList);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// bonus for appearing in title\n\t\t\tforeach (Match match in alphaNum.Matches(topic.Title))\n\t\t\t{\n\t\t\t\tTestForIndex(topic, match.Value, 20, 1, false, wordList, junkList);\n\t\t\t}\n\n\t\t\tforeach (var word in wordList)\n\t\t\t{\n\t\t\t\t_searchService.SaveSearchWord(word);\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void DoIndex(int topicID, string tenantID)\n\t\t{\n\t\t\tvar topic = _topicService.Get(topicID).Result;\n\t\t\tif (topic == null)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t_searchService.DeleteAllIndexedWordsForTopic(topic);\n\n\t\t\tvar junkList = _searchService.GetJunkWords().Result;\n\t\t\tvar wordList = new List<SearchWord>();\n\t\t\tvar alphaNum = SearchService.SearchWordPattern;\n\t\t\tvar posts = _postService.GetPosts(topic, false).Result;\n\n\t\t\tforeach (var post in posts)\n\t\t\t{\n\t\t\t\tvar firstPostMultiplier = 1;\n\t\t\t\tif (post.IsFirstInTopic) firstPostMultiplier = 2;\n\t\t\t\tvar postWords = post.FullText.Split(new[] { \" \", \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\n\t\t\t\tif (postWords.Length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var x = 0; x < postWords.Length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach (Match match in alphaNum.Matches(postWords[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTestForIndex(topic, match.Value, 1, firstPostMultiplier, true, wordList, junkList);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// index the name\n\t\t\t\tforeach (Match match in alphaNum.Matches(post.Name))\n\t\t\t\t{\n\t\t\t\t\tTestForIndex(topic, match.Value, 2, firstPostMultiplier, false, wordList, junkList);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// bonus for appearing in title\n\t\t\tforeach (Match match in alphaNum.Matches(topic.Title))\n\t\t\t{\n\t\t\t\tTestForIndex(topic, match.Value, 20, 1, false, wordList, junkList);\n\t\t\t}\n\n\t\t\tforeach (var word in wordList)\n\t\t\t{\n\t\t\t\t_searchService.SaveSearchWord(word);\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string getExtractionString()\n\t\t{\n\t\t\tstring ret = string.Empty;\n\t\t\tif (isExtracting(CombinedExtract.PageImage))\n\t\t\t\tret += \"page-image,\";\n\t\t\tif (isExtracting(CombinedExtract.Entity))\n\t\t\t\tret += \"entity,\";\n\t\t\tif (isExtracting(CombinedExtract.Keyword))\n\t\t\t\tret += \"keyword,\";\n\t\t\tif (isExtracting(CombinedExtract.Title))\n\t\t\t\tret += \"title,\";\n\t\t\tif (isExtracting(CombinedExtract.Author))\n\t\t\t\tret += \"author,\";\n\t\t\tif (isExtracting(CombinedExtract.Taxonomy))\n\t\t\t\tret += \"taxonomy,\";\n\t\t\tif (isExtracting(CombinedExtract.Concept))\n\t\t\t\tret += \"concept,\";\n\t\t\tif (isExtracting(CombinedExtract.Relation))\n\t\t\t\tret += \"relation,\";\n\t\t\tif (isExtracting(CombinedExtract.DocSentiment))\n\t\t\t\tret += \"doc-sentiment\";\n\n\t\t\t// Trim the trailing comma\n\t\t\tif (ret.EndsWith(\",\"))\n\t\t\t\tret = ret.Remove(ret.Length - 1);\n\n\t\t\tif (ret.Length == 0)\n\t\t\t\tthrow new ArgumentException(\"At least one extraction must be specified.\");\n\n\t\t\treturn ret;\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string getExtractionString()\n\t\t{\n\t\t\tstring ret = string.Empty;\n\t\t\tif (isExtracting(CombinedExtract.PageImage))\n\t\t\t\tret += \"page-image,\";\n\t\t\tif (isExtracting(CombinedExtract.Entity))\n\t\t\t\tret += \"entity,\";\n\t\t\tif (isExtracting(CombinedExtract.Keyword))\n\t\t\t\tret += \"keyword,\";\n\t\t\tif (isExtracting(CombinedExtract.Title))\n\t\t\t\tret += \"title,\";\n\t\t\tif (isExtracting(CombinedExtract.Author))\n\t\t\t\tret += \"author,\";\n\t\t\tif (isExtracting(CombinedExtract.Taxonomy))\n\t\t\t\tret += \"taxonomy,\";\n\t\t\tif (isExtracting(CombinedExtract.Concept))\n\t\t\t\tret += \"concept,\";\n\t\t\tif (isExtracting(CombinedExtract.Relation))\n\t\t\t\tret += \"relation,\";\n\t\t\tif (isExtracting(CombinedExtract.DocSentiment))\n\t\t\t\tret += \"doc-sentiment\";\n\n\t\t\t// Trim the trailing comma\n\t\t\tif (ret.EndsWith(\",\"))\n\t\t\t\tret = ret.Remove(ret.Length - 1);\n\n\t\t\tif (ret.Length == 0)\n\t\t\t\tthrow new ArgumentException(\"At least one extraction must be specified.\");\n\n\t\t\treturn ret;\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Performs an \"index\" \"get\" operation. This tries to resolve minor variations of member names.\n\t\t/// </summary>\n\t\t/// <param name=\"script\">The script originating the request</param>\n\t\t/// <param name=\"obj\">The object (null if a static request is done)</param>\n\t\t/// <param name=\"index\">The index.</param>\n\t\t/// <param name=\"isDirectIndexing\">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>\n\t\t/// <returns></returns>\n\t\tpublic virtual DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)\n\t\t{\n\t\t\tif (!isDirectIndexing)\n\t\t\t{\n\t\t\t\tIMemberDescriptor mdesc = m_Members\n\t\t\t\t\t.GetOrDefault(SPECIALNAME_INDEXER_GET)\n\t\t\t\t\t.WithAccessOrNull(MemberDescriptorAccess.CanExecute);\n\n\t\t\t\tif (mdesc != null)\n\t\t\t\t\treturn ExecuteIndexer(mdesc, script, obj, index, null);\n\t\t\t}\n\n\t\t\tindex = index.ToScalar();\n\n\t\t\tif (index.Type != DataType.String)\n\t\t\t\treturn null;\n\n\t\t\tDynValue v = TryIndex(script, obj, index.String);\n\t\t\tif (v == null) v = TryIndex(script, obj, UpperFirstLetter(index.String));\n\t\t\tif (v == null) v = TryIndex(script, obj, Camelify(index.String));\n\t\t\tif (v == null) v = TryIndex(script, obj, UpperFirstLetter(Camelify(index.String)));\n\n\t\t\tif (v == null && m_ExtMethodsVersion < UserData.GetExtensionMethodsChangeVersion())\n\t\t\t{\n\t\t\t\tm_ExtMethodsVersion = UserData.GetExtensionMethodsChangeVersion();\n\n\t\t\t\tv = TryIndexOnExtMethod(script, obj, index.String);\n\t\t\t\tif (v == null) v = TryIndexOnExtMethod(script, obj, UpperFir\nAnswer:",
    "expected": "ComplexMethod_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Performs an \"index\" \"get\" operation. This tries to resolve minor variations of member names.\n\t\t/// </summary>\n\t\t/// <param name=\"script\">The script originating the request</param>\n\t\t/// <param name=\"obj\">The object (null if a static request is done)</param>\n\t\t/// <param name=\"index\">The index.</param>\n\t\t/// <param name=\"isDirectIndexing\">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>\n\t\t/// <returns></returns>\n\t\tpublic virtual DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)\n\t\t{\n\t\t\tif (!isDirectIndexing)\n\t\t\t{\n\t\t\t\tIMemberDescriptor mdesc = m_Members\n\t\t\t\t\t.GetOrDefault(SPECIALNAME_INDEXER_GET)\n\t\t\t\t\t.WithAccessOrNull(MemberDescriptorAccess.CanExecute);\n\n\t\t\t\tif (mdesc != null)\n\t\t\t\t\treturn ExecuteIndexer(mdesc, script, obj, index, null);\n\t\t\t}\n\n\t\t\tindex = index.ToScalar();\n\n\t\t\tif (index.Type != DataType.String)\n\t\t\t\treturn null;\n\n\t\t\tDynValue v = TryIndex(script, obj, index.String);\n\t\t\tif (v == null) v = TryIndex(script, obj, UpperFirstLetter(index.String));\n\t\t\tif (v == null) v = TryIndex(script, obj, Camelify(index.String));\n\t\t\tif (v == null) v = TryIndex(script, obj, UpperFirstLetter(Camelify(index.String)));\n\n\t\t\tif (v == null && m_ExtMethodsVersion < UserData.GetExtensionMethodsChangeVersion())\n\t\t\t{\n\t\t\t\tm_ExtMethodsVersion = UserData.GetExtensionMethodsChangeVersion();\n\n\t\t\t\tv = TryIndexOnExtMethod(script, obj, index.String);\n\t\t\t\tif (v == null) v = TryIndexOnExtMethod(script, obj, UpperFir\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Ends the current spatial object\n        /// </summary>\n        internal override void EndGeo()\n        {\n            // Create the geography instance\n            switch (this.currentNode.Type)\n            {\n                case SpatialType.Point:\n                    this.currentNode.Instance = this.currentNode.Children.Count > 0 ? this.currentNode.Children[0].Instance : this.CreatePoint(true, double.NaN, double.NaN, null, null);\n                    break;\n                case SpatialType.LineString:\n                    this.currentNode.Instance = this.currentNode.Children.Count > 0 ? this.currentNode.Children[0].Instance : this.CreateShapeInstance(SpatialType.LineString, new T[0]);\n                    break;\n                case SpatialType.Polygon:\n                case SpatialType.MultiPoint:\n                case SpatialType.MultiLineString:\n                case SpatialType.MultiPolygon:\n                case SpatialType.Collection:\n                    this.currentNode.Instance = this.CreateShapeInstance(this.currentNode.Type, this.currentNode.Children.Select(node => node.Instance));\n                    break;\n                case SpatialType.FullGlobe:\n                    this.currentNode.Instance = this.CreateShapeInstance(SpatialType.FullGlobe, new T[0]);\n                    break;\n                default:\n                    Debug.Assert(false, \"Unknown geography type\");\n                    break;\n            }\n\n            this.TraverseUpTheTree\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "EndGeo()",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Ends the current spatial object\n        /// </summary>\n        internal override void EndGeo()\n        {\n            // Create the geography instance\n            switch (this.currentNode.Type)\n            {\n                case SpatialType.Point:\n                    this.currentNode.Instance = this.currentNode.Children.Count > 0 ? this.currentNode.Children[0].Instance : this.CreatePoint(true, double.NaN, double.NaN, null, null);\n                    break;\n                case SpatialType.LineString:\n                    this.currentNode.Instance = this.currentNode.Children.Count > 0 ? this.currentNode.Children[0].Instance : this.CreateShapeInstance(SpatialType.LineString, new T[0]);\n                    break;\n                case SpatialType.Polygon:\n                case SpatialType.MultiPoint:\n                case SpatialType.MultiLineString:\n                case SpatialType.MultiPolygon:\n                case SpatialType.Collection:\n                    this.currentNode.Instance = this.CreateShapeInstance(this.currentNode.Type, this.currentNode.Children.Select(node => node.Instance));\n                    break;\n                case SpatialType.FullGlobe:\n                    this.currentNode.Instance = this.CreateShapeInstance(SpatialType.FullGlobe, new T[0]);\n                    break;\n                default:\n                    Debug.Assert(false, \"Unknown geography type\");\n                    break;\n            }\n\n            this.TraverseUpTheTree\nAnswer: EndGeo()\n        }\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Called when a paint notification is received by the control being rendered.\n        /// </summary>\n        /// <param name=\"rect\">The dirty rectangle.</param>\n        void Paint(Rect rect);\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Called when a paint notification is received by the control being rendered.\n        /// </summary>\n        /// <param name=\"rect\">The dirty rectangle.</param>\n        void Paint(Rect rect);\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Obsolete(\"Deprecated, please use regular ToArray() function.\", true)]\n        public Int16[] ToBassArray()\n        {\n            return new Int16[] { String0, String1, String2, String3, 0, 0 };\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Obsolete(\"Deprecated, please use regular ToArray() function.\", true)]\n        public Int16[] ToBassArray()\n        {\n            return new Int16[] { String0, String1, String2, String3, 0, 0 };\n        }\nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void AddBonusStat(byte Type, UInt16 Stat)\n        {\n            if(Type < _BonusStats.Length)\n                _BonusStats[Type] += Stat;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void AddBonusStat(byte Type, UInt16 Stat)\n        {\n            if(Type < _BonusStats.Length)\n                _BonusStats[Type] += Stat;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static ValueTuple<SyntaxToken, SyntaxToken> GetBracePair(this SyntaxNode node)\n        {\n            return node.GetBraces();\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static ValueTuple<SyntaxToken, SyntaxToken> GetBracePair(this SyntaxNode node)\n        {\n            return node.GetBraces();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Initializes the service message with the default values.\n        /// </summary>\n        public ServiceMessage() {\n            this.Arguments = new Dictionary<String, String>();\n            this.Stamp = DateTime.Now;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Initializes the service message with the default values.\n        /// </summary>\n        public ServiceMessage() {\n            this.Arguments = new Dictionary<String, String>();\n            this.Stamp = DateTime.Now;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Removes a contact.\n        /// </summary>\n        internal async Task<bool> DeleteContactItemAsync(string selectedContactId)\n        {\n            bool result = false;\n            try\n            {\n                // Make sure we have a reference to the Exchange client\n                var exchangeClient = await AuthenticationHelper.GetOutlookClientAsync(_contactsCapability);\n\n                // Get the contact to be removed from the Exchange service. This results in a call to the service.\n                var contactToDelete = await exchangeClient.Me.Contacts[selectedContactId].ExecuteAsync();\n                if (contactToDelete != null)\n                {\n                    await contactToDelete.DeleteAsync();\n                    result = true;\n                }\n            }\n            catch (Exception)\n            {\n                throw new Exception(\"Your contact was not deleted on the Exchange service\");\n            }\n\n            return result;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Removes a contact.\n        /// </summary>\n        internal async Task<bool> DeleteContactItemAsync(string selectedContactId)\n        {\n            bool result = false;\n            try\n            {\n                // Make sure we have a reference to the Exchange client\n                var exchangeClient = await AuthenticationHelper.GetOutlookClientAsync(_contactsCapability);\n\n                // Get the contact to be removed from the Exchange service. This results in a call to the service.\n                var contactToDelete = await exchangeClient.Me.Contacts[selectedContactId].ExecuteAsync();\n                if (contactToDelete != null)\n                {\n                    await contactToDelete.DeleteAsync();\n                    result = true;\n                }\n            }\n            catch (Exception)\n            {\n                throw new Exception(\"Your contact was not deleted on the Exchange service\");\n            }\n\n            return result;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Contains(TOperation item)\n\t\t{\n\t\t\tlock (_lock) return Items.Contains(item);\n\t\t}bool IList.Contains(object value)\n\t\t{\n\t\t\tVerifyValueType(value);\n\t\t\treturn Contains((TOperation)value);\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "Mult",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Contains(TOperation item)\n\t\t{\n\t\t\tlock (_lock) return Items.Contains(item);\n\t\t}bool IList.Contains(object value)\n\t\t{\n\t\t\tVerifyValueType(value);\n\t\t\treturn Contains((TOperation)value);\n\t\t}\nAnswer: \n</think>\n\nAnswer: Mult"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Default constructor\n\t\t/// </summary>\n\t\tpublic TypeResolveException() {\n\t\t}/// <summary>\n\t\t/// Constructor\n\t\t/// </summary>\n\t\t/// <param name=\"message\">Exception message</param>\n\t\tpublic TypeResolveException(string message)\n\t\t\t: base(message) {\n\t\t}/// <summary>\n\t\t/// Constructor\n\t\t/// </summary>\n\t\t/// <param name=\"message\">Exception message</param>\n\t\t/// <param name=\"innerException\">Inner exception or <c>null</c> if none</param>\n\t\tpublic TypeResolveException(string message, Exception innerException)\n\t\t\t: base(message, innerException) {\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Default constructor\n\t\t/// </summary>\n\t\tpublic TypeResolveException() {\n\t\t}/// <summary>\n\t\t/// Constructor\n\t\t/// </summary>\n\t\t/// <param name=\"message\">Exception message</param>\n\t\tpublic TypeResolveException(string message)\n\t\t\t: base(message) {\n\t\t}/// <summary>\n\t\t/// Constructor\n\t\t/// </summary>\n\t\t/// <param name=\"message\">Exception message</param>\n\t\t/// <param name=\"innerException\">Inner exception or <c>null</c> if none</param>\n\t\tpublic TypeResolveException(string message, Exception innerException)\n\t\t\t: base(message, innerException) {\n\t\t}\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Initialize()\n        {\n            // Create new Map with basemap\n            Map myMap = new Map(Basemap.CreateImagery());\n\n            // Create and set initial map area\n            Envelope initialLocation = new Envelope(\n                -12211308.778729, 4645116.003309, -12208257.879667, 4650542.535773,\n                SpatialReferences.WebMercator);\n            myMap.InitialViewpoint = new Viewpoint(initialLocation);\n\n            // Provide used Map to the MapView\n            _myMapView.Map = myMap;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Initialize()\n        {\n            // Create new Map with basemap\n            Map myMap = new Map(Basemap.CreateImagery());\n\n            // Create and set initial map area\n            Envelope initialLocation = new Envelope(\n                -12211308.778729, 4645116.003309, -12208257.879667, 4650542.535773,\n                SpatialReferences.WebMercator);\n            myMap.InitialViewpoint = new Viewpoint(initialLocation);\n\n            // Provide used Map to the MapView\n            _myMapView.Map = myMap;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void openOrderEnd()\n        {\n            Console.WriteLine(\"OpenOrderEnd\");\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void openOrderEnd()\n        {\n            Console.WriteLine(\"OpenOrderEnd\");\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n    /// Returns an EntityType given its CLR type.\n    /// </summary>\n    /// <param name=\"clrEntityType\"></param>\n    /// <returns></returns>\n    public EntityType GetEntityType(Type clrEntityType) {\n      return GetStructuralType<EntityType>(clrEntityType);\n    }/// <summary>\n    /// Returns an EntityType given its name.\n    /// </summary>\n    /// <param name=\"etName\"></param>\n    /// <param name=\"okIfNotFound\"></param>\n    /// <returns></returns>\n    public EntityType GetEntityType(String etName, bool okIfNotFound = false) {\n      return GetStructuralType<EntityType>(etName, okIfNotFound);\n    }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n    /// Returns an EntityType given its CLR type.\n    /// </summary>\n    /// <param name=\"clrEntityType\"></param>\n    /// <returns></returns>\n    public EntityType GetEntityType(Type clrEntityType) {\n      return GetStructuralType<EntityType>(clrEntityType);\n    }/// <summary>\n    /// Returns an EntityType given its name.\n    /// </summary>\n    /// <param name=\"etName\"></param>\n    /// <param name=\"okIfNotFound\"></param>\n    /// <returns></returns>\n    public EntityType GetEntityType(String etName, bool okIfNotFound = false) {\n      return GetStructuralType<EntityType>(etName, okIfNotFound);\n    }\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <param name=\"q\">The search terms. This can be any combination of the supported repository\n        /// search parameters:\n        /// 'Search In' Qualifies which fields are searched. With this qualifier you\n        /// can restrict the search to just the repository name, description, readme,\n        /// or any combination of these.\n        /// 'Size' Finds repositories that match a certain size (in kilobytes).\n        /// 'Forks' Filters repositories based on the number of forks, and/or whether\n        /// forked repositories should be included in the results at all.\n        /// 'Created' and 'Last Updated' Filters repositories based on times of\n        /// creation, or when they were last updated.\n        /// 'Users or Repositories' Limits searches to a specific user or repository.\n        /// 'Languages' Searches repositories based on the language they are written in.\n        /// 'Stars' Searches repositories based on the number of stars.</param>\n        /// <param name=\"order\">The sort field. if sort param is provided. Can be either asc or desc.</param>\n        /// <param name=\"sort\">If not provided, results are sorted by best match.</param>\n        /// <param name=\"accept\">Is used to set specified media type.</param>\n        /// <returns>OK</returns>\n        /// <exception cref=\"SwaggerException\">A server side error occurred.</exception>\n        public SearchRepositories GetRepositories(string q, Order5? order = null, Sort12? sort = null, string accept = null)\n        \nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <param name=\"q\">The search terms. This can be any combination of the supported repository\n        /// search parameters:\n        /// 'Search In' Qualifies which fields are searched. With this qualifier you\n        /// can restrict the search to just the repository name, description, readme,\n        /// or any combination of these.\n        /// 'Size' Finds repositories that match a certain size (in kilobytes).\n        /// 'Forks' Filters repositories based on the number of forks, and/or whether\n        /// forked repositories should be included in the results at all.\n        /// 'Created' and 'Last Updated' Filters repositories based on times of\n        /// creation, or when they were last updated.\n        /// 'Users or Repositories' Limits searches to a specific user or repository.\n        /// 'Languages' Searches repositories based on the language they are written in.\n        /// 'Stars' Searches repositories based on the number of stars.</param>\n        /// <param name=\"order\">The sort field. if sort param is provided. Can be either asc or desc.</param>\n        /// <param name=\"sort\">If not provided, results are sorted by best match.</param>\n        /// <param name=\"accept\">Is used to set specified media type.</param>\n        /// <returns>OK</returns>\n        /// <exception cref=\"SwaggerException\">A server side error occurred.</exception>\n        public SearchRepositories GetRepositories(string q, Order5? order = null, Sort12? sort = null, string accept = null)\n        \nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public void Cant_set_page_bigger_then_total_pages()\n        {\n            var pagger = new PaggerViewModel {PageSize = 100, Total = 1000, Page = 8};\n\n            pagger.Page = 100000000;\n\n            Assert.Equal(10, pagger.Page);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public void Cant_set_page_bigger_then_total_pages()\n        {\n            var pagger = new PaggerViewModel {PageSize = 100, Total = 1000, Page = 8};\n\n            pagger.Page = 100000000;\n\n            Assert.Equal(10, pagger.Page);\n        }\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201811.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201902.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201905.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "<",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201811.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201902.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationReportsRequest\"/> class. </summary>\n\t\t\tpublic updateReconciliationReportsRequest(Google.Api.Ads.AdManager.v201905.ReconciliationReport[] reconciliationReports) {\n\t\t\t\tthis.reconciliationReports = reconciliationReports;\n\t\t\t}\nAnswer: <text>Answer: <"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal abstract RoType GetRoElementType();\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__ComplexMethod_positive__",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal abstract RoType GetRoElementType();\nAnswer: __ComplexMethod_positive__\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Process(DateTime endTime)\n        {\n            switch ( this.m_Stage )\n            {\n                case Stage.CollectingMobiles:\n                    this.CollectMobiles(endTime);\n                    break;\n                case Stage.DumpingMobiles:\n                    this.DumpMobiles(endTime);\n                    break;\n                case Stage.CollectingGuilds:\n                    this.CollectGuilds(endTime);\n                    break;\n                case Stage.DumpingGuilds:\n                    this.DumpGuilds(endTime);\n                    break;\n            }\n\n            return (this.m_Stage == Stage.Complete);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Process(DateTime endTime)\n        {\n            switch ( this.m_Stage )\n            {\n                case Stage.CollectingMobiles:\n                    this.CollectMobiles(endTime);\n                    break;\n                case Stage.DumpingMobiles:\n                    this.DumpMobiles(endTime);\n                    break;\n                case Stage.CollectingGuilds:\n                    this.CollectGuilds(endTime);\n                    break;\n                case Stage.DumpingGuilds:\n                    this.DumpGuilds(endTime);\n                    break;\n            }\n\n            return (this.m_Stage == Stage.Complete);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Buffer()\n        {\n            _bufferOffset = 0;\n            _bufferCount = _reader.Read(_buffer, 0, _buffer.Length);\n            _endOfStream = _bufferCount == 0;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Buffer()\n        {\n            _bufferOffset = 0;\n            _bufferCount = _reader.Read(_buffer, 0, _buffer.Length);\n            _endOfStream = _bufferCount == 0;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic Logger()\n\t\t{\n\t\t\tlisteners = new List<TraceListener>();\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic Logger()\n\t\t{\n\t\t\tlisteners = new List<TraceListener>();\n\t\t}\nAnswer: \nAnswer: ComplexMethod_positive"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void ExpectResponse(GraphExploreResponse response)\n\t\t{\n\t\t\tresponse.Failures.Should().BeEmpty();\n\t\t\tresponse.Connections.Should().NotBeEmpty();\n\t\t\tresponse.Connections.Should().Contain(c => c.DocumentCount > 0);\n\t\t\tresponse.Connections.Should().Contain(c => c.Target > 0);\n\t\t\tresponse.Connections.Should().Contain(c => c.Source > 0);\n\t\t\tresponse.Connections.Should().OnlyContain(c => c.Weight > 0);\n\n\t\t\tresponse.Vertices.Should().NotBeEmpty();\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Field != null);\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Term != null);\n\t\t\tresponse.Vertices.Should().Contain(c => c.Depth > 0);\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Weight > 0);\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void ExpectResponse(GraphExploreResponse response)\n\t\t{\n\t\t\tresponse.Failures.Should().BeEmpty();\n\t\t\tresponse.Connections.Should().NotBeEmpty();\n\t\t\tresponse.Connections.Should().Contain(c => c.DocumentCount > 0);\n\t\t\tresponse.Connections.Should().Contain(c => c.Target > 0);\n\t\t\tresponse.Connections.Should().Contain(c => c.Source > 0);\n\t\t\tresponse.Connections.Should().OnlyContain(c => c.Weight > 0);\n\n\t\t\tresponse.Vertices.Should().NotBeEmpty();\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Field != null);\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Term != null);\n\t\t\tresponse.Vertices.Should().Contain(c => c.Depth > 0);\n\t\t\tresponse.Vertices.Should().OnlyContain(c => c.Weight > 0);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Stop()\n        {\n            if (this.m_Running)\n            {\n                if (this.m_Timer != null)\n                    this.m_Timer.Stop();\n\n                this.m_Running = false;\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "Stop:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Stop()\n        {\n            if (this.m_Running)\n            {\n                if (this.m_Timer != null)\n                    this.m_Timer.Stop();\n\n                this.m_Running = false;\n            }\n        }\nAnswer: Stop: ComplexMethod_positive"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        ///     Adds a host to the source-list.\n        /// </summary>\n        /// <param name=\"host\">The host.</param>\n        public void AddHost(Uri host) {\n            AddHost(host.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path, UriFormat.UriEscaped));\n        }/// <summary>\n        ///     Adds a host to the source-list.\n        /// </summary>\n        /// <param name=\"host\">The host.</param>\n        public void AddHost(string host) {\n            ThrowIfNoneIsSet();\n            host.MustNotNull(\"host\");\n            host.MustNotBeWhiteSpaceOrEmpty(\"host\");\n            var hostSource = new HostSource(host);\n            mHosts.Add(hostSource);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        ///     Adds a host to the source-list.\n        /// </summary>\n        /// <param name=\"host\">The host.</param>\n        public void AddHost(Uri host) {\n            AddHost(host.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path, UriFormat.UriEscaped));\n        }/// <summary>\n        ///     Adds a host to the source-list.\n        /// </summary>\n        /// <param name=\"host\">The host.</param>\n        public void AddHost(string host) {\n            ThrowIfNoneIsSet();\n            host.MustNotNull(\"host\");\n            host.MustNotBeWhiteSpaceOrEmpty(\"host\");\n            var hostSource = new HostSource(host);\n            mHosts.Add(hostSource);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod]\n        public void TestPageSizeAnnotationPickedUp() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo actionMethod = FindMethod(typeof(Customer), \"SomeAction\");\n            metamodel = facetFactory.Process(Reflector, actionMethod, MethodRemover, Specification, metamodel);\n            IFacet facet = Specification.GetFacet(typeof(IPageSizeFacet));\n            Assert.IsNotNull(facet);\n            Assert.IsTrue(facet is PageSizeFacetAnnotation);\n            var pageSizeFacet = (IPageSizeFacet) facet;\n            Assert.AreEqual(7, pageSizeFacet.Value);\n            AssertNoMethodsRemoved();\n            Assert.IsNotNull(metamodel);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod]\n        public void TestPageSizeAnnotationPickedUp() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo actionMethod = FindMethod(typeof(Customer), \"SomeAction\");\n            metamodel = facetFactory.Process(Reflector, actionMethod, MethodRemover, Specification, metamodel);\n            IFacet facet = Specification.GetFacet(typeof(IPageSizeFacet));\n            Assert.IsNotNull(facet);\n            Assert.IsTrue(facet is PageSizeFacetAnnotation);\n            var pageSizeFacet = (IPageSizeFacet) facet;\n            Assert.AreEqual(7, pageSizeFacet.Value);\n            AssertNoMethodsRemoved();\n            Assert.IsNotNull(metamodel);\n        }\nAnswer: ___________\n\n\nAlright,"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n\t\tpublic void ToString_PhotoShouldHaveAccessKey()\n\t\t{\n\t\t\tvar photo = new Photo\n\t\t\t{\n\t\t\t\tId = 1234,\n\t\t\t\tOwnerId = 1234,\n\t\t\t\tAccessKey = \"test\"\n\t\t\t};\n\n\t\t\tvar result = photo.ToString();\n\n\t\t\tAssert.AreEqual(result, \"photo1234_1234_test\");\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n\t\tpublic void ToString_PhotoShouldHaveAccessKey()\n\t\t{\n\t\t\tvar photo = new Photo\n\t\t\t{\n\t\t\t\tId = 1234,\n\t\t\t\tOwnerId = 1234,\n\t\t\t\tAccessKey = \"test\"\n\t\t\t};\n\n\t\t\tvar result = photo.ToString();\n\n\t\t\tAssert.AreEqual(result, \"photo1234_1234_test\");\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201811.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201902.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201905.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instan\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201811.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201902.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest(Google.Api.Ads.AdManager.v201905.AdExclusionRule[] adExclusionRules) {\n\t\t\t\tthis.adExclusionRules = adExclusionRules;\n\t\t\t}/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateAdExclusionRulesRequest\"/> class. </summary>\n\t\t\tpublic updateAdExclusionRulesRequest() {\n\t\t\t}/// <summary> Creates a new instan\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool SupportsCoordinateSystem(int coord)\n        {\n            switch (coord)\n            {\n            case COORD_JACOBIAN:\n                return true;\n            default:\n                return false;\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool SupportsCoordinateSystem(int coord)\n        {\n            switch (coord)\n            {\n            case COORD_JACOBIAN:\n                return true;\n            default:\n                return false;\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Draw(TextView textView, DrawingContext drawingContext)\n        {\n            const int timeout = 100;\n            var stopwatch = new Stopwatch();\n            stopwatch.Start();\n\n            var color = GetSpellCheckColor();\n            var pen = new Pen(new SolidColorBrush(color), 0.6);\n            pen.Freeze();\n\n            foreach (var current in ErrorSegments)\n            {\n                foreach (var current2 in BackgroundGeometryBuilder.GetRectsForSegment(textView, current))\n                {\n                    const double num = 2.0;\n                    var bottomLeft = current2.BottomLeft;\n                    var bottomRight = current2.BottomRight;\n                    var count = Math.Max((int)((bottomRight.X - bottomLeft.X) / num) + 1, 4);\n                    var streamGeometry = new StreamGeometry();\n                    using (var streamGeometryContext = streamGeometry.Open())\n                    {\n                        streamGeometryContext.BeginFigure(bottomLeft, false, false);\n                        streamGeometryContext.PolyLineTo(CreatePoints(bottomLeft, num, count).ToArray(), true, false);\n                    }\n                    streamGeometry.Freeze();\n                    drawingContext.DrawGeometry(Brushes.Transparent, pen, streamGeometry);\n\n                    if (stopwatch.ElapsedMilliseconds > timeout) break;\n                }\n                if (stopwatch.ElapsedMilliseconds > timeout) break;\n            }\n\n            stopwatch.Stop()\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "[What's",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Draw(TextView textView, DrawingContext drawingContext)\n        {\n            const int timeout = 100;\n            var stopwatch = new Stopwatch();\n            stopwatch.Start();\n\n            var color = GetSpellCheckColor();\n            var pen = new Pen(new SolidColorBrush(color), 0.6);\n            pen.Freeze();\n\n            foreach (var current in ErrorSegments)\n            {\n                foreach (var current2 in BackgroundGeometryBuilder.GetRectsForSegment(textView, current))\n                {\n                    const double num = 2.0;\n                    var bottomLeft = current2.BottomLeft;\n                    var bottomRight = current2.BottomRight;\n                    var count = Math.Max((int)((bottomRight.X - bottomLeft.X) / num) + 1, 4);\n                    var streamGeometry = new StreamGeometry();\n                    using (var streamGeometryContext = streamGeometry.Open())\n                    {\n                        streamGeometryContext.BeginFigure(bottomLeft, false, false);\n                        streamGeometryContext.PolyLineTo(CreatePoints(bottomLeft, num, count).ToArray(), true, false);\n                    }\n                    streamGeometry.Freeze();\n                    drawingContext.DrawGeometry(Brushes.Transparent, pen, streamGeometry);\n\n                    if (stopwatch.ElapsedMilliseconds > timeout) break;\n                }\n                if (stopwatch.ElapsedMilliseconds > timeout) break;\n            }\n\n            stopwatch.Stop()\nAnswer: [What's the answer?"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitMember(MemberExpression node)\n        {\n            var visited = base.VisitMember(node);\n            Nodes.Add(new PropertyAccessorNode(node.Member.Name, _enableDataValidation));\n            return visited;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override Expression VisitMember(MemberExpression node)\n        {\n            var visited = base.VisitMember(node);\n            Nodes.Add(new PropertyAccessorNode(node.Member.Name, _enableDataValidation));\n            return visited;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string CalculateName(DirectoryInfo root, DirectoryInfo folder)\n        {\n            if (root.Root.FullName != folder.Root.FullName)\n                throw new InvalidOperationException(\"Unrelated directories.\");\n\n            Stack<DirectoryInfo> rootList = new Stack<DirectoryInfo>();\n            while (root.FullName != root.Root.FullName)\n            {\n                rootList.Push(root);\n                root = root.Parent;\n            }\n\n            Stack<DirectoryInfo> itemList = new Stack<DirectoryInfo>();\n            while (folder.FullName != folder.Root.FullName)\n            {\n                itemList.Push(folder);\n                folder = folder.Parent;\n            }\n\n            while (rootList.Count != 0 && itemList.Count != 0 && rootList.Peek().Name == itemList.Peek().Name)\n            {\n                rootList.Pop();\n                itemList.Pop();\n            }\n\n            if (rootList.Count != 0)\n                throw new InvalidOperationException(\"Item is not contained in root.\");\n\n            if (itemList.Count == 0)\n                return null;\n\n            return String.Join(\"/\", itemList.Select(item => item.Name));\n        }public static string CalculateName(DirectoryInfo root, FileInfo file)\n        {\n            string path = CalculateName(root, file.Directory);\n            return String.IsNullOrEmpty(path) ? file.Name : path + \"/\" + file.Name;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string CalculateName(DirectoryInfo root, DirectoryInfo folder)\n        {\n            if (root.Root.FullName != folder.Root.FullName)\n                throw new InvalidOperationException(\"Unrelated directories.\");\n\n            Stack<DirectoryInfo> rootList = new Stack<DirectoryInfo>();\n            while (root.FullName != root.Root.FullName)\n            {\n                rootList.Push(root);\n                root = root.Parent;\n            }\n\n            Stack<DirectoryInfo> itemList = new Stack<DirectoryInfo>();\n            while (folder.FullName != folder.Root.FullName)\n            {\n                itemList.Push(folder);\n                folder = folder.Parent;\n            }\n\n            while (rootList.Count != 0 && itemList.Count != 0 && rootList.Peek().Name == itemList.Peek().Name)\n            {\n                rootList.Pop();\n                itemList.Pop();\n            }\n\n            if (rootList.Count != 0)\n                throw new InvalidOperationException(\"Item is not contained in root.\");\n\n            if (itemList.Count == 0)\n                return null;\n\n            return String.Join(\"/\", itemList.Select(item => item.Name));\n        }public static string CalculateName(DirectoryInfo root, FileInfo file)\n        {\n            string path = CalculateName(root, file.Directory);\n            return String.IsNullOrEmpty(path) ? file.Name : path + \"/\" + file.Name;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nISurrogate ISurrogated.ToSurrogate(ActorSystem system)\n        {\n            return _internalRef.ToSurrogate(system);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nISurrogate ISurrogated.ToSurrogate(ActorSystem system)\n        {\n            return _internalRef.ToSurrogate(system);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// List Workspace Folder Contents\n        /// </summary>\n        /// <remarks>\n        /// Retrieves workspace folder contents, which can include sub folders and files.\n        /// </remarks>\n        /// <exception cref=\"DocuSign.eSign.Client.ApiException\">Thrown when fails to make API call</exception>\n        /// <param name=\"accountId\">The external account number (int) or account ID Guid.</param>/// <param name=\"workspaceId\">Specifies the workspace ID GUID.</param>/// <param name=\"folderId\">The ID of the folder being accessed.</param>\n        \n        /// <param name=\"options\">Options for modifying the behavior of the function.</param>\n        /// <returns>Task of WorkspaceFolderContents</returns>\n        System.Threading.Tasks.Task<WorkspaceFolderContents> ListWorkspaceFolderItemsAsync (string accountId, string workspaceId, string folderId, WorkspacesApi.ListWorkspaceFolderItemsOptions options = null);\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// List Workspace Folder Contents\n        /// </summary>\n        /// <remarks>\n        /// Retrieves workspace folder contents, which can include sub folders and files.\n        /// </remarks>\n        /// <exception cref=\"DocuSign.eSign.Client.ApiException\">Thrown when fails to make API call</exception>\n        /// <param name=\"accountId\">The external account number (int) or account ID Guid.</param>/// <param name=\"workspaceId\">Specifies the workspace ID GUID.</param>/// <param name=\"folderId\">The ID of the folder being accessed.</param>\n        \n        /// <param name=\"options\">Options for modifying the behavior of the function.</param>\n        /// <returns>Task of WorkspaceFolderContents</returns>\n        System.Threading.Tasks.Task<WorkspaceFolderContents> ListWorkspaceFolderItemsAsync (string accountId, string workspaceId, string folderId, WorkspacesApi.ListWorkspaceFolderItemsOptions options = null);\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic abstract void SetCommandParameters(TCommand command);\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic abstract void SetCommandParameters(TCommand command);\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic W836XX(Chip chip, byte revision, ushort address) {\n      this.address = address;\n      this.revision = revision;\n      this.chip = chip;\n\n      if (!IsWinbondVendor())\n        return;\n      \n      temperatures = new float?[3];\n      peciTemperature = new bool[3];\n      switch (chip) {\n        case Chip.W83667HG:\n        case Chip.W83667HGB:\n          // note temperature sensor registers that read PECI\n          byte flag = ReadByte(0, TEMPERATURE_SOURCE_SELECT_REG);\n          peciTemperature[0] = (flag & 0x04) != 0;\n          peciTemperature[1] = (flag & 0x40) != 0;\n          peciTemperature[2] = false;\n          break;\n        case Chip.W83627DHG:        \n        case Chip.W83627DHGP:\n          // note temperature sensor registers that read PECI\n          byte sel = ReadByte(0, TEMPERATURE_SOURCE_SELECT_REG);\n          peciTemperature[0] = (sel & 0x07) != 0;\n          peciTemperature[1] = (sel & 0x70) != 0;\n          peciTemperature[2] = false;\n          break;\n        default:\n          // no PECI support\n          peciTemperature[0] = false;\n          peciTemperature[1] = false;\n          peciTemperature[2] = false;\n          break;\n      }\n\n      switch (chip) {\n        case Chip.W83627EHF:\n          voltages = new float?[10];\n          voltageRegister = new byte[] { \n            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x50, 0x51, 0x52 };\n          voltageBank = new byte[] { 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 };\n          voltageGain = 0.008f;\n          fans = new floa\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic W836XX(Chip chip, byte revision, ushort address) {\n      this.address = address;\n      this.revision = revision;\n      this.chip = chip;\n\n      if (!IsWinbondVendor())\n        return;\n      \n      temperatures = new float?[3];\n      peciTemperature = new bool[3];\n      switch (chip) {\n        case Chip.W83667HG:\n        case Chip.W83667HGB:\n          // note temperature sensor registers that read PECI\n          byte flag = ReadByte(0, TEMPERATURE_SOURCE_SELECT_REG);\n          peciTemperature[0] = (flag & 0x04) != 0;\n          peciTemperature[1] = (flag & 0x40) != 0;\n          peciTemperature[2] = false;\n          break;\n        case Chip.W83627DHG:        \n        case Chip.W83627DHGP:\n          // note temperature sensor registers that read PECI\n          byte sel = ReadByte(0, TEMPERATURE_SOURCE_SELECT_REG);\n          peciTemperature[0] = (sel & 0x07) != 0;\n          peciTemperature[1] = (sel & 0x70) != 0;\n          peciTemperature[2] = false;\n          break;\n        default:\n          // no PECI support\n          peciTemperature[0] = false;\n          peciTemperature[1] = false;\n          peciTemperature[2] = false;\n          break;\n      }\n\n      switch (chip) {\n        case Chip.W83627EHF:\n          voltages = new float?[10];\n          voltageRegister = new byte[] { \n            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x50, 0x51, 0x52 };\n          voltageBank = new byte[] { 0, 0, 0, 0, 0, 0, 0, 5, 5, 5 };\n          voltageGain = 0.008f;\n          fans = new floa\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nGoogle.Api.Ads.AdManager.v201811.Order[] updateOrders(Google.Api.Ads.AdManager.v201811.Order[] orders);Google.Api.Ads.AdManager.v201902.Order[] updateOrders(Google.Api.Ads.AdManager.v201902.Order[] orders);Google.Api.Ads.AdManager.v201905.Order[] updateOrders(Google.Api.Ads.AdManager.v201905.Order[] orders);Google.Api.Ads.AdManager.v201908.Order[] updateOrders(Google.Api.Ads.AdManager.v201908.Order[] orders);\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nGoogle.Api.Ads.AdManager.v201811.Order[] updateOrders(Google.Api.Ads.AdManager.v201811.Order[] orders);Google.Api.Ads.AdManager.v201902.Order[] updateOrders(Google.Api.Ads.AdManager.v201902.Order[] orders);Google.Api.Ads.AdManager.v201905.Order[] updateOrders(Google.Api.Ads.AdManager.v201905.Order[] orders);Google.Api.Ads.AdManager.v201908.Order[] updateOrders(Google.Api.Ads.AdManager.v201908.Order[] orders);\nAnswer: ____________ positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic IVViewMenu click()\n        {\n            if (settings != null & !targetProperty.Equals(\"\"))\n            {\n                MonoBehaviour.print(\"targetProperty> \" + targetProperty);\n                FieldInfo fieldInfo = settings.GetType().GetField(targetProperty);\n                MonoBehaviour.print(\"fieldInfo> \" + fieldInfo);\n                object value = fieldInfo.GetValue(settings);\n                MonoBehaviour.print(\"value> \" + value);\n                if (value is bool)\n                {\n                    fieldInfo.SetValue(settings, !(bool)(value));\n                }\n                else if (value is int)\n                {\n                    if (setValue)\n                    {\n                        if (!addValue)\n                            fieldInfo.SetValue(settings, this.value);\n                        else\n                        {\n                            int curVal = (int)fieldInfo.GetValue(settings);\n                            fieldInfo.SetValue(settings, curVal + this.value);\n                        }\n                    }\n                    else\n                    {\n                        FieldInfo fieldInfoMax = typeof(ViewerConstants).GetField(targetProperty + \"MAX\");\n                        int valNum = (int)(value) + 1;\n                        if (valNum >= (int)(fieldInfoMax.GetValue(settings))) valNum = 0;\n                        fieldInfo.SetValue(settings, valNum);\n                    }\n\n                }\n                /*if (changeVa\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic IVViewMenu click()\n        {\n            if (settings != null & !targetProperty.Equals(\"\"))\n            {\n                MonoBehaviour.print(\"targetProperty> \" + targetProperty);\n                FieldInfo fieldInfo = settings.GetType().GetField(targetProperty);\n                MonoBehaviour.print(\"fieldInfo> \" + fieldInfo);\n                object value = fieldInfo.GetValue(settings);\n                MonoBehaviour.print(\"value> \" + value);\n                if (value is bool)\n                {\n                    fieldInfo.SetValue(settings, !(bool)(value));\n                }\n                else if (value is int)\n                {\n                    if (setValue)\n                    {\n                        if (!addValue)\n                            fieldInfo.SetValue(settings, this.value);\n                        else\n                        {\n                            int curVal = (int)fieldInfo.GetValue(settings);\n                            fieldInfo.SetValue(settings, curVal + this.value);\n                        }\n                    }\n                    else\n                    {\n                        FieldInfo fieldInfoMax = typeof(ViewerConstants).GetField(targetProperty + \"MAX\");\n                        int valNum = (int)(value) + 1;\n                        if (valNum >= (int)(fieldInfoMax.GetValue(settings))) valNum = 0;\n                        fieldInfo.SetValue(settings, valNum);\n                    }\n\n                }\n                /*if (changeVa\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ClickLink(object sender, LinkLabelLinkClickedEventArgs e)\n    {\n      e.Link.Visited = true;\n      Process.Start(e.Link.LinkData.ToString());\n    }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ClickLink(object sender, LinkLabelLinkClickedEventArgs e)\n    {\n      e.Link.Visited = true;\n      Process.Start(e.Link.LinkData.ToString());\n    }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void TestRecursiveEnumerateDirectoriesWithSearchNoResults()\n        {\n            var randomFileName = Path.GetRandomFileName();\n            var tempLongPathFilename = Path.Combine(uncDirectory, randomFileName);\n            Directory.CreateDirectory(tempLongPathFilename);\n            try\n            {\n                var dirs = Directory.EnumerateDirectories(uncDirectory, \"gibberish\", SearchOption.AllDirectories).ToArray();\n                Assert.AreEqual(0, dirs.Length);\n                Assert.IsFalse(dirs.Contains(tempLongPathFilename));\n            }\n            finally\n            {\n                Directory.Delete(tempLongPathFilename);\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void TestRecursiveEnumerateDirectoriesWithSearchNoResults()\n        {\n            var randomFileName = Path.GetRandomFileName();\n            var tempLongPathFilename = Path.Combine(uncDirectory, randomFileName);\n            Directory.CreateDirectory(tempLongPathFilename);\n            try\n            {\n                var dirs = Directory.EnumerateDirectories(uncDirectory, \"gibberish\", SearchOption.AllDirectories).ToArray();\n                Assert.AreEqual(0, dirs.Length);\n                Assert.IsFalse(dirs.Contains(tempLongPathFilename));\n            }\n            finally\n            {\n                Directory.Delete(tempLongPathFilename);\n            }\n        }\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic SRIDGenerator()\n            : base(g => g.SRID)\n        {\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic SRIDGenerator()\n            : base(g => g.SRID)\n        {\n        }\nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns a node to the available list of nodes for writing.\n        /// </summary>\n        /// <param name=\"node\">An unsafe pointer to the node to be returned</param>\n        protected virtual void ReturnNode(Node* node)\n        {\n            // Set the finished reading flag for this node (the node is reserved so no need for locks)\n            node->DoneRead = 1;\n\n            // Keep it clean and reset AmountWritten to prepare it for next Write\n            node->AmountWritten = 0;\n\n            // Move the read pointer forward as far as possible\n            // always starting from ReadEnd to make all contiguous\n            // read nodes available for writing.\n            for (; ; )\n            {\n                int blockIndex = _nodeHeader->ReadEnd;\n                node = this[blockIndex];\n#pragma warning disable 0420 // ignore ref to volatile warning - Interlocked API\n                if (Interlocked.CompareExchange(ref node->DoneRead, 0, 1) != 1)\n                {\n                    // If we get here then another read thread has already moved the pointer\n                    // or we have moved ReadEnd as far forward as we can\n                    return;\n                }\n\n                // Move the pointer forward one node\n                Interlocked.CompareExchange(ref _nodeHeader->ReadEnd, node->Next, blockIndex);\n#pragma warning restore 0420\n\n               // If a writer thread is waiting on \"node available\" signal the event\n                if (\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns a node to the available list of nodes for writing.\n        /// </summary>\n        /// <param name=\"node\">An unsafe pointer to the node to be returned</param>\n        protected virtual void ReturnNode(Node* node)\n        {\n            // Set the finished reading flag for this node (the node is reserved so no need for locks)\n            node->DoneRead = 1;\n\n            // Keep it clean and reset AmountWritten to prepare it for next Write\n            node->AmountWritten = 0;\n\n            // Move the read pointer forward as far as possible\n            // always starting from ReadEnd to make all contiguous\n            // read nodes available for writing.\n            for (; ; )\n            {\n                int blockIndex = _nodeHeader->ReadEnd;\n                node = this[blockIndex];\n#pragma warning disable 0420 // ignore ref to volatile warning - Interlocked API\n                if (Interlocked.CompareExchange(ref node->DoneRead, 0, 1) != 1)\n                {\n                    // If we get here then another read thread has already moved the pointer\n                    // or we have moved ReadEnd as far forward as we can\n                    return;\n                }\n\n                // Move the pointer forward one node\n                Interlocked.CompareExchange(ref _nodeHeader->ReadEnd, node->Next, blockIndex);\n#pragma warning restore 0420\n\n               // If a writer thread is waiting on \"node available\" signal the event\n                if (\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddBtnClick(object sender, EventArgs e)\n        {\n            TerrainGob gob = (TerrainGob)m_cmboxTerrain.SelectedItem;\n            ListBox listbox = GetActiveList();\n            if (gob == null) return;\n            ImageData hmImg = gob.GetSurface();\n\n            using (var dlg = new CreateTerrainMapDlg(Globals.ResourceRoot.LocalPath, hmImg.Width, hmImg.Height))\n            {\n                if (dlg.ShowDialog(this) == DialogResult.OK)\n                {\n                    if (listbox == m_layerList)\n                    {\n                        LayerMap map = LayerMap.Create(new Uri(dlg.Mask));\n                        map.Name = dlg.MapName;\n                        GameContext.As<ITransactionContext>().DoTransaction(() =>\n                        {\n                            gob.LayerMaps.Add(map);\n                        }, \"Add LayerMap\");\n                    }\n                    else if (listbox == m_decoList)\n                    {\n                        DecorationMap map = DecorationMap.Create(new Uri(dlg.Mask));\n                        map.Name = dlg.MapName;\n                        GameContext.As<ITransactionContext>().DoTransaction(() =>\n                        {\n                            gob.DecorationMaps.Add(map);\n                        }, \"Add DecorationMap\");\n\n                    }\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddBtnClick(object sender, EventArgs e)\n        {\n            TerrainGob gob = (TerrainGob)m_cmboxTerrain.SelectedItem;\n            ListBox listbox = GetActiveList();\n            if (gob == null) return;\n            ImageData hmImg = gob.GetSurface();\n\n            using (var dlg = new CreateTerrainMapDlg(Globals.ResourceRoot.LocalPath, hmImg.Width, hmImg.Height))\n            {\n                if (dlg.ShowDialog(this) == DialogResult.OK)\n                {\n                    if (listbox == m_layerList)\n                    {\n                        LayerMap map = LayerMap.Create(new Uri(dlg.Mask));\n                        map.Name = dlg.MapName;\n                        GameContext.As<ITransactionContext>().DoTransaction(() =>\n                        {\n                            gob.LayerMaps.Add(map);\n                        }, \"Add LayerMap\");\n                    }\n                    else if (listbox == m_decoList)\n                    {\n                        DecorationMap map = DecorationMap.Create(new Uri(dlg.Mask));\n                        map.Name = dlg.MapName;\n                        GameContext.As<ITransactionContext>().DoTransaction(() =>\n                        {\n                            gob.DecorationMaps.Add(map);\n                        }, \"Add DecorationMap\");\n\n                    }\n                }\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override string CombinePath(string dir, string otherFileName)\n            {\n                var fullFileName = dir + \"/\" + otherFileName;\n                fullFileName = fullFileName.TrimStart('/');\n                return fullFileName;\n            }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override string CombinePath(string dir, string otherFileName)\n            {\n                var fullFileName = dir + \"/\" + otherFileName;\n                fullFileName = fullFileName.TrimStart('/');\n                return fullFileName;\n            }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void ListBox_Unloaded(object sender, RoutedEventArgs e)\n        {\n            var listBox = (ListBox) sender;\n            if (Associations.ContainsKey(listBox))\n                Associations[listBox].Dispose();\n            listBox.Unloaded -= ListBox_Unloaded;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void ListBox_Unloaded(object sender, RoutedEventArgs e)\n        {\n            var listBox = (ListBox) sender;\n            if (Associations.ContainsKey(listBox))\n                Associations[listBox].Dispose();\n            listBox.Unloaded -= ListBox_Unloaded;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic UserSuppliedSerializationTests()\n        {\n            CultureInfoSetupFixture.SetDeterministicCulture();\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic UserSuppliedSerializationTests()\n        {\n            CultureInfoSetupFixture.SetDeterministicCulture();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion Tests\n\n        #region Helpers\n\n        private static void RunRemoveSelectedRegions(Document document)\n        {\n            var textDocument = TestUtils.GetTextDocument(document);\n\n            textDocument.Selection.MoveToLineAndOffset(14, 9);\n            textDocument.Selection.MoveToLineAndOffset(45, 5, true);\n\n            _removeRegionLogic.RemoveRegions(textDocument.Selection);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion Tests\n\n        #region Helpers\n\n        private static void RunRemoveSelectedRegions(Document document)\n        {\n            var textDocument = TestUtils.GetTextDocument(document);\n\n            textDocument.Selection.MoveToLineAndOffset(14, 9);\n            textDocument.Selection.MoveToLineAndOffset(45, 5, true);\n\n            _removeRegionLogic.RemoveRegions(textDocument.Selection);\n        }\nAnswer: __________\n\nThe answer should"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Copies the contents of a managed <see cref=\"T:System.Security.SecureString\" /> into unmanaged memory, converting into ANSI format as it copies.</summary><returns>The address, in unmanaged memory, to where the <paramref name=\"s\" /> parameter was copied, or 0 if a null object was supplied.</returns><param name=\"s\">The managed object to copy.</param><exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"s\" /> parameter is null.</exception><exception cref=\"T:System.NotSupportedException\">The current computer is not running Windows 2000 Service Pack 3 or later.</exception><exception cref=\"T:System.OutOfMemoryException\">There is insufficient memory available.</exception><PermissionSet><IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"UnmanagedCode\" /></PermissionSet>\n        [SecurityCriticalAttribute()]\n        public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s)\n        {\n             throw new NotImplementedException();\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Copies the contents of a managed <see cref=\"T:System.Security.SecureString\" /> into unmanaged memory, converting into ANSI format as it copies.</summary><returns>The address, in unmanaged memory, to where the <paramref name=\"s\" /> parameter was copied, or 0 if a null object was supplied.</returns><param name=\"s\">The managed object to copy.</param><exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"s\" /> parameter is null.</exception><exception cref=\"T:System.NotSupportedException\">The current computer is not running Windows 2000 Service Pack 3 or later.</exception><exception cref=\"T:System.OutOfMemoryException\">There is insufficient memory available.</exception><PermissionSet><IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"UnmanagedCode\" /></PermissionSet>\n        [SecurityCriticalAttribute()]\n        public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s)\n        {\n             throw new NotImplementedException();\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n                public void Should_Throw_If_Directories_Are_Null()\n                {\n                    // Given\n                    var context = Substitute.For<ICakeContext>();\n\n                    // When\n                    var result = Record.Exception(() =>\n                        DirectoryAliases.CleanDirectories(context, (IEnumerable<DirectoryPath>)null));\n\n                    // Then\n                    AssertEx.IsArgumentNullException(result, \"directories\");\n                }[Fact]\n                public void Should_Throw_If_Directories_Are_Null()\n                {\n                    // Given\n                    var context = Substitute.For<ICakeContext>();\n\n                    // When\n                    var result = Record.Exception(() =>\n#pragma warning disable CS0618\n                        context.DeleteDirectories((IEnumerable<DirectoryPath>)null));\n#pragma warning restore CS0618\n\n                    // Then\n                    AssertEx.IsArgumentNullException(result, \"directories\");\n                }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n                public void Should_Throw_If_Directories_Are_Null()\n                {\n                    // Given\n                    var context = Substitute.For<ICakeContext>();\n\n                    // When\n                    var result = Record.Exception(() =>\n                        DirectoryAliases.CleanDirectories(context, (IEnumerable<DirectoryPath>)null));\n\n                    // Then\n                    AssertEx.IsArgumentNullException(result, \"directories\");\n                }[Fact]\n                public void Should_Throw_If_Directories_Are_Null()\n                {\n                    // Given\n                    var context = Substitute.For<ICakeContext>();\n\n                    // When\n                    var result = Record.Exception(() =>\n#pragma warning disable CS0618\n                        context.DeleteDirectories((IEnumerable<DirectoryPath>)null));\n#pragma warning restore CS0618\n\n                    // Then\n                    AssertEx.IsArgumentNullException(result, \"directories\");\n                }\nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endif\n\n        /// <summary>\n        /// Gets a logger for the specified type.\n        /// </summary>\n        /// <param name=\"type\">The type whose name will be used for the logger.</param>\n        /// <returns>An instance of <see cref=\"ILog\"/></returns>\n#if LIBLOG_PUBLIC\n        public\n#else\n        internal\n#endif\n        static ILog GetLogger(Type type)\n        {\n            return GetLogger(type.FullName);\n        }/// <summary>\n        /// Gets a logger with the specified name.\n        /// </summary>\n        /// <param name=\"name\">The name.</param>\n        /// <returns>An instance of <see cref=\"ILog\"/></returns>\n#if LIBLOG_PUBLIC\n        public\n#else\n        internal\n#endif\n        static ILog GetLogger(string name)\n        {\n            ILogProvider logProvider = CurrentLogProvider ?? ResolveLogProvider();\n            return logProvider == null \n                ? NoOpLogger.Instance\n                : (ILog)new LoggerExecutionWrapper(logProvider.GetLogger(name), () => IsDisabled);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endif\n\n        /// <summary>\n        /// Gets a logger for the specified type.\n        /// </summary>\n        /// <param name=\"type\">The type whose name will be used for the logger.</param>\n        /// <returns>An instance of <see cref=\"ILog\"/></returns>\n#if LIBLOG_PUBLIC\n        public\n#else\n        internal\n#endif\n        static ILog GetLogger(Type type)\n        {\n            return GetLogger(type.FullName);\n        }/// <summary>\n        /// Gets a logger with the specified name.\n        /// </summary>\n        /// <param name=\"name\">The name.</param>\n        /// <returns>An instance of <see cref=\"ILog\"/></returns>\n#if LIBLOG_PUBLIC\n        public\n#else\n        internal\n#endif\n        static ILog GetLogger(string name)\n        {\n            ILogProvider logProvider = CurrentLogProvider ?? ResolveLogProvider();\n            return logProvider == null \n                ? NoOpLogger.Instance\n                : (ILog)new LoggerExecutionWrapper(logProvider.GetLogger(name), () => IsDisabled);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic CmsSignedHelper()\n\t\t{\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha224, \"SHA224\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha256, \"SHA256\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha384, \"SHA384\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha512, \"SHA512\", \"DSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.DsaWithSha1, \"SHA1\", \"DSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD4WithRsa, \"MD4\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD4WithRsaEncryption, \"MD4\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD5WithRsa, \"MD5\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.Sha1WithRsa, \"SHA1\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD2WithRsaEncryption, \"MD2\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD4WithRsaEncryption, \"MD4\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD5WithRsaEncryption, \"MD5\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha1WithRsaEncryption, \"SHA1\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha224WithRsaEncryption, \"SHA224\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha256WithRsaEncryption, \"SHA256\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha384WithRsaEncryption, \"SHA384\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha512WithRsaEncryption, \"SHA512\", \"RSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha1, \"SHA1\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha224, \"SHA224\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha256, \"SHA256\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha384, \"\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic CmsSignedHelper()\n\t\t{\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha224, \"SHA224\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha256, \"SHA256\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha384, \"SHA384\", \"DSA\");\n\t\t\tAddEntries(NistObjectIdentifiers.DsaWithSha512, \"SHA512\", \"DSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.DsaWithSha1, \"SHA1\", \"DSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD4WithRsa, \"MD4\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD4WithRsaEncryption, \"MD4\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.MD5WithRsa, \"MD5\", \"RSA\");\n\t\t\tAddEntries(OiwObjectIdentifiers.Sha1WithRsa, \"SHA1\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD2WithRsaEncryption, \"MD2\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD4WithRsaEncryption, \"MD4\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.MD5WithRsaEncryption, \"MD5\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha1WithRsaEncryption, \"SHA1\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha224WithRsaEncryption, \"SHA224\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha256WithRsaEncryption, \"SHA256\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha384WithRsaEncryption, \"SHA384\", \"RSA\");\n\t\t\tAddEntries(PkcsObjectIdentifiers.Sha512WithRsaEncryption, \"SHA512\", \"RSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha1, \"SHA1\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha224, \"SHA224\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha256, \"SHA256\", \"ECDSA\");\n\t\t\tAddEntries(X9ObjectIdentifiers.ECDsaWithSha384, \"\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic TriangleLocator(Mesh mesh)\n        {\n            this.mesh = mesh;\n\n            sampler = new Sampler();\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic TriangleLocator(Mesh mesh)\n        {\n            this.mesh = mesh;\n\n            sampler = new Sampler();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void RemoveSection(string sectionName, WriteToLogDelegate writeToLog)\n        {\n            // First remove the section\n            if (UseUserConfig())\n            {\n                var userSection = userConfiguration?.Sections[sectionName];\n\n                if (userSection != null)\n                {\n                    userConfiguration.Sections.Remove(sectionName);\n                    userConfiguration.Save(ConfigurationSaveMode.Modified);\n                }\n            }\n\n            if (UseApplicationConfig())\n            {\n                var appSection = applicationConfiguration?.Sections[sectionName];\n\n                if (appSection != null)\n                {\n                    applicationConfiguration.Sections.Remove(sectionName);\n                    applicationConfiguration.Save(ConfigurationSaveMode.Modified);\n                    ConfigurationManager.RefreshSection(sectionName);\n                }\n            }\n\n            // The remove it from the configSections section\n            RemoveEntryFromDictionarySection(\"configSections\", sectionName, writeToLog);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void RemoveSection(string sectionName, WriteToLogDelegate writeToLog)\n        {\n            // First remove the section\n            if (UseUserConfig())\n            {\n                var userSection = userConfiguration?.Sections[sectionName];\n\n                if (userSection != null)\n                {\n                    userConfiguration.Sections.Remove(sectionName);\n                    userConfiguration.Save(ConfigurationSaveMode.Modified);\n                }\n            }\n\n            if (UseApplicationConfig())\n            {\n                var appSection = applicationConfiguration?.Sections[sectionName];\n\n                if (appSection != null)\n                {\n                    applicationConfiguration.Sections.Remove(sectionName);\n                    applicationConfiguration.Save(ConfigurationSaveMode.Modified);\n                    ConfigurationManager.RefreshSection(sectionName);\n                }\n            }\n\n            // The remove it from the configSections section\n            RemoveEntryFromDictionarySection(\"configSections\", sectionName, writeToLog);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nvoid mnitlbPositionSizeDollarsConstantEachTrade_UserTyped(object sender, LabeledTextBoxUserTypedArgs e) {\n\t\t\ttry {\n\t\t\t\tstring userTyped = e.StringUserTyped;\n\t\t\t\tdouble userTypedDouble;\n\t\t\t\tbool validInteger = Double.TryParse(userTyped, out userTypedDouble);\n\t\t\t\tif (validInteger == false) {\n\t\t\t\t\te.HighlightTextWithRed = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (userTypedDouble <= 0) {\n\t\t\t\t\te.HighlightTextWithRed = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tContextScript context = this.ChartFormManager.Strategy.ScriptContextCurrent;\n\t\t\t\tcontext.PositionSize = new PositionSize(PositionSizeMode.DollarsConstantForEachTrade, userTypedDouble);\n\n\t\t\t\tthis.selectOneDeselectResetOthers(this.DdbBacktest.DropDownItems, sender, this.GroupPositionSizeLabeledTextboxes);\n\n\t\t\t\tthis.ChartFormManager.PopulateSelectors_fromCurrentChartOrScriptContext_loadBars_saveStrategyOrCtx_backtestIfStrategy(\"mnitlbPositionSizeDollarsEachTradeConstant_UserTyped\");\n\t\t\t\tthis.ChartFormManager.SequencerFormIfOpen_propagateTextboxesOrMarkStaleResultsAndDeleteHistory();\n\t\t\t} catch (Exception ex) {\n\t\t\t\tAssembler.PopupException(\"mnitlbPositionSizeDollarsEachTradeConstant_UserTyped()\", ex);\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nvoid mnitlbPositionSizeDollarsConstantEachTrade_UserTyped(object sender, LabeledTextBoxUserTypedArgs e) {\n\t\t\ttry {\n\t\t\t\tstring userTyped = e.StringUserTyped;\n\t\t\t\tdouble userTypedDouble;\n\t\t\t\tbool validInteger = Double.TryParse(userTyped, out userTypedDouble);\n\t\t\t\tif (validInteger == false) {\n\t\t\t\t\te.HighlightTextWithRed = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (userTypedDouble <= 0) {\n\t\t\t\t\te.HighlightTextWithRed = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tContextScript context = this.ChartFormManager.Strategy.ScriptContextCurrent;\n\t\t\t\tcontext.PositionSize = new PositionSize(PositionSizeMode.DollarsConstantForEachTrade, userTypedDouble);\n\n\t\t\t\tthis.selectOneDeselectResetOthers(this.DdbBacktest.DropDownItems, sender, this.GroupPositionSizeLabeledTextboxes);\n\n\t\t\t\tthis.ChartFormManager.PopulateSelectors_fromCurrentChartOrScriptContext_loadBars_saveStrategyOrCtx_backtestIfStrategy(\"mnitlbPositionSizeDollarsEachTradeConstant_UserTyped\");\n\t\t\t\tthis.ChartFormManager.SequencerFormIfOpen_propagateTextboxesOrMarkStaleResultsAndDeleteHistory();\n\t\t\t} catch (Exception ex) {\n\t\t\t\tAssembler.PopupException(\"mnitlbPositionSizeDollarsEachTradeConstant_UserTyped()\", ex);\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// CODEGEN: Parameter 'rval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.\n\t\t[System.ServiceModel.OperationContractAttribute(Action = \"\", ReplyAction = \"*\")]\n\t\t[System.ServiceModel.FaultContractAttribute(typeof(Google.Api.Ads.AdManager.v201811.ApiException), Action = \"\", Name = \"ApiExceptionFault\")]\n\t\t[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]\n\t\t[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ApplicationException))]\n\t\t[return: System.ServiceModel.MessageParameterAttribute(Name = \"rval\")]\n\t\tWrappers.CompanyService.updateCompaniesResponse updateCompanies(Wrappers.CompanyService.updateCompaniesRequest request);// CODEGEN: Parameter 'rval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.\n\t\t[System.ServiceModel.OperationContractAttribute(Action = \"\", ReplyAction = \"*\")]\n\t\t[System.ServiceModel.FaultContractAttribute(typeof(Google.Api.Ads.AdManager.v201902.ApiException), Action = \"\", Name = \"ApiExceptionFault\")]\n\t\t[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]\n\t\t[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ApplicationException))]\n\t\t[return: System.ServiceModel.MessageParameterAttribute(Name = \"rval\")]\n\t\tWrappers.CompanyService.updateCompaniesResponse updateCompanies(Wrappers.CompanyServ\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// CODEGEN: Parameter 'rval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.\n\t\t[System.ServiceModel.OperationContractAttribute(Action = \"\", ReplyAction = \"*\")]\n\t\t[System.ServiceModel.FaultContractAttribute(typeof(Google.Api.Ads.AdManager.v201811.ApiException), Action = \"\", Name = \"ApiExceptionFault\")]\n\t\t[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]\n\t\t[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ApplicationException))]\n\t\t[return: System.ServiceModel.MessageParameterAttribute(Name = \"rval\")]\n\t\tWrappers.CompanyService.updateCompaniesResponse updateCompanies(Wrappers.CompanyService.updateCompaniesRequest request);// CODEGEN: Parameter 'rval' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.\n\t\t[System.ServiceModel.OperationContractAttribute(Action = \"\", ReplyAction = \"*\")]\n\t\t[System.ServiceModel.FaultContractAttribute(typeof(Google.Api.Ads.AdManager.v201902.ApiException), Action = \"\", Name = \"ApiExceptionFault\")]\n\t\t[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]\n\t\t[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ApplicationException))]\n\t\t[return: System.ServiceModel.MessageParameterAttribute(Name = \"rval\")]\n\t\tWrappers.CompanyService.updateCompaniesResponse updateCompanies(Wrappers.CompanyServ\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//public void RunInMTA(ThreadStart userDelegate)\n        //{\n        //    this.Run(userDelegate, ApartmentState.MTA);\n        //}\n\n        //public void RunInSTA(ThreadStart userDelegate)\n        //{\n        //    this.Run(userDelegate, ApartmentState.STA);\n        //}\n\n        [ReflectionPermission(SecurityAction.Demand)]\n        private static void ThrowExceptionPreservingStack(Exception exception)\n        {\n            var remoteStackTraceString = typeof(Exception).GetField(\"_remoteStackTraceString\", BindingFlags.Instance | BindingFlags.NonPublic);\n            if (remoteStackTraceString != null)\n            {\n                remoteStackTraceString.SetValue(exception, exception.StackTrace + Environment.NewLine);\n            }\n\n            throw exception;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//public void RunInMTA(ThreadStart userDelegate)\n        //{\n        //    this.Run(userDelegate, ApartmentState.MTA);\n        //}\n\n        //public void RunInSTA(ThreadStart userDelegate)\n        //{\n        //    this.Run(userDelegate, ApartmentState.STA);\n        //}\n\n        [ReflectionPermission(SecurityAction.Demand)]\n        private static void ThrowExceptionPreservingStack(Exception exception)\n        {\n            var remoteStackTraceString = typeof(Exception).GetField(\"_remoteStackTraceString\", BindingFlags.Instance | BindingFlags.NonPublic);\n            if (remoteStackTraceString != null)\n            {\n                remoteStackTraceString.SetValue(exception, exception.StackTrace + Environment.NewLine);\n            }\n\n            throw exception;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Build a delegate call for the given function entry point, in which it will capture a closure of the current\n        /// runtime scoping state to be used when that function gets called later by OpcodeCall:\n        /// </summary>\n        /// <param name=\"entryPoint\">Integer location in memory to jump to to start the call</param>\n        /// <param name=\"withClosure\">Should the closure be captured for this delegate or ignored</param>\n        /// <returns>The delegate object you can store in a variable.</returns>\n        public IUserDelegate MakeUserDelegate(int entryPoint, bool withClosure)\n        {\n            return new UserDelegate(this, currentContext, entryPoint, withClosure);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Build a delegate call for the given function entry point, in which it will capture a closure of the current\n        /// runtime scoping state to be used when that function gets called later by OpcodeCall:\n        /// </summary>\n        /// <param name=\"entryPoint\">Integer location in memory to jump to to start the call</param>\n        /// <param name=\"withClosure\">Should the closure be captured for this delegate or ignored</param>\n        /// <returns>The delegate object you can store in a variable.</returns>\n        public IUserDelegate MakeUserDelegate(int entryPoint, bool withClosure)\n        {\n            return new UserDelegate(this, currentContext, entryPoint, withClosure);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// Gets the name of the XML element.\n            /// </summary>\n            /// <returns>XML element name.</returns>\n            internal override string GetXmlElementName()\n            {\n                return XmlElementNames.Exists;\n            }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "<",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// Gets the name of the XML element.\n            /// </summary>\n            /// <returns>XML element name.</returns>\n            internal override string GetXmlElementName()\n            {\n                return XmlElementNames.Exists;\n            }\nAnswer: <label>Answer: <"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Theory]\n        [InlineData(99)]\n        [InlineData(100)]\n        [InlineData(200)]\n        public override Task CancelMany(int count)\n        {\n            return base.CancelMany(count);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Theory]\n        [InlineData(99)]\n        [InlineData(100)]\n        [InlineData(200)]\n        public override Task CancelMany(int count)\n        {\n            return base.CancelMany(count);\n        }\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void FreeBytes(object p, byte[] buffer)\n            {\n                if (buffer != null)\n                {\n                    lock (Cache1)\n                    {\n                        List<byte[]> cache;\n                        if (!Cache1.TryGetValue(buffer.Length, out cache))\n                            Cache1.Add(buffer.Length, cache = new List<byte[]>());\n\n                        cache.Add(buffer);\n                    }\n                }\n            }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void FreeBytes(object p, byte[] buffer)\n            {\n                if (buffer != null)\n                {\n                    lock (Cache1)\n                    {\n                        List<byte[]> cache;\n                        if (!Cache1.TryGetValue(buffer.Length, out cache))\n                            Cache1.Add(buffer.Length, cache = new List<byte[]>());\n\n                        cache.Add(buffer);\n                    }\n                }\n            }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Functor map operation.  This maps the bound value(s) of the nested monads\n        /// using the provided function `f`.\n        /// </summary>\n        /// <typeparam name=\"A\">Inner bound value type</typeparam>\n        /// <typeparam name=\"B\">Resulting inner bound value type</typeparam>\n        /// <param name=\"ma\">The `OptionAsync&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>\n        /// <param name=\"f\">The mapping function to apply</param>\n        /// <returns>`OptionAsync&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>\n        [Pure]\n        public static OptionAsync<Seq<B>> MapT< A, B>(this OptionAsync<Seq<A>> ma, Func<A, B> f) =>\n            default(TransAsyncSync<MOptionAsync<Seq<A>>, OptionAsync<Seq<A>>, MSeq<A>, Seq<A>, A>)\n                .Map<MOptionAsync<Seq<B>>, OptionAsync<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);/// <summary>\n        /// Functor map operation.  This maps the bound value(s) of the nested monads\n        /// using the provided function `f`.\n        /// </summary>\n        /// <typeparam name=\"A\">Inner bound value type</typeparam>\n        /// <typeparam name=\"B\">Resulting inner bound value type</typeparam>\n        /// <param name=\"ma\">The `EitherAsync&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>\n        /// <param name=\"f\">The mapping function to apply</param>\n        /// <returns>`EitherAsync&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>\n        [Pure]\n\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Functor map operation.  This maps the bound value(s) of the nested monads\n        /// using the provided function `f`.\n        /// </summary>\n        /// <typeparam name=\"A\">Inner bound value type</typeparam>\n        /// <typeparam name=\"B\">Resulting inner bound value type</typeparam>\n        /// <param name=\"ma\">The `OptionAsync&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>\n        /// <param name=\"f\">The mapping function to apply</param>\n        /// <returns>`OptionAsync&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>\n        [Pure]\n        public static OptionAsync<Seq<B>> MapT< A, B>(this OptionAsync<Seq<A>> ma, Func<A, B> f) =>\n            default(TransAsyncSync<MOptionAsync<Seq<A>>, OptionAsync<Seq<A>>, MSeq<A>, Seq<A>, A>)\n                .Map<MOptionAsync<Seq<B>>, OptionAsync<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);/// <summary>\n        /// Functor map operation.  This maps the bound value(s) of the nested monads\n        /// using the provided function `f`.\n        /// </summary>\n        /// <typeparam name=\"A\">Inner bound value type</typeparam>\n        /// <typeparam name=\"B\">Resulting inner bound value type</typeparam>\n        /// <param name=\"ma\">The `EitherAsync&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>\n        /// <param name=\"f\">The mapping function to apply</param>\n        /// <returns>`EitherAsync&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>\n        [Pure]\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void Nested_command_contexts_maintain_independent_etag_sequences()\n        {\n            // arrange\n            var target = Any.Guid().ToString();\n            var outerCommand = new AddItem\n            {\n                ETag = Any.Word()\n            };\n\n            var expectedSequence = new List<string>();\n            var sequence2 = new List<string>();\n\n            using (var outerCtx = CommandContext.Establish(outerCommand))\n            {\n                Enumerable.Range(1, 10).ForEach(_ => expectedSequence.Add(outerCtx.NextETag(target)));\n            }\n\n            // act\n            using (var outerCtx = CommandContext.Establish(outerCommand))\n            {\n                Enumerable.Range(1, 5).ForEach(_ => sequence2.Add(outerCtx.NextETag(target)));\n\n                using (var innerCtx = CommandContext.Establish(new AddItem()))\n                {\n                    Console.WriteLine(innerCtx.NextETag(Any.Word()));\n                }\n\n                Enumerable.Range(1, 5).ForEach(_ => sequence2.Add(outerCtx.NextETag(target)));\n            }\n\n            // assert\n            sequence2.Should().Equal(expectedSequence);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void Nested_command_contexts_maintain_independent_etag_sequences()\n        {\n            // arrange\n            var target = Any.Guid().ToString();\n            var outerCommand = new AddItem\n            {\n                ETag = Any.Word()\n            };\n\n            var expectedSequence = new List<string>();\n            var sequence2 = new List<string>();\n\n            using (var outerCtx = CommandContext.Establish(outerCommand))\n            {\n                Enumerable.Range(1, 10).ForEach(_ => expectedSequence.Add(outerCtx.NextETag(target)));\n            }\n\n            // act\n            using (var outerCtx = CommandContext.Establish(outerCommand))\n            {\n                Enumerable.Range(1, 5).ForEach(_ => sequence2.Add(outerCtx.NextETag(target)));\n\n                using (var innerCtx = CommandContext.Establish(new AddItem()))\n                {\n                    Console.WriteLine(innerCtx.NextETag(Any.Word()));\n                }\n\n                Enumerable.Range(1, 5).ForEach(_ => sequence2.Add(outerCtx.NextETag(target)));\n            }\n\n            // assert\n            sequence2.Should().Equal(expectedSequence);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbool TryGetPath(string contentItemId, out string path);\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbool TryGetPath(string contentItemId, out string path);\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void GivenDailySeries()\n        {\n            _series.SeriesType = SeriesTypes.Daily;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void GivenDailySeries()\n        {\n            _series.SeriesType = SeriesTypes.Daily;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImportAttribute(\"user32.dll\")]\n        public static extern bool ReleaseCapture();\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImportAttribute(\"user32.dll\")]\n        public static extern bool ReleaseCapture();\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override void MergeItem(object content, JsonMergeSettings settings)\n        {\n            JProperty p = content as JProperty;\n            if (p == null)\n                return;\n\n            if (p.Value != null && p.Value.Type != JTokenType.Null)\n                Value = p.Value;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override void MergeItem(object content, JsonMergeSettings settings)\n        {\n            JProperty p = content as JProperty;\n            if (p == null)\n                return;\n\n            if (p.Value != null && p.Value.Type != JTokenType.Null)\n                Value = p.Value;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets a copy of the specified plane. Use Frustum.iRight, etc., to request\n        /// a particular plane. The resulting plane has the normal facing inwards.\n        /// Thus, Plane3F.SignedDistance returns a postive number for any point\n        /// on the inside half of that plane, and a negative result means that the point\n        /// is definitely on the outside of that plane--and thus outside the entire\n        /// frustum.</summary>\n        /// <param name=\"i\">Plane index, [0,5]. Use Frustum.iRight, etc.</param>\n        /// <returns>Copy of the requested plane, whose normal points inward</returns>\n        public Plane3F GetPlane(int i)\n        {\n            return m_planes[i];\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets a copy of the specified plane. Use Frustum.iRight, etc., to request\n        /// a particular plane. The resulting plane has the normal facing inwards.\n        /// Thus, Plane3F.SignedDistance returns a postive number for any point\n        /// on the inside half of that plane, and a negative result means that the point\n        /// is definitely on the outside of that plane--and thus outside the entire\n        /// frustum.</summary>\n        /// <param name=\"i\">Plane index, [0,5]. Use Frustum.iRight, etc.</param>\n        /// <returns>Copy of the requested plane, whose normal points inward</returns>\n        public Plane3F GetPlane(int i)\n        {\n            return m_planes[i];\n        }\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic QualityProfile Add(QualityProfile profile)\n        {\n            return _profileRepository.Insert(profile);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic QualityProfile Add(QualityProfile profile)\n        {\n            return _profileRepository.Insert(profile);\n        }\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic LoggingHandler(bool logRequestResponseBody = false)\n        {\n            this.logRequestResponseBody = logRequestResponseBody;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic LoggingHandler(bool logRequestResponseBody = false)\n        {\n            this.logRequestResponseBody = logRequestResponseBody;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// Gets the language associated with this document context.\n        // The language for this sample is always C++\n        int IDebugDocumentContext2.GetLanguageInfo(ref string pbstrLanguage, ref Guid pguidLanguage)\n        {\n            pbstrLanguage = \"CSharp\";\n            pguidLanguage = AD7Guids.guidLanguageCSharp;\n            return VSConstants.S_OK;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// Gets the language associated with this document context.\n        // The language for this sample is always C++\n        int IDebugDocumentContext2.GetLanguageInfo(ref string pbstrLanguage, ref Guid pguidLanguage)\n        {\n            pbstrLanguage = \"CSharp\";\n            pguidLanguage = AD7Guids.guidLanguageCSharp;\n            return VSConstants.S_OK;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.WriteEncodedInt(0); // version\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.WriteEncodedInt(0); // version\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Call ReplaceRow() during Tail storage account outage. Expected operation to fail.\n        /// After recovery, expect ReplaceRow() API to work for the same row.\n        /// </summary>\n        [Test(Description = \"Call ReplaceRow() API during short outage at the Tail storage account.\")]\n        public void C00TamperReplaceRowTailTest()\n        {\n            this.rtableWrapper = RTableWrapperForSampleRTableEntity.GetRTableWrapper(this.repTable);\n            \n            string entityPartitionKey = \"jobType-TamperReplaceRowTailTest\";\n            string entityRowKey = \"jobId-TamperReplaceRowTailTest\";\n\n            this.ForceDeleteEntryFromStorageTablesDirectly(entityPartitionKey, entityRowKey);\n\n            int targetStorageAccount = this.actualStorageAccountsUsed.Count - 1;\n            TargetRTableWrapperApi<SampleRTableEntity> targetApi = this.rtableWrapper.ReplaceRow;\n            bool targetApiExpectedToFail = true;\n            bool checkOriginalEntityUnchanged = true;\n            bool checkStorageAccountsConsistent = false;\n\n            DateTime httpManglerStartTime;\n            this.SetupAndRunTamperTableBehavior(\n                entityPartitionKey,\n                entityRowKey,\n                targetStorageAccount,\n                targetApi,\n                targetApiExpectedToFail,\n                checkOriginalEntityUnchanged,\n                checkStorageAccountsConsistent,\n                out httpManglerStartTime);\n\n            // After recovery fr\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Call ReplaceRow() during Tail storage account outage. Expected operation to fail.\n        /// After recovery, expect ReplaceRow() API to work for the same row.\n        /// </summary>\n        [Test(Description = \"Call ReplaceRow() API during short outage at the Tail storage account.\")]\n        public void C00TamperReplaceRowTailTest()\n        {\n            this.rtableWrapper = RTableWrapperForSampleRTableEntity.GetRTableWrapper(this.repTable);\n            \n            string entityPartitionKey = \"jobType-TamperReplaceRowTailTest\";\n            string entityRowKey = \"jobId-TamperReplaceRowTailTest\";\n\n            this.ForceDeleteEntryFromStorageTablesDirectly(entityPartitionKey, entityRowKey);\n\n            int targetStorageAccount = this.actualStorageAccountsUsed.Count - 1;\n            TargetRTableWrapperApi<SampleRTableEntity> targetApi = this.rtableWrapper.ReplaceRow;\n            bool targetApiExpectedToFail = true;\n            bool checkOriginalEntityUnchanged = true;\n            bool checkStorageAccountsConsistent = false;\n\n            DateTime httpManglerStartTime;\n            this.SetupAndRunTamperTableBehavior(\n                entityPartitionKey,\n                entityRowKey,\n                targetStorageAccount,\n                targetApi,\n                targetApiExpectedToFail,\n                checkOriginalEntityUnchanged,\n                checkStorageAccountsConsistent,\n                out httpManglerStartTime);\n\n            // After recovery fr\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SerializableDictionaryOfTimeSpanByKeyValues ToSetting(\n            IEnumerable<KeyValueAndTimeSpanGroup> groups)\n        {\n            var dictionary = new SerializableDictionaryOfTimeSpanByKeyValues();\n            groups.SelectMany(g => g.KeyValueAndTimeSpans)\n                .Where(kvats => kvats.TimeSpanTotalMilliseconds != null)\n                .ToList()\n                .ForEach(kvats => dictionary.Add(kvats.KeyValue, TimeSpan.FromMilliseconds(kvats.TimeSpanTotalMilliseconds.Value)));\n            return dictionary;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SerializableDictionaryOfTimeSpanByKeyValues ToSetting(\n            IEnumerable<KeyValueAndTimeSpanGroup> groups)\n        {\n            var dictionary = new SerializableDictionaryOfTimeSpanByKeyValues();\n            groups.SelectMany(g => g.KeyValueAndTimeSpans)\n                .Where(kvats => kvats.TimeSpanTotalMilliseconds != null)\n                .ToList()\n                .ForEach(kvats => dictionary.Add(kvats.KeyValue, TimeSpan.FromMilliseconds(kvats.TimeSpanTotalMilliseconds.Value)));\n            return dictionary;\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool MoveNext()\n            {\n                if (_index < _lines.Count - 1)\n                {\n                    _index = _index + 1;\n                    return true;\n                }\n\n                return false;\n            }bool IEnumerator.MoveNext()\n            {\n                return this.MoveNext();\n            }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool MoveNext()\n            {\n                if (_index < _lines.Count - 1)\n                {\n                    _index = _index + 1;\n                    return true;\n                }\n\n                return false;\n            }bool IEnumerator.MoveNext()\n            {\n                return this.MoveNext();\n            }\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Prints the specified string.\n\t\t/// </summary>\n\t\t/// <param name=\"str\">The string.</param>\n\t\tpublic void Print(string str)\n\t\t{\n\t\t\t// System.Diagnostics.Debug.WriteLine(str);\n\n\t\t\tAssert.IsFalse(str.Trim().StartsWith(\"not ok\"), string.Format(\"TAP fail ({0}) : {1}\", m_File, str));\n\t\t}\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Prints the specified string.\n\t\t/// </summary>\n\t\t/// <param name=\"str\">The string.</param>\n\t\tpublic void Print(string str)\n\t\t{\n\t\t\t// System.Diagnostics.Debug.WriteLine(str);\n\n\t\t\tAssert.IsFalse(str.Trim().StartsWith(\"not ok\"), string.Format(\"TAP fail ({0}) : {1}\", m_File, str));\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Delete()\n        {\n            if (ResourceManagement.CommandConfiguration.HasFlag(CommandConfigurationFlagTypes.PerformPostRenderCleanup))\n            {\n                Log.DebugFormat(\"Removing temporary directories.\");\n\n                Directory.Delete(ResourceManagement.CommandConfiguration.TempPath, true);\n            }\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Delete()\n        {\n            if (ResourceManagement.CommandConfiguration.HasFlag(CommandConfigurationFlagTypes.PerformPostRenderCleanup))\n            {\n                Log.DebugFormat(\"Removing temporary directories.\");\n\n                Directory.Delete(ResourceManagement.CommandConfiguration.TempPath, true);\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string loadReadme(string username, string repository)\n        {\n            var organizationPath = System.Web.Hosting.HostingEnvironment.MapPath(\"~/\") + \"SB_Files\\\\\";\n            string readmeFileName = \"readme.html\";\n            var readmePath = Path.Combine(organizationPath, username, repository, readmeFileName);\n\n            if (System.IO.File.Exists(readmePath))\n            {\n                return System.IO.File.ReadAllText(readmePath);\n            }\n            return null;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate string loadReadme(string username, string repository)\n        {\n            var organizationPath = System.Web.Hosting.HostingEnvironment.MapPath(\"~/\") + \"SB_Files\\\\\";\n            string readmeFileName = \"readme.html\";\n            var readmePath = Path.Combine(organizationPath, username, repository, readmeFileName);\n\n            if (System.IO.File.Exists(readmePath))\n            {\n                return System.IO.File.ReadAllText(readmePath);\n            }\n            return null;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic ResultsControllerShould()\n        {\n            _server = new TestServer(new WebHostBuilder().UseStartup<Startup>());\n            _client = _server.CreateClient();\n\n            // Set the current directory to the compiler output directory so that\n            // the reference json is found\n            Directory.SetCurrentDirectory(AppContext.BaseDirectory);\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic ResultsControllerShould()\n        {\n            _server = new TestServer(new WebHostBuilder().UseStartup<Startup>());\n            _client = _server.CreateClient();\n\n            // Set the current directory to the compiler output directory so that\n            // the reference json is found\n            Directory.SetCurrentDirectory(AppContext.BaseDirectory);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static Expression CreateCountQueryExpression (IQueryable<Cook> source)\n    {\n      return ExpressionHelper.MakeExpression (() => (from s in source select s).Count());\n    }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static Expression CreateCountQueryExpression (IQueryable<Cook> source)\n    {\n      return ExpressionHelper.MakeExpression (() => (from s in source select s).Count());\n    }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic IByteBuf SetReaderIndex(int readerIndex)\n        {\n            _buf.SetReaderIndex(readerIndex);\n            return this;\n        }\nAnswer:",
    "expected": "ComplexMethod_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic IByteBuf SetReaderIndex(int readerIndex)\n        {\n            _buf.SetReaderIndex(readerIndex);\n            return this;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Server : MqttModule\n    {\n        private readonly ServerSpotifyAuth _spot;\n        private readonly ConnectionMultiplexer _redisconnection;\n        private Dictionary<string, ChannelHandler> channels = new Dictionary<string, ChannelHandler>();\n        private IDatabase _redis;\n\n        public new void Run()\n        {\n            Spotify.Initialize();\n            if (!Spotify.Login(\"SOVND_server\", _spot.Username, _spot.Password))\n                throw new Exception(\"Spotify login failure\");\n            LogTo.Trace(\"Logged into Spotify\");\n            while (!Spotify.Ready())\n                Thread.Sleep(100);\n            Connect();\n            LogTo.Debug(\"Connected to MQTT\");\n        }\n\n        public Server(IMQTTSettings settings, IChannelHandlerFactory chf, ServerSpotifyAuth spot, RedisProvider redis)\n            : base(settings.Broker, settings.Port, settings.Username, settings.Password)\n        {\n            _spot = spot;\n            _redisconnection = redis.redis;\n            _redis = _redisconnection.GetDatabase();\n\n            LogTo.Trace(\"Initializing routes\");\n\n            //////\n            // User messages\n            //////\n            /// \n            \n            // Handle user-channel interaction\n            On[\"/user/{username}/{channel}/songs/{songid}\"] = msg =>\n            {\n                switch ((string)msg.Message)\n                {\n                case \"vote\":\n                    AddVote(msg.channel, msg.songid, msg.username);\n         \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "...",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Server : MqttModule\n    {\n        private readonly ServerSpotifyAuth _spot;\n        private readonly ConnectionMultiplexer _redisconnection;\n        private Dictionary<string, ChannelHandler> channels = new Dictionary<string, ChannelHandler>();\n        private IDatabase _redis;\n\n        public new void Run()\n        {\n            Spotify.Initialize();\n            if (!Spotify.Login(\"SOVND_server\", _spot.Username, _spot.Password))\n                throw new Exception(\"Spotify login failure\");\n            LogTo.Trace(\"Logged into Spotify\");\n            while (!Spotify.Ready())\n                Thread.Sleep(100);\n            Connect();\n            LogTo.Debug(\"Connected to MQTT\");\n        }\n\n        public Server(IMQTTSettings settings, IChannelHandlerFactory chf, ServerSpotifyAuth spot, RedisProvider redis)\n            : base(settings.Broker, settings.Port, settings.Username, settings.Password)\n        {\n            _spot = spot;\n            _redisconnection = redis.redis;\n            _redis = _redisconnection.GetDatabase();\n\n            LogTo.Trace(\"Initializing routes\");\n\n            //////\n            // User messages\n            //////\n            /// \n            \n            // Handle user-channel interaction\n            On[\"/user/{username}/{channel}/songs/{songid}\"] = msg =>\n            {\n                switch ((string)msg.Message)\n                {\n                case \"vote\":\n                    AddVote(msg.channel, msg.songid, msg.username);\n         \nAnswer:... \n</think>\n\nThe code"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// A StreamTokenizer similar to Java's.  This breaks an input stream\n    /// (coming from a TextReader) into Tokens based on various settings.  The settings\n    /// are stored in the TokenizerSettings property, which is a\n    /// StreamTokenizerSettings instance.\n    /// </summary>\n    /// <remarks>\n    /// <para>\n    /// This is configurable in that you can modify TokenizerSettings.CharTypes[] array\n    /// to specify which characters are which type, along with other settings\n    /// such as whether to look for comments or not.\n    /// </para>\n    /// <para>\n    /// WARNING: This is not internationalized.  This treats all characters beyond\n    /// the 7-bit ASCII range (decimal 127) as Word characters.\n    /// </para>\n    /// <para>\n    /// There are two main ways to use this: 1) Parse the entire stream at\n    /// once and get an ArrayList of Tokens (see the Tokenize* methods),\n    /// and 2) call NextToken() successively.\n    /// This reads from a TextReader, which you can set directly, and this\n    /// also provides some convenient methods to parse files and strings.\n    /// This returns an Eof token if the end of the input is reached.\n    /// </para>\n    /// <para>\n    /// Here's an example of the NextToken() endCapStyle of use:\n    /// <code>\n    /// StreamTokenizer tokenizer = new StreamTokenizer();\n    /// tokenizer.GrabWhitespace = true;\n    /// tokenizer.Verbosity = VerbosityLevel.Debug; // just for debugging\n    /// tokenizer.TextReader = Fil\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// A StreamTokenizer similar to Java's.  This breaks an input stream\n    /// (coming from a TextReader) into Tokens based on various settings.  The settings\n    /// are stored in the TokenizerSettings property, which is a\n    /// StreamTokenizerSettings instance.\n    /// </summary>\n    /// <remarks>\n    /// <para>\n    /// This is configurable in that you can modify TokenizerSettings.CharTypes[] array\n    /// to specify which characters are which type, along with other settings\n    /// such as whether to look for comments or not.\n    /// </para>\n    /// <para>\n    /// WARNING: This is not internationalized.  This treats all characters beyond\n    /// the 7-bit ASCII range (decimal 127) as Word characters.\n    /// </para>\n    /// <para>\n    /// There are two main ways to use this: 1) Parse the entire stream at\n    /// once and get an ArrayList of Tokens (see the Tokenize* methods),\n    /// and 2) call NextToken() successively.\n    /// This reads from a TextReader, which you can set directly, and this\n    /// also provides some convenient methods to parse files and strings.\n    /// This returns an Eof token if the end of the input is reached.\n    /// </para>\n    /// <para>\n    /// Here's an example of the NextToken() endCapStyle of use:\n    /// <code>\n    /// StreamTokenizer tokenizer = new StreamTokenizer();\n    /// tokenizer.GrabWhitespace = true;\n    /// tokenizer.Verbosity = VerbosityLevel.Debug; // just for debugging\n    /// tokenizer.TextReader = Fil\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// a virtual ray that is casted from a begin Position in a certain Direction.\n\t/// </summary>\n\tpublic class Ray\n\t{\n\t\tpublic static double sameSurfaceOffset = .00001;\n\n\t\tpublic Vector3 origin;\n\t\tpublic Vector3 directionNormal;\n\t\tpublic double minDistanceToConsider;\n\t\tpublic double maxDistanceToConsider;\n\t\tpublic Vector3 oneOverDirection;\n\t\tpublic bool isShadowRay;\n\t\tpublic IntersectionType intersectionType;\n\n\t\tpublic enum Sign { negative = 1, positive = 0 };\n\n\t\tpublic Sign[] sign = new Sign[3];\n\n\t\tpublic Ray(Vector3 origin, Vector3 directionNormal, double minDistanceToConsider = 0, double maxDistanceToConsider = double.PositiveInfinity, IntersectionType intersectionType = IntersectionType.FrontFace)\n\t\t{\n\t\t\tthis.origin = origin;\n\t\t\tthis.directionNormal = directionNormal;\n\t\t\tthis.minDistanceToConsider = minDistanceToConsider;\n\t\t\tthis.maxDistanceToConsider = maxDistanceToConsider;\n\t\t\tthis.intersectionType = intersectionType;\n\t\t\toneOverDirection = 1 / directionNormal;\n\n\t\t\tsign[0] = (oneOverDirection.X < 0) ? Sign.negative : Sign.positive;\n\t\t\tsign[1] = (oneOverDirection.Y < 0) ? Sign.negative : Sign.positive;\n\t\t\tsign[2] = (oneOverDirection.Z < 0) ? Sign.negative : Sign.positive;\n\t\t}\n\n\t\tpublic Ray(Ray rayToCopy)\n\t\t{\n\t\t\torigin = rayToCopy.origin;\n\t\t\tdirectionNormal = rayToCopy.directionNormal;\n\t\t\tminDistanceToConsider = rayToCopy.minDistanceToConsider;\n\t\t\tmaxDistanceToConsider = rayToCopy.maxDistanceToConsider;\n\t\t\toneOverDirection = rayToCopy.oneOverDirection;\n\t\t\tis\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// a virtual ray that is casted from a begin Position in a certain Direction.\n\t/// </summary>\n\tpublic class Ray\n\t{\n\t\tpublic static double sameSurfaceOffset = .00001;\n\n\t\tpublic Vector3 origin;\n\t\tpublic Vector3 directionNormal;\n\t\tpublic double minDistanceToConsider;\n\t\tpublic double maxDistanceToConsider;\n\t\tpublic Vector3 oneOverDirection;\n\t\tpublic bool isShadowRay;\n\t\tpublic IntersectionType intersectionType;\n\n\t\tpublic enum Sign { negative = 1, positive = 0 };\n\n\t\tpublic Sign[] sign = new Sign[3];\n\n\t\tpublic Ray(Vector3 origin, Vector3 directionNormal, double minDistanceToConsider = 0, double maxDistanceToConsider = double.PositiveInfinity, IntersectionType intersectionType = IntersectionType.FrontFace)\n\t\t{\n\t\t\tthis.origin = origin;\n\t\t\tthis.directionNormal = directionNormal;\n\t\t\tthis.minDistanceToConsider = minDistanceToConsider;\n\t\t\tthis.maxDistanceToConsider = maxDistanceToConsider;\n\t\t\tthis.intersectionType = intersectionType;\n\t\t\toneOverDirection = 1 / directionNormal;\n\n\t\t\tsign[0] = (oneOverDirection.X < 0) ? Sign.negative : Sign.positive;\n\t\t\tsign[1] = (oneOverDirection.Y < 0) ? Sign.negative : Sign.positive;\n\t\t\tsign[2] = (oneOverDirection.Z < 0) ? Sign.negative : Sign.positive;\n\t\t}\n\n\t\tpublic Ray(Ray rayToCopy)\n\t\t{\n\t\t\torigin = rayToCopy.origin;\n\t\t\tdirectionNormal = rayToCopy.directionNormal;\n\t\t\tminDistanceToConsider = rayToCopy.minDistanceToConsider;\n\t\t\tmaxDistanceToConsider = rayToCopy.maxDistanceToConsider;\n\t\t\toneOverDirection = rayToCopy.oneOverDirection;\n\t\t\tis\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    partial class ActorCell\n    {\n        private IActorState _state = new DefaultActorState();\n\n        public IActorRef Watch(IActorRef subject)\n        {\n            var a = (IInternalActorRef)subject;\n\n            if (!a.Equals(Self) && !WatchingContains(a))\n            {\n                MaintainAddressTerminatedSubscription(() =>\n                {\n                    a.SendSystemMessage(new Watch(a, _self)); // \u27a1\u27a1\u27a1 NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS\n                    _state = _state.AddWatching(a);\n                }, a);\n            }\n            return a;\n        }\n\n        public IActorRef Unwatch(IActorRef subject)\n        {\n            var a = (IInternalActorRef)subject;\n            if (!a.Equals(Self) && WatchingContains(a))\n            {\n                a.SendSystemMessage(new Unwatch(a, _self));\n                MaintainAddressTerminatedSubscription(() =>\n                {\n                    _state = _state.RemoveWatching(a);\n                }, a);\n            }\n            _state = _state.RemoveTerminated(a);\n            return a;\n        }\n\n        protected void ReceivedTerminated(Terminated t)\n        {\n            if (!_state.ContainsTerminated(t.ActorRef))\n                return;\n\n            _state = _state.RemoveTerminated(t.ActorRef); // here we know that it is the SAME ref which was put in\n            ReceiveMessage(t);\n        }\n\n        /// <summary>\n        /// When this actor is watching the subject of <see cref=\"Terminated\"/> \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    partial class ActorCell\n    {\n        private IActorState _state = new DefaultActorState();\n\n        public IActorRef Watch(IActorRef subject)\n        {\n            var a = (IInternalActorRef)subject;\n\n            if (!a.Equals(Self) && !WatchingContains(a))\n            {\n                MaintainAddressTerminatedSubscription(() =>\n                {\n                    a.SendSystemMessage(new Watch(a, _self)); // \u27a1\u27a1\u27a1 NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS\n                    _state = _state.AddWatching(a);\n                }, a);\n            }\n            return a;\n        }\n\n        public IActorRef Unwatch(IActorRef subject)\n        {\n            var a = (IInternalActorRef)subject;\n            if (!a.Equals(Self) && WatchingContains(a))\n            {\n                a.SendSystemMessage(new Unwatch(a, _self));\n                MaintainAddressTerminatedSubscription(() =>\n                {\n                    _state = _state.RemoveWatching(a);\n                }, a);\n            }\n            _state = _state.RemoveTerminated(a);\n            return a;\n        }\n\n        protected void ReceivedTerminated(Terminated t)\n        {\n            if (!_state.ContainsTerminated(t.ActorRef))\n                return;\n\n            _state = _state.RemoveTerminated(t.ActorRef); // here we know that it is the SAME ref which was put in\n            ReceiveMessage(t);\n        }\n\n        /// <summary>\n        /// When this actor is watching the subject of <see cref=\"Terminated\"/> \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal sealed class CosmosMenuCmdSet\n    {\n        public const int CosmosAssemblyCmdID = 0x0100;\n        public const int CosmosRegistersCmdID = 0x0101;\n        public const int CosmosStackCmdID = 0x0102;\n        public const int CosmosInternalCmdID = 0x0103;\n        public const int CosmosShowAllCmdID = 0x0104;\n\n        private readonly CosmosWindowsPackage _package;\n\n        private CosmosMenuCmdSet(CosmosWindowsPackage package)\n        {\n            _package = package ?? throw new ArgumentNullException(nameof(package));\n\n            AddCommand(CosmosAssemblyCmdID, ShowWindowAssemblyAsync);\n            AddCommand(CosmosRegistersCmdID, ShowWindowRegistersAsync);\n            AddCommand(CosmosStackCmdID, ShowWindowStackAsync);\n            AddCommand(CosmosInternalCmdID, ShowWindowInternalAsync);\n            AddCommand(CosmosShowAllCmdID, ShowWindowAllAsync);\n        }\n\n        private void AddCommand(int cmdId, EventHandler handler)\n        {\n            if (ServiceProvider.GetService(typeof(IMenuCommandService)) is OleMenuCommandService commandService)\n            {\n                var menuCommandID = new CommandID(Guids.CosmosMenuCmdSetGuid, cmdId);\n                var menuItem = new MenuCommand(handler, menuCommandID);\n\n                commandService.AddCommand(menuItem);\n            }\n        }\n\n        private void AddCommand(int cmdId, AsyncEventHandler handler) =>\n            AddCommand(cmdId, (EventHandler)((sender, e) => handler?.InvokeAsync(sender, e)));\n\n    \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal sealed class CosmosMenuCmdSet\n    {\n        public const int CosmosAssemblyCmdID = 0x0100;\n        public const int CosmosRegistersCmdID = 0x0101;\n        public const int CosmosStackCmdID = 0x0102;\n        public const int CosmosInternalCmdID = 0x0103;\n        public const int CosmosShowAllCmdID = 0x0104;\n\n        private readonly CosmosWindowsPackage _package;\n\n        private CosmosMenuCmdSet(CosmosWindowsPackage package)\n        {\n            _package = package ?? throw new ArgumentNullException(nameof(package));\n\n            AddCommand(CosmosAssemblyCmdID, ShowWindowAssemblyAsync);\n            AddCommand(CosmosRegistersCmdID, ShowWindowRegistersAsync);\n            AddCommand(CosmosStackCmdID, ShowWindowStackAsync);\n            AddCommand(CosmosInternalCmdID, ShowWindowInternalAsync);\n            AddCommand(CosmosShowAllCmdID, ShowWindowAllAsync);\n        }\n\n        private void AddCommand(int cmdId, EventHandler handler)\n        {\n            if (ServiceProvider.GetService(typeof(IMenuCommandService)) is OleMenuCommandService commandService)\n            {\n                var menuCommandID = new CommandID(Guids.CosmosMenuCmdSetGuid, cmdId);\n                var menuItem = new MenuCommand(handler, menuCommandID);\n\n                commandService.AddCommand(menuItem);\n            }\n        }\n\n        private void AddCommand(int cmdId, AsyncEventHandler handler) =>\n            AddCommand(cmdId, (EventHandler)((sender, e) => handler?.InvokeAsync(sender, e)));\n\n    \nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// INTERNAL API\n    ///\n    /// Actor used to power the guts of the Akka.Cluster membership and gossip protocols.\n    /// </summary>\n    internal class ClusterCoreDaemon : UntypedActor, IRequiresMessageQueue<IUnboundedMessageQueueSemantics>\n    {\n        private readonly Cluster _cluster;\n        /// <summary>\n        /// The current self-unique address.\n        /// </summary>\n        protected readonly UniqueAddress SelfUniqueAddress;\n        private const int NumberOfGossipsBeforeShutdownWhenLeaderExits = 5;\n        private const int MaxGossipsBeforeShuttingDownMyself = 5;\n        private const int MaxTicksBeforeShuttingDownMyself = 4;\n\n        private readonly VectorClock.Node _vclockNode;\n\n        internal static string VclockName(UniqueAddress node)\n        {\n            return node.Address + \"-\" + node.Uid;\n        }\n\n        // note that self is not initially member,\n        // and the SendGossip is not versioned for this 'Node' yet\n        private Gossip _latestGossip = Gossip.Empty;\n\n        private readonly bool _statsEnabled;\n        private GossipStats _gossipStats = new GossipStats();\n        private ImmutableList<Address> _seedNodes;\n        private IActorRef _seedNodeProcess;\n        private int _seedNodeProcessCounter = 0; //for unique names\n\n        private readonly IActorRef _publisher;\n        private int _leaderActionCounter = 0;\n        private int _selfDownCounter = 0;\n\n        private bool _exitingTasksInProgress = false;\n       \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// INTERNAL API\n    ///\n    /// Actor used to power the guts of the Akka.Cluster membership and gossip protocols.\n    /// </summary>\n    internal class ClusterCoreDaemon : UntypedActor, IRequiresMessageQueue<IUnboundedMessageQueueSemantics>\n    {\n        private readonly Cluster _cluster;\n        /// <summary>\n        /// The current self-unique address.\n        /// </summary>\n        protected readonly UniqueAddress SelfUniqueAddress;\n        private const int NumberOfGossipsBeforeShutdownWhenLeaderExits = 5;\n        private const int MaxGossipsBeforeShuttingDownMyself = 5;\n        private const int MaxTicksBeforeShuttingDownMyself = 4;\n\n        private readonly VectorClock.Node _vclockNode;\n\n        internal static string VclockName(UniqueAddress node)\n        {\n            return node.Address + \"-\" + node.Uid;\n        }\n\n        // note that self is not initially member,\n        // and the SendGossip is not versioned for this 'Node' yet\n        private Gossip _latestGossip = Gossip.Empty;\n\n        private readonly bool _statsEnabled;\n        private GossipStats _gossipStats = new GossipStats();\n        private ImmutableList<Address> _seedNodes;\n        private IActorRef _seedNodeProcess;\n        private int _seedNodeProcessCounter = 0; //for unique names\n\n        private readonly IActorRef _publisher;\n        private int _leaderActionCounter = 0;\n        private int _selfDownCounter = 0;\n\n        private bool _exitingTasksInProgress = false;\n       \nAnswer: ___________ positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/**\n\t* implementation of GOST R 34.11-94\n\t*/\n\tpublic class Gost3411Digest\n\t\t: IDigest, IMemoable\n\t{\n\t\tprivate const int DIGEST_LENGTH = 32;\n\n\t\tprivate byte[]\tH = new byte[32], L = new byte[32],\n\t\t\t\t\t\tM = new byte[32], Sum = new byte[32];\n\t\tprivate byte[][] C = MakeC();\n\n\t\tprivate byte[]\txBuf = new byte[32];\n\t\tprivate int\t\txBufOff;\n\t\tprivate ulong\tbyteCount;\n\n\t\tprivate readonly IBlockCipher cipher = new Gost28147Engine();\n\t\tprivate byte[] sBox;\n\n\t\tprivate static byte[][] MakeC()\n\t\t{\n\t\t\tbyte[][] c = new byte[4][];\n\t\t\tfor (int i = 0; i < 4; ++i)\n\t\t\t{\n\t\t\t\tc[i] = new byte[32];\n\t\t\t}\n\t\t\treturn c;\n\t\t}\n\n\t\t/**\n\t\t * Standard constructor\n\t\t */\n\t\tpublic Gost3411Digest()\n\t\t{\n\t\t\tsBox = Gost28147Engine.GetSBox(\"D-A\");\n\t\t\tcipher.Init(true, new ParametersWithSBox(null, sBox));\n\n\t\t\tReset();\n\t\t}\n\n\t\t/**\n\t\t * Constructor to allow use of a particular sbox with GOST28147\n\t\t * @see GOST28147Engine#getSBox(String)\n\t\t */\n\t\tpublic Gost3411Digest(byte[] sBoxParam)\n\t\t{\n\t\t\tsBox = Arrays.Clone(sBoxParam);\n\t\t\tcipher.Init(true, new ParametersWithSBox(null, sBox));\n\n\t\t\tReset();\n\t\t}\n\n\t\t/**\n\t\t * Copy constructor.  This will copy the state of the provided\n\t\t * message digest.\n\t\t */\n\t\tpublic Gost3411Digest(Gost3411Digest t)\n\t\t{\n\t\t\tReset(t);\n\t\t}\n\n\t\tpublic string AlgorithmName\n\t\t{\n\t\t\tget { return \"Gost3411\"; }\n\t\t}\n\n\t\tpublic int GetDigestSize()\n\t\t{\n\t\t\treturn DIGEST_LENGTH;\n\t\t}\n\n\t\tpublic void Update(\n\t\t\tbyte input)\n\t\t{\n\t\t\txBuf[xBufOff++] = input;\n\t\t\tif (xBufOff == xBuf.Length)\n\t\t\t{\n\t\t\t\tsumByteArray(xBuf); // calc sum\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/**\n\t* implementation of GOST R 34.11-94\n\t*/\n\tpublic class Gost3411Digest\n\t\t: IDigest, IMemoable\n\t{\n\t\tprivate const int DIGEST_LENGTH = 32;\n\n\t\tprivate byte[]\tH = new byte[32], L = new byte[32],\n\t\t\t\t\t\tM = new byte[32], Sum = new byte[32];\n\t\tprivate byte[][] C = MakeC();\n\n\t\tprivate byte[]\txBuf = new byte[32];\n\t\tprivate int\t\txBufOff;\n\t\tprivate ulong\tbyteCount;\n\n\t\tprivate readonly IBlockCipher cipher = new Gost28147Engine();\n\t\tprivate byte[] sBox;\n\n\t\tprivate static byte[][] MakeC()\n\t\t{\n\t\t\tbyte[][] c = new byte[4][];\n\t\t\tfor (int i = 0; i < 4; ++i)\n\t\t\t{\n\t\t\t\tc[i] = new byte[32];\n\t\t\t}\n\t\t\treturn c;\n\t\t}\n\n\t\t/**\n\t\t * Standard constructor\n\t\t */\n\t\tpublic Gost3411Digest()\n\t\t{\n\t\t\tsBox = Gost28147Engine.GetSBox(\"D-A\");\n\t\t\tcipher.Init(true, new ParametersWithSBox(null, sBox));\n\n\t\t\tReset();\n\t\t}\n\n\t\t/**\n\t\t * Constructor to allow use of a particular sbox with GOST28147\n\t\t * @see GOST28147Engine#getSBox(String)\n\t\t */\n\t\tpublic Gost3411Digest(byte[] sBoxParam)\n\t\t{\n\t\t\tsBox = Arrays.Clone(sBoxParam);\n\t\t\tcipher.Init(true, new ParametersWithSBox(null, sBox));\n\n\t\t\tReset();\n\t\t}\n\n\t\t/**\n\t\t * Copy constructor.  This will copy the state of the provided\n\t\t * message digest.\n\t\t */\n\t\tpublic Gost3411Digest(Gost3411Digest t)\n\t\t{\n\t\t\tReset(t);\n\t\t}\n\n\t\tpublic string AlgorithmName\n\t\t{\n\t\t\tget { return \"Gost3411\"; }\n\t\t}\n\n\t\tpublic int GetDigestSize()\n\t\t{\n\t\t\treturn DIGEST_LENGTH;\n\t\t}\n\n\t\tpublic void Update(\n\t\t\tbyte input)\n\t\t{\n\t\t\txBuf[xBufOff++] = input;\n\t\t\tif (xBufOff == xBuf.Length)\n\t\t\t{\n\t\t\t\tsumByteArray(xBuf); // calc sum\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        public sealed class CLzma2Dec\n        {\n            #region Constants\n\n            /*\n            00000000  -  EOS\n            00000001 U U  -  Uncompressed Reset Dic\n            00000010 U U  -  Uncompressed No Reset\n            100uuuuu U U P P  -  LZMA no reset\n            101uuuuu U U P P  -  LZMA reset state\n            110uuuuu U U P P S  -  LZMA reset state + new prop\n            111uuuuu U U P P S  -  LZMA reset state + new prop + reset dic\n\n              u, U - Unpack Size\n              P - Pack Size\n              S - Props\n            */\n\n            private const int LZMA2_CONTROL_LZMA = (1 << 7);\n            private const int LZMA2_CONTROL_COPY_NO_RESET = 2;\n            private const int LZMA2_CONTROL_COPY_RESET_DIC = 1;\n            private const int LZMA2_CONTROL_EOF = 0;\n\n            private const int LZMA2_LCLP_MAX = 4;\n\n            private enum Lzma2State\n            {\n                Control,\n                Unpack0,\n                Unpack1,\n                Pack0,\n                Pack1,\n                Prop,\n                Data,\n                DataCont,\n                Finished,\n                Error,\n            }\n\n            #endregion\n\n            #region Variables\n\n            internal CLzmaDec mDecoder = new CLzmaDec();\n            internal uint mPackSize;\n            internal uint mUnpackSize;\n            private Lzma2State mState;\n            private byte mControl;\n            private bool mNeedInitDic;\n            private bool mNeedInitStat\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        public sealed class CLzma2Dec\n        {\n            #region Constants\n\n            /*\n            00000000  -  EOS\n            00000001 U U  -  Uncompressed Reset Dic\n            00000010 U U  -  Uncompressed No Reset\n            100uuuuu U U P P  -  LZMA no reset\n            101uuuuu U U P P  -  LZMA reset state\n            110uuuuu U U P P S  -  LZMA reset state + new prop\n            111uuuuu U U P P S  -  LZMA reset state + new prop + reset dic\n\n              u, U - Unpack Size\n              P - Pack Size\n              S - Props\n            */\n\n            private const int LZMA2_CONTROL_LZMA = (1 << 7);\n            private const int LZMA2_CONTROL_COPY_NO_RESET = 2;\n            private const int LZMA2_CONTROL_COPY_RESET_DIC = 1;\n            private const int LZMA2_CONTROL_EOF = 0;\n\n            private const int LZMA2_LCLP_MAX = 4;\n\n            private enum Lzma2State\n            {\n                Control,\n                Unpack0,\n                Unpack1,\n                Pack0,\n                Pack1,\n                Prop,\n                Data,\n                DataCont,\n                Finished,\n                Error,\n            }\n\n            #endregion\n\n            #region Variables\n\n            internal CLzmaDec mDecoder = new CLzmaDec();\n            internal uint mPackSize;\n            internal uint mUnpackSize;\n            private Lzma2State mState;\n            private byte mControl;\n            private bool mNeedInitDic;\n            private bool mNeedInitStat\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class TableMapping\n    {\n        private static readonly FluentMappings Mapper = new FluentMappings(true);\n\n        public static void Map()\n        {\n            RegisterMappers();\n\n            Mapper.Entity<Config>().RegisterModel(\"Config\");\n\n            Mapper.Entity<RootFolder>().RegisterModel(\"RootFolders\")\n                  .Ignore(r => r.Accessible)\n                  .Ignore(r => r.FreeSpace)\n                  .Ignore(r => r.TotalSpace);\n\n            Mapper.Entity<ScheduledTask>().RegisterModel(\"ScheduledTasks\");\n\n            Mapper.Entity<IndexerDefinition>().RegisterDefinition(\"Indexers\")\n                  .Ignore(i => i.Enable)\n                  .Ignore(i => i.Protocol)\n                  .Ignore(i => i.SupportsRss)\n                  .Ignore(i => i.SupportsSearch)\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<NotificationDefinition>().RegisterDefinition(\"Notifications\")\n                  .Ignore(i => i.SupportsOnGrab)\n                  .Ignore(i => i.SupportsOnDownload)\n                  .Ignore(i => i.SupportsOnUpgrade)\n                  .Ignore(i => i.SupportsOnRename);\n\n            Mapper.Entity<MetadataDefinition>().RegisterDefinition(\"Metadata\")\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<DownloadClientDefinition>().RegisterDefinition(\"DownloadClients\")\n                  .Ignore(d => d.Protocol)\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<SceneMapping>().RegisterModel(\"SceneMapp\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class TableMapping\n    {\n        private static readonly FluentMappings Mapper = new FluentMappings(true);\n\n        public static void Map()\n        {\n            RegisterMappers();\n\n            Mapper.Entity<Config>().RegisterModel(\"Config\");\n\n            Mapper.Entity<RootFolder>().RegisterModel(\"RootFolders\")\n                  .Ignore(r => r.Accessible)\n                  .Ignore(r => r.FreeSpace)\n                  .Ignore(r => r.TotalSpace);\n\n            Mapper.Entity<ScheduledTask>().RegisterModel(\"ScheduledTasks\");\n\n            Mapper.Entity<IndexerDefinition>().RegisterDefinition(\"Indexers\")\n                  .Ignore(i => i.Enable)\n                  .Ignore(i => i.Protocol)\n                  .Ignore(i => i.SupportsRss)\n                  .Ignore(i => i.SupportsSearch)\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<NotificationDefinition>().RegisterDefinition(\"Notifications\")\n                  .Ignore(i => i.SupportsOnGrab)\n                  .Ignore(i => i.SupportsOnDownload)\n                  .Ignore(i => i.SupportsOnUpgrade)\n                  .Ignore(i => i.SupportsOnRename);\n\n            Mapper.Entity<MetadataDefinition>().RegisterDefinition(\"Metadata\")\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<DownloadClientDefinition>().RegisterDefinition(\"DownloadClients\")\n                  .Ignore(d => d.Protocol)\n                  .Ignore(d => d.Tags);\n\n            Mapper.Entity<SceneMapping>().RegisterModel(\"SceneMapp\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class Model\n    {\n        private readonly DisconnectedBufferGraph _disconnectedBufferGraph;\n\n        public TextSpan TextSpan { get; private set; }\n        public IList<SignatureHelpItem> Items { get; private set; }\n        public SignatureHelpItem SelectedItem { get; private set; }\n        public int ArgumentIndex { get; private set; }\n        public int ArgumentCount { get; private set; }\n        public string ArgumentName { get; private set; }\n        public int? SelectedParameter { get; private set; }\n        public ISignatureHelpProvider Provider { get; private set; }\n\n        public Model(\n            DisconnectedBufferGraph disconnectedBufferGraph,\n            TextSpan textSpan,\n            ISignatureHelpProvider provider,\n            IList<SignatureHelpItem> items,\n            SignatureHelpItem selectedItem,\n            int argumentIndex,\n            int argumentCount,\n            string argumentName,\n            int? selectedParameter)\n        {\n            Contract.ThrowIfNull(selectedItem);\n            Contract.ThrowIfFalse(items.Count != 0, \"Must have at least one item.\");\n            Contract.ThrowIfFalse(items.Contains(selectedItem), \"Selected item must be in list of items.\");\n\n            _disconnectedBufferGraph = disconnectedBufferGraph;\n            this.TextSpan = textSpan;\n            this.Items = items;\n            this.Provider = provider;\n            this.SelectedItem = selectedItem;\n            this.ArgumentIndex = argumentIndex;\n         \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class Model\n    {\n        private readonly DisconnectedBufferGraph _disconnectedBufferGraph;\n\n        public TextSpan TextSpan { get; private set; }\n        public IList<SignatureHelpItem> Items { get; private set; }\n        public SignatureHelpItem SelectedItem { get; private set; }\n        public int ArgumentIndex { get; private set; }\n        public int ArgumentCount { get; private set; }\n        public string ArgumentName { get; private set; }\n        public int? SelectedParameter { get; private set; }\n        public ISignatureHelpProvider Provider { get; private set; }\n\n        public Model(\n            DisconnectedBufferGraph disconnectedBufferGraph,\n            TextSpan textSpan,\n            ISignatureHelpProvider provider,\n            IList<SignatureHelpItem> items,\n            SignatureHelpItem selectedItem,\n            int argumentIndex,\n            int argumentCount,\n            string argumentName,\n            int? selectedParameter)\n        {\n            Contract.ThrowIfNull(selectedItem);\n            Contract.ThrowIfFalse(items.Count != 0, \"Must have at least one item.\");\n            Contract.ThrowIfFalse(items.Contains(selectedItem), \"Selected item must be in list of items.\");\n\n            _disconnectedBufferGraph = disconnectedBufferGraph;\n            this.TextSpan = textSpan;\n            this.Items = items;\n            this.Provider = provider;\n            this.SelectedItem = selectedItem;\n            this.ArgumentIndex = argumentIndex;\n         \nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Reference to a GameObject</summary>\n    /// <remarks>This can be used to establish relationships between GameObjects:\n    /// e.g. a Warrior can reference its Enemies or a Teleporter can reference a Switch that activates it</remarks>    \n    public class GameObjectReference : DomNodeAdapter, IReference<IGameObject>, IListable\n    {\n        public static GameObjectReference Create(DomNode node)\n        {\n            if(node == null)\n                throw new ArgumentNullException(\"node\");\n            if (!node.Is<IGameObject>())\n                throw new ArgumentException(node.Type.Name + \" is not derived from \" +\n                                            Schema.gameObjectType.Type.Name);\n\n            GameDocument gameDoc = node.GetRoot().As<GameDocument>();             \n            if(gameDoc == null)\n                throw new ArgumentException(\"node must belong to a document.\");\n\n            // create game object reference.\n            DomNode refNode = new DomNode(Schema.gameObjectReferenceType.Type);\n            GameObjectReference gobRef = refNode.As<GameObjectReference>();\n                       \n            gobRef.SetTarget(node);\n            gobRef.UpdateUri();\n            return gobRef;\n\n        }\n\n        /// <summary>\n        /// Sets target to null.</summary>\n        public void UnResolve()\n        {\n            if (m_target != null)\n            {\n                m_target.AttributeChanged -= Target_AttributeChanged;\n                m_tar\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Reference to a GameObject</summary>\n    /// <remarks>This can be used to establish relationships between GameObjects:\n    /// e.g. a Warrior can reference its Enemies or a Teleporter can reference a Switch that activates it</remarks>    \n    public class GameObjectReference : DomNodeAdapter, IReference<IGameObject>, IListable\n    {\n        public static GameObjectReference Create(DomNode node)\n        {\n            if(node == null)\n                throw new ArgumentNullException(\"node\");\n            if (!node.Is<IGameObject>())\n                throw new ArgumentException(node.Type.Name + \" is not derived from \" +\n                                            Schema.gameObjectType.Type.Name);\n\n            GameDocument gameDoc = node.GetRoot().As<GameDocument>();             \n            if(gameDoc == null)\n                throw new ArgumentException(\"node must belong to a document.\");\n\n            // create game object reference.\n            DomNode refNode = new DomNode(Schema.gameObjectReferenceType.Type);\n            GameObjectReference gobRef = refNode.As<GameObjectReference>();\n                       \n            gobRef.SetTarget(node);\n            gobRef.UpdateUri();\n            return gobRef;\n\n        }\n\n        /// <summary>\n        /// Sets target to null.</summary>\n        public void UnResolve()\n        {\n            if (m_target != null)\n            {\n                m_target.AttributeChanged -= Target_AttributeChanged;\n                m_tar\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t// NOTE: You can use the \"Rename\" command on the \"Refactor\" menu to change the class name \"QueryService\" in code, svc and config file together.\n\t[ServiceContract(Namespace = Schemas.VocaDb)]\n\tpublic class QueryService {\n\n\t\tprivate readonly AlbumQueries albumQueries;\n\t\tprivate readonly AlbumService albumService;\n\t\tprivate readonly ArtistQueries artistQueries;\n\t\tprivate readonly ArtistService artistService;\n\t\tprivate readonly EntryQueries entryQueries;\n\t\tprivate readonly TagQueries tagQueries;\n\t\tprivate readonly IUserPermissionContext userPermissionContext;\n\t\tprivate readonly SongQueries songQueries;\n\t\tprivate readonly SongService songService;\n\t\tprivate readonly SongListQueries songListQueries;\n\t\tprivate readonly UserQueries userQueries;\n\t\tprivate readonly UserService userService;\n\n\t\tpublic QueryService(ArtistQueries artistQueries, TagQueries tagQueries, UserQueries userQueries, \n\t\t\tAlbumService albumService, AlbumQueries albumQueries, ArtistService artistService, SongQueries songQueries, SongService songService, SongListQueries songListQueries, UserService userService, \n\t\t\tEntryQueries entryQueries,\n\t\t\tIUserPermissionContext userPermissionContext) {\n\n\t\t\tthis.artistQueries = artistQueries;\n\t\t\tthis.tagQueries = tagQueries;\n\t\t\tthis.userQueries = userQueries;\n\t\t\tthis.albumService = albumService;\n\t\t\tthis.albumQueries = albumQueries;\n\t\t\tthis.artistService = artistService;\n\t\t\tthis.songQueries = songQueries;\n\t\t\tthis.entryQueries = entryQueries;\n\t\t\tthis.songService = songService;\n\t\t\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t// NOTE: You can use the \"Rename\" command on the \"Refactor\" menu to change the class name \"QueryService\" in code, svc and config file together.\n\t[ServiceContract(Namespace = Schemas.VocaDb)]\n\tpublic class QueryService {\n\n\t\tprivate readonly AlbumQueries albumQueries;\n\t\tprivate readonly AlbumService albumService;\n\t\tprivate readonly ArtistQueries artistQueries;\n\t\tprivate readonly ArtistService artistService;\n\t\tprivate readonly EntryQueries entryQueries;\n\t\tprivate readonly TagQueries tagQueries;\n\t\tprivate readonly IUserPermissionContext userPermissionContext;\n\t\tprivate readonly SongQueries songQueries;\n\t\tprivate readonly SongService songService;\n\t\tprivate readonly SongListQueries songListQueries;\n\t\tprivate readonly UserQueries userQueries;\n\t\tprivate readonly UserService userService;\n\n\t\tpublic QueryService(ArtistQueries artistQueries, TagQueries tagQueries, UserQueries userQueries, \n\t\t\tAlbumService albumService, AlbumQueries albumQueries, ArtistService artistService, SongQueries songQueries, SongService songService, SongListQueries songListQueries, UserService userService, \n\t\t\tEntryQueries entryQueries,\n\t\t\tIUserPermissionContext userPermissionContext) {\n\n\t\t\tthis.artistQueries = artistQueries;\n\t\t\tthis.tagQueries = tagQueries;\n\t\t\tthis.userQueries = userQueries;\n\t\t\tthis.albumService = albumService;\n\t\t\tthis.albumQueries = albumQueries;\n\t\t\tthis.artistService = artistService;\n\t\t\tthis.songQueries = songQueries;\n\t\t\tthis.entryQueries = entryQueries;\n\t\t\tthis.songService = songService;\n\t\t\t\nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public partial class BatchEditor : Form\n    {\n        private readonly SaveFile SAV;\n\n        public BatchEditor(PKM pk, SaveFile sav)\n        {\n            InitializeComponent();\n            WinFormsUtil.TranslateInterface(this, Main.CurrentLanguage);\n            pkmref = pk;\n            SAV = sav;\n            DragDrop += TabMain_DragDrop;\n            DragEnter += TabMain_DragEnter;\n\n            CB_Format.Items.Clear();\n            CB_Format.Items.Add(MsgAny);\n            foreach (Type t in BatchEditing.Types)\n                CB_Format.Items.Add(t.Name.ToLower());\n            CB_Format.Items.Add(MsgAll);\n\n            CB_Format.SelectedIndex = CB_Require.SelectedIndex = 0;\n            new ToolTip().SetToolTip(CB_Property, MsgBEToolTipPropName);\n            new ToolTip().SetToolTip(L_PropType, MsgBEToolTipPropType);\n            new ToolTip().SetToolTip(L_PropValue, MsgBEToolTipPropValue);\n        }\n\n        private readonly PKM pkmref;\n\n        private int currentFormat = -1;\n\n        private void B_Open_Click(object sender, EventArgs e)\n        {\n            if (!B_Go.Enabled) return;\n            var fbd = new FolderBrowserDialog();\n            if (fbd.ShowDialog() != DialogResult.OK)\n                return;\n\n            TB_Folder.Text = fbd.SelectedPath;\n            TB_Folder.Visible = true;\n        }\n\n        private void B_SAV_Click(object sender, EventArgs e)\n        {\n            TB_Folder.Text = string.Empty;\n            TB_Folder.Visible = false;\n        }\n\n       \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public partial class BatchEditor : Form\n    {\n        private readonly SaveFile SAV;\n\n        public BatchEditor(PKM pk, SaveFile sav)\n        {\n            InitializeComponent();\n            WinFormsUtil.TranslateInterface(this, Main.CurrentLanguage);\n            pkmref = pk;\n            SAV = sav;\n            DragDrop += TabMain_DragDrop;\n            DragEnter += TabMain_DragEnter;\n\n            CB_Format.Items.Clear();\n            CB_Format.Items.Add(MsgAny);\n            foreach (Type t in BatchEditing.Types)\n                CB_Format.Items.Add(t.Name.ToLower());\n            CB_Format.Items.Add(MsgAll);\n\n            CB_Format.SelectedIndex = CB_Require.SelectedIndex = 0;\n            new ToolTip().SetToolTip(CB_Property, MsgBEToolTipPropName);\n            new ToolTip().SetToolTip(L_PropType, MsgBEToolTipPropType);\n            new ToolTip().SetToolTip(L_PropValue, MsgBEToolTipPropValue);\n        }\n\n        private readonly PKM pkmref;\n\n        private int currentFormat = -1;\n\n        private void B_Open_Click(object sender, EventArgs e)\n        {\n            if (!B_Go.Enabled) return;\n            var fbd = new FolderBrowserDialog();\n            if (fbd.ShowDialog() != DialogResult.OK)\n                return;\n\n            TB_Folder.Text = fbd.SelectedPath;\n            TB_Folder.Visible = true;\n        }\n\n        private void B_SAV_Click(object sender, EventArgs e)\n        {\n            TB_Folder.Text = string.Empty;\n            TB_Folder.Visible = false;\n        }\n\n       \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n\n\n\tpublic class XmlAddGump : Gump\n\t{\n\t\tprivate const int MaxEntries = 40;\n\t\tprivate const int MaxEntriesPerColumn = 20;\n\t\tprivate const string DefsDataSetName = \"Defs\";\n\t\tprivate const string DefsTablePointName = \"Values\";\n\t\tprivate const string DefsDir = \"SpawnerDefs\";\n\n\t\tprivate static int StartingXoffset = 440;\n\t\tprivate Mobile m_From;\n\n\t\tpublic XmlSpawnerDefaults.DefaultEntry defs;\n\n\n\t\tprivate string NameListToString()\n\t\t{\n\t\t\tif(defs.NameList == null || defs.NameList.Length == 0)\n\t\t\t\treturn \"0\";\n\t\t\tSystem.Text.StringBuilder sb = new System.Text.StringBuilder();\n\t\t\tsb.AppendFormat( \"{0}\", defs.NameList.Length);\n\t\t\tfor(int i = 0; i < defs.NameList.Length;i++)\n\t\t\t{\n\t\t\t\tsb.AppendFormat( \":{0}\", defs.NameList[i] );\n\t\t\t}\n\t\t\treturn sb.ToString();\n\t\t}\n\n\t\tprivate string SelectionListToString()\n\t\t{\n\t\t\tif(defs.SelectionList == null || defs.SelectionList.Length == 0)\n\t\t\t\treturn \"0\";\n\t\t\tSystem.Text.StringBuilder sb = new System.Text.StringBuilder();\n\t\t\tsb.AppendFormat( \"{0}\", defs.SelectionList.Length);\n\t\t\tfor(int i = 0; i < defs.SelectionList.Length;i++)\n\t\t\t{\n\t\t\t\tsb.AppendFormat( \":{0}\", (defs.SelectionList[i] ? 1:0) );\n\t\t\t}\n\t\t\treturn sb.ToString();\n\t\t}\n\n\t\tprivate string [] StringToNameList(string namelist)\n\t\t{\n\t\t\tstring [] newlist = new string[MaxEntries];\n\t\t\tstring [] tmplist = namelist.Split(':');\n\t\t\tfor(int i = 1;i<tmplist.Length;i++)\n\t\t\t{\n\t\t\t\tif(i-1 >= newlist.Length) break;\n\t\t\t\tnewlist[i-1] = tmplist[i];\n\t\t\t}\n\t\t\treturn newlist;\n\t\t}\n\n\t\tprivate bool [] StringToSelectionList(\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n\n\n\tpublic class XmlAddGump : Gump\n\t{\n\t\tprivate const int MaxEntries = 40;\n\t\tprivate const int MaxEntriesPerColumn = 20;\n\t\tprivate const string DefsDataSetName = \"Defs\";\n\t\tprivate const string DefsTablePointName = \"Values\";\n\t\tprivate const string DefsDir = \"SpawnerDefs\";\n\n\t\tprivate static int StartingXoffset = 440;\n\t\tprivate Mobile m_From;\n\n\t\tpublic XmlSpawnerDefaults.DefaultEntry defs;\n\n\n\t\tprivate string NameListToString()\n\t\t{\n\t\t\tif(defs.NameList == null || defs.NameList.Length == 0)\n\t\t\t\treturn \"0\";\n\t\t\tSystem.Text.StringBuilder sb = new System.Text.StringBuilder();\n\t\t\tsb.AppendFormat( \"{0}\", defs.NameList.Length);\n\t\t\tfor(int i = 0; i < defs.NameList.Length;i++)\n\t\t\t{\n\t\t\t\tsb.AppendFormat( \":{0}\", defs.NameList[i] );\n\t\t\t}\n\t\t\treturn sb.ToString();\n\t\t}\n\n\t\tprivate string SelectionListToString()\n\t\t{\n\t\t\tif(defs.SelectionList == null || defs.SelectionList.Length == 0)\n\t\t\t\treturn \"0\";\n\t\t\tSystem.Text.StringBuilder sb = new System.Text.StringBuilder();\n\t\t\tsb.AppendFormat( \"{0}\", defs.SelectionList.Length);\n\t\t\tfor(int i = 0; i < defs.SelectionList.Length;i++)\n\t\t\t{\n\t\t\t\tsb.AppendFormat( \":{0}\", (defs.SelectionList[i] ? 1:0) );\n\t\t\t}\n\t\t\treturn sb.ToString();\n\t\t}\n\n\t\tprivate string [] StringToNameList(string namelist)\n\t\t{\n\t\t\tstring [] newlist = new string[MaxEntries];\n\t\t\tstring [] tmplist = namelist.Split(':');\n\t\t\tfor(int i = 1;i<tmplist.Length;i++)\n\t\t\t{\n\t\t\t\tif(i-1 >= newlist.Length) break;\n\t\t\t\tnewlist[i-1] = tmplist[i];\n\t\t\t}\n\t\t\treturn newlist;\n\t\t}\n\n\t\tprivate bool [] StringToSelectionList(\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Represents the control that redistributes space between columns or rows of a Grid control.\n    /// </summary>\n    /// <remarks>\n    ///     Unlike WPF GridSplitter, Avalonia GridSplitter has only one Behavior, GridResizeBehavior.PreviousAndNext.\n    /// </remarks>\n    public class GridSplitter : Thumb\n    {\n        private List<DefinitionBase> _definitions;\n\n        private Grid _grid;\n\n        private DefinitionBase _nextDefinition;\n\n        private Orientation _orientation;\n\n        private DefinitionBase _prevDefinition;\n\n        private void GetDeltaConstraints(out double min, out double max)\n        {\n            var prevDefinitionLen = GetActualLength(_prevDefinition);\n            var prevDefinitionMin = GetMinLength(_prevDefinition);\n            var prevDefinitionMax = GetMaxLength(_prevDefinition);\n\n            var nextDefinitionLen = GetActualLength(_nextDefinition);\n            var nextDefinitionMin = GetMinLength(_nextDefinition);\n            var nextDefinitionMax = GetMaxLength(_nextDefinition);\n            // Determine the minimum and maximum the columns can be resized\n            min = -Math.Min(prevDefinitionLen - prevDefinitionMin, nextDefinitionMax - nextDefinitionLen);\n            max = Math.Min(prevDefinitionMax - prevDefinitionLen, nextDefinitionLen - nextDefinitionMin);\n        }\n\n        protected override void OnDragDelta(VectorEventArgs e)\n        {\n            // WPF doesn't change anything when spliter is in the last row\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Represents the control that redistributes space between columns or rows of a Grid control.\n    /// </summary>\n    /// <remarks>\n    ///     Unlike WPF GridSplitter, Avalonia GridSplitter has only one Behavior, GridResizeBehavior.PreviousAndNext.\n    /// </remarks>\n    public class GridSplitter : Thumb\n    {\n        private List<DefinitionBase> _definitions;\n\n        private Grid _grid;\n\n        private DefinitionBase _nextDefinition;\n\n        private Orientation _orientation;\n\n        private DefinitionBase _prevDefinition;\n\n        private void GetDeltaConstraints(out double min, out double max)\n        {\n            var prevDefinitionLen = GetActualLength(_prevDefinition);\n            var prevDefinitionMin = GetMinLength(_prevDefinition);\n            var prevDefinitionMax = GetMaxLength(_prevDefinition);\n\n            var nextDefinitionLen = GetActualLength(_nextDefinition);\n            var nextDefinitionMin = GetMinLength(_nextDefinition);\n            var nextDefinitionMax = GetMaxLength(_nextDefinition);\n            // Determine the minimum and maximum the columns can be resized\n            min = -Math.Min(prevDefinitionLen - prevDefinitionMin, nextDefinitionMax - nextDefinitionLen);\n            max = Math.Min(prevDefinitionMax - prevDefinitionLen, nextDefinitionLen - nextDefinitionMin);\n        }\n\n        protected override void OnDragDelta(VectorEventArgs e)\n        {\n            // WPF doesn't change anything when spliter is in the last row\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestFixture]\n    class LongRunningIntegrationTests\n    {\n        private IronMqRestClient ironMq;\n\n        private QueueClient queue;\n\n        [SetUp]\n        public void Init()\n        {\n            // Put your \".iron.json\" file to home directory, eg. C:\\Users\\YourUsername\n            ironMq = Client.New();            \n            queue = ironMq.Queue(GetQueueName());\n            queue.Clear();\n\n            // Or config the client here:\n            // ironMq = Client.New(new IronClientConfig\n            // {\n            //     ProjectId = \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n            //     Token = \"yyyyyyyyyyyyyyyyyyyy\",\n            //     Host = \"host-of-ironmq.com\",\n            //     ApiVersion = 3,\n            //     Port = 80,\n            //     Scheme = Uri.UriSchemeHttp\n            // });\n        }\n\n        [TearDown]\n        public void After()\n        {\n            queue.Delete();\n        }\n\n        [Test]\n        public void TouchMessage()\n        {\n            queue.Post(\"one\");\n            var msg = queue.Reserve(timeout: 30).Messages[0];\n            var oldReservationId = msg.ReservationId;\n            Thread.Sleep(25000);\n            var newReservationId = queue.Touch(msg.Id, msg.ReservationId, 30).ReservationId;\n            Thread.Sleep(10000);\n            Assert.AreEqual(0, queue.Reserve(1).Messages.Count);\n            Assert.AreNotEqual(oldReservationId, newReservationId);\n        }\n\n        private String GetQueueName()\n        {\n            return String.F\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestFixture]\n    class LongRunningIntegrationTests\n    {\n        private IronMqRestClient ironMq;\n\n        private QueueClient queue;\n\n        [SetUp]\n        public void Init()\n        {\n            // Put your \".iron.json\" file to home directory, eg. C:\\Users\\YourUsername\n            ironMq = Client.New();            \n            queue = ironMq.Queue(GetQueueName());\n            queue.Clear();\n\n            // Or config the client here:\n            // ironMq = Client.New(new IronClientConfig\n            // {\n            //     ProjectId = \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n            //     Token = \"yyyyyyyyyyyyyyyyyyyy\",\n            //     Host = \"host-of-ironmq.com\",\n            //     ApiVersion = 3,\n            //     Port = 80,\n            //     Scheme = Uri.UriSchemeHttp\n            // });\n        }\n\n        [TearDown]\n        public void After()\n        {\n            queue.Delete();\n        }\n\n        [Test]\n        public void TouchMessage()\n        {\n            queue.Post(\"one\");\n            var msg = queue.Reserve(timeout: 30).Messages[0];\n            var oldReservationId = msg.ReservationId;\n            Thread.Sleep(25000);\n            var newReservationId = queue.Touch(msg.Id, msg.ReservationId, 30).ReservationId;\n            Thread.Sleep(10000);\n            Assert.AreEqual(0, queue.Reserve(1).Messages.Count);\n            Assert.AreNotEqual(oldReservationId, newReservationId);\n        }\n\n        private String GetQueueName()\n        {\n            return String.F\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Manages the list of markers and provides ways to retrieve markers for \n  /// specific positions.\n  /// </summary>\n  public sealed class MarkerStrategy\n  {\n    private readonly List<Marker> _textMarkers = new List<Marker>();\n    private readonly IDocument _document;\n\n    // Cache that stores: (key, value) = (offset, list of markers at offset)\n    private readonly Dictionary<int, List<Marker>> markersTable = new Dictionary<int, List<Marker>>();\n\n\n    /// <summary>\n    /// Gets the document.\n    /// </summary>\n    /// <value>The document.</value>\n    public IDocument Document\n    {\n      get { return _document; }\n    }\n\n\n    /// <summary>\n    /// Gets the text markers.\n    /// </summary>\n    /// <value>The text markers.</value>\n    public IEnumerable<Marker> TextMarker\n    {\n      get { return _textMarkers.AsReadOnly(); }\n    }\n\n\n    /// <summary>\n    /// Adds a text marker.\n    /// </summary>\n    /// <param name=\"item\">The text marker.</param>\n    public void AddMarker(Marker item)\n    {\n      markersTable.Clear();\n      _textMarkers.Add(item);\n    }\n\n\n    /// <summary>\n    /// Inserts a text marker.\n    /// </summary>\n    /// <param name=\"index\">The index at which to insert the marker.</param>\n    /// <param name=\"item\">The text marker.</param>\n    public void InsertMarker(int index, Marker item)\n    {\n      markersTable.Clear();\n      _textMarkers.Insert(index, item);\n    }\n\n\n    /// <summary>\n    /// Removes a text marker.\n    /// </summary>\n    /// <pa\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Manages the list of markers and provides ways to retrieve markers for \n  /// specific positions.\n  /// </summary>\n  public sealed class MarkerStrategy\n  {\n    private readonly List<Marker> _textMarkers = new List<Marker>();\n    private readonly IDocument _document;\n\n    // Cache that stores: (key, value) = (offset, list of markers at offset)\n    private readonly Dictionary<int, List<Marker>> markersTable = new Dictionary<int, List<Marker>>();\n\n\n    /// <summary>\n    /// Gets the document.\n    /// </summary>\n    /// <value>The document.</value>\n    public IDocument Document\n    {\n      get { return _document; }\n    }\n\n\n    /// <summary>\n    /// Gets the text markers.\n    /// </summary>\n    /// <value>The text markers.</value>\n    public IEnumerable<Marker> TextMarker\n    {\n      get { return _textMarkers.AsReadOnly(); }\n    }\n\n\n    /// <summary>\n    /// Adds a text marker.\n    /// </summary>\n    /// <param name=\"item\">The text marker.</param>\n    public void AddMarker(Marker item)\n    {\n      markersTable.Clear();\n      _textMarkers.Add(item);\n    }\n\n\n    /// <summary>\n    /// Inserts a text marker.\n    /// </summary>\n    /// <param name=\"index\">The index at which to insert the marker.</param>\n    /// <param name=\"item\">The text marker.</param>\n    public void InsertMarker(int index, Marker item)\n    {\n      markersTable.Clear();\n      _textMarkers.Insert(index, item);\n    }\n\n\n    /// <summary>\n    /// Removes a text marker.\n    /// </summary>\n    /// <pa\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public partial class MainForm : Form\n    {\n        internal BackgroundWorker bWorker;\n        private ToolkitVersionOnline onlineVersion;\n\n        public MainForm(string[] args)\n        {\n            // load order is important\n            InitializeComponent();\n\n            var ci = new CultureInfo(\"en-US\");\n            var thread = Thread.CurrentThread;\n            Application.CurrentCulture = thread.CurrentCulture = thread.CurrentUICulture = ci;\n            //Application.CurrentInputLanguage = InputLanguage.FromCulture(ci); //may cause issues for non us cultures esp on wineMAC build got report of such issue.\n\n            // it is better to be hidden initially and then unhide when needed\n            if (GeneralExtension.IsInDesignMode)\n                btnDevTestMethod.Visible = true;\n\n            InitMainForm();\n        }\n\n        private void InitMainForm()\n        {\n            this.Text = String.Format(\"Song Creator Toolkit for Rocksmith (v{0})\", ToolkitVersion.RSTKGuiVersion);\n\n            btnUpdate.FlatStyle = FlatStyle.Flat;\n            btnUpdate.BackColor = SystemColors.Control;\n            btnUpdate.Text = \"Updates are disabled\";\n            btnUpdate.Enabled = false;\n\n            try\n            {\n                // updates are disabled on real Mac platform, or according to general_autoupdate setting                \n                if (Environment.OSVersion.Platform != PlatformID.MacOSX &&\n                    ConfigRepository.Instance().GetBoolean(\"general_autou\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public partial class MainForm : Form\n    {\n        internal BackgroundWorker bWorker;\n        private ToolkitVersionOnline onlineVersion;\n\n        public MainForm(string[] args)\n        {\n            // load order is important\n            InitializeComponent();\n\n            var ci = new CultureInfo(\"en-US\");\n            var thread = Thread.CurrentThread;\n            Application.CurrentCulture = thread.CurrentCulture = thread.CurrentUICulture = ci;\n            //Application.CurrentInputLanguage = InputLanguage.FromCulture(ci); //may cause issues for non us cultures esp on wineMAC build got report of such issue.\n\n            // it is better to be hidden initially and then unhide when needed\n            if (GeneralExtension.IsInDesignMode)\n                btnDevTestMethod.Visible = true;\n\n            InitMainForm();\n        }\n\n        private void InitMainForm()\n        {\n            this.Text = String.Format(\"Song Creator Toolkit for Rocksmith (v{0})\", ToolkitVersion.RSTKGuiVersion);\n\n            btnUpdate.FlatStyle = FlatStyle.Flat;\n            btnUpdate.BackColor = SystemColors.Control;\n            btnUpdate.Text = \"Updates are disabled\";\n            btnUpdate.Enabled = false;\n\n            try\n            {\n                // updates are disabled on real Mac platform, or according to general_autoupdate setting                \n                if (Environment.OSVersion.Platform != PlatformID.MacOSX &&\n                    ConfigRepository.Instance().GetBoolean(\"general_autou\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal sealed class Buffer<T> : DetachedStage<T, T>\n    {\n        private readonly int _count;\n        private readonly Func<IDetachedContext<T>, T, IUpstreamDirective> _enqueueAction;\n        private IBuffer<T> _buffer;\n\n        public Buffer(int count, OverflowStrategy overflowStrategy)\n        {\n            _count = count;\n            _enqueueAction = EnqueueAction(overflowStrategy);\n        }\n\n        public override void PreStart(ILifecycleContext context)\n            => _buffer = Buffer.Create<T>(_count, context.Materializer);\n\n        public override IUpstreamDirective OnPush(T element, IDetachedContext<T> context)\n            => context.IsHoldingDownstream ? context.PushAndPull(element) : _enqueueAction(context, element);\n\n        public override IDownstreamDirective OnPull(IDetachedContext<T> context)\n        {\n            if (context.IsFinishing)\n            {\n                var element = _buffer.Dequeue();\n                return _buffer.IsEmpty ? context.PushAndFinish(element) : context.Push(element);\n            }\n            if (context.IsHoldingUpstream)\n                return context.PushAndPull(_buffer.Dequeue());\n            if (_buffer.IsEmpty)\n                return context.HoldDownstream();\n            return context.Push(_buffer.Dequeue());\n        }\n\n        public override ITerminationDirective OnUpstreamFinish(IDetachedContext<T> context)\n            => _buffer.IsEmpty ? context.Finish() : context.AbsorbTermination();\n\n        private Func<IDet\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal sealed class Buffer<T> : DetachedStage<T, T>\n    {\n        private readonly int _count;\n        private readonly Func<IDetachedContext<T>, T, IUpstreamDirective> _enqueueAction;\n        private IBuffer<T> _buffer;\n\n        public Buffer(int count, OverflowStrategy overflowStrategy)\n        {\n            _count = count;\n            _enqueueAction = EnqueueAction(overflowStrategy);\n        }\n\n        public override void PreStart(ILifecycleContext context)\n            => _buffer = Buffer.Create<T>(_count, context.Materializer);\n\n        public override IUpstreamDirective OnPush(T element, IDetachedContext<T> context)\n            => context.IsHoldingDownstream ? context.PushAndPull(element) : _enqueueAction(context, element);\n\n        public override IDownstreamDirective OnPull(IDetachedContext<T> context)\n        {\n            if (context.IsFinishing)\n            {\n                var element = _buffer.Dequeue();\n                return _buffer.IsEmpty ? context.PushAndFinish(element) : context.Push(element);\n            }\n            if (context.IsHoldingUpstream)\n                return context.PushAndPull(_buffer.Dequeue());\n            if (_buffer.IsEmpty)\n                return context.HoldDownstream();\n            return context.Push(_buffer.Dequeue());\n        }\n\n        public override ITerminationDirective OnUpstreamFinish(IDetachedContext<T> context)\n            => _buffer.IsEmpty ? context.Finish() : context.AbsorbTermination();\n\n        private Func<IDet\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Provides method to instantiate an image 1D/2D/3D supporting TextureArray and mipmaps on the CPU or to load/save an image from the disk.\n    /// </summary>\n    public sealed class Image : Component\n    {\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"dataPointer\"></param>\n        /// <param name=\"dataSize\"></param>\n        /// <param name=\"makeACopy\"></param>\n        /// <param name=\"handle\"></param>\n        /// <returns></returns>\n        public delegate Image ImageLoadDelegate(IntPtr dataPointer, int dataSize, bool makeACopy, GCHandle? handle);\n        public delegate void ImageSaveDelegate(PixelBuffer[] pixelBuffers, int count, ImageDescription description, Stream imageStream);\n        /// <summary>\n        /// Pixel buffers.\n        /// </summary>\n        internal PixelBuffer[] pixelBuffers;\n        private DataBox[] dataBoxArray;\n        private List<int> mipMapToZIndex;\n        private int zBufferCountPerArraySlice;\n        private MipMapDescription[] mipmapDescriptions;\n        private static List<LoadSaveDelegate> loadSaveDelegates = new List<LoadSaveDelegate>();\n        \n        /// <summary>\n        /// Provides access to all pixel buffers.\n        /// </summary>\n        /// <remarks>\n        /// For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.\n        /// For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.\n        /// </r\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Provides method to instantiate an image 1D/2D/3D supporting TextureArray and mipmaps on the CPU or to load/save an image from the disk.\n    /// </summary>\n    public sealed class Image : Component\n    {\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"dataPointer\"></param>\n        /// <param name=\"dataSize\"></param>\n        /// <param name=\"makeACopy\"></param>\n        /// <param name=\"handle\"></param>\n        /// <returns></returns>\n        public delegate Image ImageLoadDelegate(IntPtr dataPointer, int dataSize, bool makeACopy, GCHandle? handle);\n        public delegate void ImageSaveDelegate(PixelBuffer[] pixelBuffers, int count, ImageDescription description, Stream imageStream);\n        /// <summary>\n        /// Pixel buffers.\n        /// </summary>\n        internal PixelBuffer[] pixelBuffers;\n        private DataBox[] dataBoxArray;\n        private List<int> mipMapToZIndex;\n        private int zBufferCountPerArraySlice;\n        private MipMapDescription[] mipmapDescriptions;\n        private static List<LoadSaveDelegate> loadSaveDelegates = new List<LoadSaveDelegate>();\n        \n        /// <summary>\n        /// Provides access to all pixel buffers.\n        /// </summary>\n        /// <remarks>\n        /// For Texture3D, each z slice of the Texture3D has a pixelBufferArray * by the number of mipmaps.\n        /// For other textures, there is Description.MipLevels * Description.ArraySize pixel buffers.\n        /// </r\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// A class which supports creating new <see cref=\"Geometry\"/>s\n    /// which are modifications of existing ones,\n    /// maintaining the same type structure.\n    /// </summary>\n    /// <remarks>\n    /// Geometry objects are intended to be treated as immutable.\n    /// This class allows you to \"modifies\" a Geometrys\n    /// by traversing them, applying a user-defined\n    /// <see cref=\"IGeometryEditorOperation\"/>, <see cref=\"CoordinateSequenceOperation\"/> or <see cref=\"CoordinateOperation\"/>\n    /// and creating a new Geometrys with the same structure but\n    /// (possibly) modified components.\n    /// <para>\n    /// Examples of the kinds of modifications which can be made are:\n    /// <list type=\"Bullet\">\n    /// <item>\n    /// The values of the coordinates may be changed.\n    /// The editor does not check whether changing coordinate values makes the result Geometry invalid\n    /// </item>\n    /// <item>\n    /// The coordinate lists may be changed (e.g. by adding, deleting or modifying coordinates).\n    /// The modified coordinate lists must be consistent with their original parent component\n    /// (e.g. a <tt>LinearRing</tt> must always have at least 4 coordinates, and the first and last\n    /// coordinate must be equal).\n    /// </item>\n    /// <item>\n    /// Components of the original point may be deleted\n    /// (e.g. holes may be removed from a Polygon, or LineStrings removed from a MultiLineString).\n    /// Deletions will be propagated up the com\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// A class which supports creating new <see cref=\"Geometry\"/>s\n    /// which are modifications of existing ones,\n    /// maintaining the same type structure.\n    /// </summary>\n    /// <remarks>\n    /// Geometry objects are intended to be treated as immutable.\n    /// This class allows you to \"modifies\" a Geometrys\n    /// by traversing them, applying a user-defined\n    /// <see cref=\"IGeometryEditorOperation\"/>, <see cref=\"CoordinateSequenceOperation\"/> or <see cref=\"CoordinateOperation\"/>\n    /// and creating a new Geometrys with the same structure but\n    /// (possibly) modified components.\n    /// <para>\n    /// Examples of the kinds of modifications which can be made are:\n    /// <list type=\"Bullet\">\n    /// <item>\n    /// The values of the coordinates may be changed.\n    /// The editor does not check whether changing coordinate values makes the result Geometry invalid\n    /// </item>\n    /// <item>\n    /// The coordinate lists may be changed (e.g. by adding, deleting or modifying coordinates).\n    /// The modified coordinate lists must be consistent with their original parent component\n    /// (e.g. a <tt>LinearRing</tt> must always have at least 4 coordinates, and the first and last\n    /// coordinate must be equal).\n    /// </item>\n    /// <item>\n    /// Components of the original point may be deleted\n    /// (e.g. holes may be removed from a Polygon, or LineStrings removed from a MultiLineString).\n    /// Deletions will be propagated up the com\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class Program\n    {\n        private static readonly object configLock = new object();\n        public static AutoJoinManager AutoJoinManager;\n        public static bool CloseOnNext;\n        public static Config Conf;\n        public static string[] StartupArgs;\n        public static string StartupPath = Path.GetDirectoryName(Path.GetFullPath(Application.ExecutablePath));\n        public static ToolTipHandler ToolTip;\n        public static BattleBar BattleBar { get; private set; }\n        public static BattleIconManager BattleIconManager { get; private set; }\n        public static BrowserInterop BrowserInterop { get; private set; }\n        public static ConnectBar ConnectBar { get; private set; }\n        public static PlasmaDownloader.PlasmaDownloader Downloader { get; private set; }\n        public static EngineConfigurator EngineConfigurator { get; set; }\n        public static MainWindow MainWindow { get; private set; }\n        public static ModStore ModStore { get; private set; }\n        public static NotifySection NotifySection { get { return MainWindow.NotifySection; } }\n        public static SayCommandHandler SayCommandHandler { get; private set; }\n        public static SelfUpdater SelfUpdater { get; set; }\n        public static ServerImagesHandler ServerImages { get; private set; }\n        public static SpringPaths SpringPaths { get; private set; }\n\n        public static ZklSteamHandler SteamHandler { get; private set; }\n        public static PlasmaResou\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class Program\n    {\n        private static readonly object configLock = new object();\n        public static AutoJoinManager AutoJoinManager;\n        public static bool CloseOnNext;\n        public static Config Conf;\n        public static string[] StartupArgs;\n        public static string StartupPath = Path.GetDirectoryName(Path.GetFullPath(Application.ExecutablePath));\n        public static ToolTipHandler ToolTip;\n        public static BattleBar BattleBar { get; private set; }\n        public static BattleIconManager BattleIconManager { get; private set; }\n        public static BrowserInterop BrowserInterop { get; private set; }\n        public static ConnectBar ConnectBar { get; private set; }\n        public static PlasmaDownloader.PlasmaDownloader Downloader { get; private set; }\n        public static EngineConfigurator EngineConfigurator { get; set; }\n        public static MainWindow MainWindow { get; private set; }\n        public static ModStore ModStore { get; private set; }\n        public static NotifySection NotifySection { get { return MainWindow.NotifySection; } }\n        public static SayCommandHandler SayCommandHandler { get; private set; }\n        public static SelfUpdater SelfUpdater { get; set; }\n        public static ServerImagesHandler ServerImages { get; private set; }\n        public static SpringPaths SpringPaths { get; private set; }\n\n        public static ZklSteamHandler SteamHandler { get; private set; }\n        public static PlasmaResou\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tsealed class MyPEImage : IDisposable {\n\t\tIPEImage peImage;\n\t\tbyte[] peImageData;\n\t\tIImageStream peStream;\n\t\tDotNetFile dnFile;\n\t\tbool dnFileInitialized;\n\t\tImageSectionHeader dotNetSection;\n\t\tbool ownPeImage;\n\n\t\tpublic DotNetFile DotNetFile {\n\t\t\tget {\n\t\t\t\tif (dnFileInitialized)\n\t\t\t\t\treturn dnFile;\n\t\t\t\tdnFileInitialized = true;\n\n\t\t\t\tvar dotNetDir = peImage.ImageNTHeaders.OptionalHeader.DataDirectories[14];\n\t\t\t\tif (dotNetDir.VirtualAddress != 0 && dotNetDir.Size >= 0x48) {\n\t\t\t\t\tdnFile = DotNetFile.Load(peImage, false);\n\t\t\t\t\tdotNetSection = FindSection(dotNetDir.VirtualAddress);\n\t\t\t\t}\n\t\t\t\treturn dnFile;\n\t\t\t}\n\t\t}\n\n\t\tpublic ImageCor20Header Cor20Header {\n\t\t\tget { return DotNetFile.MetaData.ImageCor20Header; }\n\t\t}\n\n\t\tpublic IBinaryReader Reader {\n\t\t\tget { return peStream; }\n\t\t}\n\n\t\tpublic IPEImage PEImage {\n\t\t\tget { return peImage; }\n\t\t}\n\n\t\tpublic ImageFileHeader FileHeader {\n\t\t\tget { return peImage.ImageNTHeaders.FileHeader; }\n\t\t}\n\n\t\tpublic IImageOptionalHeader OptionalHeader {\n\t\t\tget { return peImage.ImageNTHeaders.OptionalHeader; }\n\t\t}\n\n\t\tpublic IList<ImageSectionHeader> Sections {\n\t\t\tget { return peImage.ImageSectionHeaders; }\n\t\t}\n\n\t\tpublic uint Length {\n\t\t\tget { return (uint)peStream.Length; }\n\t\t}\n\n\t\tpublic MyPEImage(IPEImage peImage) {\n\t\t\tInitialize(peImage);\n\t\t}\n\n\t\tpublic MyPEImage(byte[] peImageData) {\n\t\t\tthis.ownPeImage = true;\n\t\t\tthis.peImageData = peImageData;\n\t\t\tInitialize(new PEImage(peImageData));\n\t\t}\n\n\t\tvoid Initialize(IPEImage peImage) {\n\t\t\tthis.peImage = peImage;\n\t\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tsealed class MyPEImage : IDisposable {\n\t\tIPEImage peImage;\n\t\tbyte[] peImageData;\n\t\tIImageStream peStream;\n\t\tDotNetFile dnFile;\n\t\tbool dnFileInitialized;\n\t\tImageSectionHeader dotNetSection;\n\t\tbool ownPeImage;\n\n\t\tpublic DotNetFile DotNetFile {\n\t\t\tget {\n\t\t\t\tif (dnFileInitialized)\n\t\t\t\t\treturn dnFile;\n\t\t\t\tdnFileInitialized = true;\n\n\t\t\t\tvar dotNetDir = peImage.ImageNTHeaders.OptionalHeader.DataDirectories[14];\n\t\t\t\tif (dotNetDir.VirtualAddress != 0 && dotNetDir.Size >= 0x48) {\n\t\t\t\t\tdnFile = DotNetFile.Load(peImage, false);\n\t\t\t\t\tdotNetSection = FindSection(dotNetDir.VirtualAddress);\n\t\t\t\t}\n\t\t\t\treturn dnFile;\n\t\t\t}\n\t\t}\n\n\t\tpublic ImageCor20Header Cor20Header {\n\t\t\tget { return DotNetFile.MetaData.ImageCor20Header; }\n\t\t}\n\n\t\tpublic IBinaryReader Reader {\n\t\t\tget { return peStream; }\n\t\t}\n\n\t\tpublic IPEImage PEImage {\n\t\t\tget { return peImage; }\n\t\t}\n\n\t\tpublic ImageFileHeader FileHeader {\n\t\t\tget { return peImage.ImageNTHeaders.FileHeader; }\n\t\t}\n\n\t\tpublic IImageOptionalHeader OptionalHeader {\n\t\t\tget { return peImage.ImageNTHeaders.OptionalHeader; }\n\t\t}\n\n\t\tpublic IList<ImageSectionHeader> Sections {\n\t\t\tget { return peImage.ImageSectionHeaders; }\n\t\t}\n\n\t\tpublic uint Length {\n\t\t\tget { return (uint)peStream.Length; }\n\t\t}\n\n\t\tpublic MyPEImage(IPEImage peImage) {\n\t\t\tInitialize(peImage);\n\t\t}\n\n\t\tpublic MyPEImage(byte[] peImageData) {\n\t\t\tthis.ownPeImage = true;\n\t\t\tthis.peImageData = peImageData;\n\t\t\tInitialize(new PEImage(peImageData));\n\t\t}\n\n\t\tvoid Initialize(IPEImage peImage) {\n\t\t\tthis.peImage = peImage;\n\t\t\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class SLaserBurnParticlesObject : SSInstancedMeshRenderer\n    {\n        protected SSObject _burningObject = null;\n\n        public SLaserBurnParticleSystem particleSystem {\n            get { return base.instanceData as SLaserBurnParticleSystem; }\n        }\n\n        public SLaserBurnParticlesObject (SSObject burningObject, int particleCapacity = 100, SSTexture texture = null)\n            : base(new SLaserBurnParticleSystem (particleCapacity), \n                   SSTexturedQuad.doubleFaceInstance, _defaultUsageHint)\n        {\n            _burningObject = burningObject;\n            if (_burningObject != null) {\n                // do this now because render may never get called otherwise due to frustum culling\n                // and world mat will never get updated and never rendered\n                this.worldMat = _burningObject.worldMat;\n            }\n\n            renderState.castsShadow = false;\n            renderState.receivesShadows = false;\n            renderState.doBillboarding = false;\n            renderState.depthTest = true;\n            renderState.depthWrite = false;\n            renderState.lighted = false;\n\n            renderState.alphaBlendingOn = true;\n            renderState.blendFactorSrcRGB = renderState.blendFactorSrcAlpha = BlendingFactorSrc.SrcAlpha;\n\t\t\trenderState.blendFactorDestRGB = renderState.blendFactorDestAlpha = BlendingFactorDest.One;\n\n            // bypass frustum culling so camera updates are sent to activate particle emission\n            \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class SLaserBurnParticlesObject : SSInstancedMeshRenderer\n    {\n        protected SSObject _burningObject = null;\n\n        public SLaserBurnParticleSystem particleSystem {\n            get { return base.instanceData as SLaserBurnParticleSystem; }\n        }\n\n        public SLaserBurnParticlesObject (SSObject burningObject, int particleCapacity = 100, SSTexture texture = null)\n            : base(new SLaserBurnParticleSystem (particleCapacity), \n                   SSTexturedQuad.doubleFaceInstance, _defaultUsageHint)\n        {\n            _burningObject = burningObject;\n            if (_burningObject != null) {\n                // do this now because render may never get called otherwise due to frustum culling\n                // and world mat will never get updated and never rendered\n                this.worldMat = _burningObject.worldMat;\n            }\n\n            renderState.castsShadow = false;\n            renderState.receivesShadows = false;\n            renderState.doBillboarding = false;\n            renderState.depthTest = true;\n            renderState.depthWrite = false;\n            renderState.lighted = false;\n\n            renderState.alphaBlendingOn = true;\n            renderState.blendFactorSrcRGB = renderState.blendFactorSrcAlpha = BlendingFactorSrc.SrcAlpha;\n\t\t\trenderState.blendFactorDestRGB = renderState.blendFactorDestAlpha = BlendingFactorDest.One;\n\n            // bypass frustum culling so camera updates are sent to activate particle emission\n            \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// API queries for artists.\n\t/// </summary>\n\t[RoutePrefix(\"api/artists\")]\n\tpublic class ArtistApiController : ApiController {\n\n\t\tprivate const int absoluteMax = 100;\n\t\tprivate const int defaultMax = 10;\n\t\tprivate readonly ObjectCache cache;\n\t\tprivate readonly ArtistQueries queries;\n\t\tprivate readonly ArtistService service;\n\t\tprivate readonly IEntryThumbPersister thumbPersister;\n\n\t\tpublic ArtistApiController(ArtistQueries queries, ArtistService service, IEntryThumbPersister thumbPersister, ObjectCache cache) {\n\t\t\tthis.queries = queries;\n\t\t\tthis.service = service;\n\t\t\tthis.thumbPersister = thumbPersister;\n\t\t\tthis.cache = cache;\n\t\t}\n\n\t\tprivate ArtistForApiContract GetArtist(Artist a, ArtistMergeRecord m, \n\t\t\tArtistOptionalFields fields, \n\t\t\tArtistRelationsFields relations,\n\t\t\tContentLanguagePreference lang,\n\t\t\tIDatabaseContext<Artist> ctx) {\n\t\t\t\n\t\t\tvar contract = new ArtistForApiContract(a, lang, thumbPersister, fields);\n\n\t\t\tif (relations != ArtistRelationsFields.None) {\n\t\t\t\tcontract.Relations = new ArtistRelationsQuery(ctx, lang, cache, thumbPersister).GetRelations(a, relations);\n\t\t\t}\n\n\t\t\treturn contract;\n\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Deletes an artist.\n\t\t/// </summary>\n\t\t/// <param name=\"id\">ID of the artist to be deleted.</param>\n\t\t/// <param name=\"notes\">Notes.</param>\n\t\t[Route(\"{id:int}\")]\n\t\t[Authorize]\n\t\tpublic void Delete(int id, string notes = \"\") {\n\t\t\t\n\t\t\tservice.Delete(id, notes ?? string.Empty);\n\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Deletes a comment.\n\t\t/// </sum\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// API queries for artists.\n\t/// </summary>\n\t[RoutePrefix(\"api/artists\")]\n\tpublic class ArtistApiController : ApiController {\n\n\t\tprivate const int absoluteMax = 100;\n\t\tprivate const int defaultMax = 10;\n\t\tprivate readonly ObjectCache cache;\n\t\tprivate readonly ArtistQueries queries;\n\t\tprivate readonly ArtistService service;\n\t\tprivate readonly IEntryThumbPersister thumbPersister;\n\n\t\tpublic ArtistApiController(ArtistQueries queries, ArtistService service, IEntryThumbPersister thumbPersister, ObjectCache cache) {\n\t\t\tthis.queries = queries;\n\t\t\tthis.service = service;\n\t\t\tthis.thumbPersister = thumbPersister;\n\t\t\tthis.cache = cache;\n\t\t}\n\n\t\tprivate ArtistForApiContract GetArtist(Artist a, ArtistMergeRecord m, \n\t\t\tArtistOptionalFields fields, \n\t\t\tArtistRelationsFields relations,\n\t\t\tContentLanguagePreference lang,\n\t\t\tIDatabaseContext<Artist> ctx) {\n\t\t\t\n\t\t\tvar contract = new ArtistForApiContract(a, lang, thumbPersister, fields);\n\n\t\t\tif (relations != ArtistRelationsFields.None) {\n\t\t\t\tcontract.Relations = new ArtistRelationsQuery(ctx, lang, cache, thumbPersister).GetRelations(a, relations);\n\t\t\t}\n\n\t\t\treturn contract;\n\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Deletes an artist.\n\t\t/// </summary>\n\t\t/// <param name=\"id\">ID of the artist to be deleted.</param>\n\t\t/// <param name=\"notes\">Notes.</param>\n\t\t[Route(\"{id:int}\")]\n\t\t[Authorize]\n\t\tpublic void Delete(int id, string notes = \"\") {\n\t\t\t\n\t\t\tservice.Delete(id, notes ?? string.Empty);\n\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Deletes a comment.\n\t\t/// </sum\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// \n    /// </summary>\n    [Description( \"Select a comma-delimited list of members of the group\" )]\n    [Export( typeof( DataSelectComponent ) )]\n    [ExportMetadata( \"ComponentName\", \"Select Group Member List\" )]\n    public class MemberListSelect : DataSelectComponent, IRecipientDataSelect\n    {\n        #region Properties\n\n        /// <summary>\n        /// Gets the name of the entity type. Filter should be an empty string\n        /// if it applies to all entities\n        /// </summary>\n        /// <value>\n        /// The name of the entity type.\n        /// </value>\n        public override string AppliesToEntityType\n        {\n            get\n            {\n                return typeof( Rock.Model.Group ).FullName;\n            }\n        }\n\n        /// <summary>\n        /// Gets the section that this will appear in in the Field Selector\n        /// </summary>\n        /// <value>\n        /// The section.\n        /// </value>\n        public override string Section\n        {\n            get\n            {\n                return base.Section;\n            }\n        }\n\n        /// <summary>\n        /// The PropertyName of the property in the anonymous class returned by the SelectExpression\n        /// </summary>\n        /// <value>\n        /// The name of the column property.\n        /// </value>\n        public override string ColumnPropertyName\n        {\n            get\n            {\n                return \"MemberList\";\n            }\n        }\n\n        /// <su\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// \n    /// </summary>\n    [Description( \"Select a comma-delimited list of members of the group\" )]\n    [Export( typeof( DataSelectComponent ) )]\n    [ExportMetadata( \"ComponentName\", \"Select Group Member List\" )]\n    public class MemberListSelect : DataSelectComponent, IRecipientDataSelect\n    {\n        #region Properties\n\n        /// <summary>\n        /// Gets the name of the entity type. Filter should be an empty string\n        /// if it applies to all entities\n        /// </summary>\n        /// <value>\n        /// The name of the entity type.\n        /// </value>\n        public override string AppliesToEntityType\n        {\n            get\n            {\n                return typeof( Rock.Model.Group ).FullName;\n            }\n        }\n\n        /// <summary>\n        /// Gets the section that this will appear in in the Field Selector\n        /// </summary>\n        /// <value>\n        /// The section.\n        /// </value>\n        public override string Section\n        {\n            get\n            {\n                return base.Section;\n            }\n        }\n\n        /// <summary>\n        /// The PropertyName of the property in the anonymous class returned by the SelectExpression\n        /// </summary>\n        /// <value>\n        /// The name of the column property.\n        /// </value>\n        public override string ColumnPropertyName\n        {\n            get\n            {\n                return \"MemberList\";\n            }\n        }\n\n        /// <su\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Adds the X-Powered-By header with values OrchardCore.\n    /// </summary>\n    public class PoweredByMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IPoweredByMiddlewareOptions _options;\n\n        public PoweredByMiddleware(RequestDelegate next, IPoweredByMiddlewareOptions options)\n        {\n            _next = next;\n            _options = options;\n        }\n\n        public Task Invoke(HttpContext httpContext)\n        {\n            if (_options.Enabled)\n            {\n                httpContext.Response.Headers[_options.HeaderName] = _options.HeaderValue;\n            }\n            \n            return _next.Invoke(httpContext);\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Adds the X-Powered-By header with values OrchardCore.\n    /// </summary>\n    public class PoweredByMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IPoweredByMiddlewareOptions _options;\n\n        public PoweredByMiddleware(RequestDelegate next, IPoweredByMiddlewareOptions options)\n        {\n            _next = next;\n            _options = options;\n        }\n\n        public Task Invoke(HttpContext httpContext)\n        {\n            if (_options.Enabled)\n            {\n                httpContext.Response.Headers[_options.HeaderName] = _options.HeaderValue;\n            }\n            \n            return _next.Invoke(httpContext);\n        }\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n\tpublic class TimedSwitchableItem : XmlLatch, ILinkable\n\t{\n\t\tprivate int m_SwitchSound = 939;\n\t\tprivate Item m_TargetItem0 = null;\n\t\tprivate string m_TargetProperty0 = null;\n\t\tprivate Item m_TargetItem1 = null;\n\t\tprivate string m_TargetProperty1 = null;\n\t\tprivate int m_ItemID0 = 0x108F;\n\t\tprivate int m_ItemID1 = 0x1090;\n\n\t\tprivate Item m_LinkedItem = null;\n\t\tprivate bool already_being_activated = false;\n\n\t\tprivate Point3D m_Offset = Point3D.Zero;\n\n\t\tprivate bool m_Disabled = false;\n\t\tprivate bool m_NoDoubleClick = false;\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic bool Disabled\n\t\t{\n\t\t\tset { m_Disabled = value; }\n\t\t\tget { return m_Disabled; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic bool NoDoubleClick\n\t\t{\n\t\t\tset { m_NoDoubleClick = value; }\n\t\t\tget { return m_NoDoubleClick; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic Point3D Offset\n\t\t{\n\t\t\tset { m_Offset = value; }\n\t\t\tget { return m_Offset; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic Item Link\n\t\t{\n\t\t\tset { m_LinkedItem = value; }\n\t\t\tget { return m_LinkedItem; }\n\t\t}\n\n\t\t[Constructable]\n\t\tpublic TimedSwitchableItem() : base( 0x108F )\n\t\t{\n\t\t\tName = \"A switchable item\";\n\t\t\tMovable = false;\n\t\t}\n\n\t\tpublic TimedSwitchableItem( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic override int State\n\t\t{\n\t\t\tget { return base.State; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t// prevent infinite recursion \n\t\t\t\tif (!already_being_activated)\n\t\t\t\t{\n\t\t\t\t\talready_bein\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n\tpublic class TimedSwitchableItem : XmlLatch, ILinkable\n\t{\n\t\tprivate int m_SwitchSound = 939;\n\t\tprivate Item m_TargetItem0 = null;\n\t\tprivate string m_TargetProperty0 = null;\n\t\tprivate Item m_TargetItem1 = null;\n\t\tprivate string m_TargetProperty1 = null;\n\t\tprivate int m_ItemID0 = 0x108F;\n\t\tprivate int m_ItemID1 = 0x1090;\n\n\t\tprivate Item m_LinkedItem = null;\n\t\tprivate bool already_being_activated = false;\n\n\t\tprivate Point3D m_Offset = Point3D.Zero;\n\n\t\tprivate bool m_Disabled = false;\n\t\tprivate bool m_NoDoubleClick = false;\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic bool Disabled\n\t\t{\n\t\t\tset { m_Disabled = value; }\n\t\t\tget { return m_Disabled; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic bool NoDoubleClick\n\t\t{\n\t\t\tset { m_NoDoubleClick = value; }\n\t\t\tget { return m_NoDoubleClick; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic Point3D Offset\n\t\t{\n\t\t\tset { m_Offset = value; }\n\t\t\tget { return m_Offset; }\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic Item Link\n\t\t{\n\t\t\tset { m_LinkedItem = value; }\n\t\t\tget { return m_LinkedItem; }\n\t\t}\n\n\t\t[Constructable]\n\t\tpublic TimedSwitchableItem() : base( 0x108F )\n\t\t{\n\t\t\tName = \"A switchable item\";\n\t\t\tMovable = false;\n\t\t}\n\n\t\tpublic TimedSwitchableItem( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n\t\tpublic override int State\n\t\t{\n\t\t\tget { return base.State; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t// prevent infinite recursion \n\t\t\t\tif (!already_being_activated)\n\t\t\t\t{\n\t\t\t\t\talready_bein\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  #if !SILVERLIGHT\n  [Serializable]\n  #endif\n  public partial class SystemConfiguration : TBase\n  {\n    private string _endpoint;\n    private string _endpointSsl;\n    private string _updateUrl;\n    private string _c2dmAccount;\n    private string _nniServer;\n\n    public string Endpoint\n    {\n      get\n      {\n        return _endpoint;\n      }\n      set\n      {\n        __isset.endpoint = true;\n        this._endpoint = value;\n      }\n    }\n\n    public string EndpointSsl\n    {\n      get\n      {\n        return _endpointSsl;\n      }\n      set\n      {\n        __isset.endpointSsl = true;\n        this._endpointSsl = value;\n      }\n    }\n\n    public string UpdateUrl\n    {\n      get\n      {\n        return _updateUrl;\n      }\n      set\n      {\n        __isset.updateUrl = true;\n        this._updateUrl = value;\n      }\n    }\n\n    public string C2dmAccount\n    {\n      get\n      {\n        return _c2dmAccount;\n      }\n      set\n      {\n        __isset.c2dmAccount = true;\n        this._c2dmAccount = value;\n      }\n    }\n\n    public string NniServer\n    {\n      get\n      {\n        return _nniServer;\n      }\n      set\n      {\n        __isset.nniServer = true;\n        this._nniServer = value;\n      }\n    }\n\n\n    public Isset __isset;\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public struct Isset {\n      public bool endpoint;\n      public bool endpointSsl;\n      public bool updateUrl;\n      public bool c2dmAccount;\n      public bool nniServer;\n    }\n\n    public SystemConfiguration() {\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  #if !SILVERLIGHT\n  [Serializable]\n  #endif\n  public partial class SystemConfiguration : TBase\n  {\n    private string _endpoint;\n    private string _endpointSsl;\n    private string _updateUrl;\n    private string _c2dmAccount;\n    private string _nniServer;\n\n    public string Endpoint\n    {\n      get\n      {\n        return _endpoint;\n      }\n      set\n      {\n        __isset.endpoint = true;\n        this._endpoint = value;\n      }\n    }\n\n    public string EndpointSsl\n    {\n      get\n      {\n        return _endpointSsl;\n      }\n      set\n      {\n        __isset.endpointSsl = true;\n        this._endpointSsl = value;\n      }\n    }\n\n    public string UpdateUrl\n    {\n      get\n      {\n        return _updateUrl;\n      }\n      set\n      {\n        __isset.updateUrl = true;\n        this._updateUrl = value;\n      }\n    }\n\n    public string C2dmAccount\n    {\n      get\n      {\n        return _c2dmAccount;\n      }\n      set\n      {\n        __isset.c2dmAccount = true;\n        this._c2dmAccount = value;\n      }\n    }\n\n    public string NniServer\n    {\n      get\n      {\n        return _nniServer;\n      }\n      set\n      {\n        __isset.nniServer = true;\n        this._nniServer = value;\n      }\n    }\n\n\n    public Isset __isset;\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public struct Isset {\n      public bool endpoint;\n      public bool endpointSsl;\n      public bool updateUrl;\n      public bool c2dmAccount;\n      public bool nniServer;\n    }\n\n    public SystemConfiguration() {\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class SExplosionRenderer : SSInstancedMeshRenderer\n\t{\n        protected SSObject _attachTo = null;\n\n        public SSObject attachTo {\n            get { return _attachTo; }\n            set { \n                _attachTo = value;\n                if (_attachTo != null && !_attachTo.renderState.toBeDeleted) {\n                    // do this now because render may never get called otherwise due to frustum culling\n                    // and world mat will never get updated and never rendered\n                    this.worldMat = _attachTo.worldMat;\n                }\n            }\n        }\n\n        public SExplosionSystem particleSystem {\n\t\t\tget { return base.instanceData as SExplosionSystem; }\n\t\t}\n\n        public SExplosionParameters parameters {\n            get { return particleSystem.parameters; }\n            set {\n                this.particleSystem.parameters = value;\n                var texture = particleSystem.parameters.getTexture();\n                this.textureMaterial = new SSTextureMaterial(diffuse: texture);\n            }\n        }\n\n        public SExplosionRenderer(int particleCapacity = 500, \n                                  SExplosionParameters eParams = null)\n            : base(new SExplosionSystem(eParams ?? new SExplosionParameters(), particleCapacity),\n\t\t\t\t   SSTexturedQuad.doubleFaceInstance,\n\t\t\t\t   _defaultUsageHint\n\t\t\t )\n\t\t{\n\t\t\trenderState.castsShadow = false;\n\t\t\trenderState.receivesShadows = false;\n            renderState.doBillboarding = false;\n    \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class SExplosionRenderer : SSInstancedMeshRenderer\n\t{\n        protected SSObject _attachTo = null;\n\n        public SSObject attachTo {\n            get { return _attachTo; }\n            set { \n                _attachTo = value;\n                if (_attachTo != null && !_attachTo.renderState.toBeDeleted) {\n                    // do this now because render may never get called otherwise due to frustum culling\n                    // and world mat will never get updated and never rendered\n                    this.worldMat = _attachTo.worldMat;\n                }\n            }\n        }\n\n        public SExplosionSystem particleSystem {\n\t\t\tget { return base.instanceData as SExplosionSystem; }\n\t\t}\n\n        public SExplosionParameters parameters {\n            get { return particleSystem.parameters; }\n            set {\n                this.particleSystem.parameters = value;\n                var texture = particleSystem.parameters.getTexture();\n                this.textureMaterial = new SSTextureMaterial(diffuse: texture);\n            }\n        }\n\n        public SExplosionRenderer(int particleCapacity = 500, \n                                  SExplosionParameters eParams = null)\n            : base(new SExplosionSystem(eParams ?? new SExplosionParameters(), particleCapacity),\n\t\t\t\t   SSTexturedQuad.doubleFaceInstance,\n\t\t\t\t   _defaultUsageHint\n\t\t\t )\n\t\t{\n\t\t\trenderState.castsShadow = false;\n\t\t\trenderState.receivesShadows = false;\n            renderState.doBillboarding = false;\n    \nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpartial class frmGenerator : System.Windows.Forms.Form\n\t{\n\t\t\n\t\t//Form overrides dispose to clean up the component list.\n\t\t[System.Diagnostics.DebuggerNonUserCode()]protected override void Dispose(bool disposing)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (disposing && components != null)\n\t\t\t\t{\n\t\t\t\t\tcomponents.Dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tbase.Dispose(disposing);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Required by the Windows Form Designer\n\t\tprivate System.ComponentModel.Container components = null;\n\t\t\n\t\t//NOTE: The following procedure is required by the Windows Form Designer\n\t\t//It can be modified using the Windows Form Designer.\n\t\t//Do not modify it using the code editor.\n\t\t[System.Diagnostics.DebuggerStepThrough()]private void InitializeComponent()\n\t\t{\n\t\t\tthis.Label1 = new System.Windows.Forms.Label();\n\t\t\tthis.FormClosing += frmGenerator_FormClosing;\n\t\t\tthis.Load += frmWZMapGen_Load;\n\t\t\tthis.txtWidth = new System.Windows.Forms.TextBox();\n\t\t\tthis.txtHeight = new System.Windows.Forms.TextBox();\n\t\t\tthis.Label2 = new System.Windows.Forms.Label();\n\t\t\tthis.txt1x = new System.Windows.Forms.TextBox();\n\t\t\tthis.Label3 = new System.Windows.Forms.Label();\n\t\t\tthis.Label4 = new System.Windows.Forms.Label();\n\t\t\tthis.Label5 = new System.Windows.Forms.Label();\n\t\t\tthis.rdoPlayer2 = new System.Windows.Forms.RadioButton();\n\t\t\tthis.rdoPlayer2.CheckedChanged += this.rdoPlayer2_CheckedChanged;\n\t\t\tthis.txt1y = new System.Windows.Forms.TextBox();\n\t\t\tthis.txt2y = new System.Windows.Forms.TextBox();\n\t\t\tthis.txt2x = new System.Win\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpartial class frmGenerator : System.Windows.Forms.Form\n\t{\n\t\t\n\t\t//Form overrides dispose to clean up the component list.\n\t\t[System.Diagnostics.DebuggerNonUserCode()]protected override void Dispose(bool disposing)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (disposing && components != null)\n\t\t\t\t{\n\t\t\t\t\tcomponents.Dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tbase.Dispose(disposing);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Required by the Windows Form Designer\n\t\tprivate System.ComponentModel.Container components = null;\n\t\t\n\t\t//NOTE: The following procedure is required by the Windows Form Designer\n\t\t//It can be modified using the Windows Form Designer.\n\t\t//Do not modify it using the code editor.\n\t\t[System.Diagnostics.DebuggerStepThrough()]private void InitializeComponent()\n\t\t{\n\t\t\tthis.Label1 = new System.Windows.Forms.Label();\n\t\t\tthis.FormClosing += frmGenerator_FormClosing;\n\t\t\tthis.Load += frmWZMapGen_Load;\n\t\t\tthis.txtWidth = new System.Windows.Forms.TextBox();\n\t\t\tthis.txtHeight = new System.Windows.Forms.TextBox();\n\t\t\tthis.Label2 = new System.Windows.Forms.Label();\n\t\t\tthis.txt1x = new System.Windows.Forms.TextBox();\n\t\t\tthis.Label3 = new System.Windows.Forms.Label();\n\t\t\tthis.Label4 = new System.Windows.Forms.Label();\n\t\t\tthis.Label5 = new System.Windows.Forms.Label();\n\t\t\tthis.rdoPlayer2 = new System.Windows.Forms.RadioButton();\n\t\t\tthis.rdoPlayer2.CheckedChanged += this.rdoPlayer2_CheckedChanged;\n\t\t\tthis.txt1y = new System.Windows.Forms.TextBox();\n\t\t\tthis.txt2y = new System.Windows.Forms.TextBox();\n\t\t\tthis.txt2x = new System.Win\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class MetricsModule : NancyModule\n    {\n        private struct ModuleConfig\n        {\n            public readonly string ModulePath;\n            public readonly Action<INancyModule> ModuleConfigAction;\n            public readonly MetricsDataProvider DataProvider;\n            public readonly Func<HealthStatus> HealthStatus;\n\n            public ModuleConfig(MetricsDataProvider dataProvider, Func<HealthStatus> healthStatus, Action<INancyModule> moduleConfig, string metricsPath)\n            {\n                this.DataProvider = dataProvider;\n                this.HealthStatus = healthStatus;\n                this.ModuleConfigAction = moduleConfig;\n                this.ModulePath = metricsPath;\n            }\n        }\n\n        private static ModuleConfig Config;\n        private static bool healthChecksAlwaysReturnHttpStatusOk = false;\n\n        internal static void Configure(MetricsDataProvider dataProvider, Func<HealthStatus> healthStatus, Action<INancyModule> moduleConfig, string metricsPath)\n        {\n            MetricsModule.Config = new ModuleConfig(dataProvider, healthStatus, moduleConfig, metricsPath);\n        }\n\n        internal static void ConfigureHealthChecks(bool alwaysReturnOk)\n        {\n            healthChecksAlwaysReturnHttpStatusOk = alwaysReturnOk;\n        }\n\n        public MetricsModule()\n            : base(Config.ModulePath ?? \"/\")\n        {\n            if (string.IsNullOrEmpty(Config.ModulePath))\n            {\n                return;\n            }\n\n  \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class MetricsModule : NancyModule\n    {\n        private struct ModuleConfig\n        {\n            public readonly string ModulePath;\n            public readonly Action<INancyModule> ModuleConfigAction;\n            public readonly MetricsDataProvider DataProvider;\n            public readonly Func<HealthStatus> HealthStatus;\n\n            public ModuleConfig(MetricsDataProvider dataProvider, Func<HealthStatus> healthStatus, Action<INancyModule> moduleConfig, string metricsPath)\n            {\n                this.DataProvider = dataProvider;\n                this.HealthStatus = healthStatus;\n                this.ModuleConfigAction = moduleConfig;\n                this.ModulePath = metricsPath;\n            }\n        }\n\n        private static ModuleConfig Config;\n        private static bool healthChecksAlwaysReturnHttpStatusOk = false;\n\n        internal static void Configure(MetricsDataProvider dataProvider, Func<HealthStatus> healthStatus, Action<INancyModule> moduleConfig, string metricsPath)\n        {\n            MetricsModule.Config = new ModuleConfig(dataProvider, healthStatus, moduleConfig, metricsPath);\n        }\n\n        internal static void ConfigureHealthChecks(bool alwaysReturnOk)\n        {\n            healthChecksAlwaysReturnHttpStatusOk = alwaysReturnOk;\n        }\n\n        public MetricsModule()\n            : base(Config.ModulePath ?? \"/\")\n        {\n            if (string.IsNullOrEmpty(Config.ModulePath))\n            {\n                return;\n            }\n\n  \nAnswer: ____________ \n\nThe answer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic sealed class CorpseContent6017 : Packet\n\t{\n\t\tpublic CorpseContent6017(Mobile beholder, Corpse beheld)\n\t\t\t: base(0x3C)\n\t\t{\n\t\t\tvar items = beheld.EquipItems;\n\t\t\tint count = items.Count;\n\n\t\t\tif (beheld.Hair != null && beheld.Hair.ItemID > 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (beheld.FacialHair != null && beheld.FacialHair.ItemID > 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tEnsureCapacity(5 + (count * 20));\n\n\t\t\tlong pos = m_Stream.Position;\n\n\t\t\tint written = 0;\n\n\t\t\tm_Stream.Write((ushort)0);\n\n\t\t\tfor (int i = 0; i < items.Count; ++i)\n\t\t\t{\n\t\t\t\tItem child = items[i];\n\n\t\t\t\tif (!child.Deleted && child.Parent == beheld && beholder.CanSee(child))\n\t\t\t\t{\n\t\t\t\t\tm_Stream.Write(child.Serial);\n\t\t\t\t\tm_Stream.Write((ushort)child.ItemID);\n\t\t\t\t\tm_Stream.Write((byte)0); // signed, itemID offset\n\t\t\t\t\tm_Stream.Write((ushort)child.Amount);\n\t\t\t\t\tm_Stream.Write((short)child.X);\n\t\t\t\t\tm_Stream.Write((short)child.Y);\n\t\t\t\t\tm_Stream.Write((byte)0); // Grid Location?\n\t\t\t\t\tm_Stream.Write(beheld.Serial);\n\t\t\t\t\tm_Stream.Write((ushort)child.Hue);\n\n\t\t\t\t\t++written;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (beheld.Hair != null && beheld.Hair.ItemID > 0)\n\t\t\t{\n\t\t\t\tm_Stream.Write(HairInfo.FakeSerial(beheld.Owner) - 2);\n\t\t\t\tm_Stream.Write((ushort)beheld.Hair.ItemID);\n\t\t\t\tm_Stream.Write((byte)0); // signed, itemID offset\n\t\t\t\tm_Stream.Write((ushort)1);\n\t\t\t\tm_Stream.Write((short)0);\n\t\t\t\tm_Stream.Write((short)0);\n\t\t\t\tm_Stream.Write((byte)0); // Grid Location?\n\t\t\t\tm_Stream.Write(beheld.Serial);\n\t\t\t\tm_Stream.Write((ushort)beheld.Hair.Hue);\n\n\t\t\t\t++written;\n\t\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic sealed class CorpseContent6017 : Packet\n\t{\n\t\tpublic CorpseContent6017(Mobile beholder, Corpse beheld)\n\t\t\t: base(0x3C)\n\t\t{\n\t\t\tvar items = beheld.EquipItems;\n\t\t\tint count = items.Count;\n\n\t\t\tif (beheld.Hair != null && beheld.Hair.ItemID > 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (beheld.FacialHair != null && beheld.FacialHair.ItemID > 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tEnsureCapacity(5 + (count * 20));\n\n\t\t\tlong pos = m_Stream.Position;\n\n\t\t\tint written = 0;\n\n\t\t\tm_Stream.Write((ushort)0);\n\n\t\t\tfor (int i = 0; i < items.Count; ++i)\n\t\t\t{\n\t\t\t\tItem child = items[i];\n\n\t\t\t\tif (!child.Deleted && child.Parent == beheld && beholder.CanSee(child))\n\t\t\t\t{\n\t\t\t\t\tm_Stream.Write(child.Serial);\n\t\t\t\t\tm_Stream.Write((ushort)child.ItemID);\n\t\t\t\t\tm_Stream.Write((byte)0); // signed, itemID offset\n\t\t\t\t\tm_Stream.Write((ushort)child.Amount);\n\t\t\t\t\tm_Stream.Write((short)child.X);\n\t\t\t\t\tm_Stream.Write((short)child.Y);\n\t\t\t\t\tm_Stream.Write((byte)0); // Grid Location?\n\t\t\t\t\tm_Stream.Write(beheld.Serial);\n\t\t\t\t\tm_Stream.Write((ushort)child.Hue);\n\n\t\t\t\t\t++written;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (beheld.Hair != null && beheld.Hair.ItemID > 0)\n\t\t\t{\n\t\t\t\tm_Stream.Write(HairInfo.FakeSerial(beheld.Owner) - 2);\n\t\t\t\tm_Stream.Write((ushort)beheld.Hair.ItemID);\n\t\t\t\tm_Stream.Write((byte)0); // signed, itemID offset\n\t\t\t\tm_Stream.Write((ushort)1);\n\t\t\t\tm_Stream.Write((short)0);\n\t\t\t\tm_Stream.Write((short)0);\n\t\t\t\tm_Stream.Write((byte)0); // Grid Location?\n\t\t\t\tm_Stream.Write(beheld.Serial);\n\t\t\t\tm_Stream.Write((ushort)beheld.Hair.Hue);\n\n\t\t\t\t++written;\n\t\t\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Standard way of determining which fields are to be exposed in a Naked Objects system.\n    /// </summary>\n    [Serializable]\n    public sealed class DefaultClassStrategy : IClassStrategy {\n        private static readonly ILog Log = LogManager.GetLogger(typeof (DefaultClassStrategy));\n        private readonly IReflectorConfiguration config;\n        // only intended for use during initial reflection\n        [NonSerialized] private IImmutableDictionary<Type, bool> namespaceScratchPad = ImmutableDictionary<Type, bool>.Empty;\n\n        public DefaultClassStrategy(IReflectorConfiguration config) {\n            this.config = config;\n        }\n\n        #region IClassStrategy Members\n\n        public bool IsTypeToBeIntrospected(Type type) {\n            Type returnType = FilterNullableAndProxies(type);\n            return !IsTypeMarkedUpToBeIgnored(returnType) &&\n                   !IsTypeUnsupportedByReflector(returnType) &&\n                   IsTypeWhiteListed(returnType) &&\n                   (!IsGenericCollection(type) || type.GetGenericArguments().All(IsTypeToBeIntrospected));\n        }\n\n        public Type GetType(Type type) {\n            Type returnType = FilterNullableAndProxies(type);\n            return IsTypeToBeIntrospected(returnType) ? returnType : null;\n        }\n\n        public Type FilterNullableAndProxies(Type type) {\n            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Nullable<>)) {\n                // use type insi\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Standard way of determining which fields are to be exposed in a Naked Objects system.\n    /// </summary>\n    [Serializable]\n    public sealed class DefaultClassStrategy : IClassStrategy {\n        private static readonly ILog Log = LogManager.GetLogger(typeof (DefaultClassStrategy));\n        private readonly IReflectorConfiguration config;\n        // only intended for use during initial reflection\n        [NonSerialized] private IImmutableDictionary<Type, bool> namespaceScratchPad = ImmutableDictionary<Type, bool>.Empty;\n\n        public DefaultClassStrategy(IReflectorConfiguration config) {\n            this.config = config;\n        }\n\n        #region IClassStrategy Members\n\n        public bool IsTypeToBeIntrospected(Type type) {\n            Type returnType = FilterNullableAndProxies(type);\n            return !IsTypeMarkedUpToBeIgnored(returnType) &&\n                   !IsTypeUnsupportedByReflector(returnType) &&\n                   IsTypeWhiteListed(returnType) &&\n                   (!IsGenericCollection(type) || type.GetGenericArguments().All(IsTypeToBeIntrospected));\n        }\n\n        public Type GetType(Type type) {\n            Type returnType = FilterNullableAndProxies(type);\n            return IsTypeToBeIntrospected(returnType) ? returnType : null;\n        }\n\n        public Type FilterNullableAndProxies(Type type) {\n            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Nullable<>)) {\n                // use type insi\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Holds attributes which can be used to alter <see cref=\"Flow{TIn,TOut,TMat}\"/>\n    /// or <see cref=\"GraphDsl\"/> materialization.\n    /// \n    /// Note that more attributes for the <see cref=\"ActorMaterializer\"/> are defined in <see cref=\"ActorAttributes\"/>.\n    /// </summary>\n    public sealed class Attributes\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public interface IAttribute { }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public sealed class Name : IAttribute, IEquatable<Name>\n        {\n            /// <summary>\n            /// TBD\n            /// </summary>\n            public readonly string Value;\n\n            /// <summary>\n            /// TBD\n            /// </summary>\n            /// <param name=\"value\">TBD</param>\n            /// <exception cref=\"ArgumentNullException\">\n            /// This exception is thrown when the specified <paramref name=\"value\"/> is undefined.\n            /// </exception>\n            public Name(string value)\n            {\n                if (string.IsNullOrEmpty(value)) throw new ArgumentNullException(nameof(value), \"Name attribute cannot be empty\");\n                Value = value;\n            }\n\n            /// <inheritdoc/>\n            public bool Equals(Name other) => !ReferenceEquals(other, null) && Equals(Value, other.Value);\n\n            /// <inheritdoc/>\n            public override bool Equals(object obj) => obj is Name && Equals((Name)obj);\n\n         \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Holds attributes which can be used to alter <see cref=\"Flow{TIn,TOut,TMat}\"/>\n    /// or <see cref=\"GraphDsl\"/> materialization.\n    /// \n    /// Note that more attributes for the <see cref=\"ActorMaterializer\"/> are defined in <see cref=\"ActorAttributes\"/>.\n    /// </summary>\n    public sealed class Attributes\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public interface IAttribute { }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public sealed class Name : IAttribute, IEquatable<Name>\n        {\n            /// <summary>\n            /// TBD\n            /// </summary>\n            public readonly string Value;\n\n            /// <summary>\n            /// TBD\n            /// </summary>\n            /// <param name=\"value\">TBD</param>\n            /// <exception cref=\"ArgumentNullException\">\n            /// This exception is thrown when the specified <paramref name=\"value\"/> is undefined.\n            /// </exception>\n            public Name(string value)\n            {\n                if (string.IsNullOrEmpty(value)) throw new ArgumentNullException(nameof(value), \"Name attribute cannot be empty\");\n                Value = value;\n            }\n\n            /// <inheritdoc/>\n            public bool Equals(Name other) => !ReferenceEquals(other, null) && Equals(Value, other.Value);\n\n            /// <inheritdoc/>\n            public override bool Equals(object obj) => obj is Name && Equals((Name)obj);\n\n         \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class CCParticleSpiral : CCParticleSystemQuad\n    {\n        public CCParticleSpiral(CCPoint position, CCEmitterMode emitterMode=CCEmitterMode.Gravity) : base(500, emitterMode)\n        {\n            Duration = ParticleDurationInfinity;\n            Position = position;\n            PositionVar = CCPoint.Zero;\n            Life = 12;\n            LifeVar = 0;\n            Angle = 90;\n            AngleVar = 0;\n            StartSize = 20.0f;\n            StartSizeVar = 0.0f;\n            EndSize = ParticleStartSizeEqualToEndSize;\n\n            EmissionRate = TotalParticles / Life;\n\n            StartColor = new CCColor4F(0.5f, 0.5f, 0.5f, 1.0f);\n            StartColorVar = new CCColor4F(0.5f, 0.5f, 0.5f, 0.0f);\n            EndColor = new CCColor4F(0.5f, 0.5f, 0.5f, 1.0f);\n            EndColorVar = new CCColor4F(0.5f, 0.5f, 0.5f, 0.0f);\n\n            GravityMoveMode gravityMode = new GravityMoveMode();\n            gravityMode.Gravity = new CCPoint(0, 0);\n            gravityMode.RadialAccel = -380;\n            gravityMode.RadialAccelVar = 0;\n            gravityMode.Speed = 150;\n            gravityMode.SpeedVar = 0;\n            gravityMode.TangentialAccel = 45;\n            gravityMode.TangentialAccelVar = 0;\n            GravityMode = gravityMode;\n\n            BlendAdditive = false;\n\n            Texture = CCParticleExample.DefaultTexture;\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class CCParticleSpiral : CCParticleSystemQuad\n    {\n        public CCParticleSpiral(CCPoint position, CCEmitterMode emitterMode=CCEmitterMode.Gravity) : base(500, emitterMode)\n        {\n            Duration = ParticleDurationInfinity;\n            Position = position;\n            PositionVar = CCPoint.Zero;\n            Life = 12;\n            LifeVar = 0;\n            Angle = 90;\n            AngleVar = 0;\n            StartSize = 20.0f;\n            StartSizeVar = 0.0f;\n            EndSize = ParticleStartSizeEqualToEndSize;\n\n            EmissionRate = TotalParticles / Life;\n\n            StartColor = new CCColor4F(0.5f, 0.5f, 0.5f, 1.0f);\n            StartColorVar = new CCColor4F(0.5f, 0.5f, 0.5f, 0.0f);\n            EndColor = new CCColor4F(0.5f, 0.5f, 0.5f, 1.0f);\n            EndColorVar = new CCColor4F(0.5f, 0.5f, 0.5f, 0.0f);\n\n            GravityMoveMode gravityMode = new GravityMoveMode();\n            gravityMode.Gravity = new CCPoint(0, 0);\n            gravityMode.RadialAccel = -380;\n            gravityMode.RadialAccelVar = 0;\n            gravityMode.Speed = 150;\n            gravityMode.SpeedVar = 0;\n            gravityMode.TangentialAccel = 45;\n            gravityMode.TangentialAccelVar = 0;\n            GravityMode = gravityMode;\n\n            BlendAdditive = false;\n\n            Texture = CCParticleExample.DefaultTexture;\n        }\n    }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Validates <see cref=\"AdoNetReminderTableOptions\"/> configuration.\n    /// </summary>\n    public class AdoNetReminderTableOptionsValidator : IConfigurationValidator\n    {\n        private readonly AdoNetReminderTableOptions options;\n        \n        public AdoNetReminderTableOptionsValidator(IOptions<AdoNetReminderTableOptions> options)\n        {\n            this.options = options.Value;\n        }\n\n        /// <inheritdoc />\n        public void ValidateConfiguration()\n        {\n            if (string.IsNullOrWhiteSpace(this.options.Invariant))\n            {\n                throw new OrleansConfigurationException($\"Invalid {nameof(AdoNetReminderTableOptions)} values for {nameof(AdoNetReminderTable)}. {nameof(options.Invariant)} is required.\");\n            }\n\n            if (string.IsNullOrWhiteSpace(this.options.ConnectionString))\n            {\n                throw new OrleansConfigurationException($\"Invalid {nameof(AdoNetReminderTableOptions)} values for {nameof(AdoNetReminderTable)}. {nameof(options.ConnectionString)} is required.\");\n            }\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Validates <see cref=\"AdoNetReminderTableOptions\"/> configuration.\n    /// </summary>\n    public class AdoNetReminderTableOptionsValidator : IConfigurationValidator\n    {\n        private readonly AdoNetReminderTableOptions options;\n        \n        public AdoNetReminderTableOptionsValidator(IOptions<AdoNetReminderTableOptions> options)\n        {\n            this.options = options.Value;\n        }\n\n        /// <inheritdoc />\n        public void ValidateConfiguration()\n        {\n            if (string.IsNullOrWhiteSpace(this.options.Invariant))\n            {\n                throw new OrleansConfigurationException($\"Invalid {nameof(AdoNetReminderTableOptions)} values for {nameof(AdoNetReminderTable)}. {nameof(options.Invariant)} is required.\");\n            }\n\n            if (string.IsNullOrWhiteSpace(this.options.ConnectionString))\n            {\n                throw new OrleansConfigurationException($\"Invalid {nameof(AdoNetReminderTableOptions)} values for {nameof(AdoNetReminderTable)}. {nameof(options.ConnectionString)} is required.\");\n            }\n        }\n    }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class AggregateGraph2014\n    {\n        #region Paths/Names Templates\n\n        // PATH PATTERNS\n        public static readonly string CANONICAL_MANIFEST_CONSOLE = \"/manifests/songs_dlc\";\n        public static readonly string CANONICAL_MANIFEST_PC = \"/manifests/songs_dlc_{0}\"; // DLC Name;\n        public static readonly string CANONICAL_GAMESONG = \"/songs/bin/{0}\"; //Platform Path [1]\n        public static readonly string CANONICAL_LYRIC = \"/assets/ui/lyrics/{0}\"; //DLC Name\n        public static readonly string CANONICAL_INLAY = \"/assets/gameplay/inlay\";\n        public static Dictionary<DLCPackageType, string> CANONICAL_IMAGEART\n        {\n            get\n            {\n                var d = new Dictionary<DLCPackageType, string>();\n                d.Add(DLCPackageType.Song, \"/gfxassets/album_art\");\n                d.Add(DLCPackageType.Inlay, \"/gfxassets/rewards/guitar_inlays\");\n                return d;\n            }\n        }\n        public static readonly string CANONICAL_XMLSONG = \"/songs/arr\";\n        public static Dictionary<DLCPackageType, string> CANONICAL_XBLOCK\n        {\n            get\n            {\n                var d = new Dictionary<DLCPackageType, string>();\n                d.Add(DLCPackageType.Song, \"/gamexblocks/nsongs\");\n                d.Add(DLCPackageType.Inlay, \"/gamexblocks/nguitars\");\n                return d;\n            }\n        }\n        public static readonly string CANONICAL_SOUNDBANK = \"/audio/{0}\"; //Platform Path [0]\n        public \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class AggregateGraph2014\n    {\n        #region Paths/Names Templates\n\n        // PATH PATTERNS\n        public static readonly string CANONICAL_MANIFEST_CONSOLE = \"/manifests/songs_dlc\";\n        public static readonly string CANONICAL_MANIFEST_PC = \"/manifests/songs_dlc_{0}\"; // DLC Name;\n        public static readonly string CANONICAL_GAMESONG = \"/songs/bin/{0}\"; //Platform Path [1]\n        public static readonly string CANONICAL_LYRIC = \"/assets/ui/lyrics/{0}\"; //DLC Name\n        public static readonly string CANONICAL_INLAY = \"/assets/gameplay/inlay\";\n        public static Dictionary<DLCPackageType, string> CANONICAL_IMAGEART\n        {\n            get\n            {\n                var d = new Dictionary<DLCPackageType, string>();\n                d.Add(DLCPackageType.Song, \"/gfxassets/album_art\");\n                d.Add(DLCPackageType.Inlay, \"/gfxassets/rewards/guitar_inlays\");\n                return d;\n            }\n        }\n        public static readonly string CANONICAL_XMLSONG = \"/songs/arr\";\n        public static Dictionary<DLCPackageType, string> CANONICAL_XBLOCK\n        {\n            get\n            {\n                var d = new Dictionary<DLCPackageType, string>();\n                d.Add(DLCPackageType.Song, \"/gamexblocks/nsongs\");\n                d.Add(DLCPackageType.Inlay, \"/gamexblocks/nguitars\");\n                return d;\n            }\n        }\n        public static readonly string CANONICAL_SOUNDBANK = \"/audio/{0}\"; //Platform Path [0]\n        public \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class RankEntry : IComparable\n\t\t{\n\t\t\tpublic Mobile      Killer;\n\t\t\tpublic int    Rank;\n\t\t\tpublic XmlPoints    PointsAttachment;\n\n\t\t\tpublic RankEntry(Mobile m, XmlPoints attachment)\n\t\t\t{\n\t\t\t\tKiller = m;\n\t\t\t\tPointsAttachment = attachment;\n\t\t\t}\n\n\t\t\tpublic int CompareTo( object obj )\n\t\t\t{\n\t\t\t\tRankEntry p = (RankEntry)obj;\n\n\t\t\t\tif(p.PointsAttachment == null || PointsAttachment == null) return 0;\n\n\t\t\t\t// break points ties with kills (more kills means higher rank)\n\t\t\t\tif(p.PointsAttachment.Points - PointsAttachment.Points == 0)\n\t\t\t\t{\n\t\t\t\t\t// if kills are the same then compare deaths (fewer deaths means higher rank)\n\t\t\t\t\tif(p.PointsAttachment.Kills - PointsAttachment.Kills == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// if deaths are the same then use previous ranks\n\t\t\t\t\t\tif(p.PointsAttachment.Deaths - PointsAttachment.Deaths == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn p.PointsAttachment.Rank - PointsAttachment.Rank;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn PointsAttachment.Deaths - p.PointsAttachment.Deaths;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn p.PointsAttachment.Kills - PointsAttachment.Kills;\n\t\t\t\t}\n\n\t\t\t\treturn p.PointsAttachment.Points - PointsAttachment.Points;\n\t\t\t}\n\t\t}\n\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class RankEntry : IComparable\n\t\t{\n\t\t\tpublic Mobile      Killer;\n\t\t\tpublic int    Rank;\n\t\t\tpublic XmlPoints    PointsAttachment;\n\n\t\t\tpublic RankEntry(Mobile m, XmlPoints attachment)\n\t\t\t{\n\t\t\t\tKiller = m;\n\t\t\t\tPointsAttachment = attachment;\n\t\t\t}\n\n\t\t\tpublic int CompareTo( object obj )\n\t\t\t{\n\t\t\t\tRankEntry p = (RankEntry)obj;\n\n\t\t\t\tif(p.PointsAttachment == null || PointsAttachment == null) return 0;\n\n\t\t\t\t// break points ties with kills (more kills means higher rank)\n\t\t\t\tif(p.PointsAttachment.Points - PointsAttachment.Points == 0)\n\t\t\t\t{\n\t\t\t\t\t// if kills are the same then compare deaths (fewer deaths means higher rank)\n\t\t\t\t\tif(p.PointsAttachment.Kills - PointsAttachment.Kills == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// if deaths are the same then use previous ranks\n\t\t\t\t\t\tif(p.PointsAttachment.Deaths - PointsAttachment.Deaths == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn p.PointsAttachment.Rank - PointsAttachment.Rank;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn PointsAttachment.Deaths - p.PointsAttachment.Deaths;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn p.PointsAttachment.Kills - PointsAttachment.Kills;\n\t\t\t\t}\n\n\t\t\t\treturn p.PointsAttachment.Points - PointsAttachment.Points;\n\t\t\t}\n\t\t}\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        /// <summary>\n        /// \n        /// </summary>\n        public class ParticleRenderCore : RenderCore\n        {\n    #pragma warning disable 1591\n            public static readonly int DefaultParticleCount = 512;\n            public static readonly float DefaultInitialVelocity = 1f;\n            public static readonly Vector3 DefaultAcceleration = new Vector3(0, 0.1f, 0);\n            public static readonly Vector2 DefaultParticleSize = new Vector2(1, 1);\n            public static readonly Vector3 DefaultEmitterLocation = Vector3.Zero;\n            public static readonly Vector3 DefaultConsumerLocation = new Vector3(0, 10, 0);\n            public static readonly float DefaultConsumerGravity = 0;\n            public static readonly float DefaultConsumerRadius = 0;\n            public static readonly Vector3 DefaultBoundMaximum = new Vector3(5, 5, 5);\n            public static readonly Vector3 DefaultBoundMinimum = new Vector3(-5, -5, -5);\n            public static readonly float DefaultInitialEnergy = 5;\n            public static readonly float DefaultEnergyDissipationRate = 1f;\n    #pragma warning restore\n            #region variables\n            /// <summary>\n            /// Texture tile columns\n            /// </summary>\n            public uint NumTextureColumn\n            {\n                set\n                {\n                    FrameVariables.NumTexCol = value;\n                }\n                get { return FrameVariables.NumTexCol; }\n            } \n            /// <su\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        /// <summary>\n        /// \n        /// </summary>\n        public class ParticleRenderCore : RenderCore\n        {\n    #pragma warning disable 1591\n            public static readonly int DefaultParticleCount = 512;\n            public static readonly float DefaultInitialVelocity = 1f;\n            public static readonly Vector3 DefaultAcceleration = new Vector3(0, 0.1f, 0);\n            public static readonly Vector2 DefaultParticleSize = new Vector2(1, 1);\n            public static readonly Vector3 DefaultEmitterLocation = Vector3.Zero;\n            public static readonly Vector3 DefaultConsumerLocation = new Vector3(0, 10, 0);\n            public static readonly float DefaultConsumerGravity = 0;\n            public static readonly float DefaultConsumerRadius = 0;\n            public static readonly Vector3 DefaultBoundMaximum = new Vector3(5, 5, 5);\n            public static readonly Vector3 DefaultBoundMinimum = new Vector3(-5, -5, -5);\n            public static readonly float DefaultInitialEnergy = 5;\n            public static readonly float DefaultEnergyDissipationRate = 1f;\n    #pragma warning restore\n            #region variables\n            /// <summary>\n            /// Texture tile columns\n            /// </summary>\n            public uint NumTextureColumn\n            {\n                set\n                {\n                    FrameVariables.NumTexCol = value;\n                }\n                get { return FrameVariables.NumTexCol; }\n            } \n            /// <su\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Code-behind class for Default.aspx.\n    /// </summary>\n    public partial class Default : System.Web.UI.Page\n    {\n        /// <summary>\n        /// The user for creating services and making DFP API calls.\n        /// </summary>\n        AdManagerUser user;\n\n        /// <summary>\n        /// Handles the Load event of the Page control.\n        /// </summary>\n        /// <param name=\"sender\">The source of the event.</param>\n        /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing\n        /// the event data.</param>\n        void Page_Load(object sender, EventArgs e)\n        {\n            user = new AdManagerUser();\n        }\n\n        /// <summary>\n        /// Handles the Click event of the btnAuthorize control.\n        /// </summary>\n        /// <param name=\"sender\">The source of the event.</param>\n        /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing\n        /// the event data.</param>\n        protected void OnAuthorizeButtonClick(object sender, EventArgs e)\n        {\n            // This code example shows how to run an DFP API web application\n            // while incorporating the OAuth2 web application flow into your\n            // application. If your application uses a single Google login to make calls\n            // to all your accounts, you shouldn't use this code example. Instead, you\n            // should run Common\\Util\\OAuth2TokenGenerator.cs to generate a refresh\n            // token and \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Code-behind class for Default.aspx.\n    /// </summary>\n    public partial class Default : System.Web.UI.Page\n    {\n        /// <summary>\n        /// The user for creating services and making DFP API calls.\n        /// </summary>\n        AdManagerUser user;\n\n        /// <summary>\n        /// Handles the Load event of the Page control.\n        /// </summary>\n        /// <param name=\"sender\">The source of the event.</param>\n        /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing\n        /// the event data.</param>\n        void Page_Load(object sender, EventArgs e)\n        {\n            user = new AdManagerUser();\n        }\n\n        /// <summary>\n        /// Handles the Click event of the btnAuthorize control.\n        /// </summary>\n        /// <param name=\"sender\">The source of the event.</param>\n        /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing\n        /// the event data.</param>\n        protected void OnAuthorizeButtonClick(object sender, EventArgs e)\n        {\n            // This code example shows how to run an DFP API web application\n            // while incorporating the OAuth2 web application flow into your\n            // application. If your application uses a single Google login to make calls\n            // to all your accounts, you shouldn't use this code example. Instead, you\n            // should run Common\\Util\\OAuth2TokenGenerator.cs to generate a refresh\n            // token and \nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class ParseProjectStep : StepBase\n    {\n        private SDProject _sdProject;\n\n        public ParseProjectStep(StepInput stepInput, int progressStart, int progressEnd) :\n            base(stepInput, stepInput.SDBuildStrings.StepParseProject, new StepRange(progressStart, progressEnd)) { }\n\n        public override SDProject RunStep(SDProject sdProject)\n        {\n            _sdProject = sdProject;\n            SetProjectInfos();\n            GetImages();\n            ParseTokens();\n            ParseDescriptions();\n\n            if (Path.GetExtension(_stepInput.CoreConfigSection.InputFile) == \".sdnav\")\n            {\n                ParseNavigationFiles();\n            }\n            else\n            {\n                _sdProject.Solutions.Add(_stepInput.CoreConfigSection.InputFile, new SDSolution(_stepInput.CoreConfigSection.InputFile));\n            }\n\n            return _sdProject;\n        }\n\n        private void SetProjectInfos()\n        {\n            ExecuteOnStepMessage(_stepInput.SDBuildStrings.ParsingProject);\n            ExecuteOnStepProgress(25);\n\n            _sdProject.DocLanguage = _stepInput.CoreConfigSection.DocLanguage;\n            _sdProject.LogoPath = _stepInput.CoreConfigSection.LogoPath;\n            _sdProject.Author = _stepInput.CoreConfigSection.Author;\n            _sdProject.ProjectName = _stepInput.CoreConfigSection.ProjectName;\n            _sdProject.VersionNumber = _stepInput.CoreConfigSection.VersionNumber;\n            _sdProject.ProjectUrl = _stepIn\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class ParseProjectStep : StepBase\n    {\n        private SDProject _sdProject;\n\n        public ParseProjectStep(StepInput stepInput, int progressStart, int progressEnd) :\n            base(stepInput, stepInput.SDBuildStrings.StepParseProject, new StepRange(progressStart, progressEnd)) { }\n\n        public override SDProject RunStep(SDProject sdProject)\n        {\n            _sdProject = sdProject;\n            SetProjectInfos();\n            GetImages();\n            ParseTokens();\n            ParseDescriptions();\n\n            if (Path.GetExtension(_stepInput.CoreConfigSection.InputFile) == \".sdnav\")\n            {\n                ParseNavigationFiles();\n            }\n            else\n            {\n                _sdProject.Solutions.Add(_stepInput.CoreConfigSection.InputFile, new SDSolution(_stepInput.CoreConfigSection.InputFile));\n            }\n\n            return _sdProject;\n        }\n\n        private void SetProjectInfos()\n        {\n            ExecuteOnStepMessage(_stepInput.SDBuildStrings.ParsingProject);\n            ExecuteOnStepProgress(25);\n\n            _sdProject.DocLanguage = _stepInput.CoreConfigSection.DocLanguage;\n            _sdProject.LogoPath = _stepInput.CoreConfigSection.LogoPath;\n            _sdProject.Author = _stepInput.CoreConfigSection.Author;\n            _sdProject.ProjectName = _stepInput.CoreConfigSection.ProjectName;\n            _sdProject.VersionNumber = _stepInput.CoreConfigSection.VersionNumber;\n            _sdProject.ProjectUrl = _stepIn\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  internal class TextAreaDragDropHandler\n  {\n    private TextArea _textArea;\n\n\n    private class SafeDragEventHandler\n    {\n      private readonly DragEventHandler _eventHandler;\n\n      public SafeDragEventHandler(DragEventHandler eventHandler)\n      {\n        _eventHandler = eventHandler;\n      }\n\n      public void OnDragEvent(object sender, DragEventArgs eventArgs)\n      {\n        try\n        {\n          _eventHandler(sender, eventArgs);\n        }\n        catch (Exception exception)\n        {\n          MessageBox.Show(exception.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }          \n      }\n    }\n\n\n    /// <summary>\n    /// Attaches the specified text area.\n    /// </summary>\n    /// <param name=\"textArea\">The text area.</param>\n    public void Attach(TextArea textArea)\n    {\n      _textArea = textArea;\n      textArea.AllowDrop = true;\n\n      textArea.DragEnter += new SafeDragEventHandler(OnDragEnter).OnDragEvent;\n      textArea.DragDrop += new SafeDragEventHandler(OnDragDrop).OnDragEvent;\n      textArea.DragOver += new SafeDragEventHandler(OnDragOver).OnDragEvent;\n    }\n\n\n    static DragDropEffects GetDragDropEffect(DragEventArgs e)\n    {\n      if ((e.AllowedEffect & DragDropEffects.Move) > 0 &&\n          (e.AllowedEffect & DragDropEffects.Copy) > 0)\n      {\n        return (e.KeyState & 8) > 0 ? DragDropEffects.Copy : DragDropEffects.Move;\n      }\n      else if ((e.AllowedEffect & DragDropEffects.Move) > 0)\n      {\n        return DragDropEffec\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  internal class TextAreaDragDropHandler\n  {\n    private TextArea _textArea;\n\n\n    private class SafeDragEventHandler\n    {\n      private readonly DragEventHandler _eventHandler;\n\n      public SafeDragEventHandler(DragEventHandler eventHandler)\n      {\n        _eventHandler = eventHandler;\n      }\n\n      public void OnDragEvent(object sender, DragEventArgs eventArgs)\n      {\n        try\n        {\n          _eventHandler(sender, eventArgs);\n        }\n        catch (Exception exception)\n        {\n          MessageBox.Show(exception.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }          \n      }\n    }\n\n\n    /// <summary>\n    /// Attaches the specified text area.\n    /// </summary>\n    /// <param name=\"textArea\">The text area.</param>\n    public void Attach(TextArea textArea)\n    {\n      _textArea = textArea;\n      textArea.AllowDrop = true;\n\n      textArea.DragEnter += new SafeDragEventHandler(OnDragEnter).OnDragEvent;\n      textArea.DragDrop += new SafeDragEventHandler(OnDragDrop).OnDragEvent;\n      textArea.DragOver += new SafeDragEventHandler(OnDragOver).OnDragEvent;\n    }\n\n\n    static DragDropEffects GetDragDropEffect(DragEventArgs e)\n    {\n      if ((e.AllowedEffect & DragDropEffects.Move) > 0 &&\n          (e.AllowedEffect & DragDropEffects.Copy) > 0)\n      {\n        return (e.KeyState & 8) > 0 ? DragDropEffects.Copy : DragDropEffects.Move;\n      }\n      else if ((e.AllowedEffect & DragDropEffects.Move) > 0)\n      {\n        return DragDropEffec\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class MethodCallParser : BaseParser\n    {\n        internal MethodCallParser(ParserOptions parserOptions) : base(parserOptions) { }\n\n        internal void ParseMethodCalls()\n        {\n            var namespaces = ParserOptions.SDRepository.GetAllNamespaces();\n            foreach (var sdNamespace in namespaces)\n            {\n                foreach (var sdType in sdNamespace.Types)\n                {\n                    foreach (var sdMethod in sdType.Methods)\n                    {\n                        HandleOnItemParseStart(sdMethod.Name);\n                        var fileId = ParserOptions.CodeSolution.GetDocumentIdsWithFilePath(sdMethod.Region.FilePath).FirstOrDefault();\n                        var file = ParserOptions.CodeSolution.GetDocument(fileId);\n                        var syntaxTree = file.GetSyntaxTreeAsync().Result;\n                        \n                        if (file.Project.Language == \"C#\")\n                        {\n                            var methodVisitor = new CSharpMethodVisitor(ParserOptions.SDRepository, sdMethod, sdType, file);\n                            var methodSyntaxNode = syntaxTree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>()\n                                                    .FirstOrDefault(m => m.Span.Start == sdMethod.Region.Start &&\n                                                    m.Span.End == sdMethod.Region.End);\n                            if (methodSyntaxNode != null)\n                            \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class MethodCallParser : BaseParser\n    {\n        internal MethodCallParser(ParserOptions parserOptions) : base(parserOptions) { }\n\n        internal void ParseMethodCalls()\n        {\n            var namespaces = ParserOptions.SDRepository.GetAllNamespaces();\n            foreach (var sdNamespace in namespaces)\n            {\n                foreach (var sdType in sdNamespace.Types)\n                {\n                    foreach (var sdMethod in sdType.Methods)\n                    {\n                        HandleOnItemParseStart(sdMethod.Name);\n                        var fileId = ParserOptions.CodeSolution.GetDocumentIdsWithFilePath(sdMethod.Region.FilePath).FirstOrDefault();\n                        var file = ParserOptions.CodeSolution.GetDocument(fileId);\n                        var syntaxTree = file.GetSyntaxTreeAsync().Result;\n                        \n                        if (file.Project.Language == \"C#\")\n                        {\n                            var methodVisitor = new CSharpMethodVisitor(ParserOptions.SDRepository, sdMethod, sdType, file);\n                            var methodSyntaxNode = syntaxTree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>()\n                                                    .FirstOrDefault(m => m.Span.Start == sdMethod.Region.Start &&\n                                                    m.Span.End == sdMethod.Region.End);\n                            if (methodSyntaxNode != null)\n                            \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /** Reads a Truetype font\n     *\n     * @author Paulo Soares\n     */\n    public class TrueTypeFont : BaseFont {\n\n        /** The code pages possible for a True Type font.\n         */    \n        internal static string[] codePages = {\n                                        \"1252 Latin 1\",\n                                        \"1250 Latin 2: Eastern Europe\",\n                                        \"1251 Cyrillic\",\n                                        \"1253 Greek\",\n                                        \"1254 Turkish\",\n                                        \"1255 Hebrew\",\n                                        \"1256 Arabic\",\n                                        \"1257 Windows Baltic\",\n                                        \"1258 Vietnamese\",\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        \"874 Thai\",\n                                        \"932 JIS/Japan\",\n                                        \"936 Chinese: Simplified chars--PRC and Singapore\",\n                                        \"949 Korean Wansung\",\n                                        \"950 Chinese: Traditional chars--Taiwan and Hong Kong\",\n                                        \"1361 Korean \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "...",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /** Reads a Truetype font\n     *\n     * @author Paulo Soares\n     */\n    public class TrueTypeFont : BaseFont {\n\n        /** The code pages possible for a True Type font.\n         */    \n        internal static string[] codePages = {\n                                        \"1252 Latin 1\",\n                                        \"1250 Latin 2: Eastern Europe\",\n                                        \"1251 Cyrillic\",\n                                        \"1253 Greek\",\n                                        \"1254 Turkish\",\n                                        \"1255 Hebrew\",\n                                        \"1256 Arabic\",\n                                        \"1257 Windows Baltic\",\n                                        \"1258 Vietnamese\",\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        \"874 Thai\",\n                                        \"932 JIS/Japan\",\n                                        \"936 Chinese: Simplified chars--PRC and Singapore\",\n                                        \"949 Korean Wansung\",\n                                        \"950 Chinese: Traditional chars--Taiwan and Hong Kong\",\n                                        \"1361 Korean \nAnswer:... (blank)\""
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class InteractiveEvaluator : IInteractiveEvaluator, ICurrentWorkingDirectoryDiscoveryService\n    {\n        // full path or null\n        private readonly string _responseFilePath;\n\n        private readonly InteractiveHost _interactiveHost;\n\n        private string _initialWorkingDirectory;\n        private ImmutableArray<CommandLineSourceFile> _rspSourceFiles;\n\n        private readonly IContentType _contentType;\n        private readonly InteractiveWorkspace _workspace;\n        private IInteractiveWindow _currentWindow;\n        private ImmutableHashSet<MetadataReference> _references;\n        private GacFileResolver _metadataReferenceResolver;\n        private ImmutableArray<string> _sourceSearchPaths;\n\n        private ProjectId _previousSubmissionProjectId;\n        private ProjectId _currentSubmissionProjectId;\n\n        private readonly IViewClassifierAggregatorService _classifierAggregator;\n        private readonly IInteractiveWindowCommandsFactory _commandsFactory;\n        private readonly ImmutableArray<IInteractiveWindowCommand> _commands;\n        private IInteractiveWindowCommands _interactiveCommands;\n        private ITextView _currentTextView;\n        private ITextBuffer _currentSubmissionBuffer;\n\n        private readonly IList<ValueTuple<ITextView, ITextBuffer>> _submissionBuffers = new List<ValueTuple<ITextView, ITextBuffer>>();\n\n        private int _submissionCount = 0;\n        private readonly EventHandler<ContentTypeChangedEventArgs> _contentTypeCha\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class InteractiveEvaluator : IInteractiveEvaluator, ICurrentWorkingDirectoryDiscoveryService\n    {\n        // full path or null\n        private readonly string _responseFilePath;\n\n        private readonly InteractiveHost _interactiveHost;\n\n        private string _initialWorkingDirectory;\n        private ImmutableArray<CommandLineSourceFile> _rspSourceFiles;\n\n        private readonly IContentType _contentType;\n        private readonly InteractiveWorkspace _workspace;\n        private IInteractiveWindow _currentWindow;\n        private ImmutableHashSet<MetadataReference> _references;\n        private GacFileResolver _metadataReferenceResolver;\n        private ImmutableArray<string> _sourceSearchPaths;\n\n        private ProjectId _previousSubmissionProjectId;\n        private ProjectId _currentSubmissionProjectId;\n\n        private readonly IViewClassifierAggregatorService _classifierAggregator;\n        private readonly IInteractiveWindowCommandsFactory _commandsFactory;\n        private readonly ImmutableArray<IInteractiveWindowCommand> _commands;\n        private IInteractiveWindowCommands _interactiveCommands;\n        private ITextView _currentTextView;\n        private ITextBuffer _currentSubmissionBuffer;\n\n        private readonly IList<ValueTuple<ITextView, ITextBuffer>> _submissionBuffers = new List<ValueTuple<ITextView, ITextBuffer>>();\n\n        private int _submissionCount = 0;\n        private readonly EventHandler<ContentTypeChangedEventArgs> _contentTypeCha\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t[SuppressMessage(\"Microsoft.Naming\", \"CA1710:IdentifiersShouldHaveCorrectSuffix\", Justification = \"[....]: Naming chosen to represent a different concept from a collection because it is delayed loaded.\")]\n\tpublic sealed class EntitySet<TEntity> : IList, IList<TEntity>, IListSource\n\t\twhere TEntity : class\n\t{\n\t\tIEnumerable<TEntity> source;\n\t\tItemList<TEntity> entities;\n\t\tItemList<TEntity> removedEntities;\n\t\tAction<TEntity> onAdd;\n\t\tAction<TEntity> onRemove;\n\t\tTEntity onAddEntity;\n\t\tTEntity onRemoveEntity;\n\t\tint version;\n\t\tprivate ListChangedEventHandler onListChanged;\n\t\tprivate bool isModified;\n\t\tprivate bool isLoaded;\n\t\tbool listChanged;\n\n\t\tpublic EntitySet()\n\t\t{\n\t\t}\n\n\t\tpublic EntitySet(Action<TEntity> onAdd, Action<TEntity> onRemove)\n\t\t{\n\t\t\tthis.onAdd = onAdd;\n\t\t\tthis.onRemove = onRemove;\n\t\t}\n\n\t\tinternal EntitySet(EntitySet<TEntity> es, bool copyNotifications)\n\t\t{\n\t\t\tthis.source = es.source;\n\t\t\tforeach(TEntity e in es.entities) entities.Add(e);\n\t\t\tforeach(TEntity e in es.removedEntities) removedEntities.Add(e);\n\t\t\tthis.version = es.version;\n\t\t\tif(copyNotifications)\n\t\t\t{\n\t\t\t\tthis.onAdd = es.onAdd;\n\t\t\t\tthis.onRemove = es.onRemove;\n\t\t\t}\n\t\t}\n\n\t\tpublic int Count\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\treturn entities.Count;\n\t\t\t}\n\t\t}\n\n\t\tpublic TEntity this[int index]\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\tif(index < 0 || index >= entities.Count)\n\t\t\t\t\tthrow Error.ArgumentOutOfRange(\"index\");\n\t\t\t\treturn entities[index];\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\tif(index < 0 || index >= entities.Count)\n\t\t\t\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t[SuppressMessage(\"Microsoft.Naming\", \"CA1710:IdentifiersShouldHaveCorrectSuffix\", Justification = \"[....]: Naming chosen to represent a different concept from a collection because it is delayed loaded.\")]\n\tpublic sealed class EntitySet<TEntity> : IList, IList<TEntity>, IListSource\n\t\twhere TEntity : class\n\t{\n\t\tIEnumerable<TEntity> source;\n\t\tItemList<TEntity> entities;\n\t\tItemList<TEntity> removedEntities;\n\t\tAction<TEntity> onAdd;\n\t\tAction<TEntity> onRemove;\n\t\tTEntity onAddEntity;\n\t\tTEntity onRemoveEntity;\n\t\tint version;\n\t\tprivate ListChangedEventHandler onListChanged;\n\t\tprivate bool isModified;\n\t\tprivate bool isLoaded;\n\t\tbool listChanged;\n\n\t\tpublic EntitySet()\n\t\t{\n\t\t}\n\n\t\tpublic EntitySet(Action<TEntity> onAdd, Action<TEntity> onRemove)\n\t\t{\n\t\t\tthis.onAdd = onAdd;\n\t\t\tthis.onRemove = onRemove;\n\t\t}\n\n\t\tinternal EntitySet(EntitySet<TEntity> es, bool copyNotifications)\n\t\t{\n\t\t\tthis.source = es.source;\n\t\t\tforeach(TEntity e in es.entities) entities.Add(e);\n\t\t\tforeach(TEntity e in es.removedEntities) removedEntities.Add(e);\n\t\t\tthis.version = es.version;\n\t\t\tif(copyNotifications)\n\t\t\t{\n\t\t\t\tthis.onAdd = es.onAdd;\n\t\t\t\tthis.onRemove = es.onRemove;\n\t\t\t}\n\t\t}\n\n\t\tpublic int Count\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\treturn entities.Count;\n\t\t\t}\n\t\t}\n\n\t\tpublic TEntity this[int index]\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\tif(index < 0 || index >= entities.Count)\n\t\t\t\t\tthrow Error.ArgumentOutOfRange(\"index\");\n\t\t\t\treturn entities[index];\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tLoad();\n\t\t\t\tif(index < 0 || index >= entities.Count)\n\t\t\t\t\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Quotes : Module\n    {\n        public override void Initialize()\n        {\n            Bot.CommandReceivedEvent += HandleCommandEvent;\n        }\n\n        public override void ParseCommand(CommandMessage command)\n        {\n            Command foundCommand = Commands.Find(c => c.Triggers.Contains(command.Command));\n            switch (foundCommand.Name)\n            {\n                case \"Quote\":\n                    GetQuote(command);\n                    break;\n            }\n        }\n\n        private void GetQuote(CommandMessage command)\n        {\n            string channel = command.Arguments.ContainsKey(\"Channel\") ? command.Arguments[\"Channel\"] : command.Location;\n            List<Dictionary<string, object>> results = new List<Dictionary<string, object>>();\n            if (command.Arguments.ContainsKey(\"Nickname\"))\n            {\n                results = GetQuote(channel, command.Arguments[\"Nickname\"]);\n            }\n            else\n            {\n                results = GetQuote(channel);\n            }\n            if (results.Any())\n            {\n                Dictionary<string, object> quote = results.First();\n                string quoteMessage = string.Format(\"[{0}] {1}\", quote[\"nickname\"], quote[\"message\"]);\n                SendResponse(command.MessageType, command.Location, command.Nick.Nickname, quoteMessage);\n            }\n            else\n            {\n                if (command.Arguments.ContainsKey(\"Nickname\"))\n                {\n              \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Quotes : Module\n    {\n        public override void Initialize()\n        {\n            Bot.CommandReceivedEvent += HandleCommandEvent;\n        }\n\n        public override void ParseCommand(CommandMessage command)\n        {\n            Command foundCommand = Commands.Find(c => c.Triggers.Contains(command.Command));\n            switch (foundCommand.Name)\n            {\n                case \"Quote\":\n                    GetQuote(command);\n                    break;\n            }\n        }\n\n        private void GetQuote(CommandMessage command)\n        {\n            string channel = command.Arguments.ContainsKey(\"Channel\") ? command.Arguments[\"Channel\"] : command.Location;\n            List<Dictionary<string, object>> results = new List<Dictionary<string, object>>();\n            if (command.Arguments.ContainsKey(\"Nickname\"))\n            {\n                results = GetQuote(channel, command.Arguments[\"Nickname\"]);\n            }\n            else\n            {\n                results = GetQuote(channel);\n            }\n            if (results.Any())\n            {\n                Dictionary<string, object> quote = results.First();\n                string quoteMessage = string.Format(\"[{0}] {1}\", quote[\"nickname\"], quote[\"message\"]);\n                SendResponse(command.MessageType, command.Location, command.Nick.Nickname, quoteMessage);\n            }\n            else\n            {\n                if (command.Arguments.ContainsKey(\"Nickname\"))\n                {\n              \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public sealed class PostEffectFXAA : RenderCore, IPostEffect\n        {\n            private string effectName = DefaultRenderTechniqueNames.PostEffectFXAA;\n            public string EffectName\n            {\n                set { SetAffectsCanRenderFlag(ref effectName, value); }\n                get { return effectName; }\n            }\n\n            private FXAALevel fxaaLevel = FXAALevel.None;\n            /// <summary>\n            /// Gets or sets the fxaa level.\n            /// </summary>\n            /// <value>\n            /// The fxaa level.\n            /// </value>\n            public FXAALevel FXAALevel\n            {\n                set { SetAffectsCanRenderFlag(ref fxaaLevel, value); }\n                get { return fxaaLevel; }\n            }\n\n            private int textureSlot;\n            private int samplerSlot;\n            private SamplerStateProxy sampler;\n            private ShaderPass FXAAPass;\n            private ShaderPass LUMAPass;\n            private readonly ConstantBufferComponent modelCB;\n            private BorderEffectStruct modelStruct;\n\n            public PostEffectFXAA() : base(RenderType.PostProc)\n            {\n                modelCB = AddComponent(new ConstantBufferComponent(new ConstantBufferDescription(DefaultBufferNames.BorderEffectCB, BorderEffectStruct.SizeInBytes)));\n            }\n\n            protected override bool OnAttach(IRenderTechnique technique)\n            {\n                FXAAPass = technique[DefaultPassNames.FXAAPass];\n       \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public sealed class PostEffectFXAA : RenderCore, IPostEffect\n        {\n            private string effectName = DefaultRenderTechniqueNames.PostEffectFXAA;\n            public string EffectName\n            {\n                set { SetAffectsCanRenderFlag(ref effectName, value); }\n                get { return effectName; }\n            }\n\n            private FXAALevel fxaaLevel = FXAALevel.None;\n            /// <summary>\n            /// Gets or sets the fxaa level.\n            /// </summary>\n            /// <value>\n            /// The fxaa level.\n            /// </value>\n            public FXAALevel FXAALevel\n            {\n                set { SetAffectsCanRenderFlag(ref fxaaLevel, value); }\n                get { return fxaaLevel; }\n            }\n\n            private int textureSlot;\n            private int samplerSlot;\n            private SamplerStateProxy sampler;\n            private ShaderPass FXAAPass;\n            private ShaderPass LUMAPass;\n            private readonly ConstantBufferComponent modelCB;\n            private BorderEffectStruct modelStruct;\n\n            public PostEffectFXAA() : base(RenderType.PostProc)\n            {\n                modelCB = AddComponent(new ConstantBufferComponent(new ConstantBufferDescription(DefaultBufferNames.BorderEffectCB, BorderEffectStruct.SizeInBytes)));\n            }\n\n            protected override bool OnAttach(IRenderTechnique technique)\n            {\n                FXAAPass = technique[DefaultPassNames.FXAAPass];\n       \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class trans_curve1_application : GuiWidget, IDemoApp\n\t{\n\t\tprivate PolygonEditWidget m_poly;\n\t\tprivate Slider m_num_points;\n\t\tprivate CheckBox m_close;\n\t\tprivate CheckBox m_preserve_x_scale;\n\t\tprivate CheckBox m_fixed_len;\n\t\tprivate CheckBox m_animate;\n\t\tprivate double[] m_dx = new double[6];\n\t\tprivate double[] m_dy = new double[6];\n\n\t\tpublic trans_curve1_application()\n\t\t{\n\t\t\tAnchorAll();\n\n\t\t\tm_poly = new PolygonEditWidget(6, 5);\n\t\t\ton_init();\n\t\t\tm_poly.Changed += NeedsRedraw;\n\t\t\tAddChild(m_poly);\n\n\t\t\tm_num_points = new MatterHackers.Agg.UI.Slider(5, 5, 340, 12);\n\n\t\t\tm_num_points.ValueChanged += new EventHandler(NeedsRedraw);\n\n\t\t\tAddChild(m_num_points);\n\n\t\t\tm_num_points.Text = \"Number of intermediate Points = {0:F3}\";\n\t\t\tm_num_points.SetRange(10, 400);\n\t\t\tm_num_points.Value = 200;\n\n\t\t\tm_close = new CheckBox(350, 5.0, \"Close\");\n\t\t\tm_close.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_close);\n\n\t\t\tm_preserve_x_scale = new CheckBox(460, 5, \"Preserve X scale\");\n\t\t\tm_preserve_x_scale.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_preserve_x_scale);\n\n\t\t\tm_fixed_len = new CheckBox(350, 25, \"Fixed Length\");\n\t\t\tm_fixed_len.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_fixed_len);\n\n\t\t\tm_animate = new CheckBox(460, 25, \"Animate\");\n\t\t\tm_animate.CheckedStateChanged += m_animate_CheckedStateChanged;\n\t\t\tAddChild(m_animate);\n\t\t}\n\n\t\tpublic string Title { get; } = \"Trans Curve1\";\n\n\t\tpublic string DemoCategory { get; } = \"Vector\";\n\n\t\tpublic string DemoDescription { get; } = \"AG\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class trans_curve1_application : GuiWidget, IDemoApp\n\t{\n\t\tprivate PolygonEditWidget m_poly;\n\t\tprivate Slider m_num_points;\n\t\tprivate CheckBox m_close;\n\t\tprivate CheckBox m_preserve_x_scale;\n\t\tprivate CheckBox m_fixed_len;\n\t\tprivate CheckBox m_animate;\n\t\tprivate double[] m_dx = new double[6];\n\t\tprivate double[] m_dy = new double[6];\n\n\t\tpublic trans_curve1_application()\n\t\t{\n\t\t\tAnchorAll();\n\n\t\t\tm_poly = new PolygonEditWidget(6, 5);\n\t\t\ton_init();\n\t\t\tm_poly.Changed += NeedsRedraw;\n\t\t\tAddChild(m_poly);\n\n\t\t\tm_num_points = new MatterHackers.Agg.UI.Slider(5, 5, 340, 12);\n\n\t\t\tm_num_points.ValueChanged += new EventHandler(NeedsRedraw);\n\n\t\t\tAddChild(m_num_points);\n\n\t\t\tm_num_points.Text = \"Number of intermediate Points = {0:F3}\";\n\t\t\tm_num_points.SetRange(10, 400);\n\t\t\tm_num_points.Value = 200;\n\n\t\t\tm_close = new CheckBox(350, 5.0, \"Close\");\n\t\t\tm_close.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_close);\n\n\t\t\tm_preserve_x_scale = new CheckBox(460, 5, \"Preserve X scale\");\n\t\t\tm_preserve_x_scale.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_preserve_x_scale);\n\n\t\t\tm_fixed_len = new CheckBox(350, 25, \"Fixed Length\");\n\t\t\tm_fixed_len.CheckedStateChanged += NeedsRedraw;\n\t\t\tAddChild(m_fixed_len);\n\n\t\t\tm_animate = new CheckBox(460, 25, \"Animate\");\n\t\t\tm_animate.CheckedStateChanged += m_animate_CheckedStateChanged;\n\t\t\tAddChild(m_animate);\n\t\t}\n\n\t\tpublic string Title { get; } = \"Trans Curve1\";\n\n\t\tpublic string DemoCategory { get; } = \"Vector\";\n\n\t\tpublic string DemoDescription { get; } = \"AG\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class AutoExportPluginEditViewModel : ViewModelBase\n    {\n        private PreviewWnd _wnd;\n        private AutoExportPluginConfig _config;\n        private TransformPluginItem _selectedTransformPluginItem;\n        private bool _fullSize;\n        private bool _runAfterTransfer;\n\n        public GalaSoft.MvvmLight.Command.RelayCommand<string> AddTransforPluginCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<TransformPluginItem> RemoveTransforPluginCommand { get; set; }\n        public RelayCommand PreviewCommand { get; set; }\n        public RelayCommand ApplyCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<PluginCondition> RemoveConditionCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<PluginCondition> GetValueCommand { get; set; }\n        public RelayCommand AddConditionCommand { get; set; }\n        public RelayCommand CheckConditionCommand { get; set; }\n\n        public AutoExportPluginConfig Config\n        {\n            get { return _config; }\n            set\n            {\n                _config = value;\n                RaisePropertyChanged(() => Config);\n            }\n        }\n\n        public string Name\n        {\n            get { return Config.Name; }\n            set\n            {\n                Config.Name = value;\n                RaisePropertyChanged(() => Name);\n            }\n        }\n\n        public bool IsEnabled\n        {\n            get { return Config.IsEnabled; }\n      \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class AutoExportPluginEditViewModel : ViewModelBase\n    {\n        private PreviewWnd _wnd;\n        private AutoExportPluginConfig _config;\n        private TransformPluginItem _selectedTransformPluginItem;\n        private bool _fullSize;\n        private bool _runAfterTransfer;\n\n        public GalaSoft.MvvmLight.Command.RelayCommand<string> AddTransforPluginCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<TransformPluginItem> RemoveTransforPluginCommand { get; set; }\n        public RelayCommand PreviewCommand { get; set; }\n        public RelayCommand ApplyCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<PluginCondition> RemoveConditionCommand { get; set; }\n        public GalaSoft.MvvmLight.Command.RelayCommand<PluginCondition> GetValueCommand { get; set; }\n        public RelayCommand AddConditionCommand { get; set; }\n        public RelayCommand CheckConditionCommand { get; set; }\n\n        public AutoExportPluginConfig Config\n        {\n            get { return _config; }\n            set\n            {\n                _config = value;\n                RaisePropertyChanged(() => Config);\n            }\n        }\n\n        public string Name\n        {\n            get { return Config.Name; }\n            set\n            {\n                Config.Name = value;\n                RaisePropertyChanged(() => Name);\n            }\n        }\n\n        public bool IsEnabled\n        {\n            get { return Config.IsEnabled; }\n      \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n            class TakeUntilOther : IObserver<TOther>\n            {\n                readonly TakeUntil sourceObserver;\n                readonly IDisposable subscription;\n\n                public TakeUntilOther(TakeUntil sourceObserver, IDisposable subscription)\n                {\n                    this.sourceObserver = sourceObserver;\n                    this.subscription = subscription;\n                }\n\n                public void OnNext(TOther value)\n                {\n                    lock (sourceObserver.gate)\n                    {\n                        try\n                        {\n                            sourceObserver.observer.OnCompleted();\n                        }\n                        finally\n                        {\n                            sourceObserver.Dispose();\n                            subscription.Dispose();\n                        }\n                    }\n                }\n\n                public void OnError(Exception error)\n                {\n                    lock (sourceObserver.gate)\n                    {\n                        try\n                        {\n                            sourceObserver.observer.OnError(error);\n                        }\n                        finally\n                        {\n                            sourceObserver.Dispose();\n                            subscription.Dispose();\n                        }\n                    }\n                }\n\n                public void OnCompleted()\n               \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n            class TakeUntilOther : IObserver<TOther>\n            {\n                readonly TakeUntil sourceObserver;\n                readonly IDisposable subscription;\n\n                public TakeUntilOther(TakeUntil sourceObserver, IDisposable subscription)\n                {\n                    this.sourceObserver = sourceObserver;\n                    this.subscription = subscription;\n                }\n\n                public void OnNext(TOther value)\n                {\n                    lock (sourceObserver.gate)\n                    {\n                        try\n                        {\n                            sourceObserver.observer.OnCompleted();\n                        }\n                        finally\n                        {\n                            sourceObserver.Dispose();\n                            subscription.Dispose();\n                        }\n                    }\n                }\n\n                public void OnError(Exception error)\n                {\n                    lock (sourceObserver.gate)\n                    {\n                        try\n                        {\n                            sourceObserver.observer.OnError(error);\n                        }\n                        finally\n                        {\n                            sourceObserver.Dispose();\n                            subscription.Dispose();\n                        }\n                    }\n                }\n\n                public void OnCompleted()\n               \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /**\n    * <CODE>PdfDocument</CODE> is the class that is used by <CODE>PdfWriter</CODE>\n    * to translate a <CODE>Document</CODE> into a PDF with different pages.\n    * <P>\n    * A <CODE>PdfDocument</CODE> always listens to a <CODE>Document</CODE>\n    * and adds the Pdf representation of every <CODE>Element</CODE> that is\n    * added to the <CODE>Document</CODE>.\n    *\n    * @see      com.lowagie.text.Document\n    * @see      com.lowagie.text.DocListener\n    * @see      PdfWriter\n    */\n\n    public class PdfDocument : Document {\n        \n        /**\n        * <CODE>PdfInfo</CODE> is the PDF InfoDictionary.\n        * <P>\n        * A document's trailer may contain a reference to an Info dictionary that provides information\n        * about the document. This optional dictionary may contain one or more keys, whose values\n        * should be strings.<BR>\n        * This object is described in the 'Portable Document Format Reference Manual version 1.3'\n        * section 6.10 (page 120-121)\n        */\n        \n        public class PdfInfo : PdfDictionary {\n            \n            // constructors\n            \n            /**\n            * Construct a <CODE>PdfInfo</CODE>-object.\n            */\n            \n            internal PdfInfo() {\n                AddProducer();\n                AddCreationDate();\n            }\n            \n            /**\n            * Constructs a <CODE>PdfInfo</CODE>-object.\n            *\n            * @param        author      name of the author of the \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /**\n    * <CODE>PdfDocument</CODE> is the class that is used by <CODE>PdfWriter</CODE>\n    * to translate a <CODE>Document</CODE> into a PDF with different pages.\n    * <P>\n    * A <CODE>PdfDocument</CODE> always listens to a <CODE>Document</CODE>\n    * and adds the Pdf representation of every <CODE>Element</CODE> that is\n    * added to the <CODE>Document</CODE>.\n    *\n    * @see      com.lowagie.text.Document\n    * @see      com.lowagie.text.DocListener\n    * @see      PdfWriter\n    */\n\n    public class PdfDocument : Document {\n        \n        /**\n        * <CODE>PdfInfo</CODE> is the PDF InfoDictionary.\n        * <P>\n        * A document's trailer may contain a reference to an Info dictionary that provides information\n        * about the document. This optional dictionary may contain one or more keys, whose values\n        * should be strings.<BR>\n        * This object is described in the 'Portable Document Format Reference Manual version 1.3'\n        * section 6.10 (page 120-121)\n        */\n        \n        public class PdfInfo : PdfDictionary {\n            \n            // constructors\n            \n            /**\n            * Construct a <CODE>PdfInfo</CODE>-object.\n            */\n            \n            internal PdfInfo() {\n                AddProducer();\n                AddCreationDate();\n            }\n            \n            /**\n            * Constructs a <CODE>PdfInfo</CODE>-object.\n            *\n            * @param        author      name of the author of the \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic sealed class ObjectHelpResponse : Packet\n\t{\n\t\tpublic ObjectHelpResponse(IEntity e, string text)\n\t\t\t: base(0xB7)\n\t\t{\n\t\t\tEnsureCapacity(9 + (text.Length * 2));\n\n\t\t\tm_Stream.Write(e.Serial);\n\t\t\tm_Stream.WriteBigUniNull(text);\n\t\t}\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic sealed class ObjectHelpResponse : Packet\n\t{\n\t\tpublic ObjectHelpResponse(IEntity e, string text)\n\t\t\t: base(0xB7)\n\t\t{\n\t\t\tEnsureCapacity(9 + (text.Length * 2));\n\n\t\t\tm_Stream.Write(e.Serial);\n\t\t\tm_Stream.WriteBigUniNull(text);\n\t\t}\n\t}\n\nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class DeserializeListWithElements<TSerializer>\n        where TSerializer : ITypeSerializer\n    {\n        internal static readonly ITypeSerializer Serializer = JsWriter.GetTypeSerializer<TSerializer>();\n\n        private static Dictionary<Type, ParseListDelegate> ParseDelegateCache\n            = new Dictionary<Type, ParseListDelegate>();\n\n        private delegate object ParseListDelegate(string value, Type createListType, ParseStringDelegate parseFn);\n\n        public static Func<string, Type, ParseStringDelegate, object> GetListTypeParseFn(\n            Type createListType, Type elementType, ParseStringDelegate parseFn)\n        {\n            ParseListDelegate parseDelegate;\n            if (ParseDelegateCache.TryGetValue(elementType, out parseDelegate))\n                return parseDelegate.Invoke;\n\n            var genericType = typeof(DeserializeListWithElements<,>).MakeGenericType(elementType, typeof(TSerializer));\n            var mi = genericType.GetPublicStaticMethod(\"ParseGenericList\");\n            parseDelegate = (ParseListDelegate)mi.MakeDelegate(typeof(ParseListDelegate));\n\n            Dictionary<Type, ParseListDelegate> snapshot, newCache;\n            do\n            {\n                snapshot = ParseDelegateCache;\n                newCache = new Dictionary<Type, ParseListDelegate>(ParseDelegateCache);\n                newCache[elementType] = parseDelegate;\n\n            } while (!ReferenceEquals(\n                Interlocked.CompareExchange(ref ParseDelega\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class DeserializeListWithElements<TSerializer>\n        where TSerializer : ITypeSerializer\n    {\n        internal static readonly ITypeSerializer Serializer = JsWriter.GetTypeSerializer<TSerializer>();\n\n        private static Dictionary<Type, ParseListDelegate> ParseDelegateCache\n            = new Dictionary<Type, ParseListDelegate>();\n\n        private delegate object ParseListDelegate(string value, Type createListType, ParseStringDelegate parseFn);\n\n        public static Func<string, Type, ParseStringDelegate, object> GetListTypeParseFn(\n            Type createListType, Type elementType, ParseStringDelegate parseFn)\n        {\n            ParseListDelegate parseDelegate;\n            if (ParseDelegateCache.TryGetValue(elementType, out parseDelegate))\n                return parseDelegate.Invoke;\n\n            var genericType = typeof(DeserializeListWithElements<,>).MakeGenericType(elementType, typeof(TSerializer));\n            var mi = genericType.GetPublicStaticMethod(\"ParseGenericList\");\n            parseDelegate = (ParseListDelegate)mi.MakeDelegate(typeof(ParseListDelegate));\n\n            Dictionary<Type, ParseListDelegate> snapshot, newCache;\n            do\n            {\n                snapshot = ParseDelegateCache;\n                newCache = new Dictionary<Type, ParseListDelegate>(ParseDelegateCache);\n                newCache[elementType] = parseDelegate;\n\n            } while (!ReferenceEquals(\n                Interlocked.CompareExchange(ref ParseDelega\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SettingsHelpers\n\t{\n\t\tprivate readonly PrinterSettings printerSettings;\n\t\tprivate PrintLevelingData _printLevelingData = null;\n\n\t\tpublic SettingsHelpers(PrinterSettings printerSettings)\n\t\t{\n\t\t\tthis.printerSettings = printerSettings;\n\t\t}\n\n\t\tpublic double ExtruderTargetTemperature(int extruderIndex)\n\t\t{\n\t\t\tif (extruderIndex == 0)\n\t\t\t{\n\t\t\t\treturn printerSettings.GetValue<double>(SettingsKey.temperature);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Check if there is a material override for this extruder\n\t\t\t\t// Otherwise, use the SettingsLayers that is bound to this extruder\n\t\t\t\tif (extruderIndex < printerSettings.GetValue<int>(SettingsKey.extruder_count))\n\t\t\t\t{\n\t\t\t\t\treturn printerSettings.GetValue<double>($\"{SettingsKey.temperature}{extruderIndex}\");\n\t\t\t\t}\n\n\t\t\t\t// else return the normal settings cascade\n\t\t\t\treturn printerSettings.GetValue<double>(SettingsKey.temperature);\n\t\t\t}\n\t\t}\n\n\t\tpublic int[] LayerToPauseOn()\n\t\t{\n\t\t\tstring[] userValues = printerSettings.GetValue(\"layer_to_pause\").Split(';');\n\n\t\t\treturn userValues.Where(v => int.TryParse(v, out int temp)).Select(v =>\n\t\t\t{\n\t\t\t\t// Convert from 0 based index to 1 based index\n\t\t\t\tint val = int.Parse(v);\n\n\t\t\t\t// Special case for user entered zero that pushes 0 to 1, otherwise val = val - 1 for 1 based index\n\t\t\t\treturn val == 0 ? 1 : val - 1;\n\t\t\t}).ToArray();\n\t\t}\n\n\t\tpublic void SetBaudRate(string baudRate)\n\t\t{\n\t\t\tprinterSettings.SetValue(SettingsKey.baud_rate, baudRate);\n\t\t}\n\n\t\tpublic string ComPort()\n\t\t{\n\t\t\treturn printerSettings.GetValu\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SettingsHelpers\n\t{\n\t\tprivate readonly PrinterSettings printerSettings;\n\t\tprivate PrintLevelingData _printLevelingData = null;\n\n\t\tpublic SettingsHelpers(PrinterSettings printerSettings)\n\t\t{\n\t\t\tthis.printerSettings = printerSettings;\n\t\t}\n\n\t\tpublic double ExtruderTargetTemperature(int extruderIndex)\n\t\t{\n\t\t\tif (extruderIndex == 0)\n\t\t\t{\n\t\t\t\treturn printerSettings.GetValue<double>(SettingsKey.temperature);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Check if there is a material override for this extruder\n\t\t\t\t// Otherwise, use the SettingsLayers that is bound to this extruder\n\t\t\t\tif (extruderIndex < printerSettings.GetValue<int>(SettingsKey.extruder_count))\n\t\t\t\t{\n\t\t\t\t\treturn printerSettings.GetValue<double>($\"{SettingsKey.temperature}{extruderIndex}\");\n\t\t\t\t}\n\n\t\t\t\t// else return the normal settings cascade\n\t\t\t\treturn printerSettings.GetValue<double>(SettingsKey.temperature);\n\t\t\t}\n\t\t}\n\n\t\tpublic int[] LayerToPauseOn()\n\t\t{\n\t\t\tstring[] userValues = printerSettings.GetValue(\"layer_to_pause\").Split(';');\n\n\t\t\treturn userValues.Where(v => int.TryParse(v, out int temp)).Select(v =>\n\t\t\t{\n\t\t\t\t// Convert from 0 based index to 1 based index\n\t\t\t\tint val = int.Parse(v);\n\n\t\t\t\t// Special case for user entered zero that pushes 0 to 1, otherwise val = val - 1 for 1 based index\n\t\t\t\treturn val == 0 ? 1 : val - 1;\n\t\t\t}).ToArray();\n\t\t}\n\n\t\tpublic void SetBaudRate(string baudRate)\n\t\t{\n\t\t\tprinterSettings.SetValue(SettingsKey.baud_rate, baudRate);\n\t\t}\n\n\t\tpublic string ComPort()\n\t\t{\n\t\t\treturn printerSettings.GetValu\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public partial class getBuddyLocation_args : TBase\n    {\n      private string _mid;\n      private int _index;\n\n      public string Mid\n      {\n        get\n        {\n          return _mid;\n        }\n        set\n        {\n          __isset.mid = true;\n          this._mid = value;\n        }\n      }\n\n      public int Index\n      {\n        get\n        {\n          return _index;\n        }\n        set\n        {\n          __isset.index = true;\n          this._index = value;\n        }\n      }\n\n\n      public Isset __isset;\n      #if !SILVERLIGHT\n      [Serializable]\n      #endif\n      public struct Isset {\n        public bool mid;\n        public bool index;\n      }\n\n      public getBuddyLocation_args() {\n      }\n\n      public void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.String) {\n                Mid = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                Index = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n            \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__isset.__isset;",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public partial class getBuddyLocation_args : TBase\n    {\n      private string _mid;\n      private int _index;\n\n      public string Mid\n      {\n        get\n        {\n          return _mid;\n        }\n        set\n        {\n          __isset.mid = true;\n          this._mid = value;\n        }\n      }\n\n      public int Index\n      {\n        get\n        {\n          return _index;\n        }\n        set\n        {\n          __isset.index = true;\n          this._index = value;\n        }\n      }\n\n\n      public Isset __isset;\n      #if !SILVERLIGHT\n      [Serializable]\n      #endif\n      public struct Isset {\n        public bool mid;\n        public bool index;\n      }\n\n      public getBuddyLocation_args() {\n      }\n\n      public void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.String) {\n                Mid = iprot.ReadString();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                Index = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n            \nAnswer: __isset.__isset;"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class BeatsMusicManager : IBeatsMusicManager\n    {\n        private readonly IHttpBeatsMusicEngine _httpBeatsMusicEngine;\n        private readonly IJsonBeatsMusicEngine _jsonBeatsMusicEngine;\n\n        public BeatsMusicManager(IHttpBeatsMusicEngine httpBeatsMusicEngine, IJsonBeatsMusicEngine jsonBeatsMusicEngine)\n        {\n            _httpBeatsMusicEngine = httpBeatsMusicEngine;\n            _jsonBeatsMusicEngine = jsonBeatsMusicEngine;\n        }\n\n        public async Task<MultipleRootObject<T>> GetMultipleParsedResult<T>(string methodName,\n            List<KeyValuePair<string, string>> methodParams, bool useToken = false)\n        {\n            var dataResponse = await GetDataResponse(methodName, methodParams, useToken);\n            var parsedDataResponse = _jsonBeatsMusicEngine.ParseMultipleDataResponse<T>(dataResponse);\n            return parsedDataResponse;\n        }\n\n        public async Task<SingleRootObject<T>> GetSingleParsedResult<T>(string methodName,\n            List<KeyValuePair<string, string>> methodParams, bool useToken = false)\n        {\n            var dataResponse = await GetDataResponse(methodName, methodParams, useToken);\n            var parsedDataResponse = _jsonBeatsMusicEngine.ParseSingleDataResponse<T>(dataResponse);\n            return parsedDataResponse;\n        }\n\n        public async Task<SingleRootObject<T>> PostData<T>(string methodName,\n            List<KeyValuePair<string, string>> dataParams)\n        {\n            if (dataParams == nu\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class BeatsMusicManager : IBeatsMusicManager\n    {\n        private readonly IHttpBeatsMusicEngine _httpBeatsMusicEngine;\n        private readonly IJsonBeatsMusicEngine _jsonBeatsMusicEngine;\n\n        public BeatsMusicManager(IHttpBeatsMusicEngine httpBeatsMusicEngine, IJsonBeatsMusicEngine jsonBeatsMusicEngine)\n        {\n            _httpBeatsMusicEngine = httpBeatsMusicEngine;\n            _jsonBeatsMusicEngine = jsonBeatsMusicEngine;\n        }\n\n        public async Task<MultipleRootObject<T>> GetMultipleParsedResult<T>(string methodName,\n            List<KeyValuePair<string, string>> methodParams, bool useToken = false)\n        {\n            var dataResponse = await GetDataResponse(methodName, methodParams, useToken);\n            var parsedDataResponse = _jsonBeatsMusicEngine.ParseMultipleDataResponse<T>(dataResponse);\n            return parsedDataResponse;\n        }\n\n        public async Task<SingleRootObject<T>> GetSingleParsedResult<T>(string methodName,\n            List<KeyValuePair<string, string>> methodParams, bool useToken = false)\n        {\n            var dataResponse = await GetDataResponse(methodName, methodParams, useToken);\n            var parsedDataResponse = _jsonBeatsMusicEngine.ParseSingleDataResponse<T>(dataResponse);\n            return parsedDataResponse;\n        }\n\n        public async Task<SingleRootObject<T>> PostData<T>(string methodName,\n            List<KeyValuePair<string, string>> dataParams)\n        {\n            if (dataParams == nu\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public partial class getMessageBoxWrapUpList_args : TBase\n    {\n      private int _start;\n      private int _messageBoxCount;\n\n      public int Start\n      {\n        get\n        {\n          return _start;\n        }\n        set\n        {\n          __isset.start = true;\n          this._start = value;\n        }\n      }\n\n      public int MessageBoxCount\n      {\n        get\n        {\n          return _messageBoxCount;\n        }\n        set\n        {\n          __isset.messageBoxCount = true;\n          this._messageBoxCount = value;\n        }\n      }\n\n\n      public Isset __isset;\n      #if !SILVERLIGHT\n      [Serializable]\n      #endif\n      public struct Isset {\n        public bool start;\n        public bool messageBoxCount;\n      }\n\n      public getMessageBoxWrapUpList_args() {\n      }\n\n      public void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.I32) {\n                Start = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                MessageBoxCount = iprot.ReadI32();\n              } else \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    #if !SILVERLIGHT\n    [Serializable]\n    #endif\n    public partial class getMessageBoxWrapUpList_args : TBase\n    {\n      private int _start;\n      private int _messageBoxCount;\n\n      public int Start\n      {\n        get\n        {\n          return _start;\n        }\n        set\n        {\n          __isset.start = true;\n          this._start = value;\n        }\n      }\n\n      public int MessageBoxCount\n      {\n        get\n        {\n          return _messageBoxCount;\n        }\n        set\n        {\n          __isset.messageBoxCount = true;\n          this._messageBoxCount = value;\n        }\n      }\n\n\n      public Isset __isset;\n      #if !SILVERLIGHT\n      [Serializable]\n      #endif\n      public struct Isset {\n        public bool start;\n        public bool messageBoxCount;\n      }\n\n      public getMessageBoxWrapUpList_args() {\n      }\n\n      public void Read (TProtocol iprot)\n      {\n        TField field;\n        iprot.ReadStructBegin();\n        while (true)\n        {\n          field = iprot.ReadFieldBegin();\n          if (field.Type == TType.Stop) { \n            break;\n          }\n          switch (field.ID)\n          {\n            case 2:\n              if (field.Type == TType.I32) {\n                Start = iprot.ReadI32();\n              } else { \n                TProtocolUtil.Skip(iprot, field.Type);\n              }\n              break;\n            case 3:\n              if (field.Type == TType.I32) {\n                MessageBoxCount = iprot.ReadI32();\n              } else \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal class CaseSimplifier : SqlVisitor\n\t{\n\t\t#region Member Declarations\n\t\tprivate NodeFactory _sql;\n\t\t#endregion\n\n\t\tinternal CaseSimplifier(NodeFactory sql)\n\t\t{\n\t\t\t_sql = sql;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Replace equals and not equals:\n\t\t/// \n\t\t/// | CASE XXX              |               CASE XXX                            CASE XXX             \n\t\t/// |   WHEN AAA THEN MMMM  | != RRRR  ===>    WHEN AAA THEN (MMMM != RRRR) ==>    WHEN AAA THEN true\n\t\t/// |   WHEN BBB THEN NNNN  |                  WHEN BBB THEN (NNNN != RRRR)        WHEN BBB THEN false\n\t\t/// |   etc.                |                  etc.                                etc.               \n\t\t/// |   ELSE OOOO           |                  ELSE (OOOO != RRRR)                 ELSE true\n\t\t/// | END                                   END                                 END\n\t\t/// \n\t\t/// Where MMMM, NNNN and RRRR are constants. \n\t\t/// </summary>\n\t\tinternal override SqlExpression VisitBinaryOperator(SqlBinary bo)\n\t\t{\n\t\t\tswitch(bo.NodeType)\n\t\t\t{\n\t\t\t\tcase SqlNodeType.EQ:\n\t\t\t\tcase SqlNodeType.NE:\n\t\t\t\tcase SqlNodeType.EQ2V:\n\t\t\t\tcase SqlNodeType.NE2V:\n\t\t\t\t\tif(bo.Left.NodeType == SqlNodeType.SimpleCase &&\n\t\t\t\t\t   bo.Right.NodeType == SqlNodeType.Value &&\n\t\t\t\t\t   AreCaseWhenValuesConstant((SqlSimpleCase)bo.Left))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.DistributeOperatorIntoCase(bo.NodeType, (SqlSimpleCase)bo.Left, bo.Right);\n\t\t\t\t\t}\n\t\t\t\t\telse if(bo.Right.NodeType == SqlNodeType.SimpleCase &&\n\t\t\t\t\t\t\tbo.Left.NodeType == SqlNodeType.Value &&\n\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal class CaseSimplifier : SqlVisitor\n\t{\n\t\t#region Member Declarations\n\t\tprivate NodeFactory _sql;\n\t\t#endregion\n\n\t\tinternal CaseSimplifier(NodeFactory sql)\n\t\t{\n\t\t\t_sql = sql;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Replace equals and not equals:\n\t\t/// \n\t\t/// | CASE XXX              |               CASE XXX                            CASE XXX             \n\t\t/// |   WHEN AAA THEN MMMM  | != RRRR  ===>    WHEN AAA THEN (MMMM != RRRR) ==>    WHEN AAA THEN true\n\t\t/// |   WHEN BBB THEN NNNN  |                  WHEN BBB THEN (NNNN != RRRR)        WHEN BBB THEN false\n\t\t/// |   etc.                |                  etc.                                etc.               \n\t\t/// |   ELSE OOOO           |                  ELSE (OOOO != RRRR)                 ELSE true\n\t\t/// | END                                   END                                 END\n\t\t/// \n\t\t/// Where MMMM, NNNN and RRRR are constants. \n\t\t/// </summary>\n\t\tinternal override SqlExpression VisitBinaryOperator(SqlBinary bo)\n\t\t{\n\t\t\tswitch(bo.NodeType)\n\t\t\t{\n\t\t\t\tcase SqlNodeType.EQ:\n\t\t\t\tcase SqlNodeType.NE:\n\t\t\t\tcase SqlNodeType.EQ2V:\n\t\t\t\tcase SqlNodeType.NE2V:\n\t\t\t\t\tif(bo.Left.NodeType == SqlNodeType.SimpleCase &&\n\t\t\t\t\t   bo.Right.NodeType == SqlNodeType.Value &&\n\t\t\t\t\t   AreCaseWhenValuesConstant((SqlSimpleCase)bo.Left))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.DistributeOperatorIntoCase(bo.NodeType, (SqlSimpleCase)bo.Left, bo.Right);\n\t\t\t\t\t}\n\t\t\t\t\telse if(bo.Right.NodeType == SqlNodeType.SimpleCase &&\n\t\t\t\t\t\t\tbo.Left.NodeType == SqlNodeType.Value &&\n\t\nAnswer: ___________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public ref struct Utf8JsonWriter<TBufferWriter> where TBufferWriter : IBufferWriter<byte>\n    {\n        private readonly bool _prettyPrint;\n        private Buffers.Writer.BufferWriter<TBufferWriter> _bufferWriter;\n\n        // The highest order bit of _indent is used to discern whether we are writing the first item in a list or not.\n        // if (_indent >> 31) == 1, add a list separator before writing the item\n        // else, no list separator is needed since we are writing the first item.\n        private int _indent;\n\n        private const int RemoveFlagsBitMask = 0x7FFFFFFF;\n\n        /// <summary>\n        /// Constructs a JSON writer with a specified <paramref name=\"bufferWriter\"/>.\n        /// </summary>\n        /// <param name=\"bufferWriter\">An instance of <see cref=\"ITextBufferWriter\" /> used for writing bytes to an output channel.</param>\n        /// <param name=\"prettyPrint\">Specifies whether to add whitespace to the output text for user readability.</param>\n        public Utf8JsonWriter(TBufferWriter bufferWriter, bool prettyPrint = false)\n        {\n            _bufferWriter = BufferWriter.Create(bufferWriter);\n            _prettyPrint = prettyPrint;\n            _indent = 0;\n            _resizeBufferBy = -1;\n        }\n\n        public void Flush() => _bufferWriter.Flush();\n\n        private int _resizeBufferBy;\n\n        public void Write(JsonObject jsonObject)\n        {\n            JsonTokenType type = jsonObject.Type;\n            switch (type)\n            {\n     \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "None",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public ref struct Utf8JsonWriter<TBufferWriter> where TBufferWriter : IBufferWriter<byte>\n    {\n        private readonly bool _prettyPrint;\n        private Buffers.Writer.BufferWriter<TBufferWriter> _bufferWriter;\n\n        // The highest order bit of _indent is used to discern whether we are writing the first item in a list or not.\n        // if (_indent >> 31) == 1, add a list separator before writing the item\n        // else, no list separator is needed since we are writing the first item.\n        private int _indent;\n\n        private const int RemoveFlagsBitMask = 0x7FFFFFFF;\n\n        /// <summary>\n        /// Constructs a JSON writer with a specified <paramref name=\"bufferWriter\"/>.\n        /// </summary>\n        /// <param name=\"bufferWriter\">An instance of <see cref=\"ITextBufferWriter\" /> used for writing bytes to an output channel.</param>\n        /// <param name=\"prettyPrint\">Specifies whether to add whitespace to the output text for user readability.</param>\n        public Utf8JsonWriter(TBufferWriter bufferWriter, bool prettyPrint = false)\n        {\n            _bufferWriter = BufferWriter.Create(bufferWriter);\n            _prettyPrint = prettyPrint;\n            _indent = 0;\n            _resizeBufferBy = -1;\n        }\n\n        public void Flush() => _bufferWriter.Flush();\n\n        private int _resizeBufferBy;\n\n        public void Write(JsonObject jsonObject)\n        {\n            JsonTokenType type = jsonObject.Type;\n            switch (type)\n            {\n     \nAnswer: None\n</think>\n\nThe given"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Handles one JS device as DXInput device\n  /// In addition provide some static tools to handle JS props here in one place\n  /// Also owns the GUI i.e. the user control that shows all values\n  /// </summary>\n  public class JoystickCls : DeviceCls\n  {\n    private static readonly log4net.ILog log = log4net.LogManager.GetLogger( MethodBase.GetCurrentMethod( ).DeclaringType );\n\n    #region Static Items\n\n    public new const string DeviceClass = \"joystick\";  // the device name used throughout this app\n    public new const string DeviceID = \"js1_\";\n    static public int RegisteredDevices = 0;\n\n\n    static public int JSnum_UNKNOWN = 0;\n    static public int JSnum_MAX = 12; // Get to 12 for 'freaks' ..\n\n    public const string JsUnknown = \"jsx_\";\n\n    public new const string DisabledInput = DeviceID + DeviceCls.DisabledInput; //AC2 ..\n    static public new bool IsDisabledInput( string input )\n    {\n      if ( input == DisabledInput ) return true;\n      return false;\n    }\n\n\n    /// <summary>\n    /// Returns the currently valid color for a jsN assignment\n    /// </summary>\n    /// <param name=\"jsN\">The jsN number of the command</param>\n    /// <returns>A color</returns>\n    static public System.Drawing.Color JsNColor( int jsN )\n    {\n      if ( jsN == JSnum_UNKNOWN ) return MyColors.BlendedColor;\n      if ( jsN < 1 ) return MyColors.ErrorColor;\n      if ( jsN > JoystickCls.JSnum_MAX ) return MyColors.ErrorColor;\n\n      return MyColors.JsMapColor[jsN - 1]; // jsN is\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Handles one JS device as DXInput device\n  /// In addition provide some static tools to handle JS props here in one place\n  /// Also owns the GUI i.e. the user control that shows all values\n  /// </summary>\n  public class JoystickCls : DeviceCls\n  {\n    private static readonly log4net.ILog log = log4net.LogManager.GetLogger( MethodBase.GetCurrentMethod( ).DeclaringType );\n\n    #region Static Items\n\n    public new const string DeviceClass = \"joystick\";  // the device name used throughout this app\n    public new const string DeviceID = \"js1_\";\n    static public int RegisteredDevices = 0;\n\n\n    static public int JSnum_UNKNOWN = 0;\n    static public int JSnum_MAX = 12; // Get to 12 for 'freaks' ..\n\n    public const string JsUnknown = \"jsx_\";\n\n    public new const string DisabledInput = DeviceID + DeviceCls.DisabledInput; //AC2 ..\n    static public new bool IsDisabledInput( string input )\n    {\n      if ( input == DisabledInput ) return true;\n      return false;\n    }\n\n\n    /// <summary>\n    /// Returns the currently valid color for a jsN assignment\n    /// </summary>\n    /// <param name=\"jsN\">The jsN number of the command</param>\n    /// <returns>A color</returns>\n    static public System.Drawing.Color JsNColor( int jsN )\n    {\n      if ( jsN == JSnum_UNKNOWN ) return MyColors.BlendedColor;\n      if ( jsN < 1 ) return MyColors.ErrorColor;\n      if ( jsN > JoystickCls.JSnum_MAX ) return MyColors.ErrorColor;\n\n      return MyColors.JsMapColor[jsN - 1]; // jsN is\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal sealed class MappedTable : MetaTable\n\t{\n\t\t#region Member Declarations\n\t\tprivate MappedMetaModel model;\n\t\tprivate TableMapping mapping;\n\t\tprivate MetaType rowType;\n\t\tprivate bool hasMethods;\n\t\tprivate MethodInfo insertMethod;\n\t\tprivate MethodInfo updateMethod;\n\t\tprivate MethodInfo deleteMethod;\n\t\t#endregion\n\n\t\t[ResourceExposure(ResourceScope.Assembly | ResourceScope.Machine)] // Parameter contains various type references.\n\t\t[ResourceConsumption(ResourceScope.Assembly | ResourceScope.Machine)] // MappedRootType constructor call.\n\t\tinternal MappedTable(MappedMetaModel model, TableMapping mapping, Type rowType)\n\t\t{\n\t\t\tthis.model = model;\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.rowType = new MappedRootType(model, this, mapping.RowType, rowType);\n\t\t}\n\n\t\tpublic override MetaModel Model\n\t\t{\n\t\t\tget { return this.model; }\n\t\t}\n\n\t\tpublic override string TableName\n\t\t{\n\t\t\tget { return this.mapping.TableName; }\n\t\t}\n\n\t\tpublic override MetaType RowType\n\t\t{\n\t\t\tget { return this.rowType; }\n\t\t}\n\n\t\tpublic override MethodInfo InsertMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.insertMethod;\n\t\t\t}\n\t\t}\n\t\tpublic override MethodInfo UpdateMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.updateMethod;\n\t\t\t}\n\t\t}\n\t\tpublic override MethodInfo DeleteMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.deleteMethod;\n\t\t\t}\n\t\t}\n\t\tprivate void InitMethods()\n\t\t{\n\t\t\tif(!this.hasMethods)\n\t\t\t{\n\t\t\t\tthis.insertMethod = MethodFinder.FindMethod(\n\t\t\t\t\tthis.model.ContextType,\n\t\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal sealed class MappedTable : MetaTable\n\t{\n\t\t#region Member Declarations\n\t\tprivate MappedMetaModel model;\n\t\tprivate TableMapping mapping;\n\t\tprivate MetaType rowType;\n\t\tprivate bool hasMethods;\n\t\tprivate MethodInfo insertMethod;\n\t\tprivate MethodInfo updateMethod;\n\t\tprivate MethodInfo deleteMethod;\n\t\t#endregion\n\n\t\t[ResourceExposure(ResourceScope.Assembly | ResourceScope.Machine)] // Parameter contains various type references.\n\t\t[ResourceConsumption(ResourceScope.Assembly | ResourceScope.Machine)] // MappedRootType constructor call.\n\t\tinternal MappedTable(MappedMetaModel model, TableMapping mapping, Type rowType)\n\t\t{\n\t\t\tthis.model = model;\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.rowType = new MappedRootType(model, this, mapping.RowType, rowType);\n\t\t}\n\n\t\tpublic override MetaModel Model\n\t\t{\n\t\t\tget { return this.model; }\n\t\t}\n\n\t\tpublic override string TableName\n\t\t{\n\t\t\tget { return this.mapping.TableName; }\n\t\t}\n\n\t\tpublic override MetaType RowType\n\t\t{\n\t\t\tget { return this.rowType; }\n\t\t}\n\n\t\tpublic override MethodInfo InsertMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.insertMethod;\n\t\t\t}\n\t\t}\n\t\tpublic override MethodInfo UpdateMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.updateMethod;\n\t\t\t}\n\t\t}\n\t\tpublic override MethodInfo DeleteMethod\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tthis.InitMethods();\n\t\t\t\treturn this.deleteMethod;\n\t\t\t}\n\t\t}\n\t\tprivate void InitMethods()\n\t\t{\n\t\t\tif(!this.hasMethods)\n\t\t\t{\n\t\t\t\tthis.insertMethod = MethodFinder.FindMethod(\n\t\t\t\t\tthis.model.ContextType,\n\t\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class JsonSchemaWriter\n    {\n        private readonly JsonWriter _writer;\n        private readonly JsonSchemaResolver _resolver;\n\n        public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver)\n        {\n            ValidationUtils.ArgumentNotNull(writer, \"writer\");\n            _writer = writer;\n            _resolver = resolver;\n        }\n\n        private void ReferenceOrWriteSchema(JsonSchema schema)\n        {\n            if (schema.Id != null && _resolver.GetSchema(schema.Id) != null)\n            {\n                _writer.WriteStartObject();\n                _writer.WritePropertyName(JsonTypeReflector.RefPropertyName);\n                _writer.WriteValue(schema.Id);\n                _writer.WriteEndObject();\n            }\n            else\n            {\n                WriteSchema(schema);\n            }\n        }\n\n        public void WriteSchema(JsonSchema schema)\n        {\n            ValidationUtils.ArgumentNotNull(schema, \"schema\");\n\n            if (!_resolver.LoadedSchemas.Contains(schema))\n                _resolver.LoadedSchemas.Add(schema);\n\n            _writer.WriteStartObject();\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.IdPropertyName, schema.Id);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.TitlePropertyName, schema.Title);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.DescriptionPropertyName, schema.Description);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.Requi\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class JsonSchemaWriter\n    {\n        private readonly JsonWriter _writer;\n        private readonly JsonSchemaResolver _resolver;\n\n        public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver)\n        {\n            ValidationUtils.ArgumentNotNull(writer, \"writer\");\n            _writer = writer;\n            _resolver = resolver;\n        }\n\n        private void ReferenceOrWriteSchema(JsonSchema schema)\n        {\n            if (schema.Id != null && _resolver.GetSchema(schema.Id) != null)\n            {\n                _writer.WriteStartObject();\n                _writer.WritePropertyName(JsonTypeReflector.RefPropertyName);\n                _writer.WriteValue(schema.Id);\n                _writer.WriteEndObject();\n            }\n            else\n            {\n                WriteSchema(schema);\n            }\n        }\n\n        public void WriteSchema(JsonSchema schema)\n        {\n            ValidationUtils.ArgumentNotNull(schema, \"schema\");\n\n            if (!_resolver.LoadedSchemas.Contains(schema))\n                _resolver.LoadedSchemas.Add(schema);\n\n            _writer.WriteStartObject();\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.IdPropertyName, schema.Id);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.TitlePropertyName, schema.Title);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.DescriptionPropertyName, schema.Description);\n            WritePropertyIfNotNull(_writer, JsonSchemaConstants.Requi\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  partial class InfoEditor : Form\n  {\n    private readonly fomod m_fomodMod;\n\n    public InfoEditor(fomod p_fomodMod)\n    {\n      InitializeComponent();\n      Icon = Resources.fomm02;\n      Settings.Default.windowPositions.GetWindowPosition(\"InfoEditor\", this);\n\n      m_fomodMod = p_fomodMod;\n      finInfo.LoadFomod(m_fomodMod);\n    }\n\n    private void butSave_Click(object sender, EventArgs e)\n    {\n      if (!finInfo.SaveFomod(m_fomodMod))\n      {\n        MessageBox.Show(this, \"You must correct the errors before saving.\", \"Error\", MessageBoxButtons.OK,\n                        MessageBoxIcon.Error);\n      }\n      else\n      {\n        DialogResult = DialogResult.OK;\n      }\n    }\n\n    private void InfoEditor_FormClosing(object sender, FormClosingEventArgs e)\n    {\n      Settings.Default.windowPositions.SetWindowPosition(\"InfoEditor\", this);\n      Settings.Default.Save();\n    }\n\n    private void butEditReadme_Click(object sender, EventArgs e)\n    {\n      var erfEditor = new EditReadmeForm();\n      erfEditor.Readme = !m_fomodMod.HasReadme ? new Readme(ReadmeFormat.PlainText, \"\") : m_fomodMod.GetReadme();\n      if (erfEditor.ShowDialog(this) == DialogResult.OK)\n      {\n        m_fomodMod.SetReadme(erfEditor.Readme);\n      }\n    }\n  }\n    partial class InfoEditor {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// Clean up any resources being us\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Feature",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  partial class InfoEditor : Form\n  {\n    private readonly fomod m_fomodMod;\n\n    public InfoEditor(fomod p_fomodMod)\n    {\n      InitializeComponent();\n      Icon = Resources.fomm02;\n      Settings.Default.windowPositions.GetWindowPosition(\"InfoEditor\", this);\n\n      m_fomodMod = p_fomodMod;\n      finInfo.LoadFomod(m_fomodMod);\n    }\n\n    private void butSave_Click(object sender, EventArgs e)\n    {\n      if (!finInfo.SaveFomod(m_fomodMod))\n      {\n        MessageBox.Show(this, \"You must correct the errors before saving.\", \"Error\", MessageBoxButtons.OK,\n                        MessageBoxIcon.Error);\n      }\n      else\n      {\n        DialogResult = DialogResult.OK;\n      }\n    }\n\n    private void InfoEditor_FormClosing(object sender, FormClosingEventArgs e)\n    {\n      Settings.Default.windowPositions.SetWindowPosition(\"InfoEditor\", this);\n      Settings.Default.Save();\n    }\n\n    private void butEditReadme_Click(object sender, EventArgs e)\n    {\n      var erfEditor = new EditReadmeForm();\n      erfEditor.Readme = !m_fomodMod.HasReadme ? new Readme(ReadmeFormat.PlainText, \"\") : m_fomodMod.GetReadme();\n      if (erfEditor.ShowDialog(this) == DialogResult.OK)\n      {\n        m_fomodMod.SetReadme(erfEditor.Readme);\n      }\n    }\n  }\n    partial class InfoEditor {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// Clean up any resources being us\nAnswer:?\n</think>\n\nAnswer: Feature"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Binds MemberAccess\n\t/// Prefetches deferrable expressions (SqlLink) if necessary\n\t/// Translates structured object comparision (EQ, NE) into memberwise comparison\n\t/// Translates shared expressions (SqlSharedExpression, SqlSharedExpressionRef)\n\t/// Optimizes out simple redundant operations : \n\t///     XXX OR TRUE ==> TRUE\n\t///     XXX AND FALSE ==> FALSE\n\t///     NON-NULL EQ NULL ==> FALSE\n\t///     NON-NULL NEQ NULL ==> TRUE\n\t/// </summary>\n\t[SuppressMessage(\"Microsoft.Maintainability\", \"CA1506:AvoidExcessiveClassCoupling\", Justification = \"These issues are related to our use of if-then and case statements for node types, which adds to the complexity count however when reviewed they are easy to navigate and understand.\")]\n\tinternal class MemberAccessBinder : SqlVisitor {\n\t\tSqlBinder binder;\n\t\tTranslator translator;\n\t\tNodeFactory sql;\n\t\tTypeSystemProvider typeProvider;\n\t\tSqlExpander expander;\n\t\tSqlColumnizer columnizer;\n\t\tSqlAggregateChecker aggregateChecker;\n\t\tSqlSelect currentSelect;\n\t\tSqlAlias currentAlias;\n\t\tDictionary<SqlAlias, SqlAlias> outerAliasMap;\n\t\tLinkOptimizationScope linkMap;\n\t\tMetaModel model;\n\t\tHashSet<MetaType> alreadyIncluded;\n\t\tDataLoadOptions shape;\n\t\tbool disableInclude;\n\t\tbool inGroupBy;\n\t\tbool canUseOuterApply;\n\n\t\tinternal MemberAccessBinder(SqlBinder binder, Translator translator, SqlColumnizer columnizer, NodeFactory sqlFactory, MetaModel model, DataLoadOptions shape, bool canUseOuterApply) {\n\t\t\tthis.binder = binder;\n\t\t\tthis.transla\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Binds MemberAccess\n\t/// Prefetches deferrable expressions (SqlLink) if necessary\n\t/// Translates structured object comparision (EQ, NE) into memberwise comparison\n\t/// Translates shared expressions (SqlSharedExpression, SqlSharedExpressionRef)\n\t/// Optimizes out simple redundant operations : \n\t///     XXX OR TRUE ==> TRUE\n\t///     XXX AND FALSE ==> FALSE\n\t///     NON-NULL EQ NULL ==> FALSE\n\t///     NON-NULL NEQ NULL ==> TRUE\n\t/// </summary>\n\t[SuppressMessage(\"Microsoft.Maintainability\", \"CA1506:AvoidExcessiveClassCoupling\", Justification = \"These issues are related to our use of if-then and case statements for node types, which adds to the complexity count however when reviewed they are easy to navigate and understand.\")]\n\tinternal class MemberAccessBinder : SqlVisitor {\n\t\tSqlBinder binder;\n\t\tTranslator translator;\n\t\tNodeFactory sql;\n\t\tTypeSystemProvider typeProvider;\n\t\tSqlExpander expander;\n\t\tSqlColumnizer columnizer;\n\t\tSqlAggregateChecker aggregateChecker;\n\t\tSqlSelect currentSelect;\n\t\tSqlAlias currentAlias;\n\t\tDictionary<SqlAlias, SqlAlias> outerAliasMap;\n\t\tLinkOptimizationScope linkMap;\n\t\tMetaModel model;\n\t\tHashSet<MetaType> alreadyIncluded;\n\t\tDataLoadOptions shape;\n\t\tbool disableInclude;\n\t\tbool inGroupBy;\n\t\tbool canUseOuterApply;\n\n\t\tinternal MemberAccessBinder(SqlBinder binder, Translator translator, SqlColumnizer columnizer, NodeFactory sqlFactory, MetaModel model, DataLoadOptions shape, bool canUseOuterApply) {\n\t\t\tthis.binder = binder;\n\t\t\tthis.transla\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [UsedImplicitly]\n    public class CommonPartHandler : ContentHandler {\n        private readonly IClock _clock;\n        private readonly IAuthenticationService _authenticationService;\n        private readonly IContentManager _contentManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n\n        public CommonPartHandler(\n            IRepository<CommonPartRecord> commonRepository,\n            IRepository<CommonPartVersionRecord> commonVersionRepository,\n            IClock clock,\n            IAuthenticationService authenticationService,\n            IContentManager contentManager,\n            IContentDefinitionManager contentDefinitionManager) {\n\n            _clock = clock;\n            _authenticationService = authenticationService;\n            _contentManager = contentManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            T = NullLocalizer.Instance;\n\n            Filters.Add(StorageFilter.For(commonRepository));\n            Filters.Add(StorageFilter.For(commonVersionRepository));\n\n            OnActivated<CommonPart>(PropertySetHandlers);\n            OnInitializing<CommonPart>(AssignCreatingOwner);\n            OnInitializing<CommonPart>(AssignCreatingDates);\n\n            OnLoading<CommonPart>((context, part) => LazyLoadHandlers(part));\n            OnVersioning<CommonPart>((context, part, newVersionPart) => LazyLoadHandlers(newVersionPart));\n\n            OnUpdateEditorShape<CommonPart>(AssignUpdateDates);\n\n        \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "[What",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [UsedImplicitly]\n    public class CommonPartHandler : ContentHandler {\n        private readonly IClock _clock;\n        private readonly IAuthenticationService _authenticationService;\n        private readonly IContentManager _contentManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n\n        public CommonPartHandler(\n            IRepository<CommonPartRecord> commonRepository,\n            IRepository<CommonPartVersionRecord> commonVersionRepository,\n            IClock clock,\n            IAuthenticationService authenticationService,\n            IContentManager contentManager,\n            IContentDefinitionManager contentDefinitionManager) {\n\n            _clock = clock;\n            _authenticationService = authenticationService;\n            _contentManager = contentManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            T = NullLocalizer.Instance;\n\n            Filters.Add(StorageFilter.For(commonRepository));\n            Filters.Add(StorageFilter.For(commonVersionRepository));\n\n            OnActivated<CommonPart>(PropertySetHandlers);\n            OnInitializing<CommonPart>(AssignCreatingOwner);\n            OnInitializing<CommonPart>(AssignCreatingDates);\n\n            OnLoading<CommonPart>((context, part) => LazyLoadHandlers(part));\n            OnVersioning<CommonPart>((context, part, newVersionPart) => LazyLoadHandlers(newVersionPart));\n\n            OnUpdateEditorShape<CommonPart>(AssignUpdateDates);\n\n        \nAnswer: [What is the answer?"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        internal class RootStatisticsStage : IReportingConnector<Epoch>\n        {\n            private Stage<RootStatisticsVertex, Epoch> stage;\n\n            private readonly List<StageInput<string, Epoch>> receivers;\n            public IEnumerable<StageInput<string, Epoch>> Receivers\n            {\n                get { return receivers; }\n            }\n\n            public void ShutDown()\n            {\n                foreach (var s in stage.Vertices)\n                {\n                    stage.GetVertex(s.VertexId).FinalizeReporting();\n                }\n            }\n\n            public void ConnectInline(Stream<string, Epoch> sender)\n            {\n                this.stage.NewInput(sender, (message, vertex) => vertex.OnRecv(message), null);\n            }\n\n            public void ConnectIntAggregator(Stream<Pair<string, ReportingRecord<Int64>>, Epoch> sender)\n            {\n                // do nothing since this is the head of the chain\n            }\n            public void ConnectDoubleAggregator(Stream<Pair<string, ReportingRecord<double>>, Epoch> sender)\n            {\n                // do nothing since this is the head of the chain\n            }\n\n            internal RootStatisticsStage(ITimeContext<Epoch> context, string name, string outputFile)\n            {\n                this.stage = new Stage<RootStatisticsVertex, Epoch>(new Placement.SingleVertex(0, 0), new TimeContext<Epoch>(context), Stage.OperatorType.Default, (i, v) => new RootStatisticsVertex(i, v, outputFi\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        internal class RootStatisticsStage : IReportingConnector<Epoch>\n        {\n            private Stage<RootStatisticsVertex, Epoch> stage;\n\n            private readonly List<StageInput<string, Epoch>> receivers;\n            public IEnumerable<StageInput<string, Epoch>> Receivers\n            {\n                get { return receivers; }\n            }\n\n            public void ShutDown()\n            {\n                foreach (var s in stage.Vertices)\n                {\n                    stage.GetVertex(s.VertexId).FinalizeReporting();\n                }\n            }\n\n            public void ConnectInline(Stream<string, Epoch> sender)\n            {\n                this.stage.NewInput(sender, (message, vertex) => vertex.OnRecv(message), null);\n            }\n\n            public void ConnectIntAggregator(Stream<Pair<string, ReportingRecord<Int64>>, Epoch> sender)\n            {\n                // do nothing since this is the head of the chain\n            }\n            public void ConnectDoubleAggregator(Stream<Pair<string, ReportingRecord<double>>, Epoch> sender)\n            {\n                // do nothing since this is the head of the chain\n            }\n\n            internal RootStatisticsStage(ITimeContext<Epoch> context, string name, string outputFile)\n            {\n                this.stage = new Stage<RootStatisticsVertex, Epoch>(new Placement.SingleVertex(0, 0), new TimeContext<Epoch>(context), Stage.OperatorType.Default, (i, v) => new RootStatisticsVertex(i, v, outputFi\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DefaultEncryptionService : IEncryptionService {\n        private readonly ShellSettings _shellSettings;\n\n        public DefaultEncryptionService(ShellSettings shellSettings ) {\n            _shellSettings = shellSettings;\n        }\n\n        public byte[] Decode(byte[] encodedData) {\n                // extract parts of the encoded data\n            using (var symmetricAlgorithm = CreateSymmetricAlgorithm()) {\n                using (var hashAlgorithm = CreateHashAlgorithm()) {\n                    var iv = new byte[symmetricAlgorithm.BlockSize / 8];\n                    var signature = new byte[hashAlgorithm.HashSize / 8];\n                    var data = new byte[encodedData.Length - iv.Length - signature.Length];\n\n                    Array.Copy(encodedData, 0, iv, 0, iv.Length);\n                    Array.Copy(encodedData, iv.Length, data, 0, data.Length);\n                    Array.Copy(encodedData, iv.Length + data.Length, signature, 0, signature.Length);\n\n                    // validate the signature\n                    var mac = hashAlgorithm.ComputeHash(iv.Concat(data).ToArray());\n\n                    if (!mac.SequenceEqual(signature)) {\n                        // message has been tampered\n                        throw new ArgumentException();\n                    }\n\n                    symmetricAlgorithm.IV = iv;\n\n                    using (var ms = new MemoryStream()) {\n                        using (var cs = new CryptoStream(ms, symmetricAlgorithm.CreateDecrypt\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DefaultEncryptionService : IEncryptionService {\n        private readonly ShellSettings _shellSettings;\n\n        public DefaultEncryptionService(ShellSettings shellSettings ) {\n            _shellSettings = shellSettings;\n        }\n\n        public byte[] Decode(byte[] encodedData) {\n                // extract parts of the encoded data\n            using (var symmetricAlgorithm = CreateSymmetricAlgorithm()) {\n                using (var hashAlgorithm = CreateHashAlgorithm()) {\n                    var iv = new byte[symmetricAlgorithm.BlockSize / 8];\n                    var signature = new byte[hashAlgorithm.HashSize / 8];\n                    var data = new byte[encodedData.Length - iv.Length - signature.Length];\n\n                    Array.Copy(encodedData, 0, iv, 0, iv.Length);\n                    Array.Copy(encodedData, iv.Length, data, 0, data.Length);\n                    Array.Copy(encodedData, iv.Length + data.Length, signature, 0, signature.Length);\n\n                    // validate the signature\n                    var mac = hashAlgorithm.ComputeHash(iv.Concat(data).ToArray());\n\n                    if (!mac.SequenceEqual(signature)) {\n                        // message has been tampered\n                        throw new ArgumentException();\n                    }\n\n                    symmetricAlgorithm.IV = iv;\n\n                    using (var ms = new MemoryStream()) {\n                        using (var cs = new CryptoStream(ms, symmetricAlgorithm.CreateDecrypt\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal class JsonSerializerInternalWriter : JsonSerializerInternalBase\n\t{\n\t\tprivate JsonContract _rootContract;\n\t\tprivate readonly List<object> _serializeStack = new List<object>();\n\t\tprivate JsonSerializerProxy _internalSerializer;\n\n\t\tpublic JsonSerializerInternalWriter(JsonSerializer serializer) : base(serializer)\n\t\t{\n\t\t}\n\n\t\tpublic void Serialize(JsonWriter jsonWriter, object value, Type objectType)\n\t\t{\n\t\t\tif (jsonWriter == null)\n\t\t\t\tthrow new ArgumentNullException(\"jsonWriter\");\n\n\t\t\tif (objectType != null)\n\t\t\t\t_rootContract = Serializer._contractResolver.ResolveContract(objectType);\n\n\t\t\tSerializeValue(jsonWriter, value, GetContractSafe(value), null, null, null);\n\t\t}\n\n\t\tprivate JsonSerializerProxy GetInternalSerializer()\n\t\t{\n\t\t\tif (_internalSerializer == null)\n\t\t\t\t_internalSerializer = new JsonSerializerProxy(this);\n\n\t\t\treturn _internalSerializer;\n\t\t}\n\n\t\tprivate JsonContract GetContractSafe(object value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn null;\n\n\t\t\treturn Serializer._contractResolver.ResolveContract(value.GetType());\n\t\t}\n\n\t\tprivate void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n\t\t{\n\t\t\tif (contract.TypeCode == PrimitiveTypeCode.Bytes)\n\t\t\t{\n\t\t\t\t// if type name handling is enabled then wrap the base64 byte string in an object with the type name\n\t\t\t\tbool includeTypeDetails = ShouldWriteType(TypeNameHandling.Objects, contract, member, conta\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tinternal class JsonSerializerInternalWriter : JsonSerializerInternalBase\n\t{\n\t\tprivate JsonContract _rootContract;\n\t\tprivate readonly List<object> _serializeStack = new List<object>();\n\t\tprivate JsonSerializerProxy _internalSerializer;\n\n\t\tpublic JsonSerializerInternalWriter(JsonSerializer serializer) : base(serializer)\n\t\t{\n\t\t}\n\n\t\tpublic void Serialize(JsonWriter jsonWriter, object value, Type objectType)\n\t\t{\n\t\t\tif (jsonWriter == null)\n\t\t\t\tthrow new ArgumentNullException(\"jsonWriter\");\n\n\t\t\tif (objectType != null)\n\t\t\t\t_rootContract = Serializer._contractResolver.ResolveContract(objectType);\n\n\t\t\tSerializeValue(jsonWriter, value, GetContractSafe(value), null, null, null);\n\t\t}\n\n\t\tprivate JsonSerializerProxy GetInternalSerializer()\n\t\t{\n\t\t\tif (_internalSerializer == null)\n\t\t\t\t_internalSerializer = new JsonSerializerProxy(this);\n\n\t\t\treturn _internalSerializer;\n\t\t}\n\n\t\tprivate JsonContract GetContractSafe(object value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn null;\n\n\t\t\treturn Serializer._contractResolver.ResolveContract(value.GetType());\n\t\t}\n\n\t\tprivate void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n\t\t{\n\t\t\tif (contract.TypeCode == PrimitiveTypeCode.Bytes)\n\t\t\t{\n\t\t\t\t// if type name handling is enabled then wrap the base64 byte string in an object with the type name\n\t\t\t\tbool includeTypeDetails = ShouldWriteType(TypeNameHandling.Objects, contract, member, conta\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class FloorDrawable : IDrawable, IDisposable\n\t{\n\t\tprivate ISceneContext sceneContext;\n\t\tprivate InteractionLayer.EditorType editorType;\n\t\tprivate ThemeConfig theme;\n\t\tprivate PrinterConfig printer;\n\n\t\tprivate Color buildVolumeColor;\n\n\t\tprivate int activeBedToolClippingImage = int.MinValue;\n\n\t\tprivate ImageBuffer[] bedTextures = null;\n\n\t\tprivate bool loadingTextures = false;\n\n\t\tpublic FloorDrawable(InteractionLayer.EditorType editorType, ISceneContext sceneContext, Color buildVolumeColor, ThemeConfig theme)\n\t\t{\n\t\t\tthis.buildVolumeColor = buildVolumeColor;\n\t\t\tthis.sceneContext = sceneContext;\n\t\t\tthis.editorType = editorType;\n\t\t\tthis.theme = theme;\n\t\t\tthis.printer = sceneContext.Printer;\n\t\t\tthis.EnsureBedTexture(selectedItem: null);\n\n\t\t\t// Register listeners\n\t\t\tif (printer != null)\n\t\t\t{\n\t\t\t\tprinter.Settings.SettingChanged += this.Settings_SettingChanged;\n\t\t\t}\n\t\t}\n\n\t\tpublic bool Enabled { get; set; }\n\n\t\tpublic string Title { get; } = \"Render Floor\";\n\n\t\tpublic string Description { get; } = \"Render a plane or bed floor\";\n\n\t\t// TODO: Investigate if stage should really change dynamically based on lookingDownOnBed\n\t\tpublic DrawStage DrawStage { get; } = DrawStage.First;\n\n\t\tpublic bool LookingDownOnBed { get; set; }\n\n\t\tpublic void Draw(GuiWidget sender, DrawEventArgs e, Matrix4X4 itemMaxtrix, WorldView world)\n\t\t{\n\t\t\tif (editorType == InteractionLayer.EditorType.Printer)\n\t\t\t{\n\t\t\t\t// only render if we are above the bed\n\t\t\t\tif (sceneContext.RendererOptions.RenderBed)\n\t\t\t\t{\n\t\t\t\t\tth\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class FloorDrawable : IDrawable, IDisposable\n\t{\n\t\tprivate ISceneContext sceneContext;\n\t\tprivate InteractionLayer.EditorType editorType;\n\t\tprivate ThemeConfig theme;\n\t\tprivate PrinterConfig printer;\n\n\t\tprivate Color buildVolumeColor;\n\n\t\tprivate int activeBedToolClippingImage = int.MinValue;\n\n\t\tprivate ImageBuffer[] bedTextures = null;\n\n\t\tprivate bool loadingTextures = false;\n\n\t\tpublic FloorDrawable(InteractionLayer.EditorType editorType, ISceneContext sceneContext, Color buildVolumeColor, ThemeConfig theme)\n\t\t{\n\t\t\tthis.buildVolumeColor = buildVolumeColor;\n\t\t\tthis.sceneContext = sceneContext;\n\t\t\tthis.editorType = editorType;\n\t\t\tthis.theme = theme;\n\t\t\tthis.printer = sceneContext.Printer;\n\t\t\tthis.EnsureBedTexture(selectedItem: null);\n\n\t\t\t// Register listeners\n\t\t\tif (printer != null)\n\t\t\t{\n\t\t\t\tprinter.Settings.SettingChanged += this.Settings_SettingChanged;\n\t\t\t}\n\t\t}\n\n\t\tpublic bool Enabled { get; set; }\n\n\t\tpublic string Title { get; } = \"Render Floor\";\n\n\t\tpublic string Description { get; } = \"Render a plane or bed floor\";\n\n\t\t// TODO: Investigate if stage should really change dynamically based on lookingDownOnBed\n\t\tpublic DrawStage DrawStage { get; } = DrawStage.First;\n\n\t\tpublic bool LookingDownOnBed { get; set; }\n\n\t\tpublic void Draw(GuiWidget sender, DrawEventArgs e, Matrix4X4 itemMaxtrix, WorldView world)\n\t\t{\n\t\t\tif (editorType == InteractionLayer.EditorType.Printer)\n\t\t\t{\n\t\t\t\t// only render if we are above the bed\n\t\t\t\tif (sceneContext.RendererOptions.RenderBed)\n\t\t\t\t{\n\t\t\t\t\tth\nAnswer: ____________ positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal abstract partial class JsonReader\n    {\n        /// <summary>\n        /// Asynchronously reads the next JSON token from the source.\n        /// </summary>\n        /// <param name=\"cancellationToken\">The token to monitor for cancellation requests. The default value is <see cref=\"CancellationToken.None\"/>.</param>\n        /// <returns>A <see cref=\"Task{TResult}\"/> that represents the asynchronous read. The <see cref=\"Task{TResult}.Result\"/>\n        /// property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>\n        /// <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived\n        /// classes can override this behaviour for true asynchronicity.</remarks>\n        public virtual Task<bool> ReadAsync(CancellationToken cancellationToken = default)\n        {\n            return cancellationToken.CancelIfRequestedAsync<bool>() ?? Read().ToAsync();\n        }\n\n        /// <summary>\n        /// Asynchronously skips the children of the current token.\n        /// </summary>\n        /// <param name=\"cancellationToken\">The token to monitor for cancellation requests. The default value is <see cref=\"CancellationToken.None\"/>.</param>\n        /// <returns>A <see cref=\"Task\"/> that represents the asynchronous operation.</returns>\n        /// <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived\n        /// clas\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal abstract partial class JsonReader\n    {\n        /// <summary>\n        /// Asynchronously reads the next JSON token from the source.\n        /// </summary>\n        /// <param name=\"cancellationToken\">The token to monitor for cancellation requests. The default value is <see cref=\"CancellationToken.None\"/>.</param>\n        /// <returns>A <see cref=\"Task{TResult}\"/> that represents the asynchronous read. The <see cref=\"Task{TResult}.Result\"/>\n        /// property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>\n        /// <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived\n        /// classes can override this behaviour for true asynchronicity.</remarks>\n        public virtual Task<bool> ReadAsync(CancellationToken cancellationToken = default)\n        {\n            return cancellationToken.CancelIfRequestedAsync<bool>() ?? Read().ToAsync();\n        }\n\n        /// <summary>\n        /// Asynchronously skips the children of the current token.\n        /// </summary>\n        /// <param name=\"cancellationToken\">The token to monitor for cancellation requests. The default value is <see cref=\"CancellationToken.None\"/>.</param>\n        /// <returns>A <see cref=\"Task\"/> that represents the asynchronous operation.</returns>\n        /// <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived\n        /// clas\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class FramedClient : IFramedClient\n    {\n        private readonly IRawByteClient client;\n        private readonly Subject<ArraySegment<byte>> received;\n        private readonly ResizableCyclicBuffer recvBuffer;\n\n        public FramedClient(IRawByteClient client)\n        {\n            received = new Subject<ArraySegment<byte>>();\n            this.client = client;\n            recvBuffer = new ResizableCyclicBuffer(4096);\n\n            this.client.Received.Subscribe(ClientReceivedData);\n        }\n\n        public IObservable<Unit> Connected\n        {\n            get { return client.Connected; }\n        }\n\n        public IObservable<Exception> Disconnected\n        {\n            get { return client.Disconnected; }\n        }\n\n        public IObservable<int> Sent\n        {\n            get { return client.Sent; }\n        }\n\n        public IObservable<ArraySegment<byte>> Received\n        {\n            get { return received; }\n        }\n\n        public IPEndPoint LocalEndPoint\n        {\n            get { return client.LocalEndPoint; }\n        }\n\n        public IPEndPoint RemoteEndPoint\n        {\n            get { return client.RemoteEndPoint; }\n        }\n\n        public void SendPacket(byte[] packet)\n        {\n            Ensure.IsNotNull(packet, \"packet\");\n\n            SendPacket(new ArraySegment<byte>(packet));\n        }\n\n        public void SendPacket(ArraySegment<byte> packet)\n        {\n            Ensure.IsNotNull(packet.Array, \"packet.Array\");\n\n            var buffer = F\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "[blank]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class FramedClient : IFramedClient\n    {\n        private readonly IRawByteClient client;\n        private readonly Subject<ArraySegment<byte>> received;\n        private readonly ResizableCyclicBuffer recvBuffer;\n\n        public FramedClient(IRawByteClient client)\n        {\n            received = new Subject<ArraySegment<byte>>();\n            this.client = client;\n            recvBuffer = new ResizableCyclicBuffer(4096);\n\n            this.client.Received.Subscribe(ClientReceivedData);\n        }\n\n        public IObservable<Unit> Connected\n        {\n            get { return client.Connected; }\n        }\n\n        public IObservable<Exception> Disconnected\n        {\n            get { return client.Disconnected; }\n        }\n\n        public IObservable<int> Sent\n        {\n            get { return client.Sent; }\n        }\n\n        public IObservable<ArraySegment<byte>> Received\n        {\n            get { return received; }\n        }\n\n        public IPEndPoint LocalEndPoint\n        {\n            get { return client.LocalEndPoint; }\n        }\n\n        public IPEndPoint RemoteEndPoint\n        {\n            get { return client.RemoteEndPoint; }\n        }\n\n        public void SendPacket(byte[] packet)\n        {\n            Ensure.IsNotNull(packet, \"packet\");\n\n            SendPacket(new ArraySegment<byte>(packet));\n        }\n\n        public void SendPacket(ArraySegment<byte> packet)\n        {\n            Ensure.IsNotNull(packet.Array, \"packet.Array\");\n\n            var buffer = F\nAnswer: [blank]  ]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class DeserializeType<TSerializer>\n        where TSerializer : ITypeSerializer\n    {\n        private static readonly ITypeSerializer Serializer = JsWriter.GetTypeSerializer<TSerializer>();\n\n        public static ParseStringDelegate GetParseMethod(TypeConfig typeConfig)\n        {\n            var type = typeConfig.Type;\n\n            if (!type.IsStandardClass()) return null;\n            var map = DeserializeTypeRef.GetTypeAccessorMap(typeConfig, Serializer);\n\n            var ctorFn = JsConfig.ModelFactory(type);\n            if (map == null) return value => ctorFn();\n\n            return typeof(TSerializer) == typeof(JsonTypeSerializer)\n                ? (ParseStringDelegate)(value => DeserializeTypeRefJson.StringToType(type, value, ctorFn, map))\n                : value => DeserializeTypeRefJsv.StringToType(type, value, ctorFn, map);\n        }\n\n        public static object ObjectStringToType(string strType)\n        {\n            var type = ExtractType(strType);\n            if (type != null)\n            {\n                var parseFn = Serializer.GetParseFn(type);\n                var propertyValue = parseFn(strType);\n                return propertyValue;\n            }\n\n            if (JsConfig.ConvertObjectTypesIntoStringDictionary && !string.IsNullOrEmpty(strType))\n            {\n                if (strType[0] == JsWriter.MapStartChar)\n                {\n                    var dynamicMatch = DeserializeDictionary<TSerializer>.ParseDictionary<string, object>(strTy\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class DeserializeType<TSerializer>\n        where TSerializer : ITypeSerializer\n    {\n        private static readonly ITypeSerializer Serializer = JsWriter.GetTypeSerializer<TSerializer>();\n\n        public static ParseStringDelegate GetParseMethod(TypeConfig typeConfig)\n        {\n            var type = typeConfig.Type;\n\n            if (!type.IsStandardClass()) return null;\n            var map = DeserializeTypeRef.GetTypeAccessorMap(typeConfig, Serializer);\n\n            var ctorFn = JsConfig.ModelFactory(type);\n            if (map == null) return value => ctorFn();\n\n            return typeof(TSerializer) == typeof(JsonTypeSerializer)\n                ? (ParseStringDelegate)(value => DeserializeTypeRefJson.StringToType(type, value, ctorFn, map))\n                : value => DeserializeTypeRefJsv.StringToType(type, value, ctorFn, map);\n        }\n\n        public static object ObjectStringToType(string strType)\n        {\n            var type = ExtractType(strType);\n            if (type != null)\n            {\n                var parseFn = Serializer.GetParseFn(type);\n                var propertyValue = parseFn(strType);\n                return propertyValue;\n            }\n\n            if (JsConfig.ConvertObjectTypesIntoStringDictionary && !string.IsNullOrEmpty(strType))\n            {\n                if (strType[0] == JsWriter.MapStartChar)\n                {\n                    var dynamicMatch = DeserializeDictionary<TSerializer>.ParseDictionary<string, object>(strTy\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interaction logic for ImportFolder.xaml\n    /// </summary>\n    public partial class ImportFolderForm : Window\n    {\n        private SVR_ImportFolder importFldr = null;\n\n        public ImportFolderForm()\n        {\n            InitializeComponent();\n\n            btnCancel.Click += btnCancel_Click;\n            btnSave.Click += btnSave_Click;\n            btnChooseFolder.Click += btnChooseFolder_Click;\n            comboProvider.SelectionChanged += ComboProvider_SelectionChanged;\n            chkDropSource.Checked += ChkDropSource_Checked;\n            chkDropDestination.Checked += ChkDropDestination_Checked;\n        }\n\n        private bool EventLock;\n\n        private void ChkDropDestination_Checked(object sender, RoutedEventArgs e)\n        {\n            if (EventLock || !chkDropDestination.IsChecked.HasValue || !chkDropDestination.IsChecked.Value) return;\n            if (chkDropSource.IsChecked.HasValue && chkDropSource.IsChecked.Value)\n            {\n                EventLock = true;\n                chkDropSource.IsChecked = false;\n                EventLock = false;\n            }\n            if (importFldr.CloudID.HasValue && chkIsWatched.IsChecked.HasValue && chkIsWatched.IsChecked.Value)\n            {\n                EventLock = true;\n                chkIsWatched.IsChecked = false;\n                EventLock = false;\n            }\n        }\n\n        private void ChkDropSource_Checked(object sender, RoutedEventArgs e)\n        {\n            if (EventLock || \nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interaction logic for ImportFolder.xaml\n    /// </summary>\n    public partial class ImportFolderForm : Window\n    {\n        private SVR_ImportFolder importFldr = null;\n\n        public ImportFolderForm()\n        {\n            InitializeComponent();\n\n            btnCancel.Click += btnCancel_Click;\n            btnSave.Click += btnSave_Click;\n            btnChooseFolder.Click += btnChooseFolder_Click;\n            comboProvider.SelectionChanged += ComboProvider_SelectionChanged;\n            chkDropSource.Checked += ChkDropSource_Checked;\n            chkDropDestination.Checked += ChkDropDestination_Checked;\n        }\n\n        private bool EventLock;\n\n        private void ChkDropDestination_Checked(object sender, RoutedEventArgs e)\n        {\n            if (EventLock || !chkDropDestination.IsChecked.HasValue || !chkDropDestination.IsChecked.Value) return;\n            if (chkDropSource.IsChecked.HasValue && chkDropSource.IsChecked.Value)\n            {\n                EventLock = true;\n                chkDropSource.IsChecked = false;\n                EventLock = false;\n            }\n            if (importFldr.CloudID.HasValue && chkIsWatched.IsChecked.HasValue && chkIsWatched.IsChecked.Value)\n            {\n                EventLock = true;\n                chkIsWatched.IsChecked = false;\n                EventLock = false;\n            }\n        }\n\n        private void ChkDropSource_Checked(object sender, RoutedEventArgs e)\n        {\n            if (EventLock || \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class RepetierEEPromPage : EEPromPage\n\t{\n\t\tprivate EePromRepetierStorage currentEePromSettings;\n\t\tprivate FlowLayoutWidget settingsColumn;\n\n\t\tpublic RepetierEEPromPage(PrinterConfig printer)\n\t\t\t: base(printer)\n\t\t{\n\t\t\tAlwaysOnTopOfMain = true;\n\n\t\t\tthis.WindowTitle = \"Firmware EEPROM Settings\".Localize();\n\n\t\t\tcurrentEePromSettings = new EePromRepetierStorage();\n\n\t\t\tvar topToBottom = contentRow;\n\n\t\t\tvar row = new FlowLayoutWidget\n\t\t\t{\n\t\t\t\tHAnchor = HAnchor.Stretch,\n\t\t\t};\n\n\t\t\tGuiWidget descriptionWidget = AddDescription(\"Description\".Localize());\n\t\t\tdescriptionWidget.Margin = new BorderDouble(left: 3);\n\t\t\trow.AddChild(descriptionWidget);\n\n\t\t\tCreateSpacer(row);\n\n\t\t\trow.AddChild(new TextWidget(\"Value\".Localize(), pointSize: theme.FontSize10, textColor: theme.TextColor)\n\t\t\t{\n\t\t\t\tVAnchor = VAnchor.Center,\n\t\t\t\tMargin = new BorderDouble(left: 5, right: 60)\n\t\t\t});\n\t\t\ttopToBottom.AddChild(row);\n\n\t\t\t{\n\t\t\t\tvar settingsAreaScrollBox = new ScrollableWidget(true);\n\t\t\t\tsettingsAreaScrollBox.ScrollArea.HAnchor |= HAnchor.Stretch;\n\t\t\t\tsettingsAreaScrollBox.AnchorAll();\n\t\t\t\tsettingsAreaScrollBox.BackgroundColor = theme.MinimalShade;\n\t\t\t\ttopToBottom.AddChild(settingsAreaScrollBox);\n\n\t\t\t\tsettingsColumn = new FlowLayoutWidget(FlowDirection.TopToBottom)\n\t\t\t\t{\n\t\t\t\t\tHAnchor = HAnchor.MaxFitOrStretch\n\t\t\t\t};\n\n\t\t\t\tsettingsAreaScrollBox.AddChild(settingsColumn);\n\t\t\t}\n\n\n\t\t\tif (headerRow is OverflowBar overflowBar)\n\t\t\t{\n\t\t\t\toverflowBar.ExtendOverflowMenu = (popupMenu) =>\n\t\t\t\t{\n\t\t\t\t\tvar menuItem = po\nAnswer:",
    "expected": "FeatureEnvy_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class RepetierEEPromPage : EEPromPage\n\t{\n\t\tprivate EePromRepetierStorage currentEePromSettings;\n\t\tprivate FlowLayoutWidget settingsColumn;\n\n\t\tpublic RepetierEEPromPage(PrinterConfig printer)\n\t\t\t: base(printer)\n\t\t{\n\t\t\tAlwaysOnTopOfMain = true;\n\n\t\t\tthis.WindowTitle = \"Firmware EEPROM Settings\".Localize();\n\n\t\t\tcurrentEePromSettings = new EePromRepetierStorage();\n\n\t\t\tvar topToBottom = contentRow;\n\n\t\t\tvar row = new FlowLayoutWidget\n\t\t\t{\n\t\t\t\tHAnchor = HAnchor.Stretch,\n\t\t\t};\n\n\t\t\tGuiWidget descriptionWidget = AddDescription(\"Description\".Localize());\n\t\t\tdescriptionWidget.Margin = new BorderDouble(left: 3);\n\t\t\trow.AddChild(descriptionWidget);\n\n\t\t\tCreateSpacer(row);\n\n\t\t\trow.AddChild(new TextWidget(\"Value\".Localize(), pointSize: theme.FontSize10, textColor: theme.TextColor)\n\t\t\t{\n\t\t\t\tVAnchor = VAnchor.Center,\n\t\t\t\tMargin = new BorderDouble(left: 5, right: 60)\n\t\t\t});\n\t\t\ttopToBottom.AddChild(row);\n\n\t\t\t{\n\t\t\t\tvar settingsAreaScrollBox = new ScrollableWidget(true);\n\t\t\t\tsettingsAreaScrollBox.ScrollArea.HAnchor |= HAnchor.Stretch;\n\t\t\t\tsettingsAreaScrollBox.AnchorAll();\n\t\t\t\tsettingsAreaScrollBox.BackgroundColor = theme.MinimalShade;\n\t\t\t\ttopToBottom.AddChild(settingsAreaScrollBox);\n\n\t\t\t\tsettingsColumn = new FlowLayoutWidget(FlowDirection.TopToBottom)\n\t\t\t\t{\n\t\t\t\t\tHAnchor = HAnchor.MaxFitOrStretch\n\t\t\t\t};\n\n\t\t\t\tsettingsAreaScrollBox.AddChild(settingsColumn);\n\t\t\t}\n\n\n\t\t\tif (headerRow is OverflowBar overflowBar)\n\t\t\t{\n\t\t\t\toverflowBar.ExtendOverflowMenu = (popupMenu) =>\n\t\t\t\t{\n\t\t\t\t\tvar menuItem = po\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class BitOps\n    {\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int RightUShift(this int value, int bits) => unchecked((int) ((uint) value >> bits));\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static long RightUShift(this long value, int bits) => unchecked((long) ((ulong) value >> bits));\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class BitOps\n    {\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int RightUShift(this int value, int bits) => unchecked((int) ((uint) value >> bits));\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static long RightUShift(this long value, int bits) => unchecked((long) ((ulong) value >> bits));\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t[DataContract]\n\tpublic class PromptForInputResponse\n\t{\n\t\t[DataMember (Name = \"line\")]\n\t\tpublic string Line { get; set; }\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t[DataContract]\n\tpublic class PromptForInputResponse\n\t{\n\t\t[DataMember (Name = \"line\")]\n\t\tpublic string Line { get; set; }\n\t}\n\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interaction logic for FollowView.xaml\n    /// </summary>\n    public partial class FollowView : UserControl\n    {\n        public FollowView()\n        {\n            InitializeComponent();\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interaction logic for FollowView.xaml\n    /// </summary>\n    public partial class FollowView : UserControl\n    {\n        public FollowView()\n        {\n            InitializeComponent();\n        }\n    }\n\nAnswer: __________\n\nThe answer should"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class SetExtensions\n    {\n        /// <summary>\n        /// Shortcut to create HashSet from IEnumerable that supports type inference\n        /// (which the standard constructor does not)\n        /// </summary>\n        /// <typeparam name=\"T\">The element type</typeparam>\n        public static HashSet<T> ToSet<T>(this IEnumerable<T> values)\n        {\n            if (values == null)\n                return null;\n            return new HashSet<T>(values);\n        }\n\n        public static bool ListEquals<T>(this IList<T> a, IList<T> b)\n        {\n            if (a.Count != b.Count) \n                return false;\n            return new HashSet<T>(a).SetEquals(new HashSet<T>(b));\n        }\n\n        public static bool IEnumerableEquals<T>(this IEnumerable<T> a, IEnumerable<T> b)\n        {\n            return new HashSet<T>(a).SetEquals(new HashSet<T>(b));\n        }\n\n        public static bool IsSupersetOf<T>(this IEnumerable<T> a, IEnumerable<T> b)\n        {\n            return new HashSet<T>(a).IsSupersetOf(new HashSet<T>(b));\n        }\n\n        /// <summary>\n        /// Synchronize contents of two dictionaries with mutable values\n        /// </summary>\n        /// <typeparam name=\"TKey\">Key type</typeparam>\n        /// <typeparam name=\"TValue\">Value type</typeparam>\n        /// <param name=\"a\">Dictionary</param>\n        /// <param name=\"b\">Dictionary</param>\n        /// <param name=\"copy\">Return a copy of a value</param>\n        /// <param name=\"sync\">Synchronize tw\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class SetExtensions\n    {\n        /// <summary>\n        /// Shortcut to create HashSet from IEnumerable that supports type inference\n        /// (which the standard constructor does not)\n        /// </summary>\n        /// <typeparam name=\"T\">The element type</typeparam>\n        public static HashSet<T> ToSet<T>(this IEnumerable<T> values)\n        {\n            if (values == null)\n                return null;\n            return new HashSet<T>(values);\n        }\n\n        public static bool ListEquals<T>(this IList<T> a, IList<T> b)\n        {\n            if (a.Count != b.Count) \n                return false;\n            return new HashSet<T>(a).SetEquals(new HashSet<T>(b));\n        }\n\n        public static bool IEnumerableEquals<T>(this IEnumerable<T> a, IEnumerable<T> b)\n        {\n            return new HashSet<T>(a).SetEquals(new HashSet<T>(b));\n        }\n\n        public static bool IsSupersetOf<T>(this IEnumerable<T> a, IEnumerable<T> b)\n        {\n            return new HashSet<T>(a).IsSupersetOf(new HashSet<T>(b));\n        }\n\n        /// <summary>\n        /// Synchronize contents of two dictionaries with mutable values\n        /// </summary>\n        /// <typeparam name=\"TKey\">Key type</typeparam>\n        /// <typeparam name=\"TValue\">Value type</typeparam>\n        /// <param name=\"a\">Dictionary</param>\n        /// <param name=\"b\">Dictionary</param>\n        /// <param name=\"copy\">Return a copy of a value</param>\n        /// <param name=\"sync\">Synchronize tw\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [AttributeUsage(\n        AttributeTargets.Parameter | AttributeTargets.Property |\n        AttributeTargets.Field, Inherited = true)]\n    public sealed class HtmlElementAttributesAttribute : Attribute\n    {\n        public HtmlElementAttributesAttribute()\n        {\n        }\n\n        public HtmlElementAttributesAttribute([NotNull] string name)\n        {\n            this.Name = name;\n        }\n\n        [NotNull]\n        public string Name { get; private set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[ComplexConditional_positive]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [AttributeUsage(\n        AttributeTargets.Parameter | AttributeTargets.Property |\n        AttributeTargets.Field, Inherited = true)]\n    public sealed class HtmlElementAttributesAttribute : Attribute\n    {\n        public HtmlElementAttributesAttribute()\n        {\n        }\n\n        public HtmlElementAttributesAttribute([NotNull] string name)\n        {\n            this.Name = name;\n        }\n\n        [NotNull]\n        public string Name { get; private set; }\n    }\n\nAnswer: [ComplexConditional_positive]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class DeadLetterMessageHandler\n    {\n        #region Private Fields\n        // Either queueDescription or subscriptionWrapper is used - but never both.\n        readonly QueueDescription sourceQueueDescription;\n        readonly SubscriptionWrapper sourceSubscriptionWrapper;\n        readonly int receiveTimeoutInSeconds;\n        readonly ServiceBusHelper serviceBusHelper;\n        readonly WriteToLogDelegate writeToLog;\n        #endregion\n\n        #region Public Constructors\n        public DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper,\n            int receiveTimeoutInSeconds, QueueDescription queueDescription)\n            : this(writeToLog, serviceBusHelper, receiveTimeoutInSeconds)\n        {\n            sourceQueueDescription = queueDescription;\n        }\n\n        public DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper,\n            int receiveTimeoutInSeconds, SubscriptionWrapper subscriptionWrapper)\n             : this(writeToLog, serviceBusHelper, receiveTimeoutInSeconds)\n        {\n            sourceSubscriptionWrapper = subscriptionWrapper;\n        }\n        #endregion\n\n        #region Private Constructor\n        DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper, \n            int receiveTimeoutInSeconds)\n        {\n            this.writeToLog = writeToLog;\n            this.serviceBusHelper = serviceBusHelper;\n            this.receiveTimeoutIn\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class DeadLetterMessageHandler\n    {\n        #region Private Fields\n        // Either queueDescription or subscriptionWrapper is used - but never both.\n        readonly QueueDescription sourceQueueDescription;\n        readonly SubscriptionWrapper sourceSubscriptionWrapper;\n        readonly int receiveTimeoutInSeconds;\n        readonly ServiceBusHelper serviceBusHelper;\n        readonly WriteToLogDelegate writeToLog;\n        #endregion\n\n        #region Public Constructors\n        public DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper,\n            int receiveTimeoutInSeconds, QueueDescription queueDescription)\n            : this(writeToLog, serviceBusHelper, receiveTimeoutInSeconds)\n        {\n            sourceQueueDescription = queueDescription;\n        }\n\n        public DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper,\n            int receiveTimeoutInSeconds, SubscriptionWrapper subscriptionWrapper)\n             : this(writeToLog, serviceBusHelper, receiveTimeoutInSeconds)\n        {\n            sourceSubscriptionWrapper = subscriptionWrapper;\n        }\n        #endregion\n\n        #region Private Constructor\n        DeadLetterMessageHandler(WriteToLogDelegate writeToLog, ServiceBusHelper serviceBusHelper, \n            int receiveTimeoutInSeconds)\n        {\n            this.writeToLog = writeToLog;\n            this.serviceBusHelper = serviceBusHelper;\n            this.receiveTimeoutIn\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TODO: Should we use the FsCheck.XUnit integration when they upgrade to xUnit 2\n    /// </summary>\n    public class ByteStringSpec\n    {\n        class Generators\n        {\n\n            // TODO: Align with JVM Akka Generator\n            public static Arbitrary<ByteString> ByteStrings()\n            {\n                return Arb.From(Arb.Generate<byte[]>().Select(ByteString.Create));\n            }\n        }\n\n        public ByteStringSpec()\n        {\n            Arb.Register<Generators>();\n        }\n\n        [Fact]\n        public void A_ByteString_must_have_correct_size_when_concatenating()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Count == a.Count + b.Count)\n                .QuickCheckThrowOnFailure();\n        }\n\n        [Fact]\n        public void A_ByteString_must_have_correct_size_when_dropping()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Drop(b.Count).Count == a.Count)\n                .QuickCheckThrowOnFailure();\n        }\n\n        [Fact]\n        public void A_ByteString_must_be_sequential_when_taking()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Take(a.Count).SequenceEqual(a))\n                .QuickCheckThrowOnFailure();\n        }\n        [Fact]\n        public void A_ByteString_must_be_sequential_when_dropping()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Drop(a.Count).SequenceEqual(b))\n                .QuickCheckThrowOnFailure()\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TODO: Should we use the FsCheck.XUnit integration when they upgrade to xUnit 2\n    /// </summary>\n    public class ByteStringSpec\n    {\n        class Generators\n        {\n\n            // TODO: Align with JVM Akka Generator\n            public static Arbitrary<ByteString> ByteStrings()\n            {\n                return Arb.From(Arb.Generate<byte[]>().Select(ByteString.Create));\n            }\n        }\n\n        public ByteStringSpec()\n        {\n            Arb.Register<Generators>();\n        }\n\n        [Fact]\n        public void A_ByteString_must_have_correct_size_when_concatenating()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Count == a.Count + b.Count)\n                .QuickCheckThrowOnFailure();\n        }\n\n        [Fact]\n        public void A_ByteString_must_have_correct_size_when_dropping()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Drop(b.Count).Count == a.Count)\n                .QuickCheckThrowOnFailure();\n        }\n\n        [Fact]\n        public void A_ByteString_must_be_sequential_when_taking()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Take(a.Count).SequenceEqual(a))\n                .QuickCheckThrowOnFailure();\n        }\n        [Fact]\n        public void A_ByteString_must_be_sequential_when_dropping()\n        {\n            Prop.ForAll((ByteString a, ByteString b) => (a + b).Drop(a.Count).SequenceEqual(b))\n                .QuickCheckThrowOnFailure()\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Blackman-Nuttall window.\n    /// </summary>\n    public class BlackmanNuttallWindow : Window\n    {\n        /// <summary>\n        /// Windowing function generator implementation.\n        /// </summary>\n        protected override double[] ComputeWindowCore(int width)\n        {\n            return Numerics.Window.BlackmanNuttall(width);\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "BlackmanNuttallWindow",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Blackman-Nuttall window.\n    /// </summary>\n    public class BlackmanNuttallWindow : Window\n    {\n        /// <summary>\n        /// Windowing function generator implementation.\n        /// </summary>\n        protected override double[] ComputeWindowCore(int width)\n        {\n            return Numerics.Window.BlackmanNuttall(width);\n        }\n    }\n\nAnswer: BlackmanNuttallWindow"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ResGate : Item\n    {\n        [Constructable]\n        public ResGate()\n            : base(0xF6C)\n        {\n            this.Movable = false;\n            this.Hue = 0x2D1;\n            this.Light = LightType.Circle300;\n        }\n\n        public ResGate(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override string DefaultName\n        {\n            get\n            {\n                return \"a resurrection gate\";\n            }\n        }\n        public override bool OnMoveOver(Mobile m)\n        {\n            if (!m.Alive && m.Map != null && m.Map.CanFit(m.Location, 16, false, false))\n            {\n                m.PlaySound(0x214);\n                m.FixedEffect(0x376A, 10, 16);\n\n                m.CloseGump(typeof(ResurrectGump));\n                m.SendGump(new ResurrectGump(m));\n            }\n            else\n            {\n                m.SendLocalizedMessage(502391); // Thou can not be resurrected there!\n            }\n\n            return false;\n        }\n\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write((int)0); // version\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ResGate : Item\n    {\n        [Constructable]\n        public ResGate()\n            : base(0xF6C)\n        {\n            this.Movable = false;\n            this.Hue = 0x2D1;\n            this.Light = LightType.Circle300;\n        }\n\n        public ResGate(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override string DefaultName\n        {\n            get\n            {\n                return \"a resurrection gate\";\n            }\n        }\n        public override bool OnMoveOver(Mobile m)\n        {\n            if (!m.Alive && m.Map != null && m.Map.CanFit(m.Location, 16, false, false))\n            {\n                m.PlaySound(0x214);\n                m.FixedEffect(0x376A, 10, 16);\n\n                m.CloseGump(typeof(ResurrectGump));\n                m.SendGump(new ResurrectGump(m));\n            }\n            else\n            {\n                m.SendLocalizedMessage(502391); // Thou can not be resurrected there!\n            }\n\n            return false;\n        }\n\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write((int)0); // version\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\n    }\n\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t\t\n\t\tpublic partial class Dimension\n\t\t{\n\t\t\t\n\t\t\t// aapt resource value: 0x7f060000\n\t\t\tpublic const int activity_horizontal_margin = 2131099648;\n\t\t\t\n\t\t\t// aapt resource value: 0x7f060001\n\t\t\tpublic const int activity_vertical_margin = 2131099649;\n\t\t\t\n\t\t\tstatic Dimension()\n\t\t\t{\n\t\t\t\tglobal::Android.Runtime.ResourceIdManager.UpdateIdValues();\n\t\t\t}\n\t\t\t\n\t\t\tprivate Dimension()\n\t\t\t{\n\t\t\t}\n\t\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t\t\n\t\tpublic partial class Dimension\n\t\t{\n\t\t\t\n\t\t\t// aapt resource value: 0x7f060000\n\t\t\tpublic const int activity_horizontal_margin = 2131099648;\n\t\t\t\n\t\t\t// aapt resource value: 0x7f060001\n\t\t\tpublic const int activity_vertical_margin = 2131099649;\n\t\t\t\n\t\t\tstatic Dimension()\n\t\t\t{\n\t\t\t\tglobal::Android.Runtime.ResourceIdManager.UpdateIdValues();\n\t\t\t}\n\t\t\t\n\t\t\tprivate Dimension()\n\t\t\t{\n\t\t\t}\n\t\t}\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class EdmModelSchemaSeparationSerializationVisitor : EdmModelVisitor\n    {\n        private bool visitCompleted = false;\n        private Dictionary<string, EdmSchema> modelSchemas = new Dictionary<string, EdmSchema>();\n        private EdmSchema activeSchema;\n\n        public EdmModelSchemaSeparationSerializationVisitor(IEdmModel visitedModel)\n            : base(visitedModel)\n        {\n        }\n\n        public IEnumerable<EdmSchema> GetSchemas()\n        {\n            if (!this.visitCompleted)\n            {\n                this.Visit();\n            }\n\n            return this.modelSchemas.Values;\n        }\n\n        protected void Visit()\n        {\n            this.VisitEdmModel();\n            this.visitCompleted = true;\n        }\n\n        protected override void ProcessModel(IEdmModel model)\n        {\n            this.ProcessElement(model);\n            this.VisitSchemaElements(model.SchemaElements);\n            this.VisitVocabularyAnnotations(model.VocabularyAnnotations.Where(a => !a.IsInline(this.Model)));\n        }\n\n        protected override void ProcessVocabularyAnnotatable(IEdmVocabularyAnnotatable element)\n        {\n            this.VisitAnnotations(this.Model.DirectValueAnnotations(element));\n            this.VisitVocabularyAnnotations(this.Model.FindDeclaredVocabularyAnnotations(element).Where(a => a.IsInline(this.Model)));\n        }\n\n        protected override void ProcessSchemaElement(IEdmSchemaElement element)\n        {\n            string namespaceName = e\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class EdmModelSchemaSeparationSerializationVisitor : EdmModelVisitor\n    {\n        private bool visitCompleted = false;\n        private Dictionary<string, EdmSchema> modelSchemas = new Dictionary<string, EdmSchema>();\n        private EdmSchema activeSchema;\n\n        public EdmModelSchemaSeparationSerializationVisitor(IEdmModel visitedModel)\n            : base(visitedModel)\n        {\n        }\n\n        public IEnumerable<EdmSchema> GetSchemas()\n        {\n            if (!this.visitCompleted)\n            {\n                this.Visit();\n            }\n\n            return this.modelSchemas.Values;\n        }\n\n        protected void Visit()\n        {\n            this.VisitEdmModel();\n            this.visitCompleted = true;\n        }\n\n        protected override void ProcessModel(IEdmModel model)\n        {\n            this.ProcessElement(model);\n            this.VisitSchemaElements(model.SchemaElements);\n            this.VisitVocabularyAnnotations(model.VocabularyAnnotations.Where(a => !a.IsInline(this.Model)));\n        }\n\n        protected override void ProcessVocabularyAnnotatable(IEdmVocabularyAnnotatable element)\n        {\n            this.VisitAnnotations(this.Model.DirectValueAnnotations(element));\n            this.VisitVocabularyAnnotations(this.Model.FindDeclaredVocabularyAnnotations(element).Where(a => a.IsInline(this.Model)));\n        }\n\n        protected override void ProcessSchemaElement(IEdmSchemaElement element)\n        {\n            string namespaceName = e\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateCustomTargetingKeys : CustomTargetingKeyAction {\n\t}\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateCustomTargetingKeys : CustomTargetingKeyAction {\n\t}\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"co\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateCustomTargetingKeys : CustomTargetingKeyAction {\n\t}\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateCustomTargetingKeys : CustomTargetingKeyAction {\n\t}\n\n\n\t/// <summary>The action used for activating inactive (i.e. deleted) <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"co\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        public class Abstracted\n        {\n            [DeferredStorage]\n            public int Value { get; set; }\n        }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        public class Abstracted\n        {\n            [DeferredStorage]\n            public int Value { get; set; }\n        }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n        sealed class RainforestTree : ProceduralTree {\n            public override void Prepare() {\n                FoliageShape = new[] { 3.4f, 2.6f };\n                base.Prepare();\n                BranchSlope = 1;\n                TrunkRadius *= .382f;\n                TrunkHeight = Height * .9f;\n            }\n\n\n            protected override float ShapeFunc( int y ) {\n                if( y < Height * .8 ) {\n                    if( Args.Height < Height ) {\n                        float twigs = base.ShapeFunc( y );\n                        if( twigs >= 0 && Args.Rand.NextDouble() < .05 ) {\n                            return twigs;\n                        }\n                    }\n                    return -1;\n                } else {\n                    float width = Height * .382f;\n                    float topdist = (Height - y) / (Height * .2f);\n                    float dist = (float)(width * (.618 + topdist) * (.618 + Args.Rand.NextDouble()) * .382);\n                    return dist;\n                }\n            }\n        }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n        sealed class RainforestTree : ProceduralTree {\n            public override void Prepare() {\n                FoliageShape = new[] { 3.4f, 2.6f };\n                base.Prepare();\n                BranchSlope = 1;\n                TrunkRadius *= .382f;\n                TrunkHeight = Height * .9f;\n            }\n\n\n            protected override float ShapeFunc( int y ) {\n                if( y < Height * .8 ) {\n                    if( Args.Height < Height ) {\n                        float twigs = base.ShapeFunc( y );\n                        if( twigs >= 0 && Args.Rand.NextDouble() < .05 ) {\n                            return twigs;\n                        }\n                    }\n                    return -1;\n                } else {\n                    float width = Height * .382f;\n                    float topdist = (Height - y) / (Height * .2f);\n                    float dist = (float)(width * (.618 + topdist) * (.618 + Args.Rand.NextDouble()) * .382);\n                    return dist;\n                }\n            }\n        }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal static class SyntaxFactoryEx\n    {\n        private static readonly Func<SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, CSharpSyntaxNode> PositionalPatternClauseAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, SyntaxToken, CSharpSyntaxNode> PositionalPatternClauseAccessor2;\n        private static readonly Func<SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, CSharpSyntaxNode> PropertyPatternClauseAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, SyntaxToken, CSharpSyntaxNode> PropertyPatternClauseAccessor2;\n        private static readonly Func<TypeSyntax, CSharpSyntaxNode> TupleElementAccessor1;\n        private static readonly Func<TypeSyntax, SyntaxToken, CSharpSyntaxNode> TupleElementAccessor2;\n        private static readonly Func<SeparatedSyntaxList<ArgumentSyntax>, ExpressionSyntax> TupleExpressionAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxList<ArgumentSyntax>, SyntaxToken, ExpressionSyntax> TupleExpressionAccessor2;\n        private static readonly Func<SeparatedSyntaxListWrapper<TupleElementSyntaxWrapper>, TypeSyntax> TupleTypeAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<TupleElementSyntaxWrapper>, SyntaxToken, TypeSyntax> TupleTypeAccessor2;\n\n        static SyntaxFactoryEx()\n        {\n            var positionalPatternClauseMethods = typeof(Syntax\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal static class SyntaxFactoryEx\n    {\n        private static readonly Func<SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, CSharpSyntaxNode> PositionalPatternClauseAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, SyntaxToken, CSharpSyntaxNode> PositionalPatternClauseAccessor2;\n        private static readonly Func<SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, CSharpSyntaxNode> PropertyPatternClauseAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<SubpatternSyntaxWrapper>, SyntaxToken, CSharpSyntaxNode> PropertyPatternClauseAccessor2;\n        private static readonly Func<TypeSyntax, CSharpSyntaxNode> TupleElementAccessor1;\n        private static readonly Func<TypeSyntax, SyntaxToken, CSharpSyntaxNode> TupleElementAccessor2;\n        private static readonly Func<SeparatedSyntaxList<ArgumentSyntax>, ExpressionSyntax> TupleExpressionAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxList<ArgumentSyntax>, SyntaxToken, ExpressionSyntax> TupleExpressionAccessor2;\n        private static readonly Func<SeparatedSyntaxListWrapper<TupleElementSyntaxWrapper>, TypeSyntax> TupleTypeAccessor1;\n        private static readonly Func<SyntaxToken, SeparatedSyntaxListWrapper<TupleElementSyntaxWrapper>, SyntaxToken, TypeSyntax> TupleTypeAccessor2;\n\n        static SyntaxFactoryEx()\n        {\n            var positionalPatternClauseMethods = typeof(Syntax\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public class ScreenQuadNode : SceneNode\n        {\n            /// <summary>\n            /// Gets or sets the texture.\n            /// </summary>\n            /// <value>\n            /// The texture.\n            /// </value>\n            public TextureModel Texture\n            {\n                set { (RenderCore as DrawScreenQuadCore).Texture = value; }\n                get { return (RenderCore as DrawScreenQuadCore).Texture; }\n            }\n            /// <summary>\n            /// Gets or sets the sampler.\n            /// </summary>\n            /// <value>\n            /// The sampler.\n            /// </value>\n            public SamplerStateDescription Sampler\n            {\n                set { (RenderCore as DrawScreenQuadCore).SamplerDescription = value; }\n                get { return (RenderCore as DrawScreenQuadCore).SamplerDescription; }\n            }\n\n            private float depth = 1f;\n            public float Depth\n            {\n                set\n                {\n                    if(SetAffectsRender(ref depth, value))\n                    {\n                        var core = RenderCore as DrawScreenQuadCore;\n                        core.ModelStruct.TopLeft.Z = core.ModelStruct.TopRight.Z = core.ModelStruct.BottomLeft.Z = core.ModelStruct.BottomRight.Z = value;\n                    }\n                }\n                get { return depth; }\n            }\n\n            public ScreenQuadNode()\n            {\n                IsHitTestVisible = false;\n            \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public class ScreenQuadNode : SceneNode\n        {\n            /// <summary>\n            /// Gets or sets the texture.\n            /// </summary>\n            /// <value>\n            /// The texture.\n            /// </value>\n            public TextureModel Texture\n            {\n                set { (RenderCore as DrawScreenQuadCore).Texture = value; }\n                get { return (RenderCore as DrawScreenQuadCore).Texture; }\n            }\n            /// <summary>\n            /// Gets or sets the sampler.\n            /// </summary>\n            /// <value>\n            /// The sampler.\n            /// </value>\n            public SamplerStateDescription Sampler\n            {\n                set { (RenderCore as DrawScreenQuadCore).SamplerDescription = value; }\n                get { return (RenderCore as DrawScreenQuadCore).SamplerDescription; }\n            }\n\n            private float depth = 1f;\n            public float Depth\n            {\n                set\n                {\n                    if(SetAffectsRender(ref depth, value))\n                    {\n                        var core = RenderCore as DrawScreenQuadCore;\n                        core.ModelStruct.TopLeft.Z = core.ModelStruct.TopRight.Z = core.ModelStruct.BottomLeft.Z = core.ModelStruct.BottomRight.Z = value;\n                    }\n                }\n                get { return depth; }\n            }\n\n            public ScreenQuadNode()\n            {\n                IsHitTestVisible = false;\n            \nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class InternalWellKnownMemberNames\n    {\n        public const string NullableHasValue = \"hasValue\";\n        public const string NullableValue = \"value\";\n        public const string SqlStringValue = \"m_value\";\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class InternalWellKnownMemberNames\n    {\n        public const string NullableHasValue = \"hasValue\";\n        public const string NullableValue = \"value\";\n        public const string SqlStringValue = \"m_value\";\n    }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Indexed(Index = \"DocumentField\")]\n    public class Document {\n        [DocumentId] private int id;\n\n        [Field(Index.Tokenized, Name = \"Abstract\", Store= Attributes.Store.No)] private string summary;\n\n        [Field(Index.Tokenized, Store= Attributes.Store.No)] private string text;\n\n        [Field(Index.Tokenized, Store= Attributes.Store.Yes)] [Boost(2)] private string title;\n\n        public Document() {}\n\n        public Document(string title, string summary, string text) {\n            this.title = title;\n            this.summary = summary;\n            this.text = text;\n        }\n\n        public virtual int Id {\n            get { return id; }\n            set { id = value; }\n        }\n\n        public virtual string Title {\n            get { return title; }\n            set { title = value; }\n        }\n\n        public virtual string Summary {\n            get { return summary; }\n            set { summary = value; }\n        }\n\n        public virtual string Text {\n            get { return text; }\n            set { text = value; }\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Indexed(Index = \"DocumentField\")]\n    public class Document {\n        [DocumentId] private int id;\n\n        [Field(Index.Tokenized, Name = \"Abstract\", Store= Attributes.Store.No)] private string summary;\n\n        [Field(Index.Tokenized, Store= Attributes.Store.No)] private string text;\n\n        [Field(Index.Tokenized, Store= Attributes.Store.Yes)] [Boost(2)] private string title;\n\n        public Document() {}\n\n        public Document(string title, string summary, string text) {\n            this.title = title;\n            this.summary = summary;\n            this.text = text;\n        }\n\n        public virtual int Id {\n            get { return id; }\n            set { id = value; }\n        }\n\n        public virtual string Title {\n            get { return title; }\n            set { title = value; }\n        }\n\n        public virtual string Summary {\n            get { return summary; }\n            set { summary = value; }\n        }\n\n        public virtual string Text {\n            get { return text; }\n            set { text = value; }\n        }\n    }\n\nAnswer: [Your Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class ActionMethodsFacetFactoryTest : AbstractFacetFactoryTest {\n        private ActionMethodsFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get {\n                return new[] {\n                    typeof(INamedFacet),\n                    typeof(IExecutedFacet),\n                    typeof(IActionValidationFacet),\n                    typeof(IActionParameterValidationFacet),\n                    typeof(IActionInvocationFacet),\n                    typeof(IActionDefaultsFacet),\n                    typeof(IActionChoicesFacet),\n                    typeof(IDescribedAsFacet),\n                    typeof(IMandatoryFacet)\n                };\n            }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        private static IActionSpecImmutable CreateHolderWithParms() {\n            var tps1 = new Mock<IObjectSpecImmutable>(); //\"System.Int32\"\n            var tps2 = new Mock<IObjectSpecImmutable>(); //System.Int64\"\n            var tps3 = new Mock<IObjectSpecImmutable>(); //\"System.Int64\"\n\n            var param1 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps1.Object, null);\n            var param2 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps2.Object, null);\n            var param3 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps3.Object, null);\n\n            var parms = new[] {param1, param2, param3};\n\n      \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class ActionMethodsFacetFactoryTest : AbstractFacetFactoryTest {\n        private ActionMethodsFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get {\n                return new[] {\n                    typeof(INamedFacet),\n                    typeof(IExecutedFacet),\n                    typeof(IActionValidationFacet),\n                    typeof(IActionParameterValidationFacet),\n                    typeof(IActionInvocationFacet),\n                    typeof(IActionDefaultsFacet),\n                    typeof(IActionChoicesFacet),\n                    typeof(IDescribedAsFacet),\n                    typeof(IMandatoryFacet)\n                };\n            }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        private static IActionSpecImmutable CreateHolderWithParms() {\n            var tps1 = new Mock<IObjectSpecImmutable>(); //\"System.Int32\"\n            var tps2 = new Mock<IObjectSpecImmutable>(); //System.Int64\"\n            var tps3 = new Mock<IObjectSpecImmutable>(); //\"System.Int64\"\n\n            var param1 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps1.Object, null);\n            var param2 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps2.Object, null);\n            var param3 = ImmutableSpecFactory.CreateActionParameterSpecImmutable(tps3.Object, null);\n\n            var parms = new[] {param1, param2, param3};\n\n      \nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    /// <typeparam name=\"TA\">TBD</typeparam>\n    /// <typeparam name=\"TB\">TBD</typeparam>\n    public class Right<TA, TB> : Either<TA, TB>\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        /// <param name=\"b\">TBD</param>\n        public Right(TB b) : base(default(TA), b)\n        {\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public override bool IsLeft\n        {\n            get { return false; }\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public override bool IsRight\n        {\n            get { return true; }\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public new TB Value\n        {\n            get { return Right; }\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    /// <typeparam name=\"TA\">TBD</typeparam>\n    /// <typeparam name=\"TB\">TBD</typeparam>\n    public class Right<TA, TB> : Either<TA, TB>\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        /// <param name=\"b\">TBD</param>\n        public Right(TB b) : base(default(TA), b)\n        {\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public override bool IsLeft\n        {\n            get { return false; }\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public override bool IsRight\n        {\n            get { return true; }\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public new TB Value\n        {\n            get { return Right; }\n        }\n    }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class BaseModule : SaveData, ICustomsEntity, ISerializable\n\t{\n\t\tprivate Mobile _LinkedMobile;\n\t\tprivate Item _LinkedItem;\n\t\tprivate DateTime _CreatedTime;\n\t\tprivate DateTime _LastEditedTime;\n\n\t\tpublic BaseModule()\n\t\t{ }\n\n\t\tpublic BaseModule(Mobile from)\n\t\t{\n\t\t\tLinkMobile(from);\n\t\t}\n\n\t\tpublic BaseModule(Item item)\n\t\t{\n\t\t\tLinkItem(item);\n\t\t}\n\n\t\tpublic BaseModule(CustomSerial serial)\n\t\t\t: base(serial)\n\t\t{ }\n\n\t\tpublic override string Name { get { return @\"Base Module\"; } }\n\n\t\tpublic virtual string Description { get { return \"Base Module, inherit from this class and override all interface items.\"; } }\n\n\t\tpublic virtual string Version { get { return \"1.0\"; } }\n\n\t\tpublic virtual AccessLevel EditLevel { get { return AccessLevel.Developer; } }\n\n\t\tpublic virtual Gump SettingsGump { get { return null; } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic Mobile LinkedMobile { get { return _LinkedMobile; } set { LinkMobile(value); } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic Item LinkedItem { get { return _LinkedItem; } set { LinkItem(value); } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic DateTime CreatedTime { get { return _CreatedTime; } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic DateTime LastEditedTime { get { return _LastEditedTime; } }\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn Name;\n\t\t}\n\n\t\tpublic override void Prep()\n\t\t{ }\n\n\t\tpublic override void Delete()\n\t\t{\n\t\t\tif (_LinkedMobile != null)\n\t\t\t{\n\t\t\t\t_LinkedMobile.Mo\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class BaseModule : SaveData, ICustomsEntity, ISerializable\n\t{\n\t\tprivate Mobile _LinkedMobile;\n\t\tprivate Item _LinkedItem;\n\t\tprivate DateTime _CreatedTime;\n\t\tprivate DateTime _LastEditedTime;\n\n\t\tpublic BaseModule()\n\t\t{ }\n\n\t\tpublic BaseModule(Mobile from)\n\t\t{\n\t\t\tLinkMobile(from);\n\t\t}\n\n\t\tpublic BaseModule(Item item)\n\t\t{\n\t\t\tLinkItem(item);\n\t\t}\n\n\t\tpublic BaseModule(CustomSerial serial)\n\t\t\t: base(serial)\n\t\t{ }\n\n\t\tpublic override string Name { get { return @\"Base Module\"; } }\n\n\t\tpublic virtual string Description { get { return \"Base Module, inherit from this class and override all interface items.\"; } }\n\n\t\tpublic virtual string Version { get { return \"1.0\"; } }\n\n\t\tpublic virtual AccessLevel EditLevel { get { return AccessLevel.Developer; } }\n\n\t\tpublic virtual Gump SettingsGump { get { return null; } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic Mobile LinkedMobile { get { return _LinkedMobile; } set { LinkMobile(value); } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic Item LinkedItem { get { return _LinkedItem; } set { LinkItem(value); } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic DateTime CreatedTime { get { return _CreatedTime; } }\n\n\t\t[CommandProperty(AccessLevel.Administrator)]\n\t\tpublic DateTime LastEditedTime { get { return _LastEditedTime; } }\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn Name;\n\t\t}\n\n\t\tpublic override void Prep()\n\t\t{ }\n\n\t\tpublic override void Delete()\n\t\t{\n\t\t\tif (_LinkedMobile != null)\n\t\t\t{\n\t\t\t\t_LinkedMobile.Mo\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [AttributeUsage (AttributeTargets.Parameter)]\n  sealed partial class PathReferenceAttribute : Attribute\n  {\n    public PathReferenceAttribute () { }\n\n    public PathReferenceAttribute ([PathReference] string basePath)\n    {\n      BasePath = basePath;\n    }\n\n    public string BasePath { get; private set; }\n  }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "Ansswer",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [AttributeUsage (AttributeTargets.Parameter)]\n  sealed partial class PathReferenceAttribute : Attribute\n  {\n    public PathReferenceAttribute () { }\n\n    public PathReferenceAttribute ([PathReference] string basePath)\n    {\n      BasePath = basePath;\n    }\n\n    public string BasePath { get; private set; }\n  }\n\nAnswer: [Answer: Ansswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface NetworkServiceInterfaceChannel : Google.Api.Ads.AdManager.v201902.NetworkServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface NetworkServiceInterfaceChannel : Google.Api.Ads.AdManager.v201902.NetworkServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\nAnswer: \n</think>\n\nThe given C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the SubjectConfirmation element specified in [Saml2Core, 2.4.1.1]. \n    /// </summary>\n    public class Saml2SubjectConfirmation\n    {\n        private Uri _method;\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"Saml2SubjectConfirmation\"/> from a <see cref=\"Uri\"/> indicating the\n        /// method of confirmation.\n        /// </summary>\n        /// <param name=\"method\">The <see cref=\"Uri\"/> to use for initialization.</param>\n        public Saml2SubjectConfirmation(Uri method)\n            : this(method, null)\n        {\n        }\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"Saml2SubjectConfirmation\"/> from a <see cref=\"Uri\"/> indicating the\n        /// method of confirmation and <see cref=\"Saml2SubjectConfirmationData\"/>.\n        /// </summary>\n        /// <param name=\"method\">The <see cref=\"Uri\"/> to use for initialization.</param>\n        /// <param name=\"subjectConfirmationData\">The <see cref=\"Saml2SubjectConfirmationData\"/> to use for initialization.</param>\n        public Saml2SubjectConfirmation(Uri method, Saml2SubjectConfirmationData subjectConfirmationData)\n        {\n            if (method == null)\n                throw LogArgumentNullException(nameof(method));\n\n            if (!method.IsAbsoluteUri)\n                throw LogExceptionMessage(new ArgumentException(nameof(method), FormatInvariant(LogMessages.IDX13300, method)));\n\n            _method = method;\n            SubjectConf\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the SubjectConfirmation element specified in [Saml2Core, 2.4.1.1]. \n    /// </summary>\n    public class Saml2SubjectConfirmation\n    {\n        private Uri _method;\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"Saml2SubjectConfirmation\"/> from a <see cref=\"Uri\"/> indicating the\n        /// method of confirmation.\n        /// </summary>\n        /// <param name=\"method\">The <see cref=\"Uri\"/> to use for initialization.</param>\n        public Saml2SubjectConfirmation(Uri method)\n            : this(method, null)\n        {\n        }\n\n        /// <summary>\n        /// Initializes an instance of <see cref=\"Saml2SubjectConfirmation\"/> from a <see cref=\"Uri\"/> indicating the\n        /// method of confirmation and <see cref=\"Saml2SubjectConfirmationData\"/>.\n        /// </summary>\n        /// <param name=\"method\">The <see cref=\"Uri\"/> to use for initialization.</param>\n        /// <param name=\"subjectConfirmationData\">The <see cref=\"Saml2SubjectConfirmationData\"/> to use for initialization.</param>\n        public Saml2SubjectConfirmation(Uri method, Saml2SubjectConfirmationData subjectConfirmationData)\n        {\n            if (method == null)\n                throw LogArgumentNullException(nameof(method));\n\n            if (!method.IsAbsoluteUri)\n                throw LogExceptionMessage(new ArgumentException(nameof(method), FormatInvariant(LogMessages.IDX13300, method)));\n\n            _method = method;\n            SubjectConf\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class Confirm\n    {\n        public Confirm(long deliveryId)\n        {\n            DeliveryId = deliveryId;\n        }\n\n        public long DeliveryId { get; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class Confirm\n    {\n        public Confirm(long deliveryId)\n        {\n            DeliveryId = deliveryId;\n        }\n\n        public long DeliveryId { get; }\n    }\n\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Target Element Trigger Choice.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is p:tgtEl.</para>\n/// </summary>\n/// <remarks>\n/// The following table lists the possible child types:\n/// <list type=\"bullet\">\n///<item><description>SlideTarget &lt;p:sldTgt></description></item>\n///<item><description>SoundTarget &lt;p:sndTgt></description></item>\n///<item><description>ShapeTarget &lt;p:spTgt></description></item>\n///<item><description>InkTarget &lt;p:inkTgt></description></item>\n///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget &lt;p14:bmkTgt></description></item>\n/// </list>\n/// </remarks>\n\n    [ChildElementInfo(typeof(SlideTarget))]\n    [ChildElementInfo(typeof(SoundTarget))]\n    [ChildElementInfo(typeof(ShapeTarget))]\n    [ChildElementInfo(typeof(InkTarget))]\n    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget), FileFormatVersions.Office2010)]\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(24, \"tgtEl\")]\npublic partial class TargetElement : OpenXmlCompositeElement\n{\n    \n    \n    /// <summary>\n    /// Initializes a new instance of the TargetElement class.\n    /// </summary>\n    public TargetElement():base(){}\n        /// <summary>\n    ///Initializes a new instance of the TargetElement class with the specified child elements.\n    /// </summary>\n    /// <param name=\"childEle\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Target Element Trigger Choice.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is p:tgtEl.</para>\n/// </summary>\n/// <remarks>\n/// The following table lists the possible child types:\n/// <list type=\"bullet\">\n///<item><description>SlideTarget &lt;p:sldTgt></description></item>\n///<item><description>SoundTarget &lt;p:sndTgt></description></item>\n///<item><description>ShapeTarget &lt;p:spTgt></description></item>\n///<item><description>InkTarget &lt;p:inkTgt></description></item>\n///<item><description>DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget &lt;p14:bmkTgt></description></item>\n/// </list>\n/// </remarks>\n\n    [ChildElementInfo(typeof(SlideTarget))]\n    [ChildElementInfo(typeof(SoundTarget))]\n    [ChildElementInfo(typeof(ShapeTarget))]\n    [ChildElementInfo(typeof(InkTarget))]\n    [ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.PowerPoint.BookmarkTarget), FileFormatVersions.Office2010)]\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(24, \"tgtEl\")]\npublic partial class TargetElement : OpenXmlCompositeElement\n{\n    \n    \n    /// <summary>\n    /// Initializes a new instance of the TargetElement class.\n    /// </summary>\n    public TargetElement():base(){}\n        /// <summary>\n    ///Initializes a new instance of the TargetElement class with the specified child elements.\n    /// </summary>\n    /// <param name=\"childEle\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [TestFixture]\n  public class AccessorFindingExpressionVisitorTest\n  {\n    private ConstantExpression _searchedExpression;\n\n    private ConstructorInfo _anonymousTypeCtorWithoutArgs;\n    private ConstructorInfo _anonymousTypeCtorWithArgs;\n    \n    private MethodInfo _anonymousTypeAGetter;\n    private MethodInfo _anonymousTypeBGetter;\n    private PropertyInfo _anonymousTypeAProperty;\n    private PropertyInfo _anonymousTypeBProperty;\n\n    private ParameterExpression _simpleInputParameter;\n    private ParameterExpression _nestedInputParameter;\n    private ParameterExpression _intInputParameter;\n\n    [SetUp]\n    public void SetUp ()\n    {\n      _searchedExpression = Expression.Constant (0);\n      _anonymousTypeCtorWithoutArgs = typeof (AnonymousType).GetConstructor (Type.EmptyTypes);\n      _anonymousTypeCtorWithArgs = typeof (AnonymousType).GetConstructor (new[] { typeof (int), typeof (int) });\n\n      _anonymousTypeAGetter = typeof (AnonymousType).GetMethod (\"get_a\");\n      _anonymousTypeBGetter = typeof (AnonymousType).GetMethod (\"get_b\");\n\n      _anonymousTypeAProperty = typeof (AnonymousType).GetProperty (\"a\");\n      _anonymousTypeBProperty = typeof (AnonymousType).GetProperty (\"b\");\n\n      _simpleInputParameter = Expression.Parameter (typeof (AnonymousType), \"input\");\n      _nestedInputParameter = Expression.Parameter (typeof (AnonymousType<int, AnonymousType>), \"input\");\n      _intInputParameter = Expression.Parameter (typeof (int), \"input\");\n    }\n\n    [Test]\n    public vo\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [TestFixture]\n  public class AccessorFindingExpressionVisitorTest\n  {\n    private ConstantExpression _searchedExpression;\n\n    private ConstructorInfo _anonymousTypeCtorWithoutArgs;\n    private ConstructorInfo _anonymousTypeCtorWithArgs;\n    \n    private MethodInfo _anonymousTypeAGetter;\n    private MethodInfo _anonymousTypeBGetter;\n    private PropertyInfo _anonymousTypeAProperty;\n    private PropertyInfo _anonymousTypeBProperty;\n\n    private ParameterExpression _simpleInputParameter;\n    private ParameterExpression _nestedInputParameter;\n    private ParameterExpression _intInputParameter;\n\n    [SetUp]\n    public void SetUp ()\n    {\n      _searchedExpression = Expression.Constant (0);\n      _anonymousTypeCtorWithoutArgs = typeof (AnonymousType).GetConstructor (Type.EmptyTypes);\n      _anonymousTypeCtorWithArgs = typeof (AnonymousType).GetConstructor (new[] { typeof (int), typeof (int) });\n\n      _anonymousTypeAGetter = typeof (AnonymousType).GetMethod (\"get_a\");\n      _anonymousTypeBGetter = typeof (AnonymousType).GetMethod (\"get_b\");\n\n      _anonymousTypeAProperty = typeof (AnonymousType).GetProperty (\"a\");\n      _anonymousTypeBProperty = typeof (AnonymousType).GetProperty (\"b\");\n\n      _simpleInputParameter = Expression.Parameter (typeof (AnonymousType), \"input\");\n      _nestedInputParameter = Expression.Parameter (typeof (AnonymousType<int, AnonymousType>), \"input\");\n      _intInputParameter = Expression.Parameter (typeof (int), \"input\");\n    }\n\n    [Test]\n    public vo\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [TypeConverterAttribute(typeof(ExtendedProtectionPolicyTypeConverter))]\n    public class ExtendedProtectionPolicy : ISerializable\n    {\n    \n        public ServiceNameCollection CustomServiceNames\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public PolicyEnforcement PolicyEnforcement\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public ProtectionScenario ProtectionScenario\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public ChannelBinding CustomChannelBinding\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public static bool OSSupportsExtendedProtection\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n    \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ServiceNameCollection customServiceNames)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ICollection customServiceNames)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ChannelBinding customChannelBinding)\n        {\n             throw new NotImplementedException()\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [TypeConverterAttribute(typeof(ExtendedProtectionPolicyTypeConverter))]\n    public class ExtendedProtectionPolicy : ISerializable\n    {\n    \n        public ServiceNameCollection CustomServiceNames\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public PolicyEnforcement PolicyEnforcement\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public ProtectionScenario ProtectionScenario\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public ChannelBinding CustomChannelBinding\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n        public static bool OSSupportsExtendedProtection\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n    \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ServiceNameCollection customServiceNames)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ICollection customServiceNames)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ChannelBinding customChannelBinding)\n        {\n             throw new NotImplementedException()\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Class Accelerometer.\n    /// </summary>\n    public partial class Accelerometer\n    {\n        /// <summary>\n        /// Gets or sets the interval.\n        /// </summary>\n        /// <value>The interval.</value>\n        public AccelerometerInterval Interval { get; set; }\n\n        /// <summary>\n        /// Starts this instance.\n        /// </summary>\n        partial void Start()\n        {\n            var accelerometer = AccelerometerSensor.GetDefault();\n\n            if (accelerometer == null) return;\n\n            accelerometer.ReportInterval = (uint) this.Interval;\n\n            accelerometer.ReadingChanged += AccelerometerOnReadingChanged;\n        }\n\n        /// <summary>\n        /// Stops this instance.\n        /// </summary>\n        partial void Stop()\n        {\n            var accelerometer = AccelerometerSensor.GetDefault();\n\n            if (accelerometer != null)\n            {\n                accelerometer.ReadingChanged -= AccelerometerOnReadingChanged;\n            }\n        }\n\n        private void AccelerometerOnReadingChanged(AccelerometerSensor sender, AccelerometerReadingChangedEventArgs args)\n        {\n            LatestReading = args.Reading.AsVector3();\n            readingAvailable.Invoke(sender, LatestReading);\n        }\n    }\n    /// <summary>\n    /// Class Accelerometer.\n    /// </summary>\n    public partial class Accelerometer : IAccelerometer\n    {\n        /// <summary>\n        /// Gravitational force is 9.81 m/s^2\n        /// </summa\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Class Accelerometer.\n    /// </summary>\n    public partial class Accelerometer\n    {\n        /// <summary>\n        /// Gets or sets the interval.\n        /// </summary>\n        /// <value>The interval.</value>\n        public AccelerometerInterval Interval { get; set; }\n\n        /// <summary>\n        /// Starts this instance.\n        /// </summary>\n        partial void Start()\n        {\n            var accelerometer = AccelerometerSensor.GetDefault();\n\n            if (accelerometer == null) return;\n\n            accelerometer.ReportInterval = (uint) this.Interval;\n\n            accelerometer.ReadingChanged += AccelerometerOnReadingChanged;\n        }\n\n        /// <summary>\n        /// Stops this instance.\n        /// </summary>\n        partial void Stop()\n        {\n            var accelerometer = AccelerometerSensor.GetDefault();\n\n            if (accelerometer != null)\n            {\n                accelerometer.ReadingChanged -= AccelerometerOnReadingChanged;\n            }\n        }\n\n        private void AccelerometerOnReadingChanged(AccelerometerSensor sender, AccelerometerReadingChangedEventArgs args)\n        {\n            LatestReading = args.Reading.AsVector3();\n            readingAvailable.Invoke(sender, LatestReading);\n        }\n    }\n    /// <summary>\n    /// Class Accelerometer.\n    /// </summary>\n    public partial class Accelerometer : IAccelerometer\n    {\n        /// <summary>\n        /// Gravitational force is 9.81 m/s^2\n        /// </summa\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Provides access to Map related requests.\n    /// </summary>\n    public class Map : BaseEntity {\n        /// <summary>\n        ///     Returns a list of contestable solarsystems and the NPC faction currently occupying them.\n        /// </summary>\n        /// <returns></returns>\n        public EveXmlResponse<FactionWarfareSystems> GetFactionWarSystems() {\n            return GetFactionWarSystemsAsync().Result;\n        }\n\n        /// <summary>\n        ///     Returns a list of contestable solarsystems and the NPC faction currently occupying them.\n        /// </summary>\n        /// <returns></returns>\n        public Task<EveXmlResponse<FactionWarfareSystems>> GetFactionWarSystemsAsync() {\n            const string path = \"/map/FacWarSystems.xml.aspx\";\n            return requestAsync<FactionWarfareSystems>(path);\n        }\n\n        /// <summary>\n        ///     Returns all possible stargate jumps.\n        /// </summary>\n        /// <returns></returns>\n        public EveXmlResponse<Jumps> GetJumps() {\n            return GetJumpsAsync().Result;\n        }\n\n        /// <summary>\n        ///     Returns all possible stargate jumps.\n        /// </summary>\n        /// <returns></returns>\n        public Task<EveXmlResponse<Jumps>> GetJumpsAsync() {\n            const string path = \"/map/Jumps.xml.aspx\";\n            return requestAsync<Jumps>(path);\n        }\n\n        /// <summary>\n        ///     Returns the number of kills in solarsystems within the last hour. \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "0",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Provides access to Map related requests.\n    /// </summary>\n    public class Map : BaseEntity {\n        /// <summary>\n        ///     Returns a list of contestable solarsystems and the NPC faction currently occupying them.\n        /// </summary>\n        /// <returns></returns>\n        public EveXmlResponse<FactionWarfareSystems> GetFactionWarSystems() {\n            return GetFactionWarSystemsAsync().Result;\n        }\n\n        /// <summary>\n        ///     Returns a list of contestable solarsystems and the NPC faction currently occupying them.\n        /// </summary>\n        /// <returns></returns>\n        public Task<EveXmlResponse<FactionWarfareSystems>> GetFactionWarSystemsAsync() {\n            const string path = \"/map/FacWarSystems.xml.aspx\";\n            return requestAsync<FactionWarfareSystems>(path);\n        }\n\n        /// <summary>\n        ///     Returns all possible stargate jumps.\n        /// </summary>\n        /// <returns></returns>\n        public EveXmlResponse<Jumps> GetJumps() {\n            return GetJumpsAsync().Result;\n        }\n\n        /// <summary>\n        ///     Returns all possible stargate jumps.\n        /// </summary>\n        /// <returns></returns>\n        public Task<EveXmlResponse<Jumps>> GetJumpsAsync() {\n            const string path = \"/map/Jumps.xml.aspx\";\n            return requestAsync<Jumps>(path);\n        }\n\n        /// <summary>\n        ///     Returns the number of kills in solarsystems within the last hour. \nAnswer: 0\n        </summary"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201811.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201902.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201905.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201908.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201811.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201902.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201905.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\n\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic interface CustomTargetingServiceInterfaceChannel : Google.Api.Ads.AdManager.v201908.CustomTargetingServiceInterface, System.ServiceModel.IClientChannel\n\t{\n\t}\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SpaMasterViewModel : DotvvmViewModelBase\n\t{\n        public string HeaderText { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "Feature",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SpaMasterViewModel : DotvvmViewModelBase\n\t{\n        public string HeaderText { get; set; }\n    }\n\nAnswer: \n</think>\n\nAnswer: Feature"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        private class Partitioner\n        {\n            private const int MinimumItemsPerPartition = 30000;\n\n            private readonly FormattingContext _context;\n            private readonly TokenStream _tokenStream;\n            private readonly TokenPairWithOperations[] _operationPairs;\n\n            public Partitioner(FormattingContext context, TokenStream tokenStream, TokenPairWithOperations[] operationPairs)\n            {\n                Contract.ThrowIfNull(context);\n                Contract.ThrowIfNull(tokenStream);\n                Contract.ThrowIfNull(operationPairs);\n\n                _context = context;\n                _tokenStream = tokenStream;\n                _operationPairs = operationPairs;\n            }\n\n            public List<IEnumerable<TokenPairWithOperations>> GetPartitions(int partitionCount)\n            {\n                Contract.ThrowIfFalse(partitionCount > 0);\n\n                var list = new List<IEnumerable<TokenPairWithOperations>>();\n\n                // too small items in the list. give out one list\n                int perPartition = _operationPairs.Length / partitionCount;\n                if (perPartition < 10 || partitionCount <= 1 || _operationPairs.Length < MinimumItemsPerPartition)\n                {\n                    list.Add(GetOperationPairsFromTo(0, _operationPairs.Length));\n                    return list;\n                }\n\n                // split items up to the partition count with about same number of items if possible\n           \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        private class Partitioner\n        {\n            private const int MinimumItemsPerPartition = 30000;\n\n            private readonly FormattingContext _context;\n            private readonly TokenStream _tokenStream;\n            private readonly TokenPairWithOperations[] _operationPairs;\n\n            public Partitioner(FormattingContext context, TokenStream tokenStream, TokenPairWithOperations[] operationPairs)\n            {\n                Contract.ThrowIfNull(context);\n                Contract.ThrowIfNull(tokenStream);\n                Contract.ThrowIfNull(operationPairs);\n\n                _context = context;\n                _tokenStream = tokenStream;\n                _operationPairs = operationPairs;\n            }\n\n            public List<IEnumerable<TokenPairWithOperations>> GetPartitions(int partitionCount)\n            {\n                Contract.ThrowIfFalse(partitionCount > 0);\n\n                var list = new List<IEnumerable<TokenPairWithOperations>>();\n\n                // too small items in the list. give out one list\n                int perPartition = _operationPairs.Length / partitionCount;\n                if (perPartition < 10 || partitionCount <= 1 || _operationPairs.Length < MinimumItemsPerPartition)\n                {\n                    list.Add(GetOperationPairsFromTo(0, _operationPairs.Length));\n                    return list;\n                }\n\n                // split items up to the partition count with about same number of items if possible\n           \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCreativeWrappersResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateCreativeWrappersResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.CreativeWrapper[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCreativeWrappersResponse\"/> class. </summary>\n\t\t\tpublic updateCreativeWrappersResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCreativeWrappersResponse\"/> class. </summary>\n\t\t\tpublic updateCreativeWrappersResponse(Google.Api.Ads.AdManager.v201811.CreativeWrapper[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCreativeWrappersResponse\", W\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCreativeWrappersResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateCreativeWrappersResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.CreativeWrapper[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCreativeWrappersResponse\"/> class. </summary>\n\t\t\tpublic updateCreativeWrappersResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCreativeWrappersResponse\"/> class. </summary>\n\t\t\tpublic updateCreativeWrappersResponse(Google.Api.Ads.AdManager.v201811.CreativeWrapper[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCreativeWrappersResponse\", W\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The single reason for the internal API error.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(TypeName = \"InternalApiError.Reason\", Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic enum InternalApiErrorReason {\n\t\t/// <summary>API encountered an unexpected internal error.\n\t\t/// </summary>\n\t\tUNEXPECTED_INTERNAL_API_ERROR = 0,\n\t\t/// <summary>A temporary error occurred during the request. Please retry.\n\t\t/// </summary>\n\t\tTRANSIENT_ERROR = 1,\n\t\t/// <summary>The cause of the error is not known or only defined in newer versions.\n\t\t/// </summary>\n\t\tUNKNOWN = 2,\n\t\t/// <summary>The API is currently unavailable for a planned downtime.\n\t\t/// </summary>\n\t\tDOWNTIME = 3,\n\t\t/// <summary>Mutate succeeded but server was unable to build response. Client should not\n\t\t/// retry mutate.\n\t\t/// </summary>\n\t\tERROR_GENERATING_RESPONSE = 4,\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The single reason for the internal API error.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(TypeName = \"InternalApiError.Reason\", Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic enum InternalApiErrorReason {\n\t\t/// <summary>API encountered an unexpected internal error.\n\t\t/// </summary>\n\t\tUNEXPECTED_INTERNAL_API_ERROR = 0,\n\t\t/// <summary>A temporary error occurred during the request. Please retry.\n\t\t/// </summary>\n\t\tTRANSIENT_ERROR = 1,\n\t\t/// <summary>The cause of the error is not known or only defined in newer versions.\n\t\t/// </summary>\n\t\tUNKNOWN = 2,\n\t\t/// <summary>The API is currently unavailable for a planned downtime.\n\t\t/// </summary>\n\t\tDOWNTIME = 3,\n\t\t/// <summary>Mutate succeeded but server was unable to build response. Client should not\n\t\t/// retry mutate.\n\t\t/// </summary>\n\t\tERROR_GENERATING_RESPONSE = 4,\n\t}\n\nAnswer: ___________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCustomFieldOptions\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateCustomFieldOptionsRequest {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"customFieldOptions\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.CustomFieldOption[] customFieldOptions;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCustomFieldOptionsRequest\"/> class. </summary>\n\t\t\tpublic updateCustomFieldOptionsRequest() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCustomFieldOptionsRequest\"/> class. </summary>\n\t\t\tpublic updateCustomFieldOptionsRequest(Google.Api.Ads.AdManager.v201811.CustomFieldOption[] customFieldOptions) {\n\t\t\t\tthis.customFieldOptions = customFieldOptions;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.M\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateCustomFieldOptions\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateCustomFieldOptionsRequest {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"customFieldOptions\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.CustomFieldOption[] customFieldOptions;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCustomFieldOptionsRequest\"/> class. </summary>\n\t\t\tpublic updateCustomFieldOptionsRequest() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateCustomFieldOptionsRequest\"/> class. </summary>\n\t\t\tpublic updateCustomFieldOptionsRequest(Google.Api.Ads.AdManager.v201811.CustomFieldOption[] customFieldOptions) {\n\t\t\t\tthis.customFieldOptions = customFieldOptions;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.M\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class OpenIDConnectDiscoveryDocumentTest\n    {\n        private const string googleOpenConectDiscoveryUri = \"https://accounts.google.com/.well-known/openid-configuration\";\n        private const string adOpenConectDiscoveryUri = \"https://login.windows.net/common/.well-known/openid-configuration\";\n        \n         [TestMethod]\n        public void FetchGooleJWKKeysAndUseIdentityExtensions()\n        {\n            \n            GetAndVerifyJsonWebKeys(googleOpenConectDiscoveryUri);\n\n            \n        }\n        [TestMethod]\n         public void FetchMicrosoftJWKKeysAndUseIdentityExtensions()\n         {\n             GetAndVerifyJsonWebKeys(adOpenConectDiscoveryUri);\n\n         }\n\n         private static IList<SecurityToken> GetAndVerifyJsonWebKeys(string uri)\n         {\n             Microsoft.IdentityModel.Protocols.JsonWebKey key = new IdentityModel.Protocols.JsonWebKey();\n             Microsoft.IdentityModel.Protocols.OpenIdConnectConfiguration config;\n             System.Threading.CancellationTokenSource src = new System.Threading.CancellationTokenSource();\n             config = Microsoft.IdentityModel.Protocols.OpenIdConnectConfigurationRetriever.GetAsync(uri, src.Token).Result;\n             JsonWebKeySet keyset = config.JsonWebKeySet;\n             Assert.IsNotNull(keyset);\n             Assert.IsNotNull(keyset.GetSigningTokens());\n             return keyset.GetSigningTokens();\n         }\n\n         \n\n       \n\n        \n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class OpenIDConnectDiscoveryDocumentTest\n    {\n        private const string googleOpenConectDiscoveryUri = \"https://accounts.google.com/.well-known/openid-configuration\";\n        private const string adOpenConectDiscoveryUri = \"https://login.windows.net/common/.well-known/openid-configuration\";\n        \n         [TestMethod]\n        public void FetchGooleJWKKeysAndUseIdentityExtensions()\n        {\n            \n            GetAndVerifyJsonWebKeys(googleOpenConectDiscoveryUri);\n\n            \n        }\n        [TestMethod]\n         public void FetchMicrosoftJWKKeysAndUseIdentityExtensions()\n         {\n             GetAndVerifyJsonWebKeys(adOpenConectDiscoveryUri);\n\n         }\n\n         private static IList<SecurityToken> GetAndVerifyJsonWebKeys(string uri)\n         {\n             Microsoft.IdentityModel.Protocols.JsonWebKey key = new IdentityModel.Protocols.JsonWebKey();\n             Microsoft.IdentityModel.Protocols.OpenIdConnectConfiguration config;\n             System.Threading.CancellationTokenSource src = new System.Threading.CancellationTokenSource();\n             config = Microsoft.IdentityModel.Protocols.OpenIdConnectConfigurationRetriever.GetAsync(uri, src.Token).Result;\n             JsonWebKeySet keyset = config.JsonWebKeySet;\n             Assert.IsNotNull(keyset);\n             Assert.IsNotNull(keyset.GetSigningTokens());\n             return keyset.GetSigningTokens();\n         }\n\n         \n\n       \n\n        \n    }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Test_CG21<T, V> { }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Test_CG21<T, V> { }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class FuzzyQueryDescriptor<T>\n\t\t: FuzzyQueryDescriptorBase<FuzzyQueryDescriptor<T>, T, string, Fuzziness>\n\t\t\t, IFuzzyStringQuery where T : class\n\t{\n\t\tpublic FuzzyQueryDescriptor<T> Fuzziness(Fuzziness fuzziness) => Assign(fuzziness, (a, v) => a.Fuzziness = v);\n\n\t\tpublic FuzzyQueryDescriptor<T> Value(string value) => Assign(value, (a, v) => a.Value = v);\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class FuzzyQueryDescriptor<T>\n\t\t: FuzzyQueryDescriptorBase<FuzzyQueryDescriptor<T>, T, string, Fuzziness>\n\t\t\t, IFuzzyStringQuery where T : class\n\t{\n\t\tpublic FuzzyQueryDescriptor<T> Fuzziness(Fuzziness fuzziness) => Assign(fuzziness, (a, v) => a.Fuzziness = v);\n\n\t\tpublic FuzzyQueryDescriptor<T> Value(string value) => Assign(value, (a, v) => a.Value = v);\n\t}\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        [DataContract(Name = @\"RasterizerStateDataContract\")]\n        public struct RasterizerStateDataContract\n        {\n            [DataMember(Name = @\"FillMode\")]\n            public int FillMode { set; get; }\n            [DataMember(Name = @\"CullMode\")]\n            public int CullMode { set; get; }\n            [DataMember(Name = @\"IsFrontCounterClockwise\")]\n            public bool IsFrontCounterClockwise { set; get; }\n            [DataMember(Name = @\"DepthBias\")]\n            public int DepthBias { set; get; }\n            [DataMember(Name = @\"DepthBiasClamp\")]\n            public float DepthBiasClamp { set; get; }\n            [DataMember(Name = @\"SlopeScaledDepthBias\")]\n            public float SlopeScaledDepthBias { set; get; }\n            [DataMember(Name = @\"IsDepthClipEnabled\")]\n            public bool IsDepthClipEnabled { set; get; }\n            [DataMember(Name = @\"IsScissorEnabled\")]\n            public bool IsScissorEnabled { set; get; }\n            [DataMember(Name = @\"IsMultisampleEnabled\")]\n            public bool IsMultisampleEnabled { set; get; }\n            [DataMember(Name = @\"IsAntialiasedLineEnabled\")]\n            public bool IsAntialiasedLineEnabled { set; get; }\n\n            public RasterizerStateDescription ToRasterizerStateDescription()\n            {\n                return new RasterizerStateDescription()\n                {\n                    FillMode = (FillMode)FillMode,\n                    CullMode = (CullMode)CullMode,\n                    IsFrontCou\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        [DataContract(Name = @\"RasterizerStateDataContract\")]\n        public struct RasterizerStateDataContract\n        {\n            [DataMember(Name = @\"FillMode\")]\n            public int FillMode { set; get; }\n            [DataMember(Name = @\"CullMode\")]\n            public int CullMode { set; get; }\n            [DataMember(Name = @\"IsFrontCounterClockwise\")]\n            public bool IsFrontCounterClockwise { set; get; }\n            [DataMember(Name = @\"DepthBias\")]\n            public int DepthBias { set; get; }\n            [DataMember(Name = @\"DepthBiasClamp\")]\n            public float DepthBiasClamp { set; get; }\n            [DataMember(Name = @\"SlopeScaledDepthBias\")]\n            public float SlopeScaledDepthBias { set; get; }\n            [DataMember(Name = @\"IsDepthClipEnabled\")]\n            public bool IsDepthClipEnabled { set; get; }\n            [DataMember(Name = @\"IsScissorEnabled\")]\n            public bool IsScissorEnabled { set; get; }\n            [DataMember(Name = @\"IsMultisampleEnabled\")]\n            public bool IsMultisampleEnabled { set; get; }\n            [DataMember(Name = @\"IsAntialiasedLineEnabled\")]\n            public bool IsAntialiasedLineEnabled { set; get; }\n\n            public RasterizerStateDescription ToRasterizerStateDescription()\n            {\n                return new RasterizerStateDescription()\n                {\n                    FillMode = (FillMode)FillMode,\n                    CullMode = (CullMode)CullMode,\n                    IsFrontCou\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Defines the criteria a <a href='LineItem'>LineItem</a> needs to satisfy to meet\n\t/// its delivery goal.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class Goal {\n\t\tprivate GoalType goalTypeField;\n\n\t\tprivate bool goalTypeFieldSpecified;\n\n\t\tprivate UnitType unitTypeField;\n\n\t\tprivate bool unitTypeFieldSpecified;\n\n\t\tprivate long unitsField;\n\n\t\tprivate bool unitsFieldSpecified;\n\n\t\t/// <summary>The type of the goal for the <code>LineItem</code>. It defines the period over\n\t\t/// which the goal for <code>LineItem</code> should be reached.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic GoalType goalType {\n\t\t\tget {\n\t\t\t\treturn this.goalTypeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.goalTypeField = value;\n\t\t\t\tthis.goalTypeSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"goalType\"\n\t\t/// />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool goalTypeSpecified {\n\t\t\tget {\n\t\t\t\treturn this.goalTypeFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.goalTypeFieldSpecified = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summ\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Defines the criteria a <a href='LineItem'>LineItem</a> needs to satisfy to meet\n\t/// its delivery goal.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class Goal {\n\t\tprivate GoalType goalTypeField;\n\n\t\tprivate bool goalTypeFieldSpecified;\n\n\t\tprivate UnitType unitTypeField;\n\n\t\tprivate bool unitTypeFieldSpecified;\n\n\t\tprivate long unitsField;\n\n\t\tprivate bool unitsFieldSpecified;\n\n\t\t/// <summary>The type of the goal for the <code>LineItem</code>. It defines the period over\n\t\t/// which the goal for <code>LineItem</code> should be reached.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic GoalType goalType {\n\t\t\tget {\n\t\t\t\treturn this.goalTypeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.goalTypeField = value;\n\t\t\t\tthis.goalTypeSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"goalType\"\n\t\t/// />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool goalTypeSpecified {\n\t\t\tget {\n\t\t\t\treturn this.goalTypeFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.goalTypeFieldSpecified = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summ\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class NewAlbumReleases : BasicModel\n    {\n        [JsonProperty(\"albums\")]\n        public Paging<SimpleAlbum> Albums { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class NewAlbumReleases : BasicModel\n    {\n        [JsonProperty(\"albums\")]\n        public Paging<SimpleAlbum> Albums { get; set; }\n    }\n\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The base type for creatives that load a Flash asset from a specified URL. If the\n\t/// remote flash asset cannot be served, a fallback image is used at an alternate\n\t/// URL.\n\t/// </summary>\n\t[System.Xml.Serialization.XmlIncludeAttribute(typeof(FlashRedirectOverlayCreative))]\n\t[System.Xml.Serialization.XmlIncludeAttribute(typeof(FlashRedirectCreative))]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic abstract partial class BaseFlashRedirectCreative : HasDestinationUrlCreative {\n\t\tprivate string flashUrlField;\n\n\t\tprivate string fallbackUrlField;\n\n\t\tprivate string fallbackPreviewUrlField;\n\n\t\tprivate SslScanResult sslScanResultField;\n\n\t\tprivate bool sslScanResultFieldSpecified;\n\n\t\tprivate SslManualOverride sslManualOverrideField;\n\n\t\tprivate bool sslManualOverrideFieldSpecified;\n\n\t\t/// <summary>The URL where the Flash asset resides. This attribute is required and has a\n\t\t/// maximum length of 1024 characters.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic string flashUrl {\n\t\t\tget {\n\t\t\t\treturn this.flashUrlField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.flashUrlField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>The fallback URL to use if the Flash URL cannot be used. Thi\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The base type for creatives that load a Flash asset from a specified URL. If the\n\t/// remote flash asset cannot be served, a fallback image is used at an alternate\n\t/// URL.\n\t/// </summary>\n\t[System.Xml.Serialization.XmlIncludeAttribute(typeof(FlashRedirectOverlayCreative))]\n\t[System.Xml.Serialization.XmlIncludeAttribute(typeof(FlashRedirectCreative))]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic abstract partial class BaseFlashRedirectCreative : HasDestinationUrlCreative {\n\t\tprivate string flashUrlField;\n\n\t\tprivate string fallbackUrlField;\n\n\t\tprivate string fallbackPreviewUrlField;\n\n\t\tprivate SslScanResult sslScanResultField;\n\n\t\tprivate bool sslScanResultFieldSpecified;\n\n\t\tprivate SslManualOverride sslManualOverrideField;\n\n\t\tprivate bool sslManualOverrideFieldSpecified;\n\n\t\t/// <summary>The URL where the Flash asset resides. This attribute is required and has a\n\t\t/// maximum length of 1024 characters.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic string flashUrl {\n\t\t\tget {\n\t\t\t\treturn this.flashUrlField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.flashUrlField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>The fallback URL to use if the Flash URL cannot be used. Thi\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DataConnection\n    {\n        public string Name { get; set; }\n        public string Value { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "DataConnection",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DataConnection\n    {\n        public string Name { get; set; }\n        public string Value { get; set; }\n    }\n\nAnswer: DataConnection\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Provides operations for creating, updating and retrieving <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> and <a\n\t/// href=''>CustomTargetingValue</a> objects.\n\t/// </summary>\n\tpublic interface ICustomTargetingService : CustomTargetingServiceInterface, IDisposable\n\t{\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingKey[] createCustomTargetingKeys(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingKey[]> createCustomTargetingKeysAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingValue[] createCustomTargetingValues(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingValue[]> createCustomTargetingValuesAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingKey[] updateCustomTargetingKeys(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingKey[]> updateCustomTargetingKeysAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingValue[] updateCustomTargetingValues(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTarg\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Provides operations for creating, updating and retrieving <a\n\t/// href='CustomTargetingKey'>CustomTargetingKey</a> and <a\n\t/// href=''>CustomTargetingValue</a> objects.\n\t/// </summary>\n\tpublic interface ICustomTargetingService : CustomTargetingServiceInterface, IDisposable\n\t{\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingKey[] createCustomTargetingKeys(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingKey[]> createCustomTargetingKeysAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingValue[] createCustomTargetingValues(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingValue[]> createCustomTargetingValuesAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingKey[] updateCustomTargetingKeys(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTargetingKey[]> updateCustomTargetingKeysAsync(Google.Api.Ads.AdManager.v201811.CustomTargetingKey[] keys);\n\n\t\tGoogle.Api.Ads.AdManager.v201811.CustomTargetingValue[] updateCustomTargetingValues(Google.Api.Ads.AdManager.v201811.CustomTargetingValue[] values);\n\n\t\tSystem.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.CustomTarg\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Describes a group and its position relative to other groups.\n    /// It's used in <see cref=\"ContentItemMetadata\"/> to describe the potential\n    /// groups that a content item can be displayed in.\n    /// </summary>\n    public class GroupInfo\n    {\n        public GroupInfo(LocalizedString name)\n        {\n            Id = name.Name;\n            Name = name;\n        }\n\n        public string Id { get; set; }\n        public LocalizedString Name { get; set; }\n        public string Position { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "GroupInfo",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Describes a group and its position relative to other groups.\n    /// It's used in <see cref=\"ContentItemMetadata\"/> to describe the potential\n    /// groups that a content item can be displayed in.\n    /// </summary>\n    public class GroupInfo\n    {\n        public GroupInfo(LocalizedString name)\n        {\n            Id = name.Name;\n            Name = name;\n        }\n\n        public string Id { get; set; }\n        public LocalizedString Name { get; set; }\n        public string Position { get; set; }\n    }\n\nAnswer: GroupInfo is a class that"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Models common data needed to render pages in IdentityServer.\n    /// </summary>\n    public class CommonViewModel\n    {\n        /// <summary>\n        /// The site URL.\n        /// </summary>\n        /// <value>\n        /// The site URL.\n        /// </value>\n        public string SiteUrl { get; set; }\n        \n        /// <summary>\n        /// Gets or sets the name of the site.\n        /// </summary>\n        /// <value>\n        /// The name of the site.\n        /// </value>\n        public string SiteName { get; set; }\n        \n        /// <summary>\n        /// The current logged in display name.\n        /// </summary>\n        /// <value>\n        /// The current user.\n        /// </value>\n        public string CurrentUser { get; set; }\n\n        /// <summary>\n        /// The URL to allow a user to logout.\n        /// </summary>\n        /// <value>\n        /// The logout URL.\n        /// </value>\n        public string LogoutUrl { get; set; }\n\n        /// <summary>\n        /// Gets or sets the custom data for the model.\n        /// </summary>\n        /// <value>\n        /// The custom data.\n        /// </value>\n        public object Custom { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Models common data needed to render pages in IdentityServer.\n    /// </summary>\n    public class CommonViewModel\n    {\n        /// <summary>\n        /// The site URL.\n        /// </summary>\n        /// <value>\n        /// The site URL.\n        /// </value>\n        public string SiteUrl { get; set; }\n        \n        /// <summary>\n        /// Gets or sets the name of the site.\n        /// </summary>\n        /// <value>\n        /// The name of the site.\n        /// </value>\n        public string SiteName { get; set; }\n        \n        /// <summary>\n        /// The current logged in display name.\n        /// </summary>\n        /// <value>\n        /// The current user.\n        /// </value>\n        public string CurrentUser { get; set; }\n\n        /// <summary>\n        /// The URL to allow a user to logout.\n        /// </summary>\n        /// <value>\n        /// The logout URL.\n        /// </value>\n        public string LogoutUrl { get; set; }\n\n        /// <summary>\n        /// Gets or sets the custom data for the model.\n        /// </summary>\n        /// <value>\n        /// The custom data.\n        /// </value>\n        public object Custom { get; set; }\n    }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class RuleReportTests : BaseUnitTest\n    {\n        private static List<int> ids;\n\n        public override void ClassInitialize()\n        {\n            List<RuleSet> inserts = new List<RuleSet>();\n            //create basic rules\n            using (var db = new VoatDataContext())\n            {\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -100, Name = \"Test - Spam\", Description = \"Test - Spam\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -90, Name = \"Test - No Dox\", Description = \"Test - No Dox Description\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -80, Name = \"Test - No Illegal\", Description = \"Test - No Illegal Description\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n\n                //add rules per sub\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, Subverse = SUBVERSES.Unit, SortOrder = 1, Name = \"Test - Rule #1\", Description = \"Test - Rule #1\", CreatedBy = USERNAMES.Unit, CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentTyp\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class RuleReportTests : BaseUnitTest\n    {\n        private static List<int> ids;\n\n        public override void ClassInitialize()\n        {\n            List<RuleSet> inserts = new List<RuleSet>();\n            //create basic rules\n            using (var db = new VoatDataContext())\n            {\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -100, Name = \"Test - Spam\", Description = \"Test - Spam\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -90, Name = \"Test - No Dox\", Description = \"Test - No Dox Description\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, SortOrder = -80, Name = \"Test - No Illegal\", Description = \"Test - No Illegal Description\", CreatedBy = \"Voat\", CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n\n                //add rules per sub\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentType = null, Subverse = SUBVERSES.Unit, SortOrder = 1, Name = \"Test - Rule #1\", Description = \"Test - Rule #1\", CreatedBy = USERNAMES.Unit, CreationDate = Voat.Data.Repository.CurrentDate }).Entity);\n                inserts.Add(db.RuleSet.Add(new RuleSet() { IsActive = true, ContentTyp\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The reasons for the target error.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(TypeName = \"ReconciliationError.Reason\", Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum ReconciliationErrorReason {\n\t\t/// <summary>Reconciliation report is reconciled, and need to revert. Or reconciliation\n\t\t/// report is Deleted, and not possible.\n\t\t/// </summary>\n\t\tCANNOT_CREATE_RECONCILIATION_REPORT_VERSION = 0,\n\t\t/// <summary>Reconciliation report can't be put into that reconciliation state.\n\t\t/// </summary>\n\t\tINVALID_RECONCILIATION_REPORT_STATE_TRANSITION = 1,\n\t\t/// <summary>Previous cycles of the proposal must be reconciled first.\n\t\t/// </summary>\n\t\tINVALID_RECONCILIATION_PROPOSAL_SUBMISSION_SEQUENCE = 2,\n\t\t/// <summary>User does not have permission to put reconciliation report into reconciled\n\t\t/// state.\n\t\t/// </summary>\n\t\tUSER_CANNOT_RECONCILE_RECONCILIATION_REPORT = 3,\n\t\t/// <summary>The billed from is contracted, but the contracted volume cannot be null.\n\t\t/// </summary>\n\t\tCONTRACTED_VOLUME_CANNOT_BE_NULL = 4,\n\t\t/// <summary>The billed from is DFP, but the DFP volume cannot be null.\n\t\t/// </summary>\n\t\tDFP_VOLUME_CANNOT_BE_NULL = 5,\n\t\t/// <summary>The billed from is manual, but the manual volume cannot be null.\n\t\t/// </summary>\n\t\tMANUAL_VOLUME_CANNOT_BE_NULL = 6,\n\t\t/// <summary>The billed from is third-party, but the th\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The reasons for the target error.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(TypeName = \"ReconciliationError.Reason\", Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum ReconciliationErrorReason {\n\t\t/// <summary>Reconciliation report is reconciled, and need to revert. Or reconciliation\n\t\t/// report is Deleted, and not possible.\n\t\t/// </summary>\n\t\tCANNOT_CREATE_RECONCILIATION_REPORT_VERSION = 0,\n\t\t/// <summary>Reconciliation report can't be put into that reconciliation state.\n\t\t/// </summary>\n\t\tINVALID_RECONCILIATION_REPORT_STATE_TRANSITION = 1,\n\t\t/// <summary>Previous cycles of the proposal must be reconciled first.\n\t\t/// </summary>\n\t\tINVALID_RECONCILIATION_PROPOSAL_SUBMISSION_SEQUENCE = 2,\n\t\t/// <summary>User does not have permission to put reconciliation report into reconciled\n\t\t/// state.\n\t\t/// </summary>\n\t\tUSER_CANNOT_RECONCILE_RECONCILIATION_REPORT = 3,\n\t\t/// <summary>The billed from is contracted, but the contracted volume cannot be null.\n\t\t/// </summary>\n\t\tCONTRACTED_VOLUME_CANNOT_BE_NULL = 4,\n\t\t/// <summary>The billed from is DFP, but the DFP volume cannot be null.\n\t\t/// </summary>\n\t\tDFP_VOLUME_CANNOT_BE_NULL = 5,\n\t\t/// <summary>The billed from is manual, but the manual volume cannot be null.\n\t\t/// </summary>\n\t\tMANUAL_VOLUME_CANNOT_BE_NULL = 6,\n\t\t/// <summary>The billed from is third-party, but the th\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// INTERNAL API\n    /// \n    /// Used for remote death watch. Failure detectors publish this to the\n    /// <see cref=\"AddressTerminatedTopic\"/> when a remote node is detected to be unreachable and / or decided\n    /// to be removed.\n    /// \n    /// The watcher <see cref=\"DeathWatch\"/> subscribes to the <see cref=\"AddressTerminatedTopic\"/> and translates this\n    /// event to <see cref=\"Terminated\"/>, which is sent to itself.\n    /// </summary>\n    internal class AddressTerminated : IAutoReceivedMessage, IPossiblyHarmful, IDeadLetterSuppression\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"AddressTerminated\" /> class.\n        /// </summary>\n        /// <param name=\"address\">TBD</param>\n        public AddressTerminated(Address address)\n        {\n            Address = address;\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public Address Address { get; }\n\n        /// <inheritdoc/>\n        public override string ToString()\n        {\n            return $\"<AddressTerminated>: {Address}\";\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// INTERNAL API\n    /// \n    /// Used for remote death watch. Failure detectors publish this to the\n    /// <see cref=\"AddressTerminatedTopic\"/> when a remote node is detected to be unreachable and / or decided\n    /// to be removed.\n    /// \n    /// The watcher <see cref=\"DeathWatch\"/> subscribes to the <see cref=\"AddressTerminatedTopic\"/> and translates this\n    /// event to <see cref=\"Terminated\"/>, which is sent to itself.\n    /// </summary>\n    internal class AddressTerminated : IAutoReceivedMessage, IPossiblyHarmful, IDeadLetterSuppression\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"AddressTerminated\" /> class.\n        /// </summary>\n        /// <param name=\"address\">TBD</param>\n        public AddressTerminated(Address address)\n        {\n            Address = address;\n        }\n\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public Address Address { get; }\n\n        /// <inheritdoc/>\n        public override string ToString()\n        {\n            return $\"<AddressTerminated>: {Address}\";\n        }\n    }\n\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ChronicleGargoyleQueenVolI : Item\n    {\n        [Constructable]\n        public ChronicleGargoyleQueenVolI()\n            : base(0xFF2)\n        {\n            Weight = 1.0;\n        }\n\n        public ChronicleGargoyleQueenVolI(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int LabelNumber\n        {\n            get { return 1150914; }\n        } //Chronicle of the Gargoyle Queen Vol. I\n\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write(0); // version\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            var version = reader.ReadInt();\n        }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ChronicleGargoyleQueenVolI : Item\n    {\n        [Constructable]\n        public ChronicleGargoyleQueenVolI()\n            : base(0xFF2)\n        {\n            Weight = 1.0;\n        }\n\n        public ChronicleGargoyleQueenVolI(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int LabelNumber\n        {\n            get { return 1150914; }\n        } //Chronicle of the Gargoyle Queen Vol. I\n\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write(0); // version\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            var version = reader.ReadInt();\n        }\n    }\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static r\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n    }\n    public static class Helper\n    {\n        public static r\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t///<summary>Request for DeleteModelSnapshot <para>http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html</para></summary>\n\tpublic partial class DeleteModelSnapshotRequest : PlainRequestBase<DeleteModelSnapshotRequestParameters>, IDeleteModelSnapshotRequest\n\t{\n\t\tprotected IDeleteModelSnapshotRequest Self => this;\n\t\tinternal override ApiUrls ApiUrls => ApiUrlsLookups.MachineLearningDeleteModelSnapshot;\n\t\t///<summary>/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}</summary>\n\t\t///<param name = \"jobId\">this parameter is required</param>\n\t\t///<param name = \"snapshotId\">this parameter is required</param>\n\t\tpublic DeleteModelSnapshotRequest(Id jobId, Id snapshotId): base(r => r.Required(\"job_id\", jobId).Required(\"snapshot_id\", snapshotId))\n\t\t{\n\t\t}\n\n\t\t///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>\n\t\t[SerializationConstructor]\n\t\tprotected DeleteModelSnapshotRequest(): base()\n\t\t{\n\t\t}\n\n\t\t// values part of the url path\n\t\t[IgnoreDataMember]\n\t\tId IDeleteModelSnapshotRequest.JobId => Self.RouteValues.Get<Id>(\"job_id\");\n\t\t[IgnoreDataMember]\n\t\tId IDeleteModelSnapshotRequest.SnapshotId => Self.RouteValues.Get<Id>(\"snapshot_id\");\n\t// Request parameters\n\t}\n\n\tpublic partial class DeleteModelSnapshotRequest { }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t///<summary>Request for DeleteModelSnapshot <para>http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html</para></summary>\n\tpublic partial class DeleteModelSnapshotRequest : PlainRequestBase<DeleteModelSnapshotRequestParameters>, IDeleteModelSnapshotRequest\n\t{\n\t\tprotected IDeleteModelSnapshotRequest Self => this;\n\t\tinternal override ApiUrls ApiUrls => ApiUrlsLookups.MachineLearningDeleteModelSnapshot;\n\t\t///<summary>/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}</summary>\n\t\t///<param name = \"jobId\">this parameter is required</param>\n\t\t///<param name = \"snapshotId\">this parameter is required</param>\n\t\tpublic DeleteModelSnapshotRequest(Id jobId, Id snapshotId): base(r => r.Required(\"job_id\", jobId).Required(\"snapshot_id\", snapshotId))\n\t\t{\n\t\t}\n\n\t\t///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>\n\t\t[SerializationConstructor]\n\t\tprotected DeleteModelSnapshotRequest(): base()\n\t\t{\n\t\t}\n\n\t\t// values part of the url path\n\t\t[IgnoreDataMember]\n\t\tId IDeleteModelSnapshotRequest.JobId => Self.RouteValues.Get<Id>(\"job_id\");\n\t\t[IgnoreDataMember]\n\t\tId IDeleteModelSnapshotRequest.SnapshotId => Self.RouteValues.Get<Id>(\"snapshot_id\");\n\t// Request parameters\n\t}\n\n\tpublic partial class DeleteModelSnapshotRequest { }\n\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Victoria : BaseQuester\n    {\n        private const int AltarRange = 24;\n        private SummoningAltar m_Altar;\n\n        [Constructable]\n        public Victoria()\n            : base(\"the Sorceress\")\n        {\n        }\n\n        public Victoria(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int TalkNumber\n        {\n            get { return 6159; }\n        } // Ask about Chyloth\n\n        public override bool ClickTitle\n        {\n            get { return true; }\n        }\n\n        public override bool IsActiveVendor\n        {\n            get { return true; }\n        }\n\n        public override bool DisallowAllMoves\n        {\n            get { return false; }\n        }\n\n        public SummoningAltar Altar\n        {\n            get\n            {\n                if (m_Altar == null || m_Altar.Deleted || m_Altar.Map != Map ||\n                    !Utility.InRange(m_Altar.Location, Location, AltarRange))\n                {\n                    foreach (var item in GetItemsInRange(AltarRange))\n                    {\n                        if (item is SummoningAltar)\n                        {\n                            m_Altar = (SummoningAltar) item;\n                            break;\n                        }\n                    }\n                }\n\n                return m_Altar;\n            }\n        }\n\n        public override void InitSBInfo()\n        {\n            m_SBInfos.Add(new SBMage());\n        }\n\n        public override\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Victoria : BaseQuester\n    {\n        private const int AltarRange = 24;\n        private SummoningAltar m_Altar;\n\n        [Constructable]\n        public Victoria()\n            : base(\"the Sorceress\")\n        {\n        }\n\n        public Victoria(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int TalkNumber\n        {\n            get { return 6159; }\n        } // Ask about Chyloth\n\n        public override bool ClickTitle\n        {\n            get { return true; }\n        }\n\n        public override bool IsActiveVendor\n        {\n            get { return true; }\n        }\n\n        public override bool DisallowAllMoves\n        {\n            get { return false; }\n        }\n\n        public SummoningAltar Altar\n        {\n            get\n            {\n                if (m_Altar == null || m_Altar.Deleted || m_Altar.Map != Map ||\n                    !Utility.InRange(m_Altar.Location, Location, AltarRange))\n                {\n                    foreach (var item in GetItemsInRange(AltarRange))\n                    {\n                        if (item is SummoningAltar)\n                        {\n                            m_Altar = (SummoningAltar) item;\n                            break;\n                        }\n                    }\n                }\n\n                return m_Altar;\n            }\n        }\n\n        public override void InitSBInfo()\n        {\n            m_SBInfos.Add(new SBMage());\n        }\n\n        public override\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ComponentVerification\n    {\n        private readonly int[] m_ItemTable;\n        private readonly int[] m_MultiTable;\n        public ComponentVerification()\n        {\n            this.m_ItemTable = this.CreateTable(0x10000);\n            this.m_MultiTable = this.CreateTable(0x4000);\n\n            this.LoadItems(\"Data/Components/walls.txt\", \"South1\", \"South2\", \"South3\", \"Corner\", \"East1\", \"East2\", \"East3\", \"Post\", \"WindowS\", \"AltWindowS\", \"WindowE\", \"AltWindowE\", \"SecondAltWindowS\", \"SecondAltWindowE\");\n            this.LoadItems(\"Data/Components/teleprts.txt\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\", \"F13\", \"F14\", \"F15\", \"F16\");\n            this.LoadItems(\"Data/Components/stairs.txt\", \"Block\", \"North\", \"East\", \"South\", \"West\", \"Squared1\", \"Squared2\", \"Rounded1\", \"Rounded2\");\n            this.LoadItems(\"Data/Components/roof.txt\", \"North\", \"East\", \"South\", \"West\", \"NSCrosspiece\", \"EWCrosspiece\", \"NDent\", \"EDent\", \"SDent\", \"WDent\", \"NTPiece\", \"ETPiece\", \"STPiece\", \"WTPiece\", \"XPiece\", \"Extra Piece\");\n            this.LoadItems(\"Data/Components/floors.txt\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\", \"F13\", \"F14\", \"F15\", \"F16\");\n            this.LoadItems(\"Data/Components/misc.txt\", \"Piece1\", \"Piece2\", \"Piece3\", \"Piece4\", \"Piece5\", \"Piece6\", \"Piece7\", \"Piece8\");\n            this.LoadItems(\"Data/Components/doors.txt\", \"Piece1\", \"Piece2\", \"Piece3\", \"Piece4\", \"Piece5\", \"Piece6\", \"Piece7\", \"Piece8\");\n\n    \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ComponentVerification\n    {\n        private readonly int[] m_ItemTable;\n        private readonly int[] m_MultiTable;\n        public ComponentVerification()\n        {\n            this.m_ItemTable = this.CreateTable(0x10000);\n            this.m_MultiTable = this.CreateTable(0x4000);\n\n            this.LoadItems(\"Data/Components/walls.txt\", \"South1\", \"South2\", \"South3\", \"Corner\", \"East1\", \"East2\", \"East3\", \"Post\", \"WindowS\", \"AltWindowS\", \"WindowE\", \"AltWindowE\", \"SecondAltWindowS\", \"SecondAltWindowE\");\n            this.LoadItems(\"Data/Components/teleprts.txt\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\", \"F13\", \"F14\", \"F15\", \"F16\");\n            this.LoadItems(\"Data/Components/stairs.txt\", \"Block\", \"North\", \"East\", \"South\", \"West\", \"Squared1\", \"Squared2\", \"Rounded1\", \"Rounded2\");\n            this.LoadItems(\"Data/Components/roof.txt\", \"North\", \"East\", \"South\", \"West\", \"NSCrosspiece\", \"EWCrosspiece\", \"NDent\", \"EDent\", \"SDent\", \"WDent\", \"NTPiece\", \"ETPiece\", \"STPiece\", \"WTPiece\", \"XPiece\", \"Extra Piece\");\n            this.LoadItems(\"Data/Components/floors.txt\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\", \"F13\", \"F14\", \"F15\", \"F16\");\n            this.LoadItems(\"Data/Components/misc.txt\", \"Piece1\", \"Piece2\", \"Piece3\", \"Piece4\", \"Piece5\", \"Piece6\", \"Piece7\", \"Piece8\");\n            this.LoadItems(\"Data/Components/doors.txt\", \"Piece1\", \"Piece2\", \"Piece3\", \"Piece4\", \"Piece5\", \"Piece6\", \"Piece7\", \"Piece8\");\n\n    \nAnswer: [Your Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Default Checkbox Form Field State.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is w:default.</para>\n/// </summary>\n\n[SchemaAttr(23, \"default\")]\n[OfficeAvailability(FileFormatVersions.Office2007)]\npublic partial class DefaultCheckBoxFormFieldState : OnOffType\n{\n    /// <summary>\n    /// Initializes a new instance of the DefaultCheckBoxFormFieldState class.\n    /// </summary>\n    public DefaultCheckBoxFormFieldState():base(){}\n    \n    \n    /// <inheritdoc/>\n    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultCheckBoxFormFieldState>(deep);\n\n\n}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Default Checkbox Form Field State.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is w:default.</para>\n/// </summary>\n\n[SchemaAttr(23, \"default\")]\n[OfficeAvailability(FileFormatVersions.Office2007)]\npublic partial class DefaultCheckBoxFormFieldState : OnOffType\n{\n    /// <summary>\n    /// Initializes a new instance of the DefaultCheckBoxFormFieldState class.\n    /// </summary>\n    public DefaultCheckBoxFormFieldState():base(){}\n    \n    \n    /// <inheritdoc/>\n    public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultCheckBoxFormFieldState>(deep);\n\n\n}\n\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class FindMenuFacetFactoryTest : AbstractFacetFactoryTest {\n        private FindMenuFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get { return new[] {typeof(IFindMenuFacet)}; }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        [TestMethod]\n        public void TestFindMenuFacetNotAddedToParameterByDefault() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo method = FindMethod(typeof(Customer), \"Action1\", new[] {typeof(Foo), typeof(Foo)});\n            metamodel = facetFactory.ProcessParams(Reflector, method, 0, Specification, metamodel);\n            IFacet facet = Specification.GetFacet(typeof(IFindMenuFacet));\n            Assert.IsNull(facet);\n            Assert.IsNotNull(metamodel);\n        }\n\n        [TestMethod]\n        public void TestFindMenuAnnotationOnParameterPickedUp() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo method = FindMethod(typeof(Customer), \"Action1\", new[] {typeof(Foo), typeof(Foo)});\n            metamodel = facetFactory.ProcessParams(Reflector, method, 1, Specification, metamodel);\n            Assert.IsNotNull(Specification.GetFacet(typeof(IFindMenuFacet)));\n            Assert.Is\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class FindMenuFacetFactoryTest : AbstractFacetFactoryTest {\n        private FindMenuFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get { return new[] {typeof(IFindMenuFacet)}; }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        [TestMethod]\n        public void TestFindMenuFacetNotAddedToParameterByDefault() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo method = FindMethod(typeof(Customer), \"Action1\", new[] {typeof(Foo), typeof(Foo)});\n            metamodel = facetFactory.ProcessParams(Reflector, method, 0, Specification, metamodel);\n            IFacet facet = Specification.GetFacet(typeof(IFindMenuFacet));\n            Assert.IsNull(facet);\n            Assert.IsNotNull(metamodel);\n        }\n\n        [TestMethod]\n        public void TestFindMenuAnnotationOnParameterPickedUp() {\n            IImmutableDictionary<string, ITypeSpecBuilder> metamodel = new Dictionary<string, ITypeSpecBuilder>().ToImmutableDictionary();\n\n            MethodInfo method = FindMethod(typeof(Customer), \"Action1\", new[] {typeof(Foo), typeof(Foo)});\n            metamodel = facetFactory.ProcessParams(Reflector, method, 1, Specification, metamodel);\n            Assert.IsNotNull(Specification.GetFacet(typeof(IFindMenuFacet)));\n            Assert.Is\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    [Serializable]\n    public sealed class OnComplete : IActorSubscriberMessage\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public static readonly OnComplete Instance = new OnComplete();\n        private OnComplete() { }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    [Serializable]\n    public sealed class OnComplete : IActorSubscriberMessage\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public static readonly OnComplete Instance = new OnComplete();\n        private OnComplete() { }\n    }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class GetDatafeedsApiTests\n\t\t: MachineLearningIntegrationTestBase<GetDatafeedsResponse, IGetDatafeedsRequest, GetDatafeedsDescriptor, GetDatafeedsRequest>\n\t{\n\t\tpublic GetDatafeedsApiTests(MachineLearningCluster cluster, EndpointUsage usage) : base(cluster, usage) { }\n\n\t\tprotected override bool ExpectIsValid => true;\n\t\tprotected override object ExpectJson => null;\n\t\tprotected override int ExpectStatusCode => 200;\n\t\tprotected override Func<GetDatafeedsDescriptor, IGetDatafeedsRequest> Fluent => f => f;\n\t\tprotected override HttpMethod HttpMethod => HttpMethod.GET;\n\t\tprotected override string UrlPath => $\"_ml/datafeeds\";\n\n\t\tprotected override void IntegrationSetup(IElasticClient client, CallUniqueValues values)\n\t\t{\n\t\t\tforeach (var callUniqueValue in values)\n\t\t\t{\n\t\t\t\tPutJob(client, callUniqueValue.Value);\n\t\t\t\tPutDatafeed(client, callUniqueValue.Value);\n\t\t\t}\n\t\t}\n\n\t\tprotected override LazyResponses ClientUsage() => Calls(\n\t\t\t(client, f) => client.MachineLearning.GetDatafeeds(f),\n\t\t\t(client, f) => client.MachineLearning.GetDatafeedsAsync(f),\n\t\t\t(client, r) => client.MachineLearning.GetDatafeeds(r),\n\t\t\t(client, r) => client.MachineLearning.GetDatafeedsAsync(r)\n\t\t);\n\n\t\tprotected override void ExpectResponse(GetDatafeedsResponse response)\n\t\t{\n\t\t\tresponse.ShouldBeValid();\n\t\t\tresponse.Count.Should().BeGreaterOrEqualTo(1);\n\n\t\t\tvar firstDatafeed = response.Datafeeds.FirstOrDefault();\n\n\t\t\tfirstDatafeed.Should().NotBeNull();\n\t\t\tfirstDatafeed.DatafeedId.Should().NotBeNullOrWhiteSpace()\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class GetDatafeedsApiTests\n\t\t: MachineLearningIntegrationTestBase<GetDatafeedsResponse, IGetDatafeedsRequest, GetDatafeedsDescriptor, GetDatafeedsRequest>\n\t{\n\t\tpublic GetDatafeedsApiTests(MachineLearningCluster cluster, EndpointUsage usage) : base(cluster, usage) { }\n\n\t\tprotected override bool ExpectIsValid => true;\n\t\tprotected override object ExpectJson => null;\n\t\tprotected override int ExpectStatusCode => 200;\n\t\tprotected override Func<GetDatafeedsDescriptor, IGetDatafeedsRequest> Fluent => f => f;\n\t\tprotected override HttpMethod HttpMethod => HttpMethod.GET;\n\t\tprotected override string UrlPath => $\"_ml/datafeeds\";\n\n\t\tprotected override void IntegrationSetup(IElasticClient client, CallUniqueValues values)\n\t\t{\n\t\t\tforeach (var callUniqueValue in values)\n\t\t\t{\n\t\t\t\tPutJob(client, callUniqueValue.Value);\n\t\t\t\tPutDatafeed(client, callUniqueValue.Value);\n\t\t\t}\n\t\t}\n\n\t\tprotected override LazyResponses ClientUsage() => Calls(\n\t\t\t(client, f) => client.MachineLearning.GetDatafeeds(f),\n\t\t\t(client, f) => client.MachineLearning.GetDatafeedsAsync(f),\n\t\t\t(client, r) => client.MachineLearning.GetDatafeeds(r),\n\t\t\t(client, r) => client.MachineLearning.GetDatafeedsAsync(r)\n\t\t);\n\n\t\tprotected override void ExpectResponse(GetDatafeedsResponse response)\n\t\t{\n\t\t\tresponse.ShouldBeValid();\n\t\t\tresponse.Count.Should().BeGreaterOrEqualTo(1);\n\n\t\t\tvar firstDatafeed = response.Datafeeds.FirstOrDefault();\n\n\t\t\tfirstDatafeed.Should().NotBeNull();\n\t\t\tfirstDatafeed.DatafeedId.Should().NotBeNullOrWhiteSpace()\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public class AuthFailureEventArgs : EventArgs\n        {\n            public static new AuthFailureEventArgs Empty { get; } = new AuthFailureEventArgs(\"\");\n\n            public string Error { get; }\n\n            public AuthFailureEventArgs(string error)\n            {\n                Error = error;\n            }\n        }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public class AuthFailureEventArgs : EventArgs\n        {\n            public static new AuthFailureEventArgs Empty { get; } = new AuthFailureEventArgs(\"\");\n\n            public string Error { get; }\n\n            public AuthFailureEventArgs(string error)\n            {\n                Error = error;\n            }\n        }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option or rebuild the Visual Studio project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Web.Application.StronglyTypedResourceProxyBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class ContentLanguageSelectionNames {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal ContentLanguageSelectionNames() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option or rebuild the Visual Studio project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Web.Application.StronglyTypedResourceProxyBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class ContentLanguageSelectionNames {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal ContentLanguageSelectionNames() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        private class TagProducer : AbstractSingleDocumentTagProducer<IClassificationTag>\n        {\n            private readonly ClassificationTypeMap _typeMap;\n            private IEditorClassificationService _classificationService;\n\n            public TagProducer(ClassificationTypeMap typeMap)\n            {\n                _typeMap = typeMap;\n            }\n\n            public override async Task<IEnumerable<ITagSpan<IClassificationTag>>> ProduceTagsAsync(\n                Document document,\n                SnapshotSpan snapshotSpan,\n                int? caretPosition,\n                CancellationToken cancellationToken)\n            {\n                try\n                {\n                    var snapshot = snapshotSpan.Snapshot;\n                    if (document == null)\n                    {\n                        return SpecializedCollections.EmptyEnumerable<ITagSpan<IClassificationTag>>();\n                    }\n\n                    if (_classificationService == null)\n                    {\n                        _classificationService = document.Project.LanguageServices.GetService<IEditorClassificationService>();\n                    }\n\n                    if (_classificationService == null)\n                    {\n                        return SpecializedCollections.EmptyEnumerable<ITagSpan<IClassificationTag>>();\n                    }\n\n                    // we don't directly reference the semantic model here, we just keep it alive so \n                    // the classifica\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        private class TagProducer : AbstractSingleDocumentTagProducer<IClassificationTag>\n        {\n            private readonly ClassificationTypeMap _typeMap;\n            private IEditorClassificationService _classificationService;\n\n            public TagProducer(ClassificationTypeMap typeMap)\n            {\n                _typeMap = typeMap;\n            }\n\n            public override async Task<IEnumerable<ITagSpan<IClassificationTag>>> ProduceTagsAsync(\n                Document document,\n                SnapshotSpan snapshotSpan,\n                int? caretPosition,\n                CancellationToken cancellationToken)\n            {\n                try\n                {\n                    var snapshot = snapshotSpan.Snapshot;\n                    if (document == null)\n                    {\n                        return SpecializedCollections.EmptyEnumerable<ITagSpan<IClassificationTag>>();\n                    }\n\n                    if (_classificationService == null)\n                    {\n                        _classificationService = document.Project.LanguageServices.GetService<IEditorClassificationService>();\n                    }\n\n                    if (_classificationService == null)\n                    {\n                        return SpecializedCollections.EmptyEnumerable<ITagSpan<IClassificationTag>>();\n                    }\n\n                    // we don't directly reference the semantic model here, we just keep it alive so \n                    // the classifica\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Represents a <see cref=\"MethodCallExpression\"/> for the \n  /// <see cref=\"Queryable.All{TSource}(System.Linq.IQueryable{TSource},System.Linq.Expressions.Expression{System.Func{TSource,bool}})\"/> and\n  /// <see cref=\"Enumerable.All{TSource}(System.Collections.Generic.IEnumerable{TSource},System.Func{TSource,bool})\"/> methods.\n  /// It is generated by <see cref=\"ExpressionTreeParser\"/> when an <see cref=\"Expression\"/> tree is parsed.\n  /// When this node is used, it marks the beginning (i.e. the last node) of an <see cref=\"IExpressionNode\"/> chain that represents a query.\n  /// </summary>\n  public sealed class AllExpressionNode : ResultOperatorExpressionNodeBase\n  {\n    public static IEnumerable<MethodInfo> GetSupportedMethods()\n    {\n      return ReflectionUtility.EnumerableAndQueryableMethods.WhereNameMatches (\"All\");\n    }\n\n    private readonly ResolvedExpressionCache<Expression> _cachedPredicate;\n    private readonly LambdaExpression _predicate;\n\n    public AllExpressionNode (MethodCallExpressionParseInfo parseInfo, LambdaExpression predicate)\n        : base (parseInfo, null, null)\n    {\n      ArgumentUtility.CheckNotNull (\"predicate\", predicate);\n\n      _predicate = predicate;\n      _cachedPredicate = new ResolvedExpressionCache<Expression> (this);\n    }\n\n    public LambdaExpression Predicate\n    {\n      get { return _predicate; }\n    }\n\n    public Expression GetResolvedPredicate (ClauseGenerationContext clauseGenerationContext)\n    {\n      return _ca\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  /// <summary>\n  /// Represents a <see cref=\"MethodCallExpression\"/> for the \n  /// <see cref=\"Queryable.All{TSource}(System.Linq.IQueryable{TSource},System.Linq.Expressions.Expression{System.Func{TSource,bool}})\"/> and\n  /// <see cref=\"Enumerable.All{TSource}(System.Collections.Generic.IEnumerable{TSource},System.Func{TSource,bool})\"/> methods.\n  /// It is generated by <see cref=\"ExpressionTreeParser\"/> when an <see cref=\"Expression\"/> tree is parsed.\n  /// When this node is used, it marks the beginning (i.e. the last node) of an <see cref=\"IExpressionNode\"/> chain that represents a query.\n  /// </summary>\n  public sealed class AllExpressionNode : ResultOperatorExpressionNodeBase\n  {\n    public static IEnumerable<MethodInfo> GetSupportedMethods()\n    {\n      return ReflectionUtility.EnumerableAndQueryableMethods.WhereNameMatches (\"All\");\n    }\n\n    private readonly ResolvedExpressionCache<Expression> _cachedPredicate;\n    private readonly LambdaExpression _predicate;\n\n    public AllExpressionNode (MethodCallExpressionParseInfo parseInfo, LambdaExpression predicate)\n        : base (parseInfo, null, null)\n    {\n      ArgumentUtility.CheckNotNull (\"predicate\", predicate);\n\n      _predicate = predicate;\n      _cachedPredicate = new ResolvedExpressionCache<Expression> (this);\n    }\n\n    public LambdaExpression Predicate\n    {\n      get { return _predicate; }\n    }\n\n    public Expression GetResolvedPredicate (ClauseGenerationContext clauseGenerationContext)\n    {\n      return _ca\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class XmlSpawnerDefaults\n\t{\n\t\tpublic class DefaultEntry\n\t\t{\n\t\t\tpublic string AccountName;\n\t\t\tpublic string PlayerName;\n\t\t\tpublic TimeSpan MinDelay = TimeSpan.FromMinutes(5);\n\t\t\tpublic TimeSpan MaxDelay = TimeSpan.FromMinutes(10);\n\t\t\tpublic TimeSpan RefractMin = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan RefractMax = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan TODStart = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan TODEnd = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan Duration = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan DespawnTime = TimeSpan.FromHours(0);\n\t\t\tpublic bool Group = false;\n\t\t\tpublic int  Team = 0;\n\t\t\tpublic int ProximitySound = 0x1F4;\n\t\t\tpublic string SpeechTrigger = null;\n\t\t\tpublic string SkillTrigger = null;\n\t\t\tpublic int SequentialSpawn = -1;\n\t\t\tpublic bool HomeRangeIsRelative = true;\n\t\t\tpublic int SpawnRange = 5;\n\t\t\tpublic int HomeRange = 5;\n\t\t\tpublic int ProximityRange = -1;\n\t\t\tpublic XmlSpawner.TODModeType TODMode = XmlSpawner.TODModeType.Realtime;\n\t\t\tpublic int KillReset = 1;\n\t\t\tpublic string SpawnerName = \"Spawner\";\n\t\t\tpublic bool AllowGhostTrig = false;\n\t\t\tpublic bool AllowNPCTrig = false;\n\t\t\tpublic bool SpawnOnTrigger = false;\n\t\t\tpublic bool SmartSpawning = false;\n\t\t\tpublic bool ExternalTriggering = false;\n\t\t\tpublic string TriggerOnCarried = null;\n\t\t\tpublic string NoTriggerOnCarried = null;\n\t\t\tpublic string ProximityMsg = null;\n\t\t\tpublic double TriggerProbability = 1;\n\t\t\tpublic string PlayerTriggerProp = null;\n\t\t\tpublic string TriggerObjectProp \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class XmlSpawnerDefaults\n\t{\n\t\tpublic class DefaultEntry\n\t\t{\n\t\t\tpublic string AccountName;\n\t\t\tpublic string PlayerName;\n\t\t\tpublic TimeSpan MinDelay = TimeSpan.FromMinutes(5);\n\t\t\tpublic TimeSpan MaxDelay = TimeSpan.FromMinutes(10);\n\t\t\tpublic TimeSpan RefractMin = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan RefractMax = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan TODStart = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan TODEnd = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan Duration = TimeSpan.FromMinutes(0);\n\t\t\tpublic TimeSpan DespawnTime = TimeSpan.FromHours(0);\n\t\t\tpublic bool Group = false;\n\t\t\tpublic int  Team = 0;\n\t\t\tpublic int ProximitySound = 0x1F4;\n\t\t\tpublic string SpeechTrigger = null;\n\t\t\tpublic string SkillTrigger = null;\n\t\t\tpublic int SequentialSpawn = -1;\n\t\t\tpublic bool HomeRangeIsRelative = true;\n\t\t\tpublic int SpawnRange = 5;\n\t\t\tpublic int HomeRange = 5;\n\t\t\tpublic int ProximityRange = -1;\n\t\t\tpublic XmlSpawner.TODModeType TODMode = XmlSpawner.TODModeType.Realtime;\n\t\t\tpublic int KillReset = 1;\n\t\t\tpublic string SpawnerName = \"Spawner\";\n\t\t\tpublic bool AllowGhostTrig = false;\n\t\t\tpublic bool AllowNPCTrig = false;\n\t\t\tpublic bool SpawnOnTrigger = false;\n\t\t\tpublic bool SmartSpawning = false;\n\t\t\tpublic bool ExternalTriggering = false;\n\t\t\tpublic string TriggerOnCarried = null;\n\t\t\tpublic string NoTriggerOnCarried = null;\n\t\t\tpublic string ProximityMsg = null;\n\t\t\tpublic double TriggerProbability = 1;\n\t\t\tpublic string PlayerTriggerProp = null;\n\t\t\tpublic string TriggerObjectProp \nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///\n    /// </summary>\n    public partial class AssetManager : Rock.Migrations.RockMigration\n    {\n        /// <summary>\n        /// Operations to be performed during the upgrade process.\n        /// </summary>\n        public override void Up()\n        {\n            CreateTable(\n                \"dbo.AssetStorageSystem\",\n                c => new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        Name = c.String(nullable: false, maxLength: 50),\n                        Order = c.Int(nullable: false),\n                        EntityTypeId = c.Int(nullable: false),\n                        IsActive = c.Boolean(nullable: false),\n                        Description = c.String(),\n                        CreatedDateTime = c.DateTime(),\n                        ModifiedDateTime = c.DateTime(),\n                        CreatedByPersonAliasId = c.Int(),\n                        ModifiedByPersonAliasId = c.Int(),\n                        Guid = c.Guid(nullable: false),\n                        ForeignId = c.Int(),\n                        ForeignGuid = c.Guid(),\n                        ForeignKey = c.String(maxLength: 100),\n                    })\n                .PrimaryKey(t => t.Id)\n                .ForeignKey(\"dbo.PersonAlias\", t => t.CreatedByPersonAliasId)\n                .ForeignKey(\"dbo.EntityType\", t => t.EntityTypeId)\n                .ForeignKey(\"dbo.PersonAlias\", t => t.ModifiedByPersonAliasId)\n       \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///\n    /// </summary>\n    public partial class AssetManager : Rock.Migrations.RockMigration\n    {\n        /// <summary>\n        /// Operations to be performed during the upgrade process.\n        /// </summary>\n        public override void Up()\n        {\n            CreateTable(\n                \"dbo.AssetStorageSystem\",\n                c => new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        Name = c.String(nullable: false, maxLength: 50),\n                        Order = c.Int(nullable: false),\n                        EntityTypeId = c.Int(nullable: false),\n                        IsActive = c.Boolean(nullable: false),\n                        Description = c.String(),\n                        CreatedDateTime = c.DateTime(),\n                        ModifiedDateTime = c.DateTime(),\n                        CreatedByPersonAliasId = c.Int(),\n                        ModifiedByPersonAliasId = c.Int(),\n                        Guid = c.Guid(nullable: false),\n                        ForeignId = c.Int(),\n                        ForeignGuid = c.Guid(),\n                        ForeignKey = c.String(maxLength: 100),\n                    })\n                .PrimaryKey(t => t.Id)\n                .ForeignKey(\"dbo.PersonAlias\", t => t.CreatedByPersonAliasId)\n                .ForeignKey(\"dbo.EntityType\", t => t.EntityTypeId)\n                .ForeignKey(\"dbo.PersonAlias\", t => t.ModifiedByPersonAliasId)\n       \nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\n\n\t/// <summary>Represents a capability of a physical device.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpublic partial class DeviceCapability : Technology {\n\t}\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic interface PemObjectGenerator\n\t{\n\t\t/// <returns>\n\t\t/// A <see cref=\"PemObject\"/>\n\t\t/// </returns>\n\t\t/// <exception cref=\"PemGenerationException\"></exception>\n\t\tPemObject Generate();\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic interface PemObjectGenerator\n\t{\n\t\t/// <returns>\n\t\t/// A <see cref=\"PemObject\"/>\n\t\t/// </returns>\n\t\t/// <exception cref=\"PemGenerationException\"></exception>\n\t\tPemObject Generate();\n\t}\n\nAnswer: Ansswer: ComplexMethod"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class DummyAssassin : Dummy\n    {\n        [Constructable]\n        public DummyAssassin()\n            : base(AIType.AI_Melee, FightMode.Closest, 15, 1, 0.2, 0.6)\n        {\n            // A Dummy Hybrid Assassin\n            int iHue = 20 + this.Team * 40;\n            int jHue = 25 + this.Team * 40;\n\n            // Skills and Stats\n            this.InitStats(105, 105, 105);\n            this.Skills[SkillName.Magery].Base = 120;\n            this.Skills[SkillName.EvalInt].Base = 120;\n            this.Skills[SkillName.Swords].Base = 120;\n            this.Skills[SkillName.Tactics].Base = 120;\n            this.Skills[SkillName.Meditation].Base = 120;\n            this.Skills[SkillName.Poisoning].Base = 100;\n\n            // Name\n            this.Name = \"Hybrid Assassin\";\n\n            // Equip\n            Spellbook book = new Spellbook();\n            book.Movable = false;\n            book.LootType = LootType.Newbied;\n            book.Content = 0xFFFFFFFFFFFFFFFF;\n            this.AddToBackpack(book);\n\n            Katana kat = new Katana();\n            kat.Movable = false;\n            kat.LootType = LootType.Newbied;\n            kat.Crafter = this;\n            kat.Poison = Poison.Deadly;\n            kat.PoisonCharges = 12;\n            kat.Quality = WeaponQuality.Regular;\n            this.AddToBackpack(kat);\n\n            LeatherArms lea = new LeatherArms();\n            lea.Movable = false;\n            lea.LootType = LootType.Newbied;\n            lea.Crafter = this;\n            \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class DummyAssassin : Dummy\n    {\n        [Constructable]\n        public DummyAssassin()\n            : base(AIType.AI_Melee, FightMode.Closest, 15, 1, 0.2, 0.6)\n        {\n            // A Dummy Hybrid Assassin\n            int iHue = 20 + this.Team * 40;\n            int jHue = 25 + this.Team * 40;\n\n            // Skills and Stats\n            this.InitStats(105, 105, 105);\n            this.Skills[SkillName.Magery].Base = 120;\n            this.Skills[SkillName.EvalInt].Base = 120;\n            this.Skills[SkillName.Swords].Base = 120;\n            this.Skills[SkillName.Tactics].Base = 120;\n            this.Skills[SkillName.Meditation].Base = 120;\n            this.Skills[SkillName.Poisoning].Base = 100;\n\n            // Name\n            this.Name = \"Hybrid Assassin\";\n\n            // Equip\n            Spellbook book = new Spellbook();\n            book.Movable = false;\n            book.LootType = LootType.Newbied;\n            book.Content = 0xFFFFFFFFFFFFFFFF;\n            this.AddToBackpack(book);\n\n            Katana kat = new Katana();\n            kat.Movable = false;\n            kat.LootType = LootType.Newbied;\n            kat.Crafter = this;\n            kat.Poison = Poison.Deadly;\n            kat.PoisonCharges = 12;\n            kat.Quality = WeaponQuality.Regular;\n            this.AddToBackpack(kat);\n\n            LeatherArms lea = new LeatherArms();\n            lea.Movable = false;\n            lea.LootType = LootType.Newbied;\n            lea.Crafter = this;\n            \nAnswer: [Your Answer]\n]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interface for basic octree. Used to implement static octree and dynamic octree\n    /// </summary>\n    public interface IOctreeBasic\n    {\n        /// <summary>\n        /// Whether the tree has been built.\n        /// </summary>\n        bool TreeBuilt { get; }\n\n        /// <summary>\n        ///\n        /// </summary>\n        event EventHandler<EventArgs> Hit;\n\n        /// <summary>\n        /// Output the hit path of the tree traverse. Only for debugging\n        /// </summary>\n        IList<BoundingBox> HitPathBoundingBoxes { get; }\n\n        /// <summary>\n        /// Octree parameter\n        /// </summary>\n        OctreeBuildParameter Parameter { get; }\n\n        /// <summary>\n        /// Gets the bound.\n        /// </summary>\n        /// <value>\n        /// The bound.\n        /// </value>\n        BoundingBox Bound { get; }\n\n        /// <summary>\n        /// Build the static octree\n        /// </summary>\n        void BuildTree();\n\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <param name=\"model\"></param>\n        /// <param name=\"geometry\"></param>\n        /// <param name=\"modelMatrix\"></param>\n        /// <param name=\"rayWS\"></param>\n        /// <param name=\"hits\"></param>\n        /// <returns></returns>\n        bool HitTest(RenderContext context, object model, Geometry3D geometry, Matrix modelMatrix, Ray rayWS, ref List<HitTestResult> hits);\n\n        /// <summary>\n        ///\n        ///\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Interface for basic octree. Used to implement static octree and dynamic octree\n    /// </summary>\n    public interface IOctreeBasic\n    {\n        /// <summary>\n        /// Whether the tree has been built.\n        /// </summary>\n        bool TreeBuilt { get; }\n\n        /// <summary>\n        ///\n        /// </summary>\n        event EventHandler<EventArgs> Hit;\n\n        /// <summary>\n        /// Output the hit path of the tree traverse. Only for debugging\n        /// </summary>\n        IList<BoundingBox> HitPathBoundingBoxes { get; }\n\n        /// <summary>\n        /// Octree parameter\n        /// </summary>\n        OctreeBuildParameter Parameter { get; }\n\n        /// <summary>\n        /// Gets the bound.\n        /// </summary>\n        /// <value>\n        /// The bound.\n        /// </value>\n        BoundingBox Bound { get; }\n\n        /// <summary>\n        /// Build the static octree\n        /// </summary>\n        void BuildTree();\n\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <param name=\"model\"></param>\n        /// <param name=\"geometry\"></param>\n        /// <param name=\"modelMatrix\"></param>\n        /// <param name=\"rayWS\"></param>\n        /// <param name=\"hits\"></param>\n        /// <returns></returns>\n        bool HitTest(RenderContext context, object model, Geometry3D geometry, Matrix modelMatrix, Ray rayWS, ref List<HitTestResult> hits);\n\n        /// <summary>\n        ///\n        ///\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// The EyeTribe API compliance levels\n        /// </summary>\n        public enum ApiVersion\n        {\n            ///<summary>ApiVersion is undefined. GazeManager not activated</summary>\n            VERSION_UNDEFINED = 0,\n            VERSION_1_0 = 1\n        }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// The EyeTribe API compliance levels\n        /// </summary>\n        public enum ApiVersion\n        {\n            ///<summary>ApiVersion is undefined. GazeManager not activated</summary>\n            VERSION_UNDEFINED = 0,\n            VERSION_1_0 = 1\n        }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Base class of arguments for events pertaining to tabs exposed by an ITabProvider.\n\t/// </summary>\n\tpublic class TabEventArgs : EventArgs\n\t{\n\t\tprivate readonly int _position;\n\n\t\t/// <summary>\n\t\t/// Gets the position of the tab that's changed\n\t\t/// </summary>\n\t\tpublic int Position\n\t\t{\n\t\t\tget { return _position; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"TabEventArgs\"/> class.\n\t\t/// </summary>\n\t\t/// <param name=\"position\">The position.</param>\n\t\tpublic TabEventArgs(int position)\n\t\t{\n\t\t\t_position = position;\n\t\t}\n\t}\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Base class of arguments for events pertaining to tabs exposed by an ITabProvider.\n\t/// </summary>\n\tpublic class TabEventArgs : EventArgs\n\t{\n\t\tprivate readonly int _position;\n\n\t\t/// <summary>\n\t\t/// Gets the position of the tab that's changed\n\t\t/// </summary>\n\t\tpublic int Position\n\t\t{\n\t\t\tget { return _position; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"TabEventArgs\"/> class.\n\t\t/// </summary>\n\t\t/// <param name=\"position\">The position.</param>\n\t\tpublic TabEventArgs(int position)\n\t\t{\n\t\t\t_position = position;\n\t\t}\n\t}\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>A page of <a\n\t/// href='TrafficForecastAdjustmentDto'>TrafficForecastAdjustmentDto</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class TrafficForecastAdjustmentPage {\n\t\tprivate int totalResultSetSizeField;\n\n\t\tprivate bool totalResultSetSizeFieldSpecified;\n\n\t\tprivate int startIndexField;\n\n\t\tprivate bool startIndexFieldSpecified;\n\n\t\tprivate TrafficForecastAdjustment[] resultsField;\n\n\t\t/// <summary>The size of the total result set to which this page belongs.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic int totalResultSetSize {\n\t\t\tget {\n\t\t\t\treturn this.totalResultSetSizeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.totalResultSetSizeField = value;\n\t\t\t\tthis.totalResultSetSizeSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see\n\t\t/// cref=\"totalResultSetSize\" />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool totalResultSetSizeSpecified {\n\t\t\tget {\n\t\t\t\treturn this.totalResultSetSizeFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.totalResultSetSizeFieldSpecified = value;\n\t\t\t}\n\t\t}\n\n\t\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>A page of <a\n\t/// href='TrafficForecastAdjustmentDto'>TrafficForecastAdjustmentDto</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class TrafficForecastAdjustmentPage {\n\t\tprivate int totalResultSetSizeField;\n\n\t\tprivate bool totalResultSetSizeFieldSpecified;\n\n\t\tprivate int startIndexField;\n\n\t\tprivate bool startIndexFieldSpecified;\n\n\t\tprivate TrafficForecastAdjustment[] resultsField;\n\n\t\t/// <summary>The size of the total result set to which this page belongs.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic int totalResultSetSize {\n\t\t\tget {\n\t\t\t\treturn this.totalResultSetSizeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.totalResultSetSizeField = value;\n\t\t\t\tthis.totalResultSetSizeSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see\n\t\t/// cref=\"totalResultSetSize\" />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool totalResultSetSizeSpecified {\n\t\t\tget {\n\t\t\t\treturn this.totalResultSetSizeFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.totalResultSetSizeFieldSpecified = value;\n\t\t\t}\n\t\t}\n\n\t\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class OptionalValidity\n        : Asn1Encodable\n    {\n        private readonly Time notBefore;\n        private readonly Time notAfter;\n\n        private OptionalValidity(Asn1Sequence seq)\n        {\n            foreach (Asn1TaggedObject tObj in seq)\n            {\n                if (tObj.TagNo == 0)\n                {\n                    notBefore = Time.GetInstance(tObj, true);\n                }\n                else\n                {\n                    notAfter = Time.GetInstance(tObj, true);\n                }\n            }\n        }\n\n        public static OptionalValidity GetInstance(object obj)\n        {\n            if (obj == null || obj is OptionalValidity)\n                return (OptionalValidity)obj;\n\n            return new OptionalValidity(Asn1Sequence.GetInstance(obj));\n        }\n\n        public virtual Time NotBefore\n        {\n            get { return notBefore; }\n        }\n\n        public virtual Time NotAfter\n        {\n            get { return notAfter; }\n        }\n\n        /**\n         * <pre>\n         * OptionalValidity ::= SEQUENCE {\n         *                        notBefore  [0] Time OPTIONAL,\n         *                        notAfter   [1] Time OPTIONAL } --at least one MUST be present\n         * </pre>\n         * @return a basic ASN.1 object representation.\n         */\n        public override Asn1Object ToAsn1Object()\n        {\n            Asn1EncodableVector v = new Asn1EncodableVector();\n\n            if (notBefore != null)\n            {\n        \nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "[None]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class OptionalValidity\n        : Asn1Encodable\n    {\n        private readonly Time notBefore;\n        private readonly Time notAfter;\n\n        private OptionalValidity(Asn1Sequence seq)\n        {\n            foreach (Asn1TaggedObject tObj in seq)\n            {\n                if (tObj.TagNo == 0)\n                {\n                    notBefore = Time.GetInstance(tObj, true);\n                }\n                else\n                {\n                    notAfter = Time.GetInstance(tObj, true);\n                }\n            }\n        }\n\n        public static OptionalValidity GetInstance(object obj)\n        {\n            if (obj == null || obj is OptionalValidity)\n                return (OptionalValidity)obj;\n\n            return new OptionalValidity(Asn1Sequence.GetInstance(obj));\n        }\n\n        public virtual Time NotBefore\n        {\n            get { return notBefore; }\n        }\n\n        public virtual Time NotAfter\n        {\n            get { return notAfter; }\n        }\n\n        /**\n         * <pre>\n         * OptionalValidity ::= SEQUENCE {\n         *                        notBefore  [0] Time OPTIONAL,\n         *                        notAfter   [1] Time OPTIONAL } --at least one MUST be present\n         * </pre>\n         * @return a basic ASN.1 object representation.\n         */\n        public override Asn1Object ToAsn1Object()\n        {\n            Asn1EncodableVector v = new Asn1EncodableVector();\n\n            if (notBefore != null)\n            {\n        \nAnswer: [None]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class FailedJobDto\n    {\n        public FailedJobDto()\n        {\n            InFailedState = true;\n        }\n\n        public Job Job { get; set; }\n        public string Reason { get; set; }\n        public DateTime? FailedAt { get; set; }\n        public string ExceptionType { get; set; }\n        public string ExceptionMessage { get; set; }\n        public string ExceptionDetails { get; set; }\n        public bool InFailedState { get; set; }\n    }\n\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class FailedJobDto\n    {\n        public FailedJobDto()\n        {\n            InFailedState = true;\n        }\n\n        public Job Job { get; set; }\n        public string Reason { get; set; }\n        public DateTime? FailedAt { get; set; }\n        public string ExceptionType { get; set; }\n        public string ExceptionMessage { get; set; }\n        public string ExceptionDetails { get; set; }\n        public bool InFailedState { get; set; }\n    }\n\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic static class Vector3FloatEx\n\t{\n\t\t#region Static\n\n\t\t#region Add\n\n\t\t/// <summary>\n\t\t/// Adds two vectors.\n\t\t/// </summary>\n\t\t/// <param name=\"a\">Left operand.</param>\n\t\t/// <param name=\"b\">Right operand.</param>\n\t\t/// <returns>Result of operation.</returns>\n\t\tpublic static Vector3Float Add(Vector3Float a, Vector3Float b)\n\t\t{\n\t\t\tAdd(ref a, ref b, out a);\n\t\t\treturn a;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Adds two vectors.\n\t\t/// </summary>\n\t\t/// <param name=\"a\">Left operand.</param>\n\t\t/// <param name=\"b\">Right operand.</param>\n\t\t/// <param name=\"result\">Result of operation.</param>\n\t\tpublic static void Add(ref Vector3Float a, ref Vector3Float b, out Vector3Float result)\n\t\t{\n\t\t\tresult = new Vector3Float(a.X + b.X, a.Y + b.Y, a.Z + b.Z);\n\t\t}\n\n\t\t#endregion Add\n\n\t\t#region Subtract\n\n\t\t/// <summary>\n\t\t/// Subtract one Vector from another\n\t\t/// </summary>\n\t\t/// <param name=\"a\">First operand</param>\n\t\t/// <param name=\"b\">Second operand</param>\n\t\t/// <returns>Result of subtraction</returns>\n\t\tpublic static Vector3Float Subtract(Vector3Float a, Vector3Float b)\n\t\t{\n\t\t\tSubtract(ref a, ref b, out a);\n\t\t\treturn a;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Subtract one Vector from another\n\t\t/// </summary>\n\t\t/// <param name=\"a\">First operand</param>\n\t\t/// <param name=\"b\">Second operand</param>\n\t\t/// <param name=\"result\">Result of subtraction</param>\n\t\tpublic static void Subtract(ref Vector3Float a, ref Vector3Float b, out Vector3Float result)\n\t\t{\n\t\t\tresult = new Vector3Float(a.X - b.X, a.Y - b.Y, a.Z - b.Z);\n\t\t}\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic static class Vector3FloatEx\n\t{\n\t\t#region Static\n\n\t\t#region Add\n\n\t\t/// <summary>\n\t\t/// Adds two vectors.\n\t\t/// </summary>\n\t\t/// <param name=\"a\">Left operand.</param>\n\t\t/// <param name=\"b\">Right operand.</param>\n\t\t/// <returns>Result of operation.</returns>\n\t\tpublic static Vector3Float Add(Vector3Float a, Vector3Float b)\n\t\t{\n\t\t\tAdd(ref a, ref b, out a);\n\t\t\treturn a;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Adds two vectors.\n\t\t/// </summary>\n\t\t/// <param name=\"a\">Left operand.</param>\n\t\t/// <param name=\"b\">Right operand.</param>\n\t\t/// <param name=\"result\">Result of operation.</param>\n\t\tpublic static void Add(ref Vector3Float a, ref Vector3Float b, out Vector3Float result)\n\t\t{\n\t\t\tresult = new Vector3Float(a.X + b.X, a.Y + b.Y, a.Z + b.Z);\n\t\t}\n\n\t\t#endregion Add\n\n\t\t#region Subtract\n\n\t\t/// <summary>\n\t\t/// Subtract one Vector from another\n\t\t/// </summary>\n\t\t/// <param name=\"a\">First operand</param>\n\t\t/// <param name=\"b\">Second operand</param>\n\t\t/// <returns>Result of subtraction</returns>\n\t\tpublic static Vector3Float Subtract(Vector3Float a, Vector3Float b)\n\t\t{\n\t\t\tSubtract(ref a, ref b, out a);\n\t\t\treturn a;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Subtract one Vector from another\n\t\t/// </summary>\n\t\t/// <param name=\"a\">First operand</param>\n\t\t/// <param name=\"b\">Second operand</param>\n\t\t/// <param name=\"result\">Result of subtraction</param>\n\t\tpublic static void Subtract(ref Vector3Float a, ref Vector3Float b, out Vector3Float result)\n\t\t{\n\t\t\tresult = new Vector3Float(a.X - b.X, a.Y - b.Y, a.Z - b.Z);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateContentBundles : ContentBundleAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateContentBundles : ContentBundleAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpubli\nAnswer:",
    "expected": "FeatureEnvy_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateContentBundles : ContentBundleAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateContentBundles : ContentBundleAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='ContentBundle'>ContentBundle</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpubli\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic void UnwrapEnumBinOp(Expression expr1uncast, ref Expression expr1, ref Expression expr2)\n        {\n            var expr1nonnullableType = expr1uncast.Type.AvoidNullability();\n            var expr2nonnullableType = expr2.Type.AvoidNullability();\n            if (expr1nonnullableType.GetTypeInfo().IsEnum\n                && expr1nonnullableType.GetTypeInfo().GetEnumUnderlyingType() == expr2nonnullableType\n                || expr1nonnullableType == typeof(char) && expr2nonnullableType == typeof(int)\n            ) {\n                expr1 = expr1uncast;\n\n                if (expr2.NodeType == ExpressionType.Constant) {\n                    var value = ((ConstantExpression)expr2).Value;\n                    if (value == null) {\n                        expr2 = Expression.Default(expr1uncast.Type.EnusureNullability());\n                    } else if (expr1nonnullableType == typeof(char)) {\n                        expr2 = Expression.Constant((char)(int)value);\n                    } else {\n                        expr2 = Expression.Constant(Enum.ToObject(expr1nonnullableType, value));\n                    }\n                } else {\n                    expr2 = Expression.Convert(expr2, expr1uncast.Type);\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic void UnwrapEnumBinOp(Expression expr1uncast, ref Expression expr1, ref Expression expr2)\n        {\n            var expr1nonnullableType = expr1uncast.Type.AvoidNullability();\n            var expr2nonnullableType = expr2.Type.AvoidNullability();\n            if (expr1nonnullableType.GetTypeInfo().IsEnum\n                && expr1nonnullableType.GetTypeInfo().GetEnumUnderlyingType() == expr2nonnullableType\n                || expr1nonnullableType == typeof(char) && expr2nonnullableType == typeof(int)\n            ) {\n                expr1 = expr1uncast;\n\n                if (expr2.NodeType == ExpressionType.Constant) {\n                    var value = ((ConstantExpression)expr2).Value;\n                    if (value == null) {\n                        expr2 = Expression.Default(expr1uncast.Type.EnusureNullability());\n                    } else if (expr1nonnullableType == typeof(char)) {\n                        expr2 = Expression.Constant((char)(int)value);\n                    } else {\n                        expr2 = Expression.Constant(Enum.ToObject(expr1nonnullableType, value));\n                    }\n                } else {\n                    expr2 = Expression.Convert(expr2, expr1uncast.Type);\n                }\n            }\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool EmitMultFunc(FuncNode funcNode)\n\t\t{\n\t\t\tMathFuncNode firstItem = null;\n\n\t\t\tfirstItem = funcNode.Children.FirstOrDefault(node =>\n\t\t\t{\n\t\t\t\tvar func = node as FuncNode;\n\t\t\t\treturn !(func != null && FuncNodes[func].Count == 1 && func.FunctionType == KnownFuncType.Pow && func.Children[1].LessThenZero());\n\t\t\t});\n\n\t\t\tif (firstItem == null)\n\t\t\t\tfirstItem = funcNode.Children[0];\n\n\t\t\tEmitNode(firstItem);\n\n\t\t\tfor (int i = 0; i < funcNode.Children.Count; i++)\n\t\t\t{\n\t\t\t\tif (funcNode.Children[i] == firstItem)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar func = funcNode.Children[i] as FuncNode;\n\n\t\t\t\tif (func != null && FuncNodes[func].Count == 1 && func.FunctionType == KnownFuncType.Pow && func.Children[1].LessThenZero())\n\t\t\t\t{\n\t\t\t\t\tEmitNode(funcNode.Children[i], true);\n\t\t\t\t\tIlInstructions.Add(new OpCodeArg(OpCodes.Div));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tEmitNode(funcNode.Children[i]);\n\t\t\t\t\tif (IlInstructions[IlInstructions.Count - 1].OpCode == OpCodes.Ldc_R8 && (double)IlInstructions[IlInstructions.Count - 1].Arg == 1.0)\n\t\t\t\t\t\tIlInstructions.RemoveAt(IlInstructions.Count - 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tIlInstructions.Add(new OpCodeArg(OpCodes.Mul));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool EmitMultFunc(FuncNode funcNode)\n\t\t{\n\t\t\tMathFuncNode firstItem = null;\n\n\t\t\tfirstItem = funcNode.Children.FirstOrDefault(node =>\n\t\t\t{\n\t\t\t\tvar func = node as FuncNode;\n\t\t\t\treturn !(func != null && FuncNodes[func].Count == 1 && func.FunctionType == KnownFuncType.Pow && func.Children[1].LessThenZero());\n\t\t\t});\n\n\t\t\tif (firstItem == null)\n\t\t\t\tfirstItem = funcNode.Children[0];\n\n\t\t\tEmitNode(firstItem);\n\n\t\t\tfor (int i = 0; i < funcNode.Children.Count; i++)\n\t\t\t{\n\t\t\t\tif (funcNode.Children[i] == firstItem)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar func = funcNode.Children[i] as FuncNode;\n\n\t\t\t\tif (func != null && FuncNodes[func].Count == 1 && func.FunctionType == KnownFuncType.Pow && func.Children[1].LessThenZero())\n\t\t\t\t{\n\t\t\t\t\tEmitNode(funcNode.Children[i], true);\n\t\t\t\t\tIlInstructions.Add(new OpCodeArg(OpCodes.Div));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tEmitNode(funcNode.Children[i]);\n\t\t\t\t\tif (IlInstructions[IlInstructions.Count - 1].OpCode == OpCodes.Ldc_R8 && (double)IlInstructions[IlInstructions.Count - 1].Arg == 1.0)\n\t\t\t\t\t\tIlInstructions.RemoveAt(IlInstructions.Count - 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tIlInstructions.Add(new OpCodeArg(OpCodes.Mul));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Private methods\n\n        private bool IsDigitChar(char input)\n        {\n            if (input == '-' || input == '+' || input == '0' || input == '1' || input == '2' || input == '3' || input == '4' || input == '5' || input == '6' || input == '7' || input == '8' || input == '9' || input == '.')\n            {\n                return true;\n            }\n            else { return false; }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Private methods\n\n        private bool IsDigitChar(char input)\n        {\n            if (input == '-' || input == '+' || input == '0' || input == '1' || input == '2' || input == '3' || input == '4' || input == '5' || input == '6' || input == '7' || input == '8' || input == '9' || input == '.')\n            {\n                return true;\n            }\n            else { return false; }\n        }\nAnswer: __________\n\nThe answer should"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DDCfilesDgw_DragDrop(object sender, DragEventArgs e)\n        {\n            if (e.Data.GetDataPresent(DataFormats.FileDrop))\n            {\n                string[] filePaths = (string[])e.Data.GetData(DataFormats.FileDrop);\n\n                foreach (var filePath in filePaths)\n                {\n                    if (!(Path.GetExtension(filePath) == \".xml\" ||\n                          Path.GetExtension(filePath) == \".dat\" ||\n                          Path.GetExtension(filePath) == \".psarc\" ||\n                          Path.GetExtension(filePath) == \"\" ||\n                          Path.GetExtension(filePath) == \".edat\"))\n                        continue;\n\n                    if (filePath.EndsWith(\"_showlights.xml\") ||\n                        filePath.EndsWith(\".dlc.xml\") ||\n                        filePath.StartsWith(\"DDC_\"))\n                        continue;\n\n                    if (!FilesDb.ContainsValue(filePath))\n                        FilesDb.Add(Path.GetFileNameWithoutExtension(filePath), filePath);\n                }\n\n                FillDB();\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DDCfilesDgw_DragDrop(object sender, DragEventArgs e)\n        {\n            if (e.Data.GetDataPresent(DataFormats.FileDrop))\n            {\n                string[] filePaths = (string[])e.Data.GetData(DataFormats.FileDrop);\n\n                foreach (var filePath in filePaths)\n                {\n                    if (!(Path.GetExtension(filePath) == \".xml\" ||\n                          Path.GetExtension(filePath) == \".dat\" ||\n                          Path.GetExtension(filePath) == \".psarc\" ||\n                          Path.GetExtension(filePath) == \"\" ||\n                          Path.GetExtension(filePath) == \".edat\"))\n                        continue;\n\n                    if (filePath.EndsWith(\"_showlights.xml\") ||\n                        filePath.EndsWith(\".dlc.xml\") ||\n                        filePath.StartsWith(\"DDC_\"))\n                        continue;\n\n                    if (!FilesDb.ContainsValue(filePath))\n                        FilesDb.Add(Path.GetFileNameWithoutExtension(filePath), filePath);\n                }\n\n                FillDB();\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal unsafe static string GetNonStringValue(char* ptr, ref int index) {\n\t\t\tchar current = '\\0';\n\t\t\tint startIndex = -1;\n\t\t\tstring value = string.Empty;\n\t\t\tint indexDiff = 0;\n\n\t\t\twhile (true) {\n\t\t\t\tcurrent = ptr[index];\n\t\t\t\tif (startIndex > -1) {\n\t\t\t\t\tswitch (current) {\n\t\t\t\t\t\tcase '\\n':\n\t\t\t\t\t\tcase '\\r':\n\t\t\t\t\t\tcase '\\t':\n\t\t\t\t\t\tcase ' ':\n\t\t\t\t\t\t\t++indexDiff;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (current != ' ' && current != ':') {\n\t\t\t\t\tif (startIndex == -1)\n\t\t\t\t\t\tstartIndex = index;\n\t\t\t\t\tif (current == ',' || current == ']' || current == '}' || current == '\\0') {\n\t\t\t\t\t\tvalue = new string(ptr, startIndex, index - startIndex - indexDiff);\n\t\t\t\t\t\t--index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 't') {\n\t\t\t\t\t\tindex += 4;\n\t\t\t\t\t\treturn \"true\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 'f') {\n\t\t\t\t\t\tindex += 5;\n\t\t\t\t\t\treturn \"false\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 'n') {\n\t\t\t\t\t\tindex += 4;\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n                    else if(!(((int)current) >= 48 && ((int)current) <= 57) && current != '-')\n                    {\n                        value = new string(ptr, startIndex, index - startIndex - indexDiff);\n                        --index;\n                        break;\n                    }\n\t\t\t\t}\n\t\t\t\t++index;\n\t\t\t}\n\t\t\tif (value == \"null\")\n\t\t\t\treturn null;\n\t\t\treturn value;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal unsafe static string GetNonStringValue(char* ptr, ref int index) {\n\t\t\tchar current = '\\0';\n\t\t\tint startIndex = -1;\n\t\t\tstring value = string.Empty;\n\t\t\tint indexDiff = 0;\n\n\t\t\twhile (true) {\n\t\t\t\tcurrent = ptr[index];\n\t\t\t\tif (startIndex > -1) {\n\t\t\t\t\tswitch (current) {\n\t\t\t\t\t\tcase '\\n':\n\t\t\t\t\t\tcase '\\r':\n\t\t\t\t\t\tcase '\\t':\n\t\t\t\t\t\tcase ' ':\n\t\t\t\t\t\t\t++indexDiff;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (current != ' ' && current != ':') {\n\t\t\t\t\tif (startIndex == -1)\n\t\t\t\t\t\tstartIndex = index;\n\t\t\t\t\tif (current == ',' || current == ']' || current == '}' || current == '\\0') {\n\t\t\t\t\t\tvalue = new string(ptr, startIndex, index - startIndex - indexDiff);\n\t\t\t\t\t\t--index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 't') {\n\t\t\t\t\t\tindex += 4;\n\t\t\t\t\t\treturn \"true\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 'f') {\n\t\t\t\t\t\tindex += 5;\n\t\t\t\t\t\treturn \"false\";\n\t\t\t\t\t}\n\t\t\t\t\telse if (current == 'n') {\n\t\t\t\t\t\tindex += 4;\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n                    else if(!(((int)current) >= 48 && ((int)current) <= 57) && current != '-')\n                    {\n                        value = new string(ptr, startIndex, index - startIndex - indexDiff);\n                        --index;\n                        break;\n                    }\n\t\t\t\t}\n\t\t\t\t++index;\n\t\t\t}\n\t\t\tif (value == \"null\")\n\t\t\t\treturn null;\n\t\t\treturn value;\n\t\t}\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Settings_SettingChanged(object sender, StringEventArgs stringEvent)\n\t\t{\n\t\t\tif (stringEvent.Data == SettingsKey.bed_size\n\t\t\t\t|| stringEvent.Data == SettingsKey.print_center\n\t\t\t\t|| stringEvent.Data == SettingsKey.build_height\n\t\t\t\t|| stringEvent.Data == SettingsKey.bed_shape)\n\t\t\t{\n\t\t\t\tthis.CalculateBounds();\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void Settings_SettingChanged(object sender, StringEventArgs stringEvent)\n\t\t{\n\t\t\tif (stringEvent.Data == SettingsKey.bed_size\n\t\t\t\t|| stringEvent.Data == SettingsKey.print_center\n\t\t\t\t|| stringEvent.Data == SettingsKey.build_height\n\t\t\t\t|| stringEvent.Data == SettingsKey.bed_shape)\n\t\t\t{\n\t\t\t\tthis.CalculateBounds();\n\t\t\t}\n\t\t}\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override fsResult TryDeserialize(fsData storage, ref object instance, Type storageType) {\n            var result = fsResult.Success;\n\n            if (UseBool(storageType)) {\n                if ((result += CheckType(storage, fsDataType.Boolean)).Succeeded) {\n                    instance = storage.AsBool;\n                }\n                return result;\n            }\n\n            if (UseDouble(storageType) || UseInt64(storageType)) {\n                if (storage.IsDouble) {\n                    instance = Convert.ChangeType(storage.AsDouble, storageType);\n                }\n                else if (storage.IsInt64) {\n                    instance = Convert.ChangeType(storage.AsInt64, storageType);\n                }\n                else if (Serializer.Config.Serialize64BitIntegerAsString && storage.IsString &&\n                    (storageType == typeof(Int64) || storageType == typeof(UInt64))) {\n                    instance = Convert.ChangeType(storage.AsString, storageType);\n                }\n                else {\n                    return fsResult.Fail(GetType().Name + \" expected number but got \" + storage.Type + \" in \" + storage);\n                }\n                return fsResult.Success;\n            }\n\n            if (UseString(storageType)) {\n                if ((result += CheckType(storage, fsDataType.String)).Succeeded) {\n                    instance = storage.AsString;\n                }\n                return result;\n            }\n\n            return fsResult.Fail(G\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override fsResult TryDeserialize(fsData storage, ref object instance, Type storageType) {\n            var result = fsResult.Success;\n\n            if (UseBool(storageType)) {\n                if ((result += CheckType(storage, fsDataType.Boolean)).Succeeded) {\n                    instance = storage.AsBool;\n                }\n                return result;\n            }\n\n            if (UseDouble(storageType) || UseInt64(storageType)) {\n                if (storage.IsDouble) {\n                    instance = Convert.ChangeType(storage.AsDouble, storageType);\n                }\n                else if (storage.IsInt64) {\n                    instance = Convert.ChangeType(storage.AsInt64, storageType);\n                }\n                else if (Serializer.Config.Serialize64BitIntegerAsString && storage.IsString &&\n                    (storageType == typeof(Int64) || storageType == typeof(UInt64))) {\n                    instance = Convert.ChangeType(storage.AsString, storageType);\n                }\n                else {\n                    return fsResult.Fail(GetType().Name + \" expected number but got \" + storage.Type + \" in \" + storage);\n                }\n                return fsResult.Success;\n            }\n\n            if (UseString(storageType)) {\n                if ((result += CheckType(storage, fsDataType.String)).Succeeded) {\n                    instance = storage.AsString;\n                }\n                return result;\n            }\n\n            return fsResult.Fail(G\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ToxAv_OnCallStateChanged(object sender, ToxAvEventArgs.CallStateEventArgs e)\n        {\n            var state = CallState.InProgress;\n\n            if ((e.State & ToxAvFriendCallState.Finished) != 0 || (e.State & ToxAvFriendCallState.Error) != 0)\n            {\n                if (_callInfo != null)\n                {\n                    _callInfo.Dispose();\n                    _callInfo = null;\n                }\n\n                state = CallState.None;\n            }\n            else if ((e.State & ToxAvFriendCallState.ReceivingAudio) != 0 ||\n                (e.State & ToxAvFriendCallState.ReceivingVideo) != 0 ||\n                (e.State & ToxAvFriendCallState.SendingAudio) != 0 ||\n                (e.State & ToxAvFriendCallState.SendingVideo) != 0)\n            {\n                //start sending whatever from here\n                if (_callInfo.AudioEngine != null)\n                {\n                    if (!_callInfo.AudioEngine.IsRecording)\n                        _callInfo.AudioEngine.StartRecording();\n                }\n\n                if (_callInfo.VideoEngine != null)\n                {\n                    if (!_callInfo.VideoEngine.IsRecording)\n                        _callInfo.VideoEngine.StartRecording();\n                }\n\n                if (e.State.HasFlag(ToxAvFriendCallState.SendingVideo))\n                    state |= CallState.SendingVideo;\n\n                if (_callInfo.VideoEngine != null)\n                    state |= CallState.ReceivingVideo;\n           \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void ToxAv_OnCallStateChanged(object sender, ToxAvEventArgs.CallStateEventArgs e)\n        {\n            var state = CallState.InProgress;\n\n            if ((e.State & ToxAvFriendCallState.Finished) != 0 || (e.State & ToxAvFriendCallState.Error) != 0)\n            {\n                if (_callInfo != null)\n                {\n                    _callInfo.Dispose();\n                    _callInfo = null;\n                }\n\n                state = CallState.None;\n            }\n            else if ((e.State & ToxAvFriendCallState.ReceivingAudio) != 0 ||\n                (e.State & ToxAvFriendCallState.ReceivingVideo) != 0 ||\n                (e.State & ToxAvFriendCallState.SendingAudio) != 0 ||\n                (e.State & ToxAvFriendCallState.SendingVideo) != 0)\n            {\n                //start sending whatever from here\n                if (_callInfo.AudioEngine != null)\n                {\n                    if (!_callInfo.AudioEngine.IsRecording)\n                        _callInfo.AudioEngine.StartRecording();\n                }\n\n                if (_callInfo.VideoEngine != null)\n                {\n                    if (!_callInfo.VideoEngine.IsRecording)\n                        _callInfo.VideoEngine.StartRecording();\n                }\n\n                if (e.State.HasFlag(ToxAvFriendCallState.SendingVideo))\n                    state |= CallState.SendingVideo;\n\n                if (_callInfo.VideoEngine != null)\n                    state |= CallState.ReceivingVideo;\n           \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void OnGameSceneLoad(GameScenes gameScene)\n        {\n            if (deferVesselCreation && (gameScene == GameScenes.FLIGHT || gameScene == GameScenes.TRACKSTATION || gameScene == GameScenes.EDITOR))\n            {\n                if (CreateVessels())\n                {\n                    // After the vessels are created, save the game again so we don't lose our changes\n                    GamePersistence.SaveGame(\"persistent\", HighLogic.SaveFolder, SaveMode.OVERWRITE);\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void OnGameSceneLoad(GameScenes gameScene)\n        {\n            if (deferVesselCreation && (gameScene == GameScenes.FLIGHT || gameScene == GameScenes.TRACKSTATION || gameScene == GameScenes.EDITOR))\n            {\n                if (CreateVessels())\n                {\n                    // After the vessels are created, save the game again so we don't lose our changes\n                    GamePersistence.SaveGame(\"persistent\", HighLogic.SaveFolder, SaveMode.OVERWRITE);\n                }\n            }\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbool DeflateStored(bool flush, bool finish)\n\t\t{\n\t\t\tif (!flush && (lookahead == 0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tstrstart += lookahead;\n\t\t\tlookahead = 0;\n\t\t\t\n\t\t\tint storedLength = strstart - blockStart;\n\t\t\t\n\t\t\tif ((storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full\n\t\t\t\t(blockStart < WSIZE && storedLength >= MAX_DIST) ||   // Block may move out of window\n\t\t\t\tflush) {\n\t\t\t\tbool lastBlock = finish;\n\t\t\t\tif (storedLength > DeflaterConstants.MAX_BLOCK_SIZE) {\n\t\t\t\t\tstoredLength = DeflaterConstants.MAX_BLOCK_SIZE;\n\t\t\t\t\tlastBlock = false;\n\t\t\t\t}\n\t\t\t\t\n#if DebugDeflation\n\t\t\t\tif (DeflaterConstants.DEBUGGING) \n\t\t\t\t{\n\t\t\t\t   Console.WriteLine(\"storedBlock[\" + storedLength + \",\" + lastBlock + \"]\");\n\t\t\t\t}\n#endif\n\n\t\t\t\thuffman.FlushStoredBlock(window, blockStart, storedLength, lastBlock);\n\t\t\t\tblockStart += storedLength;\n\t\t\t\treturn !lastBlock;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbool DeflateStored(bool flush, bool finish)\n\t\t{\n\t\t\tif (!flush && (lookahead == 0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tstrstart += lookahead;\n\t\t\tlookahead = 0;\n\t\t\t\n\t\t\tint storedLength = strstart - blockStart;\n\t\t\t\n\t\t\tif ((storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full\n\t\t\t\t(blockStart < WSIZE && storedLength >= MAX_DIST) ||   // Block may move out of window\n\t\t\t\tflush) {\n\t\t\t\tbool lastBlock = finish;\n\t\t\t\tif (storedLength > DeflaterConstants.MAX_BLOCK_SIZE) {\n\t\t\t\t\tstoredLength = DeflaterConstants.MAX_BLOCK_SIZE;\n\t\t\t\t\tlastBlock = false;\n\t\t\t\t}\n\t\t\t\t\n#if DebugDeflation\n\t\t\t\tif (DeflaterConstants.DEBUGGING) \n\t\t\t\t{\n\t\t\t\t   Console.WriteLine(\"storedBlock[\" + storedLength + \",\" + lastBlock + \"]\");\n\t\t\t\t}\n#endif\n\n\t\t\t\thuffman.FlushStoredBlock(window, blockStart, storedLength, lastBlock);\n\t\t\t\tblockStart += storedLength;\n\t\t\t\treturn !lastBlock;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic DeathmatchGump( DeathmatchGauntlet gauntlet, Mobile from ) : this( gauntlet, from, 0 )\n\t\t{\n\t\t}public DeathmatchGump( DeathmatchGauntlet gauntlet, Mobile from, int page ) : base( 20, 30 )\n\t\t{\n\n\t\t\tif(from == null || gauntlet == null || gauntlet.Deleted || gauntlet.Challenger == null) return;\n\n\t\t\tfrom.CloseGump(typeof(DeathmatchGump));\n\n\t\t\tm_gauntlet = gauntlet;\n\t\t\t\n\t\t\tviewpage = page;\n\n            int height = 520;\n\n\t\t\tAddBackground( 0, 0, 350, height, 0xDAC );\n\t\t\t//AddAlphaRegion( 0, 0, 340, height );\n\n\t\t\tAddLabel( 100, 10, 0, XmlPoints.GetText(from,200560));    // \"Deathmatch Challenge\"\n\t\t\tAddLabel( 20, 30, 0, String.Format(XmlPoints.GetText(from, 200501), gauntlet.Challenger.Name));  // \"Organized by: {0}\"\n\t\t\tAddLabel( 20, 50, 0, String.Format(XmlPoints.GetText(from, 200502), m_gauntlet.EntryFee));      // \"Entry Fee: {0}\"\n\t\t\tAddLabel( 20, 70, 0, String.Format(XmlPoints.GetText(from, 200503), m_gauntlet.ArenaSize)); // \"Arena Size: {0}\"\n\n\t\t\tAddImageTiled( 15, 130, 320, 20, 0xdb3 );\n\n\n\t\t\t// display all of the current team members\n\t\t\tif(gauntlet.Participants != null)\n\t\t\t{\n\t\t\t    // copy the master list to a temporary working list\n\t\t\t    m_WorkingList = (ArrayList)gauntlet.Participants.Clone();\n\n                AddLabel( 150, 50, 0, String.Format(XmlPoints.GetText(from, 200504), m_WorkingList.Count*m_gauntlet.EntryFee)); // \"Total Purse: {0}\"\n\n                AddLabel( 150, 70, 0, String.Format(XmlPoints.GetText(from, 200505), m_gauntlet.Location, m_gauntlet.Map));  // \"\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "{0}\"",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic DeathmatchGump( DeathmatchGauntlet gauntlet, Mobile from ) : this( gauntlet, from, 0 )\n\t\t{\n\t\t}public DeathmatchGump( DeathmatchGauntlet gauntlet, Mobile from, int page ) : base( 20, 30 )\n\t\t{\n\n\t\t\tif(from == null || gauntlet == null || gauntlet.Deleted || gauntlet.Challenger == null) return;\n\n\t\t\tfrom.CloseGump(typeof(DeathmatchGump));\n\n\t\t\tm_gauntlet = gauntlet;\n\t\t\t\n\t\t\tviewpage = page;\n\n            int height = 520;\n\n\t\t\tAddBackground( 0, 0, 350, height, 0xDAC );\n\t\t\t//AddAlphaRegion( 0, 0, 340, height );\n\n\t\t\tAddLabel( 100, 10, 0, XmlPoints.GetText(from,200560));    // \"Deathmatch Challenge\"\n\t\t\tAddLabel( 20, 30, 0, String.Format(XmlPoints.GetText(from, 200501), gauntlet.Challenger.Name));  // \"Organized by: {0}\"\n\t\t\tAddLabel( 20, 50, 0, String.Format(XmlPoints.GetText(from, 200502), m_gauntlet.EntryFee));      // \"Entry Fee: {0}\"\n\t\t\tAddLabel( 20, 70, 0, String.Format(XmlPoints.GetText(from, 200503), m_gauntlet.ArenaSize)); // \"Arena Size: {0}\"\n\n\t\t\tAddImageTiled( 15, 130, 320, 20, 0xdb3 );\n\n\n\t\t\t// display all of the current team members\n\t\t\tif(gauntlet.Participants != null)\n\t\t\t{\n\t\t\t    // copy the master list to a temporary working list\n\t\t\t    m_WorkingList = (ArrayList)gauntlet.Participants.Clone();\n\n                AddLabel( 150, 50, 0, String.Format(XmlPoints.GetText(from, 200504), m_WorkingList.Count*m_gauntlet.EntryFee)); // \"Total Purse: {0}\"\n\n                AddLabel( 150, 70, 0, String.Format(XmlPoints.GetText(from, 200505), m_gauntlet.Location, m_gauntlet.Map));  // \"\nAnswer: {0}\"\n                AddLabel"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic ToggleMiningStoneEntry(PlayerMobile mobile, bool valuestone, bool valuegem, int number)\n                : base(number)\n            {\n                this.m_Mobile = mobile;\n                this.m_Valuestone = valuestone;\n                this.m_Valuegem = valuegem;\n\n                bool stoneMining = (mobile.StoneMining && mobile.Skills[SkillName.Mining].Base >= 100.0);\n                bool gemMining = (mobile.GemMining && mobile.Skills[SkillName.Mining].Base >= 100.0);\n\n                if (valuestone && mobile.ToggleMiningStone == valuestone || (valuestone && !stoneMining))\n                    this.Flags |= CMEFlags.Disabled;\n                else if (valuegem && mobile.ToggleMiningGem == valuegem || (valuegem && !gemMining))\n                    this.Flags |= CMEFlags.Disabled;\n                else if (!valuestone && !valuegem && !mobile.ToggleMiningStone && !mobile.ToggleMiningGem)\n                    this.Flags |= CMEFlags.Disabled;\n            }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic ToggleMiningStoneEntry(PlayerMobile mobile, bool valuestone, bool valuegem, int number)\n                : base(number)\n            {\n                this.m_Mobile = mobile;\n                this.m_Valuestone = valuestone;\n                this.m_Valuegem = valuegem;\n\n                bool stoneMining = (mobile.StoneMining && mobile.Skills[SkillName.Mining].Base >= 100.0);\n                bool gemMining = (mobile.GemMining && mobile.Skills[SkillName.Mining].Base >= 100.0);\n\n                if (valuestone && mobile.ToggleMiningStone == valuestone || (valuestone && !stoneMining))\n                    this.Flags |= CMEFlags.Disabled;\n                else if (valuegem && mobile.ToggleMiningGem == valuegem || (valuegem && !gemMining))\n                    this.Flags |= CMEFlags.Disabled;\n                else if (!valuestone && !valuegem && !mobile.ToggleMiningStone && !mobile.ToggleMiningGem)\n                    this.Flags |= CMEFlags.Disabled;\n            }\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void CastBarRequestHandler(CastBarRequestEventArgs e)\n\t\t{\n\t\t\tif (e.User == null || e.User.Deleted || e.User.NetState == null || e.Gump != null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSpellCastBar cb;\n\n\t\t\tif (Instances.TryGetValue(e.User, out cb) && !cb.IsDisposed)\n\t\t\t{\n\t\t\t\tcb.X = e.Location.X;\n\t\t\t\tcb.Y = e.Location.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcb = new SpellCastBar(e.User, e.Location.X, e.Location.Y);\n\n\t\t\t\tif (Instances.ContainsKey(e.User))\n\t\t\t\t{\n\t\t\t\t\tInstances[e.User] = cb;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tInstances.Add(e.User, cb);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcb.Preview = false;\n\n\t\t\te.Gump = cb;\n\n\t\t\tif (CMOptions.ModuleDebug)\n\t\t\t{\n\t\t\t\tCMOptions.ToConsole(\n\t\t\t\t\t\"Request: {0} casting {1}, using {2} ({3}) at {4}\",\n\t\t\t\t\te.User,\n\t\t\t\t\te.User.Spell,\n\t\t\t\t\tcb,\n\t\t\t\t\tcb.Preview ? \"Prv\" : \"Std\",\n\t\t\t\t\te.Location);\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void CastBarRequestHandler(CastBarRequestEventArgs e)\n\t\t{\n\t\t\tif (e.User == null || e.User.Deleted || e.User.NetState == null || e.Gump != null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSpellCastBar cb;\n\n\t\t\tif (Instances.TryGetValue(e.User, out cb) && !cb.IsDisposed)\n\t\t\t{\n\t\t\t\tcb.X = e.Location.X;\n\t\t\t\tcb.Y = e.Location.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcb = new SpellCastBar(e.User, e.Location.X, e.Location.Y);\n\n\t\t\t\tif (Instances.ContainsKey(e.User))\n\t\t\t\t{\n\t\t\t\t\tInstances[e.User] = cb;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tInstances.Add(e.User, cb);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcb.Preview = false;\n\n\t\t\te.Gump = cb;\n\n\t\t\tif (CMOptions.ModuleDebug)\n\t\t\t{\n\t\t\t\tCMOptions.ToConsole(\n\t\t\t\t\t\"Request: {0} casting {1}, using {2} ({3}) at {4}\",\n\t\t\t\t\te.User,\n\t\t\t\t\te.User.Spell,\n\t\t\t\t\tcb,\n\t\t\t\t\tcb.Preview ? \"Prv\" : \"Std\",\n\t\t\t\t\te.Location);\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void AreaDamage()\n\t\t{\n\t\t\tvar targets = new List<Mobile>();\n\n\t\t\tif (Map != null)\n\t\t\t{\n\t\t\t\tforeach (Mobile m in GetMobilesInRange(AreaDamageRange))\n\t\t\t\t{\n\t\t\t\t\tif (this != m && SpellHelper.ValidIndirectTarget(this, m) && CanBeHarmful(m, false) && (!Core.AOS || InLOS(m)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (m is BaseCreature && ((BaseCreature)m).Controlled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets.Add(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m.Player)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets.Add(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < targets.Count; ++i)\n\t\t\t{\n\t\t\t\tMobile m = targets[i];\n\n\t\t\t\tint damage;\n\n\t\t\t\tif (Core.AOS)\n\t\t\t\t{\n\t\t\t\t\tdamage = m.Hits / 2;\n\n\t\t\t\t\tif (!m.Player)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = Math.Max(Math.Min(damage, 100), 15);\n\t\t\t\t\t}\n\n\t\t\t\t\tdamage += Utility.RandomMinMax(0, 15);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdamage = (m.Hits * 6) / 10;\n\n\t\t\t\t\tif (!m.Player && damage < 10)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (damage > 75)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = 75;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdamage = (int)(damage * AreaDamageScalar);\n\n\t\t\t\tDoHarmful(m);\n\t\t\t\tAreaDamageEffect(m);\n\t\t\t\tSpellHelper.Damage(\n\t\t\t\t\tTimeSpan.Zero,\n\t\t\t\t\tm,\n\t\t\t\t\tthis,\n\t\t\t\t\tdamage,\n\t\t\t\t\tAreaPhysicalDamage,\n\t\t\t\t\tAreaFireDamage,\n\t\t\t\t\tAreaColdDamage,\n\t\t\t\t\tAreaPoisonDamage,\n\t\t\t\t\tAreaEnergyDamage);\n\t\t\t}\n\n\t\t\tm_NextAreaDamage = DateTime.UtcNow + AreaDamageDelay;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void AreaDamage()\n\t\t{\n\t\t\tvar targets = new List<Mobile>();\n\n\t\t\tif (Map != null)\n\t\t\t{\n\t\t\t\tforeach (Mobile m in GetMobilesInRange(AreaDamageRange))\n\t\t\t\t{\n\t\t\t\t\tif (this != m && SpellHelper.ValidIndirectTarget(this, m) && CanBeHarmful(m, false) && (!Core.AOS || InLOS(m)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (m is BaseCreature && ((BaseCreature)m).Controlled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets.Add(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (m.Player)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets.Add(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < targets.Count; ++i)\n\t\t\t{\n\t\t\t\tMobile m = targets[i];\n\n\t\t\t\tint damage;\n\n\t\t\t\tif (Core.AOS)\n\t\t\t\t{\n\t\t\t\t\tdamage = m.Hits / 2;\n\n\t\t\t\t\tif (!m.Player)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = Math.Max(Math.Min(damage, 100), 15);\n\t\t\t\t\t}\n\n\t\t\t\t\tdamage += Utility.RandomMinMax(0, 15);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdamage = (m.Hits * 6) / 10;\n\n\t\t\t\t\tif (!m.Player && damage < 10)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (damage > 75)\n\t\t\t\t\t{\n\t\t\t\t\t\tdamage = 75;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdamage = (int)(damage * AreaDamageScalar);\n\n\t\t\t\tDoHarmful(m);\n\t\t\t\tAreaDamageEffect(m);\n\t\t\t\tSpellHelper.Damage(\n\t\t\t\t\tTimeSpan.Zero,\n\t\t\t\t\tm,\n\t\t\t\t\tthis,\n\t\t\t\t\tdamage,\n\t\t\t\t\tAreaPhysicalDamage,\n\t\t\t\t\tAreaFireDamage,\n\t\t\t\t\tAreaColdDamage,\n\t\t\t\t\tAreaPoisonDamage,\n\t\t\t\t\tAreaEnergyDamage);\n\t\t\t}\n\n\t\t\tm_NextAreaDamage = DateTime.UtcNow + AreaDamageDelay;\n\t\t}\nAnswer: ____________ ____________"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SetCaught(object sender, int gt, int lang, bool isForm)\n        {\n            CHK_P1.Checked = mnuCaughtNone != sender;\n            for (int j = 0; j < CL.Length; j++)\n                CL[j].Checked = CL[j].Enabled && (sender == mnuComplete || (mnuCaughtNone != sender && j == lang));\n\n            if (mnuCaughtNone == sender)\n            {\n                if (isForm)\n                    return;\n                if (!(CHK_P2.Checked || CHK_P3.Checked || CHK_P4.Checked || CHK_P5.Checked)) // if seen\n                {\n                    if (!(CHK_P6.Checked || CHK_P7.Checked || CHK_P8.Checked || CHK_P9.Checked)) // not displayed\n                        (gt != 254 ? CHK_P6 : CHK_P7).Checked = true; // check one\n                }\n\n                return;\n            }\n\n            if (mnuComplete == sender)\n            {\n                // Seen All\n                foreach (var chk in new[] {CHK_P2, CHK_P3, CHK_P4, CHK_P5})\n                    chk.Checked = chk.Enabled;\n            }\n            else\n            {\n                // ensure at least one SEEN\n                if (!(CHK_P2.Checked || CHK_P3.Checked || CHK_P4.Checked || CHK_P5.Checked))\n                    (gt != 254 ? CHK_P2 : CHK_P3).Checked = true;\n            }\n\n            // ensure at least one Displayed except for formes\n            if (isForm)\n                return;\n            if (!(CHK_P6.Checked || CHK_P7.Checked || CHK_P8.Checked || CHK_P9.Checked))\n                (gt != 254 ? CHK_P6 : CHK_P7).C\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SetCaught(object sender, int gt, int lang, bool isForm)\n        {\n            CHK_P1.Checked = mnuCaughtNone != sender;\n            for (int j = 0; j < CL.Length; j++)\n                CL[j].Checked = CL[j].Enabled && (sender == mnuComplete || (mnuCaughtNone != sender && j == lang));\n\n            if (mnuCaughtNone == sender)\n            {\n                if (isForm)\n                    return;\n                if (!(CHK_P2.Checked || CHK_P3.Checked || CHK_P4.Checked || CHK_P5.Checked)) // if seen\n                {\n                    if (!(CHK_P6.Checked || CHK_P7.Checked || CHK_P8.Checked || CHK_P9.Checked)) // not displayed\n                        (gt != 254 ? CHK_P6 : CHK_P7).Checked = true; // check one\n                }\n\n                return;\n            }\n\n            if (mnuComplete == sender)\n            {\n                // Seen All\n                foreach (var chk in new[] {CHK_P2, CHK_P3, CHK_P4, CHK_P5})\n                    chk.Checked = chk.Enabled;\n            }\n            else\n            {\n                // ensure at least one SEEN\n                if (!(CHK_P2.Checked || CHK_P3.Checked || CHK_P4.Checked || CHK_P5.Checked))\n                    (gt != 254 ? CHK_P2 : CHK_P3).Checked = true;\n            }\n\n            // ensure at least one Displayed except for formes\n            if (isForm)\n                return;\n            if (!(CHK_P6.Checked || CHK_P7.Checked || CHK_P8.Checked || CHK_P9.Checked))\n                (gt != 254 ? CHK_P6 : CHK_P7).C\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbyte[] Unpack2(MyPEImage peImage) {\n\t\t\tshouldUnpack = false;\n\t\t\tuint headerOffset = (uint)peImage.Length - 12;\n\t\t\tuint offsetEncryptedAssembly = CheckOffset(peImage, peImage.OffsetReadUInt32(headerOffset));\n\t\t\tuint ezencryptionLibLength = peImage.OffsetReadUInt32(headerOffset + 4);\n\t\t\tuint iniFileLength = peImage.OffsetReadUInt32(headerOffset + 8);\n\n\t\t\tuint offsetClrVersionNumber = checked(offsetEncryptedAssembly - 12);\n\t\t\tuint iniFileOffset = checked(headerOffset - iniFileLength);\n\t\t\tuint ezencryptionLibOffset = checked(iniFileOffset - ezencryptionLibLength);\n\n\t\t\tuint clrVerMajor = peImage.OffsetReadUInt32(offsetClrVersionNumber);\n\t\t\tuint clrVerMinor = peImage.OffsetReadUInt32(offsetClrVersionNumber + 4);\n\t\t\tuint clrVerBuild = peImage.OffsetReadUInt32(offsetClrVersionNumber + 8);\n\t\t\tif (clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000)\n\t\t\t\treturn null;\n\n\t\t\tvar settings = new IniFile(Decompress2(peImage.OffsetReadBytes(iniFileOffset, (int)iniFileLength)));\n\t\t\tsizes = GetSizes(settings[\"General_App_Satellite_Assemblies_Sizes\"]);\n\t\t\tif (sizes == null || sizes.Length <= 1)\n\t\t\t\treturn null;\n\t\t\tshouldUnpack = true;\n\t\t\tif (sizes[0] != offsetEncryptedAssembly)\n\t\t\t\treturn null;\n\t\t\tfilenames = settings[\"General_App_Satellite_Assemblies\"].Split('|');\n\t\t\tif (sizes.Length - 1 != filenames.Length)\n\t\t\t\treturn null;\n\n\t\t\tbyte[] ezencryptionLibData = Decompress1(peImage.OffsetReadBytes(ezencryptionLibOffset, (int)ezencryptionLibLength));\n\t\t\tvar ezencryption\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nbyte[] Unpack2(MyPEImage peImage) {\n\t\t\tshouldUnpack = false;\n\t\t\tuint headerOffset = (uint)peImage.Length - 12;\n\t\t\tuint offsetEncryptedAssembly = CheckOffset(peImage, peImage.OffsetReadUInt32(headerOffset));\n\t\t\tuint ezencryptionLibLength = peImage.OffsetReadUInt32(headerOffset + 4);\n\t\t\tuint iniFileLength = peImage.OffsetReadUInt32(headerOffset + 8);\n\n\t\t\tuint offsetClrVersionNumber = checked(offsetEncryptedAssembly - 12);\n\t\t\tuint iniFileOffset = checked(headerOffset - iniFileLength);\n\t\t\tuint ezencryptionLibOffset = checked(iniFileOffset - ezencryptionLibLength);\n\n\t\t\tuint clrVerMajor = peImage.OffsetReadUInt32(offsetClrVersionNumber);\n\t\t\tuint clrVerMinor = peImage.OffsetReadUInt32(offsetClrVersionNumber + 4);\n\t\t\tuint clrVerBuild = peImage.OffsetReadUInt32(offsetClrVersionNumber + 8);\n\t\t\tif (clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000)\n\t\t\t\treturn null;\n\n\t\t\tvar settings = new IniFile(Decompress2(peImage.OffsetReadBytes(iniFileOffset, (int)iniFileLength)));\n\t\t\tsizes = GetSizes(settings[\"General_App_Satellite_Assemblies_Sizes\"]);\n\t\t\tif (sizes == null || sizes.Length <= 1)\n\t\t\t\treturn null;\n\t\t\tshouldUnpack = true;\n\t\t\tif (sizes[0] != offsetEncryptedAssembly)\n\t\t\t\treturn null;\n\t\t\tfilenames = settings[\"General_App_Satellite_Assemblies\"].Split('|');\n\t\t\tif (sizes.Length - 1 != filenames.Length)\n\t\t\t\treturn null;\n\n\t\t\tbyte[] ezencryptionLibData = Decompress1(peImage.OffsetReadBytes(ezencryptionLibOffset, (int)ezencryptionLibLength));\n\t\t\tvar ezencryption\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void OnSpeech(SpeechEventArgs e)\n\t\t{\n\t\t\tif (e.Handled || e.Blocked || !(e.Mobile is PlayerMobile) || String.IsNullOrWhiteSpace(e.Speech) ||\n\t\t\t\te.Speech.Length < 3 || e.Speech[0] != CMOptions.ChatPrefix)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pm = (PlayerMobile)e.Mobile;\n\t\t\tvar args = e.Speech.Substring(1).Split(' ');\n\n\t\t\tif (args.Length < 2)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstring token = args[0];\n\n\t\t\tvar channel = AllChannels.FirstOrDefault(c => c.Available && c.Token == token && c.Access <= e.Mobile.AccessLevel);\n\n\t\t\tif (channel == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\te.Handled = true;\n\t\t\te.Blocked = true;\n\n\t\t\tif (Insensitive.Equals(args[1], \"join\"))\n\t\t\t{\n\t\t\t\tif (channel.Join(pm))\n\t\t\t\t{ }\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Insensitive.Equals(args[1], \"leave\"))\n\t\t\t{\n\t\t\t\tif (channel.Leave(pm))\n\t\t\t\t{ }\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pm.AccessLevel > AccessLevel.Counselor)\n\t\t\t{\n\t\t\t\tif (Insensitive.Equals(args[1], \"kick\"))\n\t\t\t\t{\n\t\t\t\t\tif (args.Length > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tPlayerMobile toKick = channel.Users.Keys.FirstOrDefault(u => Insensitive.Equals(u.RawName, args[2]));\n\n\t\t\t\t\t\tif (toKick != null && pm.AccessLevel > toKick.AccessLevel && channel.Kick(toKick))\n\t\t\t\t\t\t{ }\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (Insensitive.Equals(args[1], \"ban\"))\n\t\t\t\t{\n\t\t\t\t\tif (args.Length > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tPlayerMobile toBan = channel.Users.Keys.FirstOrDefault(u => Insensitive.Equals(u.RawName, args[2]));\n\n\t\t\t\t\t\tTimeSpan duration = TimeSpan.Zero;\n\n\t\t\t\t\t\tif (args.Length > 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble mins;\n\n\t\t\t\t\t\t\tif (Double.Try\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void OnSpeech(SpeechEventArgs e)\n\t\t{\n\t\t\tif (e.Handled || e.Blocked || !(e.Mobile is PlayerMobile) || String.IsNullOrWhiteSpace(e.Speech) ||\n\t\t\t\te.Speech.Length < 3 || e.Speech[0] != CMOptions.ChatPrefix)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pm = (PlayerMobile)e.Mobile;\n\t\t\tvar args = e.Speech.Substring(1).Split(' ');\n\n\t\t\tif (args.Length < 2)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstring token = args[0];\n\n\t\t\tvar channel = AllChannels.FirstOrDefault(c => c.Available && c.Token == token && c.Access <= e.Mobile.AccessLevel);\n\n\t\t\tif (channel == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\te.Handled = true;\n\t\t\te.Blocked = true;\n\n\t\t\tif (Insensitive.Equals(args[1], \"join\"))\n\t\t\t{\n\t\t\t\tif (channel.Join(pm))\n\t\t\t\t{ }\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Insensitive.Equals(args[1], \"leave\"))\n\t\t\t{\n\t\t\t\tif (channel.Leave(pm))\n\t\t\t\t{ }\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pm.AccessLevel > AccessLevel.Counselor)\n\t\t\t{\n\t\t\t\tif (Insensitive.Equals(args[1], \"kick\"))\n\t\t\t\t{\n\t\t\t\t\tif (args.Length > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tPlayerMobile toKick = channel.Users.Keys.FirstOrDefault(u => Insensitive.Equals(u.RawName, args[2]));\n\n\t\t\t\t\t\tif (toKick != null && pm.AccessLevel > toKick.AccessLevel && channel.Kick(toKick))\n\t\t\t\t\t\t{ }\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (Insensitive.Equals(args[1], \"ban\"))\n\t\t\t\t{\n\t\t\t\t\tif (args.Length > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tPlayerMobile toBan = channel.Users.Keys.FirstOrDefault(u => Insensitive.Equals(u.RawName, args[2]));\n\n\t\t\t\t\t\tTimeSpan duration = TimeSpan.Zero;\n\n\t\t\t\t\t\tif (args.Length > 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble mins;\n\n\t\t\t\t\t\t\tif (Double.Try\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddWayPoint(WaypointData wpData)\n        {\n            if (wpData.isAdded)\n            {\n                return;\n            }\n\n            Waypoint waypoint = wpData.waypoint;\n\n            // No contract, no waypoint\n            if (waypoint.contractReference == null)\n            {\n                return;\n            }\n\n            // Always surface and navigatable\n            waypoint.isOnSurface = true;\n            waypoint.isNavigatable = true;\n\n            // Show only active waypoints in flight, but show offered as well in the tracking station\n            if (HighLogic.LoadedScene == GameScenes.TRACKSTATION || HighLogic.LoadedScene == GameScenes.FLIGHT)\n            {\n                ContractConfiguratorParameters parms = HighLogic.CurrentGame.Parameters.CustomParams<ContractConfiguratorParameters>();\n\n                if (contract.ContractState == Contract.State.Active && (parms.DisplayActiveWaypoints || HighLogic.LoadedScene != GameScenes.TRACKSTATION) ||\n                    contract.ContractState == Contract.State.Offered && parms.DisplayOfferedWaypoints && HighLogic.LoadedScene == GameScenes.TRACKSTATION)\n                {\n                    WaypointManager.AddWaypoint(waypoint);\n                    wpData.isAdded = true;\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddWayPoint(WaypointData wpData)\n        {\n            if (wpData.isAdded)\n            {\n                return;\n            }\n\n            Waypoint waypoint = wpData.waypoint;\n\n            // No contract, no waypoint\n            if (waypoint.contractReference == null)\n            {\n                return;\n            }\n\n            // Always surface and navigatable\n            waypoint.isOnSurface = true;\n            waypoint.isNavigatable = true;\n\n            // Show only active waypoints in flight, but show offered as well in the tracking station\n            if (HighLogic.LoadedScene == GameScenes.TRACKSTATION || HighLogic.LoadedScene == GameScenes.FLIGHT)\n            {\n                ContractConfiguratorParameters parms = HighLogic.CurrentGame.Parameters.CustomParams<ContractConfiguratorParameters>();\n\n                if (contract.ContractState == Contract.State.Active && (parms.DisplayActiveWaypoints || HighLogic.LoadedScene != GameScenes.TRACKSTATION) ||\n                    contract.ContractState == Contract.State.Offered && parms.DisplayOfferedWaypoints && HighLogic.LoadedScene == GameScenes.TRACKSTATION)\n                {\n                    WaypointManager.AddWaypoint(waypoint);\n                    wpData.isAdded = true;\n                }\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Compresses the data using LibLZF algorithm\n\t\t/// </summary>\n\t\t/// <param name=\"input\">Reference to the data to compress</param>\n\t\t/// <param name=\"output\">Reference to a buffer which will contain the compressed data</param>\n\t\t/// <returns>The size of the compressed archive in the output buffer</returns>\n\t\tpublic static int lzf_compress(byte[] input, ref byte[] output)\n\t\t{\n\t\t\tint inputLength = input.Length;\n\t\t\tint outputLength = output.Length;\n\t\t\tArray.Clear(HashTable, 0, (int)HSIZE);\n\t\t\tlong hslot;\n\t\t\tuint iidx = 0;\n\t\t\tuint oidx = 0;\n\t\t\tlong reference;\n\t\t\tuint hval = (uint)(((input[iidx]) << 8) | input[iidx + 1]); // FRST(in_data, iidx);\n\t\t\tlong off;\n\t\t\tint lit = 0;\n\t\t\tfor (; ; )\n\t\t\t{\n\t\t\t\tif (iidx < inputLength - 2)\n\t\t\t\t{\n\t\t\t\t\thval = (hval << 8) | input[iidx + 2];\n\t\t\t\t\thslot = ((hval ^ (hval << 5)) >> (int)(((3 * 8 - HLOG)) - hval * 5) & (HSIZE - 1));\n\t\t\t\t\treference = HashTable[hslot];\n\t\t\t\t\tHashTable[hslot] = (long)iidx;\n\t\t\t\t\tif ((off = iidx - reference - 1) < MAX_OFF\n\t\t\t\t\t\t&& iidx + 4 < inputLength\n\t\t\t\t\t\t&& reference > 0\n\t\t\t\t\t\t&& input[reference + 0] == input[iidx + 0]\n\t\t\t\t\t\t&& input[reference + 1] == input[iidx + 1]\n\t\t\t\t\t\t&& input[reference + 2] == input[iidx + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\t/* match found at *reference++ */\n\t\t\t\t\t\tuint len = 2;\n\t\t\t\t\t\tuint maxlen = (uint)inputLength - iidx - len;\n\t\t\t\t\t\tmaxlen = maxlen > MAX_REF ? MAX_REF : maxlen;\n\t\t\t\t\t\tif (oidx + lit + 1 + 3 >= outputLength) return 0;\n\t\t\t\t\t\tdo len++;\n\t\t\t\t\t\twhile (len < maxlen && input[reference + len]\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Feature",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Compresses the data using LibLZF algorithm\n\t\t/// </summary>\n\t\t/// <param name=\"input\">Reference to the data to compress</param>\n\t\t/// <param name=\"output\">Reference to a buffer which will contain the compressed data</param>\n\t\t/// <returns>The size of the compressed archive in the output buffer</returns>\n\t\tpublic static int lzf_compress(byte[] input, ref byte[] output)\n\t\t{\n\t\t\tint inputLength = input.Length;\n\t\t\tint outputLength = output.Length;\n\t\t\tArray.Clear(HashTable, 0, (int)HSIZE);\n\t\t\tlong hslot;\n\t\t\tuint iidx = 0;\n\t\t\tuint oidx = 0;\n\t\t\tlong reference;\n\t\t\tuint hval = (uint)(((input[iidx]) << 8) | input[iidx + 1]); // FRST(in_data, iidx);\n\t\t\tlong off;\n\t\t\tint lit = 0;\n\t\t\tfor (; ; )\n\t\t\t{\n\t\t\t\tif (iidx < inputLength - 2)\n\t\t\t\t{\n\t\t\t\t\thval = (hval << 8) | input[iidx + 2];\n\t\t\t\t\thslot = ((hval ^ (hval << 5)) >> (int)(((3 * 8 - HLOG)) - hval * 5) & (HSIZE - 1));\n\t\t\t\t\treference = HashTable[hslot];\n\t\t\t\t\tHashTable[hslot] = (long)iidx;\n\t\t\t\t\tif ((off = iidx - reference - 1) < MAX_OFF\n\t\t\t\t\t\t&& iidx + 4 < inputLength\n\t\t\t\t\t\t&& reference > 0\n\t\t\t\t\t\t&& input[reference + 0] == input[iidx + 0]\n\t\t\t\t\t\t&& input[reference + 1] == input[iidx + 1]\n\t\t\t\t\t\t&& input[reference + 2] == input[iidx + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\t/* match found at *reference++ */\n\t\t\t\t\t\tuint len = 2;\n\t\t\t\t\t\tuint maxlen = (uint)inputLength - iidx - len;\n\t\t\t\t\t\tmaxlen = maxlen > MAX_REF ? MAX_REF : maxlen;\n\t\t\t\t\t\tif (oidx + lit + 1 + 3 >= outputLength) return 0;\n\t\t\t\t\t\tdo len++;\n\t\t\t\t\t\twhile (len < maxlen && input[reference + len]\nAnswer:?\n</think>\n\nAnswer: Feature"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void OnEncode0xB0_0xDD(NetState state, PacketReader reader, ref byte[] buffer, ref int length)\n\t\t{\n\t\t\tif (state == null || reader == null || buffer == null || length < 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint pos = reader.Seek(0, SeekOrigin.Current);\n\t\t\treader.Seek(3, SeekOrigin.Begin);\n\t\t\tint serial = reader.ReadInt32();\n\t\t\treader.Seek(pos, SeekOrigin.Begin);\n\n\t\t\tif (serial <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSuperGump g;\n\n\t\t\tlock (_GlobalLock)\n\t\t\t{\n\t\t\t\tg = GlobalInstances.GetValue(serial);\n\t\t\t}\n\n\t\t\tif (g != null && !g.Compiled)\n\t\t\t{\n\t\t\t\tg.Refresh(true);\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void OnEncode0xB0_0xDD(NetState state, PacketReader reader, ref byte[] buffer, ref int length)\n\t\t{\n\t\t\tif (state == null || reader == null || buffer == null || length < 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint pos = reader.Seek(0, SeekOrigin.Current);\n\t\t\treader.Seek(3, SeekOrigin.Begin);\n\t\t\tint serial = reader.ReadInt32();\n\t\t\treader.Seek(pos, SeekOrigin.Begin);\n\n\t\t\tif (serial <= 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSuperGump g;\n\n\t\t\tlock (_GlobalLock)\n\t\t\t{\n\t\t\t\tg = GlobalInstances.GetValue(serial);\n\t\t\t}\n\n\t\t\tif (g != null && !g.Compiled)\n\t\t\t{\n\t\t\t\tg.Refresh(true);\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n\n            if (this.m_SculptedBy != null)\n            {\n                if (this.m_SculptedBy.ShowFameTitle && (this.m_SculptedBy.Player || this.m_SculptedBy.Body.IsHuman) && this.m_SculptedBy.Fame >= 10000)\n                    list.Add(1076202, String.Format(\"{0} {1}\", this.m_SculptedBy.Female ? \"Lady\" : \"Lord\", this.m_SculptedBy.Name)); // Sculpted by ~1_Name~\n                else\n                    list.Add(1076202, this.m_SculptedBy.Name); // Sculpted by ~1_Name~\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n\n            if (this.m_SculptedBy != null)\n            {\n                if (this.m_SculptedBy.ShowFameTitle && (this.m_SculptedBy.Player || this.m_SculptedBy.Body.IsHuman) && this.m_SculptedBy.Fame >= 10000)\n                    list.Add(1076202, String.Format(\"{0} {1}\", this.m_SculptedBy.Female ? \"Lady\" : \"Lord\", this.m_SculptedBy.Name)); // Sculpted by ~1_Name~\n                else\n                    list.Add(1076202, this.m_SculptedBy.Name); // Sculpted by ~1_Name~\n            }\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AllocateCompressStructures() {\n            int n = BZip2Constants.baseBlockSize * blockSize100k;\n            block = new char[(n + 1 + BZip2Constants.NUM_OVERSHOOT_BYTES)];\n            quadrant = new int[(n + BZip2Constants.NUM_OVERSHOOT_BYTES)];\n            zptr = new int[n];\n            ftab = new int[65537];\n\n            if (block == null || quadrant == null || zptr == null\n                || ftab == null) {\n                //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;\n                //compressOutOfMemory ( totalDraw, n );\n            }\n\n            /*\n            The back end needs a place to store the MTF values\n            whilst it calculates the coding tables.  We could\n            put them in the zptr array.  However, these values\n            will fit in a short, so we overlay szptr at the\n            start of zptr, in the hope of reducing the number\n            of cache misses induced by the multiple traversals\n            of the MTF values when calculating coding tables.\n            Seems to improve compression speed by about 1%.\n            */\n            //    szptr = zptr;\n\n\n            szptr = new short[2 * n];\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AllocateCompressStructures() {\n            int n = BZip2Constants.baseBlockSize * blockSize100k;\n            block = new char[(n + 1 + BZip2Constants.NUM_OVERSHOOT_BYTES)];\n            quadrant = new int[(n + BZip2Constants.NUM_OVERSHOOT_BYTES)];\n            zptr = new int[n];\n            ftab = new int[65537];\n\n            if (block == null || quadrant == null || zptr == null\n                || ftab == null) {\n                //int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;\n                //compressOutOfMemory ( totalDraw, n );\n            }\n\n            /*\n            The back end needs a place to store the MTF values\n            whilst it calculates the coding tables.  We could\n            put them in the zptr array.  However, these values\n            will fit in a short, so we overlay szptr at the\n            start of zptr, in the hope of reducing the number\n            of cache misses induced by the multiple traversals\n            of the MTF values when calculating coding tables.\n            Seems to improve compression speed by about 1%.\n            */\n            //    szptr = zptr;\n\n\n            szptr = new short[2 * n];\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool AddCustomerFields(OrderInfo order, Dictionary<string, string> fields, CustomerDatatypes customerDataType, bool ingnoreNotAllowed = false)\n\t\t{\n\t\t\tif (ChangeOrderToIncompleteAndReturnTrueIfNotAllowed(order) && ingnoreNotAllowed == false)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t//var xDoc = OrderUpdatingService.CreateXDocumentBasedOnCMSDocumentType(fields, documentAlias);\n\n\t\t\tvar xDoc = new XDocument(new XElement(customerDataType.ToString()));\n\n\t\t\tif (customerDataType == CustomerDatatypes.Customer)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.customerInformation != null) xDoc = order.CustomerInfo.customerInformation;\n\t\t\t}\n\n\t\t\tif (customerDataType == CustomerDatatypes.Shipping)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.shippingInformation != null) xDoc = order.CustomerInfo.shippingInformation;\n\t\t\t}\n\n\t\t\tif (customerDataType == CustomerDatatypes.Extra)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.extraInformation != null) xDoc = order.CustomerInfo.extraInformation;\n\t\t\t}\n\n\t\t\tforeach (var field in fields.Where(field => xDoc.Root != null && xDoc.Root.Descendants(field.Key).Any()))\n\t\t\t{\n\t\t\t\tif (xDoc.Root != null) xDoc.Root.Descendants(field.Key).Remove();\n\t\t\t}\n\n\t\t\tAddFieldsToXDocumentBasedOnCMSDocumentType(xDoc, fields, Order.NodeAlias);\n\n\t\t\tvar documentType = IO.Container.Resolve<ICMSDocumentTypeService>().GetByAlias(Order.NodeAlias);\n\n\t\t\t// special fields that also work when field is not created on order document type\n\t\t\tforeach (var field in fields)\n\t\t\t{\n\t\t\t\tif (field.Key.ToLower() == \"customercountry\")\n\t\t\t\t{\n\t\t\t\t\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool AddCustomerFields(OrderInfo order, Dictionary<string, string> fields, CustomerDatatypes customerDataType, bool ingnoreNotAllowed = false)\n\t\t{\n\t\t\tif (ChangeOrderToIncompleteAndReturnTrueIfNotAllowed(order) && ingnoreNotAllowed == false)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t//var xDoc = OrderUpdatingService.CreateXDocumentBasedOnCMSDocumentType(fields, documentAlias);\n\n\t\t\tvar xDoc = new XDocument(new XElement(customerDataType.ToString()));\n\n\t\t\tif (customerDataType == CustomerDatatypes.Customer)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.customerInformation != null) xDoc = order.CustomerInfo.customerInformation;\n\t\t\t}\n\n\t\t\tif (customerDataType == CustomerDatatypes.Shipping)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.shippingInformation != null) xDoc = order.CustomerInfo.shippingInformation;\n\t\t\t}\n\n\t\t\tif (customerDataType == CustomerDatatypes.Extra)\n\t\t\t{\n\t\t\t\tif (order.CustomerInfo.extraInformation != null) xDoc = order.CustomerInfo.extraInformation;\n\t\t\t}\n\n\t\t\tforeach (var field in fields.Where(field => xDoc.Root != null && xDoc.Root.Descendants(field.Key).Any()))\n\t\t\t{\n\t\t\t\tif (xDoc.Root != null) xDoc.Root.Descendants(field.Key).Remove();\n\t\t\t}\n\n\t\t\tAddFieldsToXDocumentBasedOnCMSDocumentType(xDoc, fields, Order.NodeAlias);\n\n\t\t\tvar documentType = IO.Container.Resolve<ICMSDocumentTypeService>().GetByAlias(Order.NodeAlias);\n\n\t\t\t// special fields that also work when field is not created on order document type\n\t\t\tforeach (var field in fields)\n\t\t\t{\n\t\t\t\tif (field.Key.ToLower() == \"customercountry\")\n\t\t\t\t{\n\t\t\t\t\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic async Task<bool> IncrementUsageAsync(Organization organization, Project project, bool tooBig, int count = 1, bool applyHourlyLimit = true) {\n            if (organization == null || organization.MaxEventsPerMonth < 0 || project == null || count == 0)\n                return false;\n\n            var orgUsage = await GetUsageAsync(organization, tooBig, count).AnyContext();\n            double totalBlocked = GetTotalBlocked(organization, count, orgUsage, applyHourlyLimit);\n            bool overLimit = totalBlocked > 0;\n            if (overLimit) {\n                orgUsage.HourlyBlocked = await _cache.IncrementAsync(GetHourlyBlockedCacheKey(organization.Id), (int)totalBlocked, TimeSpan.FromMinutes(61), (uint)orgUsage.HourlyBlocked).AnyContext();\n                orgUsage.MonthlyBlocked = await _cache.IncrementAsync(GetMonthlyBlockedCacheKey(organization.Id), (int)totalBlocked, TimeSpan.FromDays(32), (uint)orgUsage.MonthlyBlocked).AnyContext();\n            }\n\n            bool justWentOverHourly = orgUsage.HourlyTotal > organization.GetHourlyEventLimit(_plans) && orgUsage.HourlyTotal <= organization.GetHourlyEventLimit(_plans) + count;\n            bool justWentOverMonthly = orgUsage.MonthlyTotal > organization.GetMaxEventsPerMonthWithBonus() && orgUsage.MonthlyTotal <= organization.GetMaxEventsPerMonthWithBonus() + count;\n            var projectUsage = await GetUsageAsync(organization, project, tooBig, count, overLimit, (int)totalBlocked).AnyContext();\n\n            var tasks = ne\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic async Task<bool> IncrementUsageAsync(Organization organization, Project project, bool tooBig, int count = 1, bool applyHourlyLimit = true) {\n            if (organization == null || organization.MaxEventsPerMonth < 0 || project == null || count == 0)\n                return false;\n\n            var orgUsage = await GetUsageAsync(organization, tooBig, count).AnyContext();\n            double totalBlocked = GetTotalBlocked(organization, count, orgUsage, applyHourlyLimit);\n            bool overLimit = totalBlocked > 0;\n            if (overLimit) {\n                orgUsage.HourlyBlocked = await _cache.IncrementAsync(GetHourlyBlockedCacheKey(organization.Id), (int)totalBlocked, TimeSpan.FromMinutes(61), (uint)orgUsage.HourlyBlocked).AnyContext();\n                orgUsage.MonthlyBlocked = await _cache.IncrementAsync(GetMonthlyBlockedCacheKey(organization.Id), (int)totalBlocked, TimeSpan.FromDays(32), (uint)orgUsage.MonthlyBlocked).AnyContext();\n            }\n\n            bool justWentOverHourly = orgUsage.HourlyTotal > organization.GetHourlyEventLimit(_plans) && orgUsage.HourlyTotal <= organization.GetHourlyEventLimit(_plans) + count;\n            bool justWentOverMonthly = orgUsage.MonthlyTotal > organization.GetMaxEventsPerMonthWithBonus() && orgUsage.MonthlyTotal <= organization.GetMaxEventsPerMonthWithBonus() + count;\n            var projectUsage = await GetUsageAsync(organization, project, tooBig, count, overLimit, (int)totalBlocked).AnyContext();\n\n            var tasks = ne\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * Also taking into account the CSS properties of any parent tag in the given tag.\n         *\n         * @see com.itextpdf.tool.xml.pipeline.css.CSSResolver#resolveStyles(com.itextpdf.tool.xml.Tag)\n         */\n\n        virtual public void ResolveStyles(Tag t)\n        {\n            // get css for this tag from resolver\n            IDictionary<String, String> tagCss = new Dictionary<String, String>();\n            IDictionary<String, String> listCss = null;\n            if (null != cssFiles && cssFiles.HasFiles())\n            {\n                tagCss = cssFiles.GetCSS(t);\n                if (Util.EqualsIgnoreCase(t.Name, HTML.Tag.P) || Util.EqualsIgnoreCase(t.Name, HTML.Tag.TD))\n                {\n                    listCss = cssFiles.GetCSS(new Tag(HTML.Tag.UL));\n                }\n            }\n            // get css from style attr\n            if (null != t.Attributes && t.Attributes.Count != 0)\n            {\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLPADDING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLPADDING], \"cellpadding-\", \"\"));\n                }\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLSPACING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLSPACING], \"cellspacing-\", \"\"));\n                }\n     \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/**\n         * Also taking into account the CSS properties of any parent tag in the given tag.\n         *\n         * @see com.itextpdf.tool.xml.pipeline.css.CSSResolver#resolveStyles(com.itextpdf.tool.xml.Tag)\n         */\n\n        virtual public void ResolveStyles(Tag t)\n        {\n            // get css for this tag from resolver\n            IDictionary<String, String> tagCss = new Dictionary<String, String>();\n            IDictionary<String, String> listCss = null;\n            if (null != cssFiles && cssFiles.HasFiles())\n            {\n                tagCss = cssFiles.GetCSS(t);\n                if (Util.EqualsIgnoreCase(t.Name, HTML.Tag.P) || Util.EqualsIgnoreCase(t.Name, HTML.Tag.TD))\n                {\n                    listCss = cssFiles.GetCSS(new Tag(HTML.Tag.UL));\n                }\n            }\n            // get css from style attr\n            if (null != t.Attributes && t.Attributes.Count != 0)\n            {\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLPADDING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLPADDING], \"cellpadding-\", \"\"));\n                }\n                if (t.Attributes.ContainsKey(HTML.Attribute.CELLSPACING))\n                {\n                    CssUtils.MapPutAll(tagCss,\n                                       utils.ParseBoxValues(t.Attributes[HTML.Attribute.CELLSPACING], \"cellspacing-\", \"\"));\n                }\n     \nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Checks whether we are currently writing a nested resource info and switches to NestedResourceInfoWithContent state if we do.\n        /// </summary>\n        /// <param name=\"contentPayloadKind\">\n        /// What kind of payload kind is being written as the content of a nested resource info.\n        /// Only Resource Set, Resource or EntityReferenceLink are allowed.\n        /// </param>\n        /// <param name=\"contentPayload\">The ODataResource or ODataResourceSet to write, or null for ODataEntityReferenceLink.</param>\n        private void CheckForNestedResourceInfoWithContent(ODataPayloadKind contentPayloadKind, ODataItem contentPayload)\n        {\n            Debug.Assert(\n                contentPayloadKind == ODataPayloadKind.ResourceSet || contentPayloadKind == ODataPayloadKind.Resource || contentPayloadKind == ODataPayloadKind.EntityReferenceLink,\n                \"Only ResourceSet, Resource or EntityReferenceLink can be specified as a payload kind for a nested resource info content.\");\n\n            Scope currentScope = this.CurrentScope;\n            if (currentScope.State == WriterState.NestedResourceInfo || currentScope.State == WriterState.NestedResourceInfoWithContent)\n            {\n                ODataNestedResourceInfo currentNestedResourceInfo = (ODataNestedResourceInfo)currentScope.Item;\n                this.InterceptException(() =>\n                {\n                    if (this.ParentResourceType != null)\n                    {\n            \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Checks whether we are currently writing a nested resource info and switches to NestedResourceInfoWithContent state if we do.\n        /// </summary>\n        /// <param name=\"contentPayloadKind\">\n        /// What kind of payload kind is being written as the content of a nested resource info.\n        /// Only Resource Set, Resource or EntityReferenceLink are allowed.\n        /// </param>\n        /// <param name=\"contentPayload\">The ODataResource or ODataResourceSet to write, or null for ODataEntityReferenceLink.</param>\n        private void CheckForNestedResourceInfoWithContent(ODataPayloadKind contentPayloadKind, ODataItem contentPayload)\n        {\n            Debug.Assert(\n                contentPayloadKind == ODataPayloadKind.ResourceSet || contentPayloadKind == ODataPayloadKind.Resource || contentPayloadKind == ODataPayloadKind.EntityReferenceLink,\n                \"Only ResourceSet, Resource or EntityReferenceLink can be specified as a payload kind for a nested resource info content.\");\n\n            Scope currentScope = this.CurrentScope;\n            if (currentScope.State == WriterState.NestedResourceInfo || currentScope.State == WriterState.NestedResourceInfoWithContent)\n            {\n                ODataNestedResourceInfo currentNestedResourceInfo = (ODataNestedResourceInfo)currentScope.Item;\n                this.InterceptException(() =>\n                {\n                    if (this.ParentResourceType != null)\n                    {\n            \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void numericNumLen_ValueChanged(object sender, EventArgs e)\n        {\n            if (numericNumLen.Value == 1 || numericNumLen.Value == 2 || numericNumLen.Value == 4 || numericNumLen.Value == 8)\n                Read_NumFiles();\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void numericNumLen_ValueChanged(object sender, EventArgs e)\n        {\n            if (numericNumLen.Value == 1 || numericNumLen.Value == 2 || numericNumLen.Value == 4 || numericNumLen.Value == 8)\n                Read_NumFiles();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/** Extracts the names of the font in all the languages available.\n         * @param id the name id to retrieve\n         * @throws DocumentException on error\n         * @throws IOException on error\n         */    \n        internal string[][] GetNames(int id) {\n            int[] table_location;\n            tables.TryGetValue(\"name\", out table_location);\n            if (table_location == null)\n                throw new DocumentException(MessageLocalization.GetComposedMessage(\"table.1.does.not.exist.in.2\", \"name\", fileName + style));\n            rf.Seek(table_location[0] + 2);\n            int numRecords = rf.ReadUnsignedShort();\n            int startOfStorage = rf.ReadUnsignedShort();\n            List<string[]> names = new List<string[]>();\n            for (int k = 0; k < numRecords; ++k) {\n                int platformID = rf.ReadUnsignedShort();\n                int platformEncodingID = rf.ReadUnsignedShort();\n                int languageID = rf.ReadUnsignedShort();\n                int nameID = rf.ReadUnsignedShort();\n                int length = rf.ReadUnsignedShort();\n                int offset = rf.ReadUnsignedShort();\n                if (nameID == id) {\n                    int pos = (int)rf.FilePointer;\n                    rf.Seek(table_location[0] + startOfStorage + offset);\n                    string name;\n                    if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)){\n                        name = ReadUnicodeString(length);\n  \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/** Extracts the names of the font in all the languages available.\n         * @param id the name id to retrieve\n         * @throws DocumentException on error\n         * @throws IOException on error\n         */    \n        internal string[][] GetNames(int id) {\n            int[] table_location;\n            tables.TryGetValue(\"name\", out table_location);\n            if (table_location == null)\n                throw new DocumentException(MessageLocalization.GetComposedMessage(\"table.1.does.not.exist.in.2\", \"name\", fileName + style));\n            rf.Seek(table_location[0] + 2);\n            int numRecords = rf.ReadUnsignedShort();\n            int startOfStorage = rf.ReadUnsignedShort();\n            List<string[]> names = new List<string[]>();\n            for (int k = 0; k < numRecords; ++k) {\n                int platformID = rf.ReadUnsignedShort();\n                int platformEncodingID = rf.ReadUnsignedShort();\n                int languageID = rf.ReadUnsignedShort();\n                int nameID = rf.ReadUnsignedShort();\n                int length = rf.ReadUnsignedShort();\n                int offset = rf.ReadUnsignedShort();\n                if (nameID == id) {\n                    int pos = (int)rf.FilePointer;\n                    rf.Seek(table_location[0] + startOfStorage + offset);\n                    string name;\n                    if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)){\n                        name = ReadUnicodeString(length);\n  \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void FindObjectTable()\n        {\n            Objects = new List<ObjectTableEntry>();\n            ObjectTableAddress = 0;\n            ObjectCount = 0;\n\n            EntranceTableAddress = 0;\n\n            if (!HasZ64TablesHack)\n            {\n                int inc = 8;\n                for (int i = (int)ActorTableAddress; i < CodeData.Length - (8 * 8); i += inc)\n                {\n                    ObjectCount = Endian.SwapUInt16(BitConverter.ToUInt16(CodeData, i - 2));\n                    if (ObjectCount < 0x100 || ObjectCount > 0x300) continue;\n\n                    ObjectTableEntry obj1 = new ObjectTableEntry(this, i, true);\n                    ObjectTableEntry obj2 = new ObjectTableEntry(this, i + 8, true);\n                    ObjectTableEntry obj3 = new ObjectTableEntry(this, i + 16, true);\n\n                    if (obj1.IsEmpty == true && obj2.IsValid == true && obj3.IsValid == true && Objects.Count == 0)\n                    {\n                        ObjectTableAddress = i;\n                        break;\n                    }\n                }\n\n                if (ObjectTableAddress != 0 && ObjectCount != 0)\n                {\n                    int i, j = 0;\n                    for (i = ObjectTableAddress; i < (ObjectTableAddress + (ObjectCount * 8)); i += 8)\n                    {\n                        Objects.Add(new ObjectTableEntry(this, i, true, (ushort)j));\n                        j++;\n                    }\n\n                    if (!IsMajora)\n               \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void FindObjectTable()\n        {\n            Objects = new List<ObjectTableEntry>();\n            ObjectTableAddress = 0;\n            ObjectCount = 0;\n\n            EntranceTableAddress = 0;\n\n            if (!HasZ64TablesHack)\n            {\n                int inc = 8;\n                for (int i = (int)ActorTableAddress; i < CodeData.Length - (8 * 8); i += inc)\n                {\n                    ObjectCount = Endian.SwapUInt16(BitConverter.ToUInt16(CodeData, i - 2));\n                    if (ObjectCount < 0x100 || ObjectCount > 0x300) continue;\n\n                    ObjectTableEntry obj1 = new ObjectTableEntry(this, i, true);\n                    ObjectTableEntry obj2 = new ObjectTableEntry(this, i + 8, true);\n                    ObjectTableEntry obj3 = new ObjectTableEntry(this, i + 16, true);\n\n                    if (obj1.IsEmpty == true && obj2.IsValid == true && obj3.IsValid == true && Objects.Count == 0)\n                    {\n                        ObjectTableAddress = i;\n                        break;\n                    }\n                }\n\n                if (ObjectTableAddress != 0 && ObjectCount != 0)\n                {\n                    int i, j = 0;\n                    for (i = ObjectTableAddress; i < (ObjectTableAddress + (ObjectCount * 8)); i += 8)\n                    {\n                        Objects.Add(new ObjectTableEntry(this, i, true, (ushort)j));\n                        j++;\n                    }\n\n                    if (!IsMajora)\n               \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool AllPathSegmentsAreInsideOutlines(Polygon pathThatIsInside, IntPoint startPoint, IntPoint endPoint, bool writeErrors = false, int layerIndex = -1)\n\t\t{\n\t\t\tif (this.OutlineData == null)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// if (outlineData.Polygons.Count > 1) throw new Exception();\n\t\t\t// check that this path does not exit the outline\n\t\t\tfor (int i = 0; i < pathThatIsInside.Count - 1; i++)\n\t\t\t{\n\t\t\t\tvar start = pathThatIsInside[i];\n\t\t\t\tvar end = pathThatIsInside[i + 1];\n\n\t\t\t\tif (start != startPoint\n\t\t\t\t\t&& start != endPoint\n\t\t\t\t\t&& end != endPoint\n\t\t\t\t\t&& end != startPoint\n\t\t\t\t\t&& (end - start).Length() > 0)\n\t\t\t\t{\n\t\t\t\t\tif (!ValidPoint(OutlineData, start + (end - start) / 4)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) / 2)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) * 3 / 4)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) / 10)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) * 9 / 10)\n\t\t\t\t\t\t|| (start - end).Length() > 1000000)\n\t\t\t\t\t{\n\t\t\t\t\t\t// an easy way to get the path\n\t\t\t\t\t\tif (writeErrors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWriteErrorForTesting(layerIndex, startPoint, endPoint, (end - start).Length());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool AllPathSegmentsAreInsideOutlines(Polygon pathThatIsInside, IntPoint startPoint, IntPoint endPoint, bool writeErrors = false, int layerIndex = -1)\n\t\t{\n\t\t\tif (this.OutlineData == null)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// if (outlineData.Polygons.Count > 1) throw new Exception();\n\t\t\t// check that this path does not exit the outline\n\t\t\tfor (int i = 0; i < pathThatIsInside.Count - 1; i++)\n\t\t\t{\n\t\t\t\tvar start = pathThatIsInside[i];\n\t\t\t\tvar end = pathThatIsInside[i + 1];\n\n\t\t\t\tif (start != startPoint\n\t\t\t\t\t&& start != endPoint\n\t\t\t\t\t&& end != endPoint\n\t\t\t\t\t&& end != startPoint\n\t\t\t\t\t&& (end - start).Length() > 0)\n\t\t\t\t{\n\t\t\t\t\tif (!ValidPoint(OutlineData, start + (end - start) / 4)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) / 2)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) * 3 / 4)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) / 10)\n\t\t\t\t\t\t|| !ValidPoint(OutlineData, start + (end - start) * 9 / 10)\n\t\t\t\t\t\t|| (start - end).Length() > 1000000)\n\t\t\t\t\t{\n\t\t\t\t\t\t// an easy way to get the path\n\t\t\t\t\t\tif (writeErrors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWriteErrorForTesting(layerIndex, startPoint, endPoint, (end - start).Length());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool AutoAddSpace()\n        {\n            if (Settings.Default.AutoAddSpace\n                && Text != null\n                && Text.Any()\n                && !suppressNextAutoSpace)\n            {\n                Log.Info(\"Publishing auto space and adding auto space to Text.\");\n                PublishKeyPress(' ');\n                Text = string.Concat(Text, \" \");\n                return true;\n            }\n\n            return false;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate bool AutoAddSpace()\n        {\n            if (Settings.Default.AutoAddSpace\n                && Text != null\n                && Text.Any()\n                && !suppressNextAutoSpace)\n            {\n                Log.Info(\"Publishing auto space and adding auto space to Text.\");\n                PublishKeyPress(' ');\n                Text = string.Concat(Text, \" \");\n                return true;\n            }\n\n            return false;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnResponse(NetState sender, RelayInfo info)\n        {\n            PlayerMobile pm = sender.Mobile as PlayerMobile;\n\n            if (pm == null || !IsMember(pm, this.guild) || !IsMember(this.m_Member, this.guild))\n                return;\n\n            RankDefinition playerRank = pm.GuildRank;\n            RankDefinition targetRank = this.m_Member.GuildRank;\n\n            switch( info.ButtonID )\n            {\n                case 1:\t//Promote\n                    {\n                        if (playerRank.GetFlag(RankFlags.CanPromoteDemote) && ((playerRank.Rank - 1) > targetRank.Rank || (playerRank == RankDefinition.Leader && playerRank.Rank > targetRank.Rank)))\n                        {\n                            targetRank = RankDefinition.Ranks[targetRank.Rank + 1];\n\n                            if (targetRank == RankDefinition.Leader)\n                            {\n                                if (this.m_ToLeader)\n                                {\n                                    this.m_Member.GuildRank = targetRank;\n                                    pm.SendLocalizedMessage(1063156, this.m_Member.Name); // The guild information for ~1_val~ has been updated.\n                                    pm.SendLocalizedMessage(1063156, pm.Name); // The guild information for ~1_val~ has been updated.\n                                    this.guild.Leader = this.m_Member;\n                                }\n                                else\n                        \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnResponse(NetState sender, RelayInfo info)\n        {\n            PlayerMobile pm = sender.Mobile as PlayerMobile;\n\n            if (pm == null || !IsMember(pm, this.guild) || !IsMember(this.m_Member, this.guild))\n                return;\n\n            RankDefinition playerRank = pm.GuildRank;\n            RankDefinition targetRank = this.m_Member.GuildRank;\n\n            switch( info.ButtonID )\n            {\n                case 1:\t//Promote\n                    {\n                        if (playerRank.GetFlag(RankFlags.CanPromoteDemote) && ((playerRank.Rank - 1) > targetRank.Rank || (playerRank == RankDefinition.Leader && playerRank.Rank > targetRank.Rank)))\n                        {\n                            targetRank = RankDefinition.Ranks[targetRank.Rank + 1];\n\n                            if (targetRank == RankDefinition.Leader)\n                            {\n                                if (this.m_ToLeader)\n                                {\n                                    this.m_Member.GuildRank = targetRank;\n                                    pm.SendLocalizedMessage(1063156, this.m_Member.Name); // The guild information for ~1_val~ has been updated.\n                                    pm.SendLocalizedMessage(1063156, pm.Name); // The guild information for ~1_val~ has been updated.\n                                    this.guild.Leader = this.m_Member;\n                                }\n                                else\n                        \nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool IsDifficult(CelestialBody body, string biome, ExperimentSituations situation)\n        {\n            if (body == null || !body.ocean || body.pqsController == null ||\n                (situation != ExperimentSituations.SrfLanded && situation != ExperimentSituations.SrfSplashed))\n            {\n                return false;\n            }\n\n            if (Instance == null || !Instance.bodyInfo.ContainsKey(body))\n            {\n                return true;\n            }\n\n            // Handles KSC biomes\n            if (!Instance.bodyInfo[body].ContainsKey(biome))\n            {\n                return situation == ExperimentSituations.SrfSplashed;\n            }\n\n            double landRatio = Instance.bodyInfo[body][biome].landRatio;\n            return landRatio > 0.95 && situation == ExperimentSituations.SrfSplashed ||\n                landRatio < 0.05 && situation == ExperimentSituations.SrfLanded;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool IsDifficult(CelestialBody body, string biome, ExperimentSituations situation)\n        {\n            if (body == null || !body.ocean || body.pqsController == null ||\n                (situation != ExperimentSituations.SrfLanded && situation != ExperimentSituations.SrfSplashed))\n            {\n                return false;\n            }\n\n            if (Instance == null || !Instance.bodyInfo.ContainsKey(body))\n            {\n                return true;\n            }\n\n            // Handles KSC biomes\n            if (!Instance.bodyInfo[body].ContainsKey(biome))\n            {\n                return situation == ExperimentSituations.SrfSplashed;\n            }\n\n            double landRatio = Instance.bodyInfo[body][biome].landRatio;\n            return landRatio > 0.95 && situation == ExperimentSituations.SrfSplashed ||\n                landRatio < 0.05 && situation == ExperimentSituations.SrfLanded;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AppendValue(StringBuilder builder, object value)\n            {\n                if (value is string || value is int || value is uint || value.GetType().IsEnum)\n                {\n                    builder.Append(value.ToString());\n                }\n                else if (value is bool)\n                {\n                    builder.Append((bool)value ? \"+\" : \"-\");\n                }\n                else\n                {\n                    bool first = true;\n                    foreach (object o in (System.Array)value)\n                    {\n                        if (!first)\n                        {\n                            builder.Append(\", \");\n                        }\n                        AppendValue(builder, o);\n                        first = false;\n                    }\n                }\n            }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AppendValue(StringBuilder builder, object value)\n            {\n                if (value is string || value is int || value is uint || value.GetType().IsEnum)\n                {\n                    builder.Append(value.ToString());\n                }\n                else if (value is bool)\n                {\n                    builder.Append((bool)value ? \"+\" : \"-\");\n                }\n                else\n                {\n                    bool first = true;\n                    foreach (object o in (System.Array)value)\n                    {\n                        if (!first)\n                        {\n                            builder.Append(\", \");\n                        }\n                        AppendValue(builder, o);\n                        first = false;\n                    }\n                }\n            }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal AttributedRootType(AttributedMetaModel model, AttributedMetaTable table, Type type)\n\t\t\t: base(model, table, type, null)\n\t\t{\n\n\t\t\t// check for inheritance and create all other types\n\t\t\tInheritanceMappingAttribute[] inheritanceInfo = (InheritanceMappingAttribute[])type.GetCustomAttributes(typeof(InheritanceMappingAttribute), true);\n\t\t\tif(inheritanceInfo.Length > 0)\n\t\t\t{\n\t\t\t\tif(this.Discriminator == null)\n\t\t\t\t{\n\t\t\t\t\tthrow Error.NoDiscriminatorFound(type);\n\t\t\t\t}\n\t\t\t\tif(!MappingSystem.IsSupportedDiscriminatorType(this.Discriminator.Type))\n\t\t\t\t{\n\t\t\t\t\tthrow Error.DiscriminatorClrTypeNotSupported(this.Discriminator.DeclaringType.Name, this.Discriminator.Name, this.Discriminator.Type);\n\t\t\t\t}\n\t\t\t\tthis.types = new Dictionary<Type, MetaType>();\n\t\t\t\tthis.types.Add(type, this); // add self\n\t\t\t\tthis.codeMap = new Dictionary<object, MetaType>();\n\n\t\t\t\t// initialize inheritance types\n\t\t\t\tforeach(InheritanceMappingAttribute attr in inheritanceInfo)\n\t\t\t\t{\n\t\t\t\t\tif(!type.IsAssignableFrom(attr.Type))\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceTypeDoesNotDeriveFromRoot(attr.Type, type);\n\t\t\t\t\t}\n\t\t\t\t\tif(attr.Type.IsAbstract)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.AbstractClassAssignInheritanceDiscriminator(attr.Type);\n\t\t\t\t\t}\n\t\t\t\t\tAttributedMetaType mt = this.CreateInheritedType(type, attr.Type);\n\t\t\t\t\tif(attr.Code == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceCodeMayNotBeNull();\n\t\t\t\t\t}\n\t\t\t\t\tif(mt.inheritanceCode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceTypeHasMultipleDiscriminators(attr.Type);\n\t\t\t\t\t}\n\t\t\t\t\tobject\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal AttributedRootType(AttributedMetaModel model, AttributedMetaTable table, Type type)\n\t\t\t: base(model, table, type, null)\n\t\t{\n\n\t\t\t// check for inheritance and create all other types\n\t\t\tInheritanceMappingAttribute[] inheritanceInfo = (InheritanceMappingAttribute[])type.GetCustomAttributes(typeof(InheritanceMappingAttribute), true);\n\t\t\tif(inheritanceInfo.Length > 0)\n\t\t\t{\n\t\t\t\tif(this.Discriminator == null)\n\t\t\t\t{\n\t\t\t\t\tthrow Error.NoDiscriminatorFound(type);\n\t\t\t\t}\n\t\t\t\tif(!MappingSystem.IsSupportedDiscriminatorType(this.Discriminator.Type))\n\t\t\t\t{\n\t\t\t\t\tthrow Error.DiscriminatorClrTypeNotSupported(this.Discriminator.DeclaringType.Name, this.Discriminator.Name, this.Discriminator.Type);\n\t\t\t\t}\n\t\t\t\tthis.types = new Dictionary<Type, MetaType>();\n\t\t\t\tthis.types.Add(type, this); // add self\n\t\t\t\tthis.codeMap = new Dictionary<object, MetaType>();\n\n\t\t\t\t// initialize inheritance types\n\t\t\t\tforeach(InheritanceMappingAttribute attr in inheritanceInfo)\n\t\t\t\t{\n\t\t\t\t\tif(!type.IsAssignableFrom(attr.Type))\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceTypeDoesNotDeriveFromRoot(attr.Type, type);\n\t\t\t\t\t}\n\t\t\t\t\tif(attr.Type.IsAbstract)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.AbstractClassAssignInheritanceDiscriminator(attr.Type);\n\t\t\t\t\t}\n\t\t\t\t\tAttributedMetaType mt = this.CreateInheritedType(type, attr.Type);\n\t\t\t\t\tif(attr.Code == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceCodeMayNotBeNull();\n\t\t\t\t\t}\n\t\t\t\t\tif(mt.inheritanceCode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow Error.InheritanceTypeHasMultipleDiscriminators(attr.Type);\n\t\t\t\t\t}\n\t\t\t\t\tobject\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic int LastLayerWithChange(ConfigSettings config)\n\t\t{\n\t\t\tif (calculatedLastLayer)\n\t\t\t{\n\t\t\t\treturn lastLayerWithChange;\n\t\t\t}\n\n\t\t\tint numLayers = Extruders[0].Layers.Count;\n\t\t\tint firstExtruderWithData = -1;\n\t\t\tfor (int checkLayer = numLayers - 1; checkLayer >= 0; checkLayer--)\n\t\t\t{\n\t\t\t\tfor (int extruderToCheck = 0; extruderToCheck < config.ExtruderCount; extruderToCheck++)\n\t\t\t\t{\n\t\t\t\t\tif ((extruderToCheck < Extruders.Count && Extruders[extruderToCheck].Layers[checkLayer].AllOutlines.Count > 0)\n\t\t\t\t\t\t|| (config.SupportExtruder == extruderToCheck && Support != null && Support.HasNormalSupport(checkLayer))\n\t\t\t\t\t\t|| (config.SupportInterfaceExtruder == extruderToCheck && Support != null && Support.HasInterfaceSupport(checkLayer)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (firstExtruderWithData == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstExtruderWithData = extruderToCheck;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (firstExtruderWithData != extruderToCheck)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// have to remember the layer one above this so that we can switch back\n\t\t\t\t\t\t\t\tlastLayerWithChange = checkLayer + 1;\n\t\t\t\t\t\t\t\tcalculatedLastLayer = true;\n\t\t\t\t\t\t\t\treturn lastLayerWithChange;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcalculatedLastLayer = true;\n\t\t\treturn -1;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Mult",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic int LastLayerWithChange(ConfigSettings config)\n\t\t{\n\t\t\tif (calculatedLastLayer)\n\t\t\t{\n\t\t\t\treturn lastLayerWithChange;\n\t\t\t}\n\n\t\t\tint numLayers = Extruders[0].Layers.Count;\n\t\t\tint firstExtruderWithData = -1;\n\t\t\tfor (int checkLayer = numLayers - 1; checkLayer >= 0; checkLayer--)\n\t\t\t{\n\t\t\t\tfor (int extruderToCheck = 0; extruderToCheck < config.ExtruderCount; extruderToCheck++)\n\t\t\t\t{\n\t\t\t\t\tif ((extruderToCheck < Extruders.Count && Extruders[extruderToCheck].Layers[checkLayer].AllOutlines.Count > 0)\n\t\t\t\t\t\t|| (config.SupportExtruder == extruderToCheck && Support != null && Support.HasNormalSupport(checkLayer))\n\t\t\t\t\t\t|| (config.SupportInterfaceExtruder == extruderToCheck && Support != null && Support.HasInterfaceSupport(checkLayer)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (firstExtruderWithData == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstExtruderWithData = extruderToCheck;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (firstExtruderWithData != extruderToCheck)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// have to remember the layer one above this so that we can switch back\n\t\t\t\t\t\t\t\tlastLayerWithChange = checkLayer + 1;\n\t\t\t\t\t\t\t\tcalculatedLastLayer = true;\n\t\t\t\t\t\t\t\treturn lastLayerWithChange;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcalculatedLastLayer = true;\n\t\t\treturn -1;\n\t\t}\nAnswer:?\n</think>\n\nAnswer: Mult"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#region Data I/O\n        private void Parse(Stream s)\n        {\n            BinaryReader r = new BinaryReader(s);\n            uint dw1 = r.ReadUInt32();\n            uint dw2 = r.ReadUInt32();\n            s.Position = 0;\n\n            if (dw1 == 0x8EAF13DE && dw2 == 0x00000000)\n            {\n                rigFormat = RigFormat.WrappedGranny;\n                //ParseWrappedGranny(s);\n                ParseRawGranny(s);\n            }\n            else if ((dw1 == 0x00000003 || dw1 == 0x00000004) && ((dw2 == 0x00000001 || dw2 == 0x00000002)))\n            {\n                rigFormat = RigFormat.Clear;\n                ParseClear(s);\n            }\n            else\n            {\n                rigFormat = RigFormat.RawGranny;\n                ParseRawGranny(s);\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "...",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#region Data I/O\n        private void Parse(Stream s)\n        {\n            BinaryReader r = new BinaryReader(s);\n            uint dw1 = r.ReadUInt32();\n            uint dw2 = r.ReadUInt32();\n            s.Position = 0;\n\n            if (dw1 == 0x8EAF13DE && dw2 == 0x00000000)\n            {\n                rigFormat = RigFormat.WrappedGranny;\n                //ParseWrappedGranny(s);\n                ParseRawGranny(s);\n            }\n            else if ((dw1 == 0x00000003 || dw1 == 0x00000004) && ((dw2 == 0x00000001 || dw2 == 0x00000002)))\n            {\n                rigFormat = RigFormat.Clear;\n                ParseClear(s);\n            }\n            else\n            {\n                rigFormat = RigFormat.RawGranny;\n                ParseRawGranny(s);\n            }\n        }\nAnswer:... (keep going until you"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Find(ISimpleDeobfuscator simpleDeobfuscator, IDeobfuscator deob) {\n\t\t\tforeach (var type in module.Types) {\n\t\t\t\tif (type.Fields.Count != 1)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (type.HasNestedTypes || type.HasGenericParameters || type.IsValueType)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (DotNetUtils.GetField(type, \"System.Reflection.Assembly\") == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (type.FindStaticConstructor() == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar getStream2 = GetTheOnlyMethod(type, \"System.IO.Stream\", \"(System.Reflection.Assembly,System.Type,System.String)\");\n\t\t\t\tvar getNames = GetTheOnlyMethod(type, \"System.String[]\", \"(System.Reflection.Assembly)\");\n\t\t\t\tvar getRefAsms = GetTheOnlyMethod(type, \"System.Reflection.AssemblyName[]\", \"(System.Reflection.Assembly)\");\n\t\t\t\tvar bitmapCtor = GetTheOnlyMethod(type, \"System.Drawing.Bitmap\", \"(System.Type,System.String)\");\n\t\t\t\tvar iconCtor = GetTheOnlyMethod(type, \"System.Drawing.Icon\", \"(System.Type,System.String)\");\n\t\t\t\tif (getStream2 == null && getNames == null && getRefAsms == null &&\n\t\t\t\t\tbitmapCtor == null && iconCtor == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar resource = FindGetManifestResourceStreamTypeResource(type, simpleDeobfuscator, deob);\n\t\t\t\tif (resource == null && getStream2 != null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgetManifestResourceStreamType = type;\n\t\t\t\tCreateGetManifestResourceStream2(getStream2);\n\t\t\t\tCreateGetManifestResourceNames(getNames);\n\t\t\t\tCreateGetReferencedAssemblies(getRefAsms);\n\t\t\t\tCreateBitmapCtor(bitmapCtor);\n\t\t\t\tCreateIconCtor(iconCtor);\n\t\t\t\tgetManifestResourc\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Find(ISimpleDeobfuscator simpleDeobfuscator, IDeobfuscator deob) {\n\t\t\tforeach (var type in module.Types) {\n\t\t\t\tif (type.Fields.Count != 1)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (type.HasNestedTypes || type.HasGenericParameters || type.IsValueType)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (DotNetUtils.GetField(type, \"System.Reflection.Assembly\") == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (type.FindStaticConstructor() == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar getStream2 = GetTheOnlyMethod(type, \"System.IO.Stream\", \"(System.Reflection.Assembly,System.Type,System.String)\");\n\t\t\t\tvar getNames = GetTheOnlyMethod(type, \"System.String[]\", \"(System.Reflection.Assembly)\");\n\t\t\t\tvar getRefAsms = GetTheOnlyMethod(type, \"System.Reflection.AssemblyName[]\", \"(System.Reflection.Assembly)\");\n\t\t\t\tvar bitmapCtor = GetTheOnlyMethod(type, \"System.Drawing.Bitmap\", \"(System.Type,System.String)\");\n\t\t\t\tvar iconCtor = GetTheOnlyMethod(type, \"System.Drawing.Icon\", \"(System.Type,System.String)\");\n\t\t\t\tif (getStream2 == null && getNames == null && getRefAsms == null &&\n\t\t\t\t\tbitmapCtor == null && iconCtor == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar resource = FindGetManifestResourceStreamTypeResource(type, simpleDeobfuscator, deob);\n\t\t\t\tif (resource == null && getStream2 != null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgetManifestResourceStreamType = type;\n\t\t\t\tCreateGetManifestResourceStream2(getStream2);\n\t\t\t\tCreateGetManifestResourceNames(getNames);\n\t\t\t\tCreateGetReferencedAssemblies(getRefAsms);\n\t\t\t\tCreateBitmapCtor(bitmapCtor);\n\t\t\t\tCreateIconCtor(iconCtor);\n\t\t\t\tgetManifestResourc\nAnswer:?\n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic MethodInfo GetBasicPropertySetter(Type declaringType, string name, Type expectedType)\n        {\n            var prop = declaringType.GetProperty(name, BindingFlags.Public | BindingFlags.Instance);\n            ParameterInfo[] indexers;\n            if (prop != null && prop.CanWrite && prop.PropertyType == expectedType\n                && ((indexers = prop.GetIndexParameters()) == null || indexers.Length == 0))\n            {\n                return prop.GetSetMethod();\n            }\n            return null;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic MethodInfo GetBasicPropertySetter(Type declaringType, string name, Type expectedType)\n        {\n            var prop = declaringType.GetProperty(name, BindingFlags.Public | BindingFlags.Instance);\n            ParameterInfo[] indexers;\n            if (prop != null && prop.CanWrite && prop.PropertyType == expectedType\n                && ((indexers = prop.GetIndexParameters()) == null || indexers.Length == 0))\n            {\n                return prop.GetSetMethod();\n            }\n            return null;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Think()\n\t\t{\n\t\t\tif (m_Mobile.Deleted)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tMobile combatant = m_Guard.Combatant;\n\n\t\t\tif (combatant == null || combatant.Deleted || !combatant.Alive || combatant.IsDeadBondedPet ||\n\t\t\t\t!m_Mobile.CanSee(combatant) || !m_Mobile.CanBeHarmful(combatant, false) || combatant.Map != m_Mobile.Map)\n\t\t\t{\n\t\t\t\t// Our combatant is deleted, dead, hidden, or we cannot hurt them\n\t\t\t\t// Try to find another combatant\n\t\t\t\tif (AcquireFocusMob(m_Mobile.RangePerception, m_Mobile.FightMode, false, false, true))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = m_Mobile.FocusMob;\n\t\t\t\t\tm_Mobile.FocusMob = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (combatant != null && (!m_Mobile.InLOS(combatant) || !m_Mobile.InRange(combatant, 12)))\n\t\t\t{\n\t\t\t\tif (AcquireFocusMob(m_Mobile.RangePerception, m_Mobile.FightMode, false, false, true))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = m_Mobile.FocusMob;\n\t\t\t\t\tm_Mobile.FocusMob = null;\n\t\t\t\t}\n\t\t\t\telse if (!m_Mobile.InRange(combatant, 36))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMobile dispelTarget = FindDispelTarget(true);\n\n\t\t\tif (m_Guard.Target != null && m_ReleaseTarget == DateTime.MinValue)\n\t\t\t{\n\t\t\t\tm_ReleaseTarget = DateTime.UtcNow + TimeSpan.FromSeconds(10.0);\n\t\t\t}\n\n\t\t\tif (m_Guard.Target != null && DateTime.UtcNow > m_ReleaseTarget)\n\t\t\t{\n\t\t\t\tTarget targ = m_Guard.Target;\n\n\t\t\t\tMobile toHarm = (dispelTarget == null ? combatant : dispelTarget);\n\n\t\t\t\tif ((t\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Think()\n\t\t{\n\t\t\tif (m_Mobile.Deleted)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tMobile combatant = m_Guard.Combatant;\n\n\t\t\tif (combatant == null || combatant.Deleted || !combatant.Alive || combatant.IsDeadBondedPet ||\n\t\t\t\t!m_Mobile.CanSee(combatant) || !m_Mobile.CanBeHarmful(combatant, false) || combatant.Map != m_Mobile.Map)\n\t\t\t{\n\t\t\t\t// Our combatant is deleted, dead, hidden, or we cannot hurt them\n\t\t\t\t// Try to find another combatant\n\t\t\t\tif (AcquireFocusMob(m_Mobile.RangePerception, m_Mobile.FightMode, false, false, true))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = m_Mobile.FocusMob;\n\t\t\t\t\tm_Mobile.FocusMob = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (combatant != null && (!m_Mobile.InLOS(combatant) || !m_Mobile.InRange(combatant, 12)))\n\t\t\t{\n\t\t\t\tif (AcquireFocusMob(m_Mobile.RangePerception, m_Mobile.FightMode, false, false, true))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = m_Mobile.FocusMob;\n\t\t\t\t\tm_Mobile.FocusMob = null;\n\t\t\t\t}\n\t\t\t\telse if (!m_Mobile.InRange(combatant, 36))\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.Combatant = combatant = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMobile dispelTarget = FindDispelTarget(true);\n\n\t\t\tif (m_Guard.Target != null && m_ReleaseTarget == DateTime.MinValue)\n\t\t\t{\n\t\t\t\tm_ReleaseTarget = DateTime.UtcNow + TimeSpan.FromSeconds(10.0);\n\t\t\t}\n\n\t\t\tif (m_Guard.Target != null && DateTime.UtcNow > m_ReleaseTarget)\n\t\t\t{\n\t\t\t\tTarget targ = m_Guard.Target;\n\n\t\t\t\tMobile toHarm = (dispelTarget == null ? combatant : dispelTarget);\n\n\t\t\t\tif ((t\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnMovement(Mobile m, Point3D oldLocation)\n        {\n            if (m.Alive && m is PlayerMobile)\n            {\n                PlayerMobile pm = (PlayerMobile)m;\n\t\t\t\t\t\n                int range = 5;\n\t\t\t\t\n                if (range >= 0 && this.InRange(m, range) && !this.InRange(oldLocation, range) && DateTime.UtcNow >= this.m_Spoken + TimeSpan.FromMinutes(1))\n                {\n                    /* Human.  Do you crave the chance to denounce your humanity and prove your elven ancestry.  \n                    Do you yearn to accept the responsibilities of a caretaker of our beloved Sosaria and so \n                    redeem yourself.  Then human, seek out Darius the Wise in Moonglow. */\n                    this.Say(1072801);\n\t\t\t\t\t\n                    this.m_Spoken = DateTime.UtcNow;\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnMovement(Mobile m, Point3D oldLocation)\n        {\n            if (m.Alive && m is PlayerMobile)\n            {\n                PlayerMobile pm = (PlayerMobile)m;\n\t\t\t\t\t\n                int range = 5;\n\t\t\t\t\n                if (range >= 0 && this.InRange(m, range) && !this.InRange(oldLocation, range) && DateTime.UtcNow >= this.m_Spoken + TimeSpan.FromMinutes(1))\n                {\n                    /* Human.  Do you crave the chance to denounce your humanity and prove your elven ancestry.  \n                    Do you yearn to accept the responsibilities of a caretaker of our beloved Sosaria and so \n                    redeem yourself.  Then human, seek out Darius the Wise in Moonglow. */\n                    this.Say(1072801);\n\t\t\t\t\t\n                    this.m_Spoken = DateTime.UtcNow;\n                }\n            }\n        }\nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsAccessorDeclarationContextWorker(SyntaxToken targetToken)\n        {\n            // cases:\n            //   int Foo { |\n            //   int Foo { private |\n            //   int Foo { set { } |\n            //   int Foo { set; |\n            //   int Foo { [Bar]|\n\n            // Consume all preceding access modifiers\n            while (targetToken.Kind() == SyntaxKind.InternalKeyword ||\n                targetToken.Kind() == SyntaxKind.PublicKeyword ||\n                targetToken.Kind() == SyntaxKind.ProtectedKeyword ||\n                targetToken.Kind() == SyntaxKind.PrivateKeyword)\n            {\n                targetToken = targetToken.GetPreviousToken(includeSkipped: true);\n            }\n\n            // int Foo { |\n            // int Foo { private |\n            if (targetToken.Kind() == SyntaxKind.OpenBraceToken &&\n                targetToken.Parent.IsKind(SyntaxKind.AccessorList))\n            {\n                return true;\n            }\n\n            // int Foo { set { } |\n            // int Foo { set { } private |\n            if (targetToken.Kind() == SyntaxKind.CloseBraceToken &&\n                targetToken.Parent.IsKind(SyntaxKind.Block) &&\n                targetToken.Parent.GetParent() is AccessorDeclarationSyntax)\n            {\n                return true;\n            }\n\n            // int Foo { set; |\n            if (targetToken.Kind() == SyntaxKind.SemicolonToken &&\n                targetToken.Parent is AccessorDeclarationSyntax)\n            {\n   \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsAccessorDeclarationContextWorker(SyntaxToken targetToken)\n        {\n            // cases:\n            //   int Foo { |\n            //   int Foo { private |\n            //   int Foo { set { } |\n            //   int Foo { set; |\n            //   int Foo { [Bar]|\n\n            // Consume all preceding access modifiers\n            while (targetToken.Kind() == SyntaxKind.InternalKeyword ||\n                targetToken.Kind() == SyntaxKind.PublicKeyword ||\n                targetToken.Kind() == SyntaxKind.ProtectedKeyword ||\n                targetToken.Kind() == SyntaxKind.PrivateKeyword)\n            {\n                targetToken = targetToken.GetPreviousToken(includeSkipped: true);\n            }\n\n            // int Foo { |\n            // int Foo { private |\n            if (targetToken.Kind() == SyntaxKind.OpenBraceToken &&\n                targetToken.Parent.IsKind(SyntaxKind.AccessorList))\n            {\n                return true;\n            }\n\n            // int Foo { set { } |\n            // int Foo { set { } private |\n            if (targetToken.Kind() == SyntaxKind.CloseBraceToken &&\n                targetToken.Parent.IsKind(SyntaxKind.Block) &&\n                targetToken.Parent.GetParent() is AccessorDeclarationSyntax)\n            {\n                return true;\n            }\n\n            // int Foo { set; |\n            if (targetToken.Kind() == SyntaxKind.SemicolonToken &&\n                targetToken.Parent is AccessorDeclarationSyntax)\n            {\n   \nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SelectScalarStyle(ParsingEvent evt)\n\t\t{\n\t\t\tvar scalar = (Scalar)evt;\n\n\t\t\tvar style = scalar.Style;\n\t\t\tvar noTag = tagData.handle == null && tagData.suffix == null;\n\n\t\t\tif (noTag && !scalar.IsPlainImplicit && !scalar.IsQuotedImplicit)\n\t\t\t{\n\t\t\t\tthrow new YamlException(\"Neither tag nor isImplicit flags are specified.\");\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Any)\n\t\t\t{\n\t\t\t\tstyle = scalarData.isMultiline ? ScalarStyle.Folded : ScalarStyle.Plain;\n\t\t\t}\n\n\t\t\tif (isCanonical)\n\t\t\t{\n\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t}\n\n\t\t\tif (isSimpleKeyContext && scalarData.isMultiline)\n\t\t\t{\n\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Plain)\n\t\t\t{\n\t\t\t\tif ((flowLevel != 0 && !scalarData.isFlowPlainAllowed) || (flowLevel == 0 && !scalarData.isBlockPlainAllowed))\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t\tif (string.IsNullOrEmpty(scalarData.value) && (flowLevel != 0 || isSimpleKeyContext))\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t\tif (noTag && !scalar.IsPlainImplicit)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.SingleQuoted)\n\t\t\t{\n\t\t\t\tif (!scalarData.isSingleQuotedAllowed)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Literal || style == ScalarStyle.Folded)\n\t\t\t{\n\t\t\t\tif (!scalarData.isBlockAllowed || flowLevel != 0 || isSimpleKeyContext)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tscalarData.style = style;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SelectScalarStyle(ParsingEvent evt)\n\t\t{\n\t\t\tvar scalar = (Scalar)evt;\n\n\t\t\tvar style = scalar.Style;\n\t\t\tvar noTag = tagData.handle == null && tagData.suffix == null;\n\n\t\t\tif (noTag && !scalar.IsPlainImplicit && !scalar.IsQuotedImplicit)\n\t\t\t{\n\t\t\t\tthrow new YamlException(\"Neither tag nor isImplicit flags are specified.\");\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Any)\n\t\t\t{\n\t\t\t\tstyle = scalarData.isMultiline ? ScalarStyle.Folded : ScalarStyle.Plain;\n\t\t\t}\n\n\t\t\tif (isCanonical)\n\t\t\t{\n\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t}\n\n\t\t\tif (isSimpleKeyContext && scalarData.isMultiline)\n\t\t\t{\n\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Plain)\n\t\t\t{\n\t\t\t\tif ((flowLevel != 0 && !scalarData.isFlowPlainAllowed) || (flowLevel == 0 && !scalarData.isBlockPlainAllowed))\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t\tif (string.IsNullOrEmpty(scalarData.value) && (flowLevel != 0 || isSimpleKeyContext))\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t\tif (noTag && !scalar.IsPlainImplicit)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.SingleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.SingleQuoted)\n\t\t\t{\n\t\t\t\tif (!scalarData.isSingleQuotedAllowed)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style == ScalarStyle.Literal || style == ScalarStyle.Folded)\n\t\t\t{\n\t\t\t\tif (!scalarData.isBlockAllowed || flowLevel != 0 || isSimpleKeyContext)\n\t\t\t\t{\n\t\t\t\t\tstyle = ScalarStyle.DoubleQuoted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tscalarData.style = style;\n\t\t}\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsCompatibleObject(object value)\n        {\n            if (!(value is T) && (value != null || (typeof(T).IsValueType() && !ReflectionUtils.IsNullableType(typeof(T)))))\n                return false;\n\n            return true;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool IsCompatibleObject(object value)\n        {\n            if (!(value is T) && (value != null || (typeof(T).IsValueType() && !ReflectionUtils.IsNullableType(typeof(T)))))\n                return false;\n\n            return true;\n        }\nAnswer: ___________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool CanBeReplacedWithAnyName(this NameSyntax nameSyntax)\n        {\n            if (nameSyntax.IsParentKind(SyntaxKind.AliasQualifiedName) ||\n                nameSyntax.IsParentKind(SyntaxKind.NameColon) ||\n                nameSyntax.IsParentKind(SyntaxKind.NameEquals) ||\n                nameSyntax.IsParentKind(SyntaxKind.TypeParameterConstraintClause))\n            {\n                return false;\n            }\n\n            if (nameSyntax.CheckParent<QualifiedNameSyntax>(q => q.Right == nameSyntax) ||\n                nameSyntax.CheckParent<MemberAccessExpressionSyntax>(m => m.Name == nameSyntax))\n            {\n                return false;\n            }\n\n            // TODO(cyrusn): Add more cases as the language changes.\n            return true;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool CanBeReplacedWithAnyName(this NameSyntax nameSyntax)\n        {\n            if (nameSyntax.IsParentKind(SyntaxKind.AliasQualifiedName) ||\n                nameSyntax.IsParentKind(SyntaxKind.NameColon) ||\n                nameSyntax.IsParentKind(SyntaxKind.NameEquals) ||\n                nameSyntax.IsParentKind(SyntaxKind.TypeParameterConstraintClause))\n            {\n                return false;\n            }\n\n            if (nameSyntax.CheckParent<QualifiedNameSyntax>(q => q.Right == nameSyntax) ||\n                nameSyntax.CheckParent<MemberAccessExpressionSyntax>(m => m.Name == nameSyntax))\n            {\n                return false;\n            }\n\n            // TODO(cyrusn): Add more cases as the language changes.\n            return true;\n        }\nAnswer: \n</think>\n\nThe code checks"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void UseSpells(bool useQ, bool useW, bool useE, bool useR)\n        {\n            var qTarget = TargetSelector.GetTarget(Q.Range, TargetSelector.DamageType.Magical);\n            var wTarget = TargetSelector.GetTarget(W.Range, TargetSelector.DamageType.Magical);\n            var eTarget = TargetSelector.GetTarget(E.Range, TargetSelector.DamageType.Magical);\n            var rTarget = TargetSelector.GetTarget(R.Range, TargetSelector.DamageType.Magical);\n\n\n            if (useQ && qTarget != null && Q.IsReady() && Player.Distance(qTarget) < Q.Range)\n            {\n                Q.CastOnUnit(qTarget, packets());\n                return;\n            }\n\n            if (useW && wTarget != null && W.IsReady() && Player.Distance(wTarget) < W.Range)\n            {\n                W.Cast();\n                return;\n            }\n\n            if (useE && eTarget != null && E.IsReady() && Player.Distance(eTarget) < E.Range)\n            {\n                E.Cast();\n                return;\n            }\n\n            //regular combo\n            if (useR && rTarget != null && R.IsReady() && GetComboDamage(rTarget) >= rTarget.Health - 100 && R.GetPrediction(rTarget).Hitchance >= HitChance.High && Player.Distance(rTarget) <= R.Range)\n            {\n                R.Cast(rTarget);\n                return;\n            }\n\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void UseSpells(bool useQ, bool useW, bool useE, bool useR)\n        {\n            var qTarget = TargetSelector.GetTarget(Q.Range, TargetSelector.DamageType.Magical);\n            var wTarget = TargetSelector.GetTarget(W.Range, TargetSelector.DamageType.Magical);\n            var eTarget = TargetSelector.GetTarget(E.Range, TargetSelector.DamageType.Magical);\n            var rTarget = TargetSelector.GetTarget(R.Range, TargetSelector.DamageType.Magical);\n\n\n            if (useQ && qTarget != null && Q.IsReady() && Player.Distance(qTarget) < Q.Range)\n            {\n                Q.CastOnUnit(qTarget, packets());\n                return;\n            }\n\n            if (useW && wTarget != null && W.IsReady() && Player.Distance(wTarget) < W.Range)\n            {\n                W.Cast();\n                return;\n            }\n\n            if (useE && eTarget != null && E.IsReady() && Player.Distance(eTarget) < E.Range)\n            {\n                E.Cast();\n                return;\n            }\n\n            //regular combo\n            if (useR && rTarget != null && R.IsReady() && GetComboDamage(rTarget) >= rTarget.Health - 100 && R.GetPrediction(rTarget).Hitchance >= HitChance.High && Player.Distance(rTarget) <= R.Range)\n            {\n                R.Cast(rTarget);\n                return;\n            }\n\n        }\nAnswer:?\n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnItemLifted(Mobile from, Item item)\n        {\n            base.OnItemLifted(from, item);\n\n            if (from is PlayerMobile && PlayerMade && (Owner != null) && (Owner == Creator))\n            {\n                LootType = LootType.Regular;\n            }\n            else\n                if (from is PlayerMobile && Owner == null)\n                {\n                    Owner = from as PlayerMobile;\n\n                    LootType = LootType.Blessed;\n                    // flag the owner as carrying a questtoken\n                    Owner.SetFlag(XmlQuest.CarriedXmlQuestFlag, true);\n                }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void OnItemLifted(Mobile from, Item item)\n        {\n            base.OnItemLifted(from, item);\n\n            if (from is PlayerMobile && PlayerMade && (Owner != null) && (Owner == Creator))\n            {\n                LootType = LootType.Regular;\n            }\n            else\n                if (from is PlayerMobile && Owner == null)\n                {\n                    Owner = from as PlayerMobile;\n\n                    LootType = LootType.Blessed;\n                    // flag the owner as carrying a questtoken\n                    Owner.SetFlag(XmlQuest.CarriedXmlQuestFlag, true);\n                }\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool HasAnyWhitespaceElasticTrivia(SyntaxToken previousToken, SyntaxToken currentToken)\n        {\n            if ((!previousToken.ContainsAnnotations && !currentToken.ContainsAnnotations) ||\n                (!previousToken.HasTrailingTrivia && !currentToken.HasLeadingTrivia))\n            {\n                return false;\n            }\n\n            return previousToken.TrailingTrivia.HasAnyWhitespaceElasticTrivia() || currentToken.LeadingTrivia.HasAnyWhitespaceElasticTrivia();\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static bool HasAnyWhitespaceElasticTrivia(SyntaxToken previousToken, SyntaxToken currentToken)\n        {\n            if ((!previousToken.ContainsAnnotations && !currentToken.ContainsAnnotations) ||\n                (!previousToken.HasTrailingTrivia && !currentToken.HasLeadingTrivia))\n            {\n                return false;\n            }\n\n            return previousToken.TrailingTrivia.HasAnyWhitespaceElasticTrivia() || currentToken.LeadingTrivia.HasAnyWhitespaceElasticTrivia();\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Merges a list into the property of a given <paramref name=\"entry\"/>.</summary>\n        /// <param name=\"entry\">Entry to merge into.</param>\n        /// <param name=\"property\">Property on entry to merge into.</param>\n        /// <param name=\"list\">List of materialized values.</param>\n        /// <param name=\"nextLink\">Next link for feed from which the materialized values come from.</param>\n        /// <param name=\"plan\">Projection plan for the list.</param>\n        /// <remarks>\n        /// This method will handle entries that shouldn't be updated correctly.\n        /// </remarks>\n        private void MergeLists(MaterializerEntry entry, ClientPropertyAnnotation property, IEnumerable list, Uri nextLink, ProjectionPlan plan)\n        {\n            Debug.Assert(entry.Entry != null, \"entry != null\");\n            Debug.Assert(entry.ResolvedObject != null, \"entry.ResolvedObject != null\");\n            Debug.Assert(property != null, \"property != null\");\n            Debug.Assert(plan != null || nextLink == null, \"plan != null || nextLink == null\");\n\n            object leftCollection = property.GetValue(entry.ResolvedObject);\n\n            // Simple case: the list is of the target type, and the resolved entity\n            // has null; we can simply assign the collection. No merge required.\n            // Another case: the collection is not null but of zero elements and has\n            // not been tracked already; we simply assign the collection too.\n            if (entry.Shou\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Merges a list into the property of a given <paramref name=\"entry\"/>.</summary>\n        /// <param name=\"entry\">Entry to merge into.</param>\n        /// <param name=\"property\">Property on entry to merge into.</param>\n        /// <param name=\"list\">List of materialized values.</param>\n        /// <param name=\"nextLink\">Next link for feed from which the materialized values come from.</param>\n        /// <param name=\"plan\">Projection plan for the list.</param>\n        /// <remarks>\n        /// This method will handle entries that shouldn't be updated correctly.\n        /// </remarks>\n        private void MergeLists(MaterializerEntry entry, ClientPropertyAnnotation property, IEnumerable list, Uri nextLink, ProjectionPlan plan)\n        {\n            Debug.Assert(entry.Entry != null, \"entry != null\");\n            Debug.Assert(entry.ResolvedObject != null, \"entry.ResolvedObject != null\");\n            Debug.Assert(property != null, \"property != null\");\n            Debug.Assert(plan != null || nextLink == null, \"plan != null || nextLink == null\");\n\n            object leftCollection = property.GetValue(entry.ResolvedObject);\n\n            // Simple case: the list is of the target type, and the resolved entity\n            // has null; we can simply assign the collection. No merge required.\n            // Another case: the collection is not null but of zero elements and has\n            // not been tracked already; we simply assign the collection too.\n            if (entry.Shou\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// Ensures the buffer capacity is enough.\n            /// </summary>\n            /// <param name=\"context\">The context.</param>\n            /// <param name=\"count\">The count.</param>\n            /// <param name=\"minSizeCount\">The minimum size count.</param>\n            [MethodImpl(MethodImplOptions.AggressiveInlining)]\n            public void EnsureBufferCapacity(DeviceContextProxy context, int count, int minSizeCount)\n            {\n                int bytes = count * StructureSize;\n                if (buffer == null || Capacity < bytes || (!LazyResize && Capacity != bytes))\n                {\n                    Initialize(context, count, minSizeCount);\n                }\n            }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// Ensures the buffer capacity is enough.\n            /// </summary>\n            /// <param name=\"context\">The context.</param>\n            /// <param name=\"count\">The count.</param>\n            /// <param name=\"minSizeCount\">The minimum size count.</param>\n            [MethodImpl(MethodImplOptions.AggressiveInlining)]\n            public void EnsureBufferCapacity(DeviceContextProxy context, int count, int minSizeCount)\n            {\n                int bytes = count * StructureSize;\n                if (buffer == null || Capacity < bytes || (!LazyResize && Capacity != bytes))\n                {\n                    Initialize(context, count, minSizeCount);\n                }\n            }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static MemberAccessExpressionSyntax GetMemberAccessExpressionFromAssignment(SemanticModel semanticModel, AssignmentExpressionSyntax assignmentExpression, AssignmentExpressionSyntax nullLiteralAssignment)\n        {\n            if (assignmentExpression == null || nullLiteralAssignment == null\n                || !assignmentExpression.IsKind(SyntaxKind.SimpleAssignmentExpression)\n                || !assignmentExpression.IsKind(SyntaxKind.SimpleAssignmentExpression))\n                return null;\n            if (!nullLiteralAssignment.Right.IsKind(SyntaxKind.NullLiteralExpression)) return null;\n            if (!nullLiteralAssignment.Left.IsKind(SyntaxKind.IdentifierName)) return null;\n            if (!assignmentExpression.Left.IsKind(SyntaxKind.IdentifierName)) return null;\n            var assignmentIdentifier = semanticModel.GetSymbolInfo(assignmentExpression.Left);\n            var nullLiteralAssignmentIdentifier = semanticModel.GetSymbolInfo(nullLiteralAssignment.Left);\n            if ((assignmentIdentifier.Symbol ?? nullLiteralAssignmentIdentifier.Symbol) == null) return null;\n            if (!assignmentIdentifier.Equals(nullLiteralAssignmentIdentifier)) return null;\n            var memberAccessExpression = assignmentExpression.Right as MemberAccessExpressionSyntax;\n            return memberAccessExpression;\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static MemberAccessExpressionSyntax GetMemberAccessExpressionFromAssignment(SemanticModel semanticModel, AssignmentExpressionSyntax assignmentExpression, AssignmentExpressionSyntax nullLiteralAssignment)\n        {\n            if (assignmentExpression == null || nullLiteralAssignment == null\n                || !assignmentExpression.IsKind(SyntaxKind.SimpleAssignmentExpression)\n                || !assignmentExpression.IsKind(SyntaxKind.SimpleAssignmentExpression))\n                return null;\n            if (!nullLiteralAssignment.Right.IsKind(SyntaxKind.NullLiteralExpression)) return null;\n            if (!nullLiteralAssignment.Left.IsKind(SyntaxKind.IdentifierName)) return null;\n            if (!assignmentExpression.Left.IsKind(SyntaxKind.IdentifierName)) return null;\n            var assignmentIdentifier = semanticModel.GetSymbolInfo(assignmentExpression.Left);\n            var nullLiteralAssignmentIdentifier = semanticModel.GetSymbolInfo(nullLiteralAssignment.Left);\n            if ((assignmentIdentifier.Symbol ?? nullLiteralAssignmentIdentifier.Symbol) == null) return null;\n            if (!assignmentIdentifier.Equals(nullLiteralAssignmentIdentifier)) return null;\n            var memberAccessExpression = assignmentExpression.Right as MemberAccessExpressionSyntax;\n            return memberAccessExpression;\n        }\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// 5.4 pg 29\n        /**\n         * return true if the value r and s represent a DSA signature for\n         * the passed in message (for standard DSA the message should be\n         * a SHA-1 hash of the real message to be verified).\n         */\n        public bool VerifySignature(\n            byte[]\t\tmessage,\n            BigInteger\tr,\n            BigInteger\ts)\n        {\n            BigInteger n = key.Parameters.N;\n\n            // r and s should both in the range [1,n-1]\n            if (r.SignValue < 1 || s.SignValue < 1\n                || r.CompareTo(n) >= 0 || s.CompareTo(n) >= 0)\n            {\n                return false;\n            }\n\n            BigInteger e = calculateE(n, message);\n            BigInteger c = s.ModInverse(n);\n\n            BigInteger u1 = e.Multiply(c).Mod(n);\n            BigInteger u2 = r.Multiply(c).Mod(n);\n\n            ECPoint G = key.Parameters.G;\n            ECPoint Q = ((ECPublicKeyParameters) key).Q;\n\n            ECPoint point = ECAlgorithms.SumOfTwoMultiplies(G, u1, Q, u2);\n\n            if (point.IsInfinity)\n                return false;\n\n            BigInteger v = point.X.ToBigInteger().Mod(n);\n\n            return v.Equals(r);\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// 5.4 pg 29\n        /**\n         * return true if the value r and s represent a DSA signature for\n         * the passed in message (for standard DSA the message should be\n         * a SHA-1 hash of the real message to be verified).\n         */\n        public bool VerifySignature(\n            byte[]\t\tmessage,\n            BigInteger\tr,\n            BigInteger\ts)\n        {\n            BigInteger n = key.Parameters.N;\n\n            // r and s should both in the range [1,n-1]\n            if (r.SignValue < 1 || s.SignValue < 1\n                || r.CompareTo(n) >= 0 || s.CompareTo(n) >= 0)\n            {\n                return false;\n            }\n\n            BigInteger e = calculateE(n, message);\n            BigInteger c = s.ModInverse(n);\n\n            BigInteger u1 = e.Multiply(c).Mod(n);\n            BigInteger u2 = r.Multiply(c).Mod(n);\n\n            ECPoint G = key.Parameters.G;\n            ECPoint Q = ((ECPublicKeyParameters) key).Q;\n\n            ECPoint point = ECAlgorithms.SumOfTwoMultiplies(G, u1, Q, u2);\n\n            if (point.IsInfinity)\n                return false;\n\n            BigInteger v = point.X.ToBigInteger().Mod(n);\n\n            return v.Equals(r);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Visit(JsBinaryOperator node)\n        {\n            if (node != null)\n            {\n                // if this isn't a comma-operator, just recurse normal.\n                // if it is and this is the root block (parent is null) or a function block\n                // or there's already more than one statement in the block, we will want to possibly break\n                // this comma-operator expression statement into separate expression statements.\n                JsBlock parentBlock;\n                if (node.OperatorToken == JsToken.Comma\n                    && m_parser.Settings.IsModificationAllowed(JsTreeModifications.UnfoldCommaExpressionStatements)\n                    && ((parentBlock = node.Parent as JsBlock) != null)\n                    && (parentBlock.Parent == null\n                        || parentBlock.Parent is JsFunctionObject\n                        || parentBlock.Parent is JsTryNode\n                        || parentBlock.Parent is JsSwitchCase\n                        || parentBlock.Count > 1))\n                {\n                    // possibly break this one comma statement into multiple statements and recurse\n                    PossiblyBreakExpressionStatement(node, parentBlock);\n                }\n                else\n                {\n                    // just recurse it normally\n                    base.Visit(node);\n                }\n            }\n        }public override void Visit(JsConstantWrapper node)\n        {\n            if (node !\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Visit(JsBinaryOperator node)\n        {\n            if (node != null)\n            {\n                // if this isn't a comma-operator, just recurse normal.\n                // if it is and this is the root block (parent is null) or a function block\n                // or there's already more than one statement in the block, we will want to possibly break\n                // this comma-operator expression statement into separate expression statements.\n                JsBlock parentBlock;\n                if (node.OperatorToken == JsToken.Comma\n                    && m_parser.Settings.IsModificationAllowed(JsTreeModifications.UnfoldCommaExpressionStatements)\n                    && ((parentBlock = node.Parent as JsBlock) != null)\n                    && (parentBlock.Parent == null\n                        || parentBlock.Parent is JsFunctionObject\n                        || parentBlock.Parent is JsTryNode\n                        || parentBlock.Parent is JsSwitchCase\n                        || parentBlock.Count > 1))\n                {\n                    // possibly break this one comma statement into multiple statements and recurse\n                    PossiblyBreakExpressionStatement(node, parentBlock);\n                }\n                else\n                {\n                    // just recurse it normally\n                    base.Visit(node);\n                }\n            }\n        }public override void Visit(JsConstantWrapper node)\n        {\n            if (node !\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static List<PrintItem> ImportFromProjectArchive(string loadedFileName = null)\n\t\t{\n\t\t\tif (loadedFileName == null)\n\t\t\t{\n\t\t\t\tloadedFileName = defaultProjectPathAndFileName;\n\t\t\t}\n\n\t\t\tif (!System.IO.File.Exists(loadedFileName))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing (FileStream fs = File.OpenRead(loadedFileName))\n\t\t\t\tusing (ZipArchive zip = new ZipArchive(fs))\n\t\t\t\t{\n\t\t\t\t\tint projectHashCode = zip.GetHashCode();\n\n\t\t\t\t\t//If the temp folder doesn't exist - create it, otherwise clear it\n\t\t\t\t\tstring stagingFolder = Path.Combine(ApplicationDataStorage.Instance.ApplicationTempDataPath, \"project-extract\", projectHashCode.ToString());\n\t\t\t\t\tif (!Directory.Exists(stagingFolder))\n\t\t\t\t\t{\n\t\t\t\t\t\tDirectory.CreateDirectory(stagingFolder);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(@stagingFolder);\n\t\t\t\t\t\tEmptyFolder(directory);\n\t\t\t\t\t}\n\n\t\t\t\t\tList<PrintItem> printItemList = new List<PrintItem>();\n\t\t\t\t\tProject projectManifest = null;\n\n\t\t\t\t\tforeach (ZipArchiveEntry zipEntry in zip.Entries)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring sourceExtension = Path.GetExtension(zipEntry.Name).ToUpper();\n\n\t\t\t\t\t\t// Note: directories have empty Name properties\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Only process ZipEntries that are:\n\t\t\t\t\t\t//    - not directories and\n\t\t\t\t\t\t//     - are in the ValidFileExtension list or\n\t\t\t\t\t\t//     - have a .GCODE extension or\n\t\t\t\t\t\t//     - are named manifest.json\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(zipEntry.Name) &&\n\t\t\t\t\t\t\t(zipEntry.Name == \"manifest.json\"\n\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static List<PrintItem> ImportFromProjectArchive(string loadedFileName = null)\n\t\t{\n\t\t\tif (loadedFileName == null)\n\t\t\t{\n\t\t\t\tloadedFileName = defaultProjectPathAndFileName;\n\t\t\t}\n\n\t\t\tif (!System.IO.File.Exists(loadedFileName))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing (FileStream fs = File.OpenRead(loadedFileName))\n\t\t\t\tusing (ZipArchive zip = new ZipArchive(fs))\n\t\t\t\t{\n\t\t\t\t\tint projectHashCode = zip.GetHashCode();\n\n\t\t\t\t\t//If the temp folder doesn't exist - create it, otherwise clear it\n\t\t\t\t\tstring stagingFolder = Path.Combine(ApplicationDataStorage.Instance.ApplicationTempDataPath, \"project-extract\", projectHashCode.ToString());\n\t\t\t\t\tif (!Directory.Exists(stagingFolder))\n\t\t\t\t\t{\n\t\t\t\t\t\tDirectory.CreateDirectory(stagingFolder);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(@stagingFolder);\n\t\t\t\t\t\tEmptyFolder(directory);\n\t\t\t\t\t}\n\n\t\t\t\t\tList<PrintItem> printItemList = new List<PrintItem>();\n\t\t\t\t\tProject projectManifest = null;\n\n\t\t\t\t\tforeach (ZipArchiveEntry zipEntry in zip.Entries)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring sourceExtension = Path.GetExtension(zipEntry.Name).ToUpper();\n\n\t\t\t\t\t\t// Note: directories have empty Name properties\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Only process ZipEntries that are:\n\t\t\t\t\t\t//    - not directories and\n\t\t\t\t\t\t//     - are in the ValidFileExtension list or\n\t\t\t\t\t\t//     - have a .GCODE extension or\n\t\t\t\t\t\t//     - are named manifest.json\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(zipEntry.Name) &&\n\t\t\t\t\t\t\t(zipEntry.Name == \"manifest.json\"\n\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate Dictionary<string, string> ReadPaints(XElement e, ref SKPaint stroke, ref SKPaint fill, bool isGroup, bool isMask = false)\n\t\t{\n\t\t\tvar style = ReadStyle(e);\n\n\t\t\tReadPaints(style, ref stroke, ref fill, isGroup, out var fillId, out var strokeFillId);\n\n\t\t\tif (isMask)\n\t\t\t{\n\t\t\t\tif (stroke != null)\n\t\t\t\t\tstroke.BlendMode = SKBlendMode.SrcIn;\n\n\t\t\t\tif (fill != null)\n\t\t\t\t\tfill.BlendMode = SKBlendMode.SrcIn;\n\t\t\t}\n\n\t\t\tif (fillId != null)\n\t\t\t\telementFills[e] = fillId;\n\n\t\t\tif (strokeFillId != null)\n\t\t\t\tstrokeElementFills[e] = strokeFillId;\n\n\t\t\treturn style;\n\t\t}private void ReadPaints(Dictionary<string, string> style, ref SKPaint strokePaint, ref SKPaint fillPaint, bool isGroup, out string fillId, out string strokeFillId)\n\t\t{\n\t\t\tfillId = null;\n\t\t\tstrokeFillId = null;\n\n\t\t\t// get current element opacity, but ignore for groups (special case)\n\t\t\tfloat elementOpacity = isGroup ? 1.0f : ReadOpacity(style);\n\n\t\t\t// stroke\n\t\t\tvar stroke = GetString(style, \"stroke\").Trim();\n\t\t\tif (stroke.Equals(\"none\", StringComparison.OrdinalIgnoreCase))\n\t\t\t{\n\t\t\t\tstrokePaint = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (string.IsNullOrEmpty(stroke) || stroke == \"inherit\")\n\t\t\t\t{\n\t\t\t\t\t// no change\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (strokePaint == null || stroke == \"initial\")\n\t\t\t\t\t\tstrokePaint = CreatePaint(true);\n\n\t\t\t\t\tif (ColorHelper.TryParse(stroke, out SKColor color))\n\t\t\t\t\t{\n\t\t\t\t\t\t// preserve alpha\n\t\t\t\t\t\tif (color.Alpha == 255 && strokePaint.Color.Alpha > 0)\n\t\t\t\t\t\t\tstrokePaint.Color = color.WithAlpha(strokePaint.Color.Alpha)\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate Dictionary<string, string> ReadPaints(XElement e, ref SKPaint stroke, ref SKPaint fill, bool isGroup, bool isMask = false)\n\t\t{\n\t\t\tvar style = ReadStyle(e);\n\n\t\t\tReadPaints(style, ref stroke, ref fill, isGroup, out var fillId, out var strokeFillId);\n\n\t\t\tif (isMask)\n\t\t\t{\n\t\t\t\tif (stroke != null)\n\t\t\t\t\tstroke.BlendMode = SKBlendMode.SrcIn;\n\n\t\t\t\tif (fill != null)\n\t\t\t\t\tfill.BlendMode = SKBlendMode.SrcIn;\n\t\t\t}\n\n\t\t\tif (fillId != null)\n\t\t\t\telementFills[e] = fillId;\n\n\t\t\tif (strokeFillId != null)\n\t\t\t\tstrokeElementFills[e] = strokeFillId;\n\n\t\t\treturn style;\n\t\t}private void ReadPaints(Dictionary<string, string> style, ref SKPaint strokePaint, ref SKPaint fillPaint, bool isGroup, out string fillId, out string strokeFillId)\n\t\t{\n\t\t\tfillId = null;\n\t\t\tstrokeFillId = null;\n\n\t\t\t// get current element opacity, but ignore for groups (special case)\n\t\t\tfloat elementOpacity = isGroup ? 1.0f : ReadOpacity(style);\n\n\t\t\t// stroke\n\t\t\tvar stroke = GetString(style, \"stroke\").Trim();\n\t\t\tif (stroke.Equals(\"none\", StringComparison.OrdinalIgnoreCase))\n\t\t\t{\n\t\t\t\tstrokePaint = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (string.IsNullOrEmpty(stroke) || stroke == \"inherit\")\n\t\t\t\t{\n\t\t\t\t\t// no change\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (strokePaint == null || stroke == \"initial\")\n\t\t\t\t\t\tstrokePaint = CreatePaint(true);\n\n\t\t\t\t\tif (ColorHelper.TryParse(stroke, out SKColor color))\n\t\t\t\t\t{\n\t\t\t\t\t\t// preserve alpha\n\t\t\t\t\t\tif (color.Alpha == 255 && strokePaint.Color.Alpha > 0)\n\t\t\t\t\t\t\tstrokePaint.Color = color.WithAlpha(strokePaint.Color.Alpha)\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Dispatch(IInternalActorRef recipient, Address recipientAddress, SerializedMessage message,\n            IActorRef senderOption = null)\n        {\n            var payload = MessageSerializer.Deserialize(system, message);\n            Type payloadClass = payload == null ? null : payload.GetType();\n            var sender = senderOption ?? system.DeadLetters;\n            var originalReceiver = recipient.Path;\n\n            // message is intended for the RemoteDaemon, usually a command to create a remote actor\n            if (recipient.Equals(remoteDaemon))\n            {\n                if (settings.UntrustedMode) log.Debug(\"dropping daemon message in untrusted mode\");\n                else\n                {\n                    if (settings.LogReceive)\n                    {\n                        var msgLog = string.Format(\"RemoteMessage: {0} to {1}<+{2} from {3}\", payload, recipient, originalReceiver,sender);\n                        log.Debug(\"received daemon message [{0}]\", msgLog);\n                    }\n                    remoteDaemon.Tell(payload);\n                }\n            }\n\n            //message is intended for a local recipient\n            else if ((recipient is ILocalRef || recipient is RepointableActorRef) && recipient.IsLocal)\n            {\n                if (settings.LogReceive)\n                {\n                    var msgLog = string.Format(\"RemoteMessage: {0} to {1}<+{2} from {3}\", payload, recipient, originalReceiver,sender);\n                    log.D\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Dispatch(IInternalActorRef recipient, Address recipientAddress, SerializedMessage message,\n            IActorRef senderOption = null)\n        {\n            var payload = MessageSerializer.Deserialize(system, message);\n            Type payloadClass = payload == null ? null : payload.GetType();\n            var sender = senderOption ?? system.DeadLetters;\n            var originalReceiver = recipient.Path;\n\n            // message is intended for the RemoteDaemon, usually a command to create a remote actor\n            if (recipient.Equals(remoteDaemon))\n            {\n                if (settings.UntrustedMode) log.Debug(\"dropping daemon message in untrusted mode\");\n                else\n                {\n                    if (settings.LogReceive)\n                    {\n                        var msgLog = string.Format(\"RemoteMessage: {0} to {1}<+{2} from {3}\", payload, recipient, originalReceiver,sender);\n                        log.Debug(\"received daemon message [{0}]\", msgLog);\n                    }\n                    remoteDaemon.Tell(payload);\n                }\n            }\n\n            //message is intended for a local recipient\n            else if ((recipient is ILocalRef || recipient is RepointableActorRef) && recipient.IsLocal)\n            {\n                if (settings.LogReceive)\n                {\n                    var msgLog = string.Format(\"RemoteMessage: {0} to {1}<+{2} from {3}\", payload, recipient, originalReceiver,sender);\n                    log.D\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SqlJoin GetLeftOuterWithUnreferencedSingletonOnLeft(SqlSource source)\n\t\t\t{\n\t\t\t\tSqlAlias alias = source as SqlAlias;\n\t\t\t\tif(alias != null)\n\t\t\t\t{\n\t\t\t\t\tSqlSelect select = alias.Node as SqlSelect;\n\t\t\t\t\tif(select != null &&\n\t\t\t\t\t\tselect.Where == null &&\n\t\t\t\t\t\tselect.Top == null &&\n\t\t\t\t\t\tselect.GroupBy.Count == 0 &&\n\t\t\t\t\t\tselect.OrderBy.Count == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.GetLeftOuterWithUnreferencedSingletonOnLeft(select.From);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSqlJoin join = source as SqlJoin;\n\t\t\t\tif(join == null || join.JoinType != SqlJoinType.LeftOuter)\n\t\t\t\t\treturn null;\n\t\t\t\tif(!this.IsSingletonSelect(join.Left))\n\t\t\t\t\treturn null;\n\t\t\t\tHashSet<SqlAlias> p = SqlGatherProducedAliases.Gather(join.Left);\n\t\t\t\tHashSet<SqlAlias> c = SqlGatherConsumedAliases.Gather(join.Right);\n\t\t\t\tif(p.Overlaps(c))\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn join;\n\t\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SqlJoin GetLeftOuterWithUnreferencedSingletonOnLeft(SqlSource source)\n\t\t\t{\n\t\t\t\tSqlAlias alias = source as SqlAlias;\n\t\t\t\tif(alias != null)\n\t\t\t\t{\n\t\t\t\t\tSqlSelect select = alias.Node as SqlSelect;\n\t\t\t\t\tif(select != null &&\n\t\t\t\t\t\tselect.Where == null &&\n\t\t\t\t\t\tselect.Top == null &&\n\t\t\t\t\t\tselect.GroupBy.Count == 0 &&\n\t\t\t\t\t\tselect.OrderBy.Count == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.GetLeftOuterWithUnreferencedSingletonOnLeft(select.From);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSqlJoin join = source as SqlJoin;\n\t\t\t\tif(join == null || join.JoinType != SqlJoinType.LeftOuter)\n\t\t\t\t\treturn null;\n\t\t\t\tif(!this.IsSingletonSelect(join.Left))\n\t\t\t\t\treturn null;\n\t\t\t\tHashSet<SqlAlias> p = SqlGatherProducedAliases.Gather(join.Left);\n\t\t\t\tHashSet<SqlAlias> c = SqlGatherConsumedAliases.Gather(join.Right);\n\t\t\t\tif(p.Overlaps(c))\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn join;\n\t\t\t}\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Mobile FindDispelTarget(bool activeOnly)\n        {\n            if (this.m_Mobile.Deleted || this.m_Mobile.Int < 95 || this.CanDispel(this.m_Mobile) || this.m_Mobile.AutoDispel)\n                return null;\n\n            if (activeOnly)\n            {\n                List<AggressorInfo> aggressed = this.m_Mobile.Aggressed;\n                List<AggressorInfo> aggressors = this.m_Mobile.Aggressors;\n\n                Mobile active = null;\n                double activePrio = 0.0;\n\n                Mobile comb = this.m_Mobile.Combatant;\n\n                if (comb != null && !comb.Deleted && comb.Alive && !comb.IsDeadBondedPet && this.m_Mobile.InRange(comb, Core.ML ? 10 : 12) && this.CanDispel(comb))\n                {\n                    active = comb;\n                    activePrio = this.m_Mobile.GetDistanceToSqrt(comb);\n\n                    if (activePrio <= 2)\n                        return active;\n                }\n\n                for (int i = 0; i < aggressed.Count; ++i)\n                {\n                    AggressorInfo info = aggressed[i];\n                    Mobile m = info.Defender;\n\n                    if (m != comb && m.Combatant == this.m_Mobile && this.m_Mobile.InRange(m, Core.ML ? 10 : 12) && this.CanDispel(m))\n                    {\n                        double prio = this.m_Mobile.GetDistanceToSqrt(m);\n\n                        if (active == null || prio < activePrio)\n                        {\n                            active = m;\n                            a\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Mobile FindDispelTarget(bool activeOnly)\n        {\n            if (this.m_Mobile.Deleted || this.m_Mobile.Int < 95 || this.CanDispel(this.m_Mobile) || this.m_Mobile.AutoDispel)\n                return null;\n\n            if (activeOnly)\n            {\n                List<AggressorInfo> aggressed = this.m_Mobile.Aggressed;\n                List<AggressorInfo> aggressors = this.m_Mobile.Aggressors;\n\n                Mobile active = null;\n                double activePrio = 0.0;\n\n                Mobile comb = this.m_Mobile.Combatant;\n\n                if (comb != null && !comb.Deleted && comb.Alive && !comb.IsDeadBondedPet && this.m_Mobile.InRange(comb, Core.ML ? 10 : 12) && this.CanDispel(comb))\n                {\n                    active = comb;\n                    activePrio = this.m_Mobile.GetDistanceToSqrt(comb);\n\n                    if (activePrio <= 2)\n                        return active;\n                }\n\n                for (int i = 0; i < aggressed.Count; ++i)\n                {\n                    AggressorInfo info = aggressed[i];\n                    Mobile m = info.Defender;\n\n                    if (m != comb && m.Combatant == this.m_Mobile && this.m_Mobile.InRange(m, Core.ML ? 10 : 12) && this.CanDispel(m))\n                    {\n                        double prio = this.m_Mobile.GetDistanceToSqrt(m);\n\n                        if (active == null || prio < activePrio)\n                        {\n                            active = m;\n                            a\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate async void btnStart_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                if (btnStart.Text == StopCaption)\n                {\n                    await CancelActions();\n                    btnStart.Text = StartCaption;\n                    return;\n                }\n\n                if (serviceBusHelper != null &&\n                    ValidateParameters())\n                {\n                    startLog?.Invoke();\n                    btnStart.Enabled = false;\n                    Cursor.Current = Cursors.WaitCursor;\n\n                    //*****************************************************************************************************\n                    //                                   Initialize Statistics and Manager Action\n                    //*****************************************************************************************************\n                    actionCount = 0;\n                    senderMessageNumber = 0;\n                    senderMessagesPerSecond = 0;\n                    senderMinimumTime = long.MaxValue;\n                    senderMaximumTime = 0;\n                    senderAverageTime = 0;\n                    senderTotalTime = 0;\n                    receiverMessageNumber = 0;\n                    receiverMessagesPerSecond = 0;\n                    receiverMinimumTime = long.MaxValue;\n                    receiverMaximumTime = 0;\n                    receiverAverageTime = 0;\n                    receiverTotalT\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate async void btnStart_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                if (btnStart.Text == StopCaption)\n                {\n                    await CancelActions();\n                    btnStart.Text = StartCaption;\n                    return;\n                }\n\n                if (serviceBusHelper != null &&\n                    ValidateParameters())\n                {\n                    startLog?.Invoke();\n                    btnStart.Enabled = false;\n                    Cursor.Current = Cursors.WaitCursor;\n\n                    //*****************************************************************************************************\n                    //                                   Initialize Statistics and Manager Action\n                    //*****************************************************************************************************\n                    actionCount = 0;\n                    senderMessageNumber = 0;\n                    senderMessagesPerSecond = 0;\n                    senderMinimumTime = long.MaxValue;\n                    senderMaximumTime = 0;\n                    senderAverageTime = 0;\n                    senderTotalTime = 0;\n                    receiverMessageNumber = 0;\n                    receiverMessagesPerSecond = 0;\n                    receiverMinimumTime = long.MaxValue;\n                    receiverMaximumTime = 0;\n                    receiverAverageTime = 0;\n                    receiverTotalT\nAnswer:?\n</think>\n\nAnswer:?"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool DoSignaturesMatch(\n            PEModule module,\n            MetadataDecoder metadataDecoder,\n            ParamInfo<TypeSymbol>[] propertyParams,\n            PEMethodSymbol getMethod,\n            ParamInfo<TypeSymbol>[] getMethodParams,\n            PEMethodSymbol setMethod,\n            ParamInfo<TypeSymbol>[] setMethodParams)\n        {\n            Debug.Assert((getMethodParams == null) == ((object)getMethod == null));\n            Debug.Assert((setMethodParams == null) == ((object)setMethod == null));\n\n            bool hasGetMethod = getMethodParams != null;\n            bool hasSetMethod = setMethodParams != null;\n\n            if (hasGetMethod && !metadataDecoder.DoPropertySignaturesMatch(propertyParams, getMethodParams, comparingToSetter: false, compareParamByRef: true, compareReturnType: true))\n            {\n                return false;\n            }\n\n            if (hasSetMethod && !metadataDecoder.DoPropertySignaturesMatch(propertyParams, setMethodParams, comparingToSetter: true, compareParamByRef: true, compareReturnType: true))\n            {\n                return false;\n            }\n\n            if (hasGetMethod && hasSetMethod)\n            {\n                var lastPropertyParamIndex = propertyParams.Length - 1;\n                var getHandle = getMethodParams[lastPropertyParamIndex].Handle;\n                var setHandle = setMethodParams[lastPropertyParamIndex].Handle;\n                var getterHasParamArray = !getHandle.IsNil && module.HasParamsAt\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static bool DoSignaturesMatch(\n            PEModule module,\n            MetadataDecoder metadataDecoder,\n            ParamInfo<TypeSymbol>[] propertyParams,\n            PEMethodSymbol getMethod,\n            ParamInfo<TypeSymbol>[] getMethodParams,\n            PEMethodSymbol setMethod,\n            ParamInfo<TypeSymbol>[] setMethodParams)\n        {\n            Debug.Assert((getMethodParams == null) == ((object)getMethod == null));\n            Debug.Assert((setMethodParams == null) == ((object)setMethod == null));\n\n            bool hasGetMethod = getMethodParams != null;\n            bool hasSetMethod = setMethodParams != null;\n\n            if (hasGetMethod && !metadataDecoder.DoPropertySignaturesMatch(propertyParams, getMethodParams, comparingToSetter: false, compareParamByRef: true, compareReturnType: true))\n            {\n                return false;\n            }\n\n            if (hasSetMethod && !metadataDecoder.DoPropertySignaturesMatch(propertyParams, setMethodParams, comparingToSetter: true, compareParamByRef: true, compareReturnType: true))\n            {\n                return false;\n            }\n\n            if (hasGetMethod && hasSetMethod)\n            {\n                var lastPropertyParamIndex = propertyParams.Length - 1;\n                var getHandle = getMethodParams[lastPropertyParamIndex].Handle;\n                var setHandle = setMethodParams[lastPropertyParamIndex].Handle;\n                var getterHasParamArray = !getHandle.IsNil && module.HasParamsAt\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual int GetSelectedCipherSuite()\n        {\n            /*\n             * TODO RFC 5246 7.4.3. In order to negotiate correctly, the server MUST check any candidate\n             * cipher suites against the \"signature_algorithms\" extension before selecting them. This is\n             * somewhat inelegant but is a compromise designed to minimize changes to the original\n             * cipher suite design.\n             */\n\n            /*\n             * RFC 4429 5.1. A server that receives a ClientHello containing one or both of these\n             * extensions MUST use the client's enumerated capabilities to guide its selection of an\n             * appropriate cipher suite. One of the proposed ECC cipher suites must be negotiated only\n             * if the server can successfully complete the handshake while using the curves and point\n             * formats supported by the client [...].\n             */\n            bool eccCipherSuitesEnabled = SupportsClientEccCapabilities(this.mNamedCurves, this.mClientECPointFormats);\n\n            int[] cipherSuites = GetCipherSuites();\n            for (int i = 0; i < cipherSuites.Length; ++i)\n            {\n                int cipherSuite = cipherSuites[i];\n\n                if (Arrays.Contains(this.mOfferedCipherSuites, cipherSuite)\n                    && (eccCipherSuitesEnabled || !TlsEccUtilities.IsEccCipherSuite(cipherSuite))\n                    && TlsUtilities.IsValidCipherSuiteForVersion(cipherSuite, mServerVersion))\n              \nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual int GetSelectedCipherSuite()\n        {\n            /*\n             * TODO RFC 5246 7.4.3. In order to negotiate correctly, the server MUST check any candidate\n             * cipher suites against the \"signature_algorithms\" extension before selecting them. This is\n             * somewhat inelegant but is a compromise designed to minimize changes to the original\n             * cipher suite design.\n             */\n\n            /*\n             * RFC 4429 5.1. A server that receives a ClientHello containing one or both of these\n             * extensions MUST use the client's enumerated capabilities to guide its selection of an\n             * appropriate cipher suite. One of the proposed ECC cipher suites must be negotiated only\n             * if the server can successfully complete the handshake while using the curves and point\n             * formats supported by the client [...].\n             */\n            bool eccCipherSuitesEnabled = SupportsClientEccCapabilities(this.mNamedCurves, this.mClientECPointFormats);\n\n            int[] cipherSuites = GetCipherSuites();\n            for (int i = 0; i < cipherSuites.Length; ++i)\n            {\n                int cipherSuite = cipherSuites[i];\n\n                if (Arrays.Contains(this.mOfferedCipherSuites, cipherSuite)\n                    && (eccCipherSuitesEnabled || !TlsEccUtilities.IsEccCipherSuite(cipherSuite))\n                    && TlsUtilities.IsValidCipherSuiteForVersion(cipherSuite, mServerVersion))\n              \nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static Mesh CreateHullMesh(Mesh mesh)\n\t\t{\n\t\t\tvar bounds = AxisAlignedBoundingBox.Empty();\n\t\t\t// Get the convex hull for the mesh\n\t\t\tvar cHVertexList = new List<CHVertex>();\n\t\t\tforeach (var position in mesh.Vertices.ToArray())\n\t\t\t{\n\t\t\t\tcHVertexList.Add(new CHVertex(position));\n\t\t\t\tbounds.ExpandToInclude(position);\n\t\t\t}\n\n\t\t\tif (cHVertexList.Count == 0\n\t\t\t\t|| bounds.XSize == 0\n\t\t\t\t|| bounds.YSize == 0\n\t\t\t\t|| bounds.ZSize == 0)\n\t\t\t{\n\t\t\t\treturn mesh;\n\t\t\t}\n\n\t\t\tvar convexHull = ConvexHull<CHVertex, CHFace>.Create(cHVertexList, .01);\n\t\t\tif (convexHull != null)\n\t\t\t{\n\t\t\t\t// create the mesh from the hull data\n\t\t\t\tMesh hullMesh = new Mesh();\n\t\t\t\tforeach (var face in convexHull.Faces)\n\t\t\t\t{\n\t\t\t\t\tint vertexCount = hullMesh.Vertices.Count;\n\n\t\t\t\t\tforeach (var vertex in face.Vertices)\n\t\t\t\t\t{\n\t\t\t\t\t\thullMesh.Vertices.Add(new Vector3(vertex.Position[0], vertex.Position[1], vertex.Position[2]));\n\t\t\t\t\t}\n\n\t\t\t\t\thullMesh.Faces.Add(vertexCount, vertexCount + 1, vertexCount + 2, hullMesh.Vertices);\n\t\t\t\t}\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// make sure there is not currently a convex hull on this object\n\t\t\t\t\tif (mesh.PropertyBag.ContainsKey(ConvexHullMesh))\n\t\t\t\t\t{\n\t\t\t\t\t\tmesh.PropertyBag.Remove(ConvexHullMesh);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add the new hull\n\t\t\t\t\tmesh.PropertyBag.Add(ConvexHullMesh, hullMesh);\n\t\t\t\t\t// make sure we remove this hull if the mesh changes\n\t\t\t\t\tmesh.Changed += MeshChanged_RemoveConvexHull;\n\n\t\t\t\t\t// remove the marker that says we are building the hull\n\t\t\t\t\tif (mesh.PropertyBag.ContainsKey(CreatingCo\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static Mesh CreateHullMesh(Mesh mesh)\n\t\t{\n\t\t\tvar bounds = AxisAlignedBoundingBox.Empty();\n\t\t\t// Get the convex hull for the mesh\n\t\t\tvar cHVertexList = new List<CHVertex>();\n\t\t\tforeach (var position in mesh.Vertices.ToArray())\n\t\t\t{\n\t\t\t\tcHVertexList.Add(new CHVertex(position));\n\t\t\t\tbounds.ExpandToInclude(position);\n\t\t\t}\n\n\t\t\tif (cHVertexList.Count == 0\n\t\t\t\t|| bounds.XSize == 0\n\t\t\t\t|| bounds.YSize == 0\n\t\t\t\t|| bounds.ZSize == 0)\n\t\t\t{\n\t\t\t\treturn mesh;\n\t\t\t}\n\n\t\t\tvar convexHull = ConvexHull<CHVertex, CHFace>.Create(cHVertexList, .01);\n\t\t\tif (convexHull != null)\n\t\t\t{\n\t\t\t\t// create the mesh from the hull data\n\t\t\t\tMesh hullMesh = new Mesh();\n\t\t\t\tforeach (var face in convexHull.Faces)\n\t\t\t\t{\n\t\t\t\t\tint vertexCount = hullMesh.Vertices.Count;\n\n\t\t\t\t\tforeach (var vertex in face.Vertices)\n\t\t\t\t\t{\n\t\t\t\t\t\thullMesh.Vertices.Add(new Vector3(vertex.Position[0], vertex.Position[1], vertex.Position[2]));\n\t\t\t\t\t}\n\n\t\t\t\t\thullMesh.Faces.Add(vertexCount, vertexCount + 1, vertexCount + 2, hullMesh.Vertices);\n\t\t\t\t}\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// make sure there is not currently a convex hull on this object\n\t\t\t\t\tif (mesh.PropertyBag.ContainsKey(ConvexHullMesh))\n\t\t\t\t\t{\n\t\t\t\t\t\tmesh.PropertyBag.Remove(ConvexHullMesh);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add the new hull\n\t\t\t\t\tmesh.PropertyBag.Add(ConvexHullMesh, hullMesh);\n\t\t\t\t\t// make sure we remove this hull if the mesh changes\n\t\t\t\t\tmesh.Changed += MeshChanged_RemoveConvexHull;\n\n\t\t\t\t\t// remove the marker that says we are building the hull\n\t\t\t\t\tif (mesh.PropertyBag.ContainsKey(CreatingCo\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string GetDatabasePath(string backend, Options options, bool autoCreate = true, bool anyUsername = false)\n        {\n            if (options == null)\n                options = new Options(new Dictionary<string, string>());\n\n            if (!string.IsNullOrEmpty(options.Dbpath))\n                return options.Dbpath;\n\n\t\t\t//Normal mode uses the systems \"(Local) Application Data\" folder\n\t\t\t// %LOCALAPPDATA% on Windows, ~/.config on Linux\n\n\t\t\t// Special handling for Windows:\n\t\t\t//   - Older versions use %APPDATA%\n\t\t\t//   - but new versions use %LOCALAPPDATA%\n\t\t\t//\n\t\t\t//  If we find a new version, lets use that\n\t\t\t//    otherwise use the older location\n\t\t\t//\n\n\t\t\tvar folder = System.IO.Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Duplicati\");\n\n\t\t\tif (Platform.IsClientWindows)\n\t\t\t{\n\t\t\t\tvar newlocation = System.IO.Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), \"Duplicati\");\n\n\t\t\t\tvar prevfile = System.IO.Path.Combine(folder, \"dbconfig.json\");\n\t\t\t\tvar curfile = System.IO.Path.Combine(newlocation, \"dbconfig.json\");\n\n\t\t\t\t// If the new file exists, we use that\n\t\t\t\t// If the new file does not exist, and the old file exists we use the old\n\t\t\t\t// Otherwise we use the new location\n\t\t\t\tif (System.IO.File.Exists(curfile) || !System.IO.File.Exists(prevfile))\n\t\t\t\t\tfolder = newlocation;\n\t\t\t}\n\n            if (!System.IO.Directory.Exists(folder))\n                System.IO.Directory.CreateDirect\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string GetDatabasePath(string backend, Options options, bool autoCreate = true, bool anyUsername = false)\n        {\n            if (options == null)\n                options = new Options(new Dictionary<string, string>());\n\n            if (!string.IsNullOrEmpty(options.Dbpath))\n                return options.Dbpath;\n\n\t\t\t//Normal mode uses the systems \"(Local) Application Data\" folder\n\t\t\t// %LOCALAPPDATA% on Windows, ~/.config on Linux\n\n\t\t\t// Special handling for Windows:\n\t\t\t//   - Older versions use %APPDATA%\n\t\t\t//   - but new versions use %LOCALAPPDATA%\n\t\t\t//\n\t\t\t//  If we find a new version, lets use that\n\t\t\t//    otherwise use the older location\n\t\t\t//\n\n\t\t\tvar folder = System.IO.Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Duplicati\");\n\n\t\t\tif (Platform.IsClientWindows)\n\t\t\t{\n\t\t\t\tvar newlocation = System.IO.Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), \"Duplicati\");\n\n\t\t\t\tvar prevfile = System.IO.Path.Combine(folder, \"dbconfig.json\");\n\t\t\t\tvar curfile = System.IO.Path.Combine(newlocation, \"dbconfig.json\");\n\n\t\t\t\t// If the new file exists, we use that\n\t\t\t\t// If the new file does not exist, and the old file exists we use the old\n\t\t\t\t// Otherwise we use the new location\n\t\t\t\tif (System.IO.File.Exists(curfile) || !System.IO.File.Exists(prevfile))\n\t\t\t\t\tfolder = newlocation;\n\t\t\t}\n\n            if (!System.IO.Directory.Exists(folder))\n                System.IO.Directory.CreateDirect\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddFieldDelegatingConstructor(\n                IList<TArgumentSyntax> argumentList, IList<ISymbol> members, GenerateTypeOptionsResult options = null)\n            {\n                var factory = _document.Project.LanguageServices.GetService<SyntaxGenerator>();\n                var syntaxFactsService = _document.Project.LanguageServices.GetService<ISyntaxFactsService>();\n\n                var availableTypeParameters = _service.GetAvailableTypeParameters(_state, _document.SemanticModel, _intoNamespace, _cancellationToken);\n                var parameterTypes = GetArgumentTypes(argumentList);\n                var parameterNames = _service.GenerateParameterNames(_document.SemanticModel, argumentList);\n                var parameters = new List<IParameterSymbol>();\n\n                var parameterToExistingFieldMap = new Dictionary<string, ISymbol>();\n                var parameterToNewFieldMap = new Dictionary<string, string>();\n\n                var syntaxFacts = _document.Project.LanguageServices.GetService<ISyntaxFactsService>();\n                for (var i = 0; i < parameterNames.Count; i++)\n                {\n                    var refKind = syntaxFacts.GetRefKindOfArgument(argumentList[i]);\n\n                    var parameterName = parameterNames[i];\n                    var parameterType = (ITypeSymbol)parameterTypes[i];\n                    parameterType = parameterType.RemoveUnavailableTypeParameters(\n                        _document.SemanticModel.Compilation, availableT\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void AddFieldDelegatingConstructor(\n                IList<TArgumentSyntax> argumentList, IList<ISymbol> members, GenerateTypeOptionsResult options = null)\n            {\n                var factory = _document.Project.LanguageServices.GetService<SyntaxGenerator>();\n                var syntaxFactsService = _document.Project.LanguageServices.GetService<ISyntaxFactsService>();\n\n                var availableTypeParameters = _service.GetAvailableTypeParameters(_state, _document.SemanticModel, _intoNamespace, _cancellationToken);\n                var parameterTypes = GetArgumentTypes(argumentList);\n                var parameterNames = _service.GenerateParameterNames(_document.SemanticModel, argumentList);\n                var parameters = new List<IParameterSymbol>();\n\n                var parameterToExistingFieldMap = new Dictionary<string, ISymbol>();\n                var parameterToNewFieldMap = new Dictionary<string, string>();\n\n                var syntaxFacts = _document.Project.LanguageServices.GetService<ISyntaxFactsService>();\n                for (var i = 0; i < parameterNames.Count; i++)\n                {\n                    var refKind = syntaxFacts.GetRefKindOfArgument(argumentList[i]);\n\n                    var parameterName = parameterNames[i];\n                    var parameterType = (ITypeSymbol)parameterTypes[i];\n                    parameterType = parameterType.RemoveUnavailableTypeParameters(\n                        _document.SemanticModel.Compilation, availableT\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        ///     Check when a spell has been casted\n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        private void OnOrder(Obj_AI_Base sender, GameObjectIssueOrderEventArgs args)\n        {\n            if (!sender.IsMe) return;\n\n            if (!this.IsChanneling) return;\n\n            if (args.Order == GameObjectOrder.MoveTo || args.Order == GameObjectOrder.AttackTo\n                || args.Order == GameObjectOrder.AttackUnit || args.Order == GameObjectOrder.AutoAttack)\n            {\n                args.Process = false;\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        ///     Check when a spell has been casted\n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        private void OnOrder(Obj_AI_Base sender, GameObjectIssueOrderEventArgs args)\n        {\n            if (!sender.IsMe) return;\n\n            if (!this.IsChanneling) return;\n\n            if (args.Order == GameObjectOrder.MoveTo || args.Order == GameObjectOrder.AttackTo\n                || args.Order == GameObjectOrder.AttackUnit || args.Order == GameObjectOrder.AutoAttack)\n            {\n                args.Process = false;\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates an expression that updates the member inside <paramref name=\"node\"/> with a\n        /// new <paramref name=\"value\"/>.\n        /// </summary>\n        /// <remarks>\n        /// Should <paramref name=\"node\"/> contain a call to the\n        /// <see cref=\"DotvvmBindableObject.GetValue(DotvvmProperty, bool)\"/> method, it will be\n        /// replaced with a <see cref=\"DotvvmBindableObject.SetValue(DotvvmProperty, object)\"/>\n        /// call.\n        /// </remarks>\n        public static Expression UpdateMember(Expression node, Expression value)\n        {\n            if ((node.NodeType == ExpressionType.MemberAccess\n                && node is MemberExpression member\n                && member.Member is PropertyInfo property\n                && property.CanWrite)\n                || node.NodeType == ExpressionType.Parameter\n                || node.NodeType == ExpressionType.Index)\n            {\n                return Expression.Assign(node, Expression.Convert(value, node.Type));\n            }\n\n            var current = node;\n            while (current.NodeType == ExpressionType.Convert\n                && current is UnaryExpression unary)\n            {\n                current = unary.Operand;\n            }\n\n            if (current.NodeType == ExpressionType.Call\n                && current is MethodCallExpression call\n                && call.Method.DeclaringType == typeof(DotvvmBindableObject)\n                && call.Method.Name == nameof(DotvvmBindableObje\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates an expression that updates the member inside <paramref name=\"node\"/> with a\n        /// new <paramref name=\"value\"/>.\n        /// </summary>\n        /// <remarks>\n        /// Should <paramref name=\"node\"/> contain a call to the\n        /// <see cref=\"DotvvmBindableObject.GetValue(DotvvmProperty, bool)\"/> method, it will be\n        /// replaced with a <see cref=\"DotvvmBindableObject.SetValue(DotvvmProperty, object)\"/>\n        /// call.\n        /// </remarks>\n        public static Expression UpdateMember(Expression node, Expression value)\n        {\n            if ((node.NodeType == ExpressionType.MemberAccess\n                && node is MemberExpression member\n                && member.Member is PropertyInfo property\n                && property.CanWrite)\n                || node.NodeType == ExpressionType.Parameter\n                || node.NodeType == ExpressionType.Index)\n            {\n                return Expression.Assign(node, Expression.Convert(value, node.Type));\n            }\n\n            var current = node;\n            while (current.NodeType == ExpressionType.Convert\n                && current is UnaryExpression unary)\n            {\n                current = unary.Operand;\n            }\n\n            if (current.NodeType == ExpressionType.Call\n                && current is MethodCallExpression call\n                && call.Method.DeclaringType == typeof(DotvvmBindableObject)\n                && call.Method.Name == nameof(DotvvmBindableObje\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void CheckElementRole(IAccessibleElement element, IAccessibleElement parent) {\n            if (parent != null && (parent.Role == null || PdfName.ARTIFACT.Equals(parent.Role)))\n                element.Role = null;\n            else if ((taggingMode & markInlineElementsOnly) != 0) {\n                if (element.IsInline && element.Role == null && (parent == null || !parent.IsInline))\n                    throw new ArgumentException(MessageLocalization.GetComposedMessage(\"inline.elements.with.role.null.are.not.allowed\"));\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual void CheckElementRole(IAccessibleElement element, IAccessibleElement parent) {\n            if (parent != null && (parent.Role == null || PdfName.ARTIFACT.Equals(parent.Role)))\n                element.Role = null;\n            else if ((taggingMode & markInlineElementsOnly) != 0) {\n                if (element.IsInline && element.Role == null && (parent == null || !parent.IsInline))\n                    throw new ArgumentException(MessageLocalization.GetComposedMessage(\"inline.elements.with.role.null.are.not.allowed\"));\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic BasketOrderInfoAdaptor GetOrder(string uniqueOrderId)\n\t\t{\n\t\t\tGuid guid;\n\t\t\tGuid.TryParse(uniqueOrderId, out guid);\n\t\t\t\n\t\t\tvar order = Orders.GetOrder(guid) as BasketOrderInfoAdaptor;\n\n\t\t\tvar membershipUser = Membership.GetUser();\n\n\t\t\tif (IO.Container.Resolve<ICMSApplication>().IsBackendUserAuthenticated ||\n\t\t\t\tmembershipUser != null && membershipUser.UserName == order.Customer.UserName ||\n\t\t\t\tUwebshopRequest.Current.PaymentProvider != null ||\n\t\t\t\tOrderHelper.IsCompletedOrderWithinValidLifetime(order))\n\t\t\t{\n\t\t\t\treturn order;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic BasketOrderInfoAdaptor GetOrder(string uniqueOrderId)\n\t\t{\n\t\t\tGuid guid;\n\t\t\tGuid.TryParse(uniqueOrderId, out guid);\n\t\t\t\n\t\t\tvar order = Orders.GetOrder(guid) as BasketOrderInfoAdaptor;\n\n\t\t\tvar membershipUser = Membership.GetUser();\n\n\t\t\tif (IO.Container.Resolve<ICMSApplication>().IsBackendUserAuthenticated ||\n\t\t\t\tmembershipUser != null && membershipUser.UserName == order.Customer.UserName ||\n\t\t\t\tUwebshopRequest.Current.PaymentProvider != null ||\n\t\t\t\tOrderHelper.IsCompletedOrderWithinValidLifetime(order))\n\t\t\t{\n\t\t\t\treturn order;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic WebStats()\n\t\t{\n\t\t\tCMOptions = new WebStatsOptions();\n\n\t\t\tEventSink.ServerStarted += () => _Started = true;\n\n\t\t\tClients = new List<WebStatsClient>();\n\t\t\tSnapshot = new Dictionary<IPAddress, List<NetState>>();\n\n\t\t\tStats = new BinaryDataStore<string, WebStatsEntry>(VitaNexCore.SavesDirectory + \"/WebStats\", \"Stats\")\n\t\t\t{\n\t\t\t\tOnSerialize = SerializeStats,\n\t\t\t\tOnDeserialize = DeserializeStats\n\t\t\t};\n\n\t\t\tTimeSpan uptime = DateTime.UtcNow - Clock.ServerStart;\n\n\t\t\tStats.Add(\"uptime\", new WebStatsEntry(uptime, false));\n\t\t\tStats.Add(\"uptime_peak\", new WebStatsEntry(uptime, true));\n\n\t\t\tStats.Add(\"online\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"online_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"online_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"unique\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"unique_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"unique_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"items\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"items_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"items_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"mobiles\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"mobiles_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"mobiles_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"guilds\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"guilds_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"guilds_peak\", new WebStatsEntry(0, true));\n\n\t\t\tOnConnected += HandleConnection;\n\n\t\t\t_ActivityTimer = PollTimer.FromSecon\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nstatic WebStats()\n\t\t{\n\t\t\tCMOptions = new WebStatsOptions();\n\n\t\t\tEventSink.ServerStarted += () => _Started = true;\n\n\t\t\tClients = new List<WebStatsClient>();\n\t\t\tSnapshot = new Dictionary<IPAddress, List<NetState>>();\n\n\t\t\tStats = new BinaryDataStore<string, WebStatsEntry>(VitaNexCore.SavesDirectory + \"/WebStats\", \"Stats\")\n\t\t\t{\n\t\t\t\tOnSerialize = SerializeStats,\n\t\t\t\tOnDeserialize = DeserializeStats\n\t\t\t};\n\n\t\t\tTimeSpan uptime = DateTime.UtcNow - Clock.ServerStart;\n\n\t\t\tStats.Add(\"uptime\", new WebStatsEntry(uptime, false));\n\t\t\tStats.Add(\"uptime_peak\", new WebStatsEntry(uptime, true));\n\n\t\t\tStats.Add(\"online\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"online_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"online_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"unique\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"unique_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"unique_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"items\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"items_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"items_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"mobiles\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"mobiles_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"mobiles_peak\", new WebStatsEntry(0, true));\n\n\t\t\tStats.Add(\"guilds\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"guilds_max\", new WebStatsEntry(0, false));\n\t\t\tStats.Add(\"guilds_peak\", new WebStatsEntry(0, true));\n\n\t\t\tOnConnected += HandleConnection;\n\n\t\t\t_ActivityTimer = PollTimer.FromSecon\nAnswer: Ansswer: Multif"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override string GetName() {\n\n         if (this.actionDescr.GetCustomAttributes<HttpGetAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPostAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPutAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpDeleteAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPatchAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpHeadAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpOptionsAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<AcceptVerbsAttribute>().Any()) {\n            \n            return this.actionDescr.ActionName;\n         }\n\n         return \"\";\n      }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override string GetName() {\n\n         if (this.actionDescr.GetCustomAttributes<HttpGetAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPostAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPutAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpDeleteAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpPatchAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpHeadAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<HttpOptionsAttribute>().Any()\n            || this.actionDescr.GetCustomAttributes<AcceptVerbsAttribute>().Any()) {\n            \n            return this.actionDescr.ActionName;\n         }\n\n         return \"\";\n      }\nAnswer: ___________ (Please fill"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Search for samples that are provided directly through <see cref=\"ActionSamples\"/>.\n        /// </summary>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        /// <param name=\"type\">The CLR type.</param>\n        /// <param name=\"formatter\">The formatter.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"sampleDirection\">The value indicating whether the sample is for a request or for a response.</param>\n        /// <returns>The sample that matches the parameters.</returns>\n        public virtual object GetActionSample(string controllerName, string actionName, IEnumerable<string> parameterNames, Type type, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, SampleDirection sampleDirection)\n        {\n            object sample;\n\n            // First, try to get the sample provided for the specified mediaType, sampleDirection, controllerName, actionName and parameterNames.\n            // If not found, try to get the sample provided for the specified mediaType, sampleDirection, controllerName and actionName regardless of the parameterNames.\n            // If still not found, try to get the sample provided for the specified mediaType and type.\n            // Finally, try to get the sample provided for the specified mediaType.\n            if (Act\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Search for samples that are provided directly through <see cref=\"ActionSamples\"/>.\n        /// </summary>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        /// <param name=\"type\">The CLR type.</param>\n        /// <param name=\"formatter\">The formatter.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"sampleDirection\">The value indicating whether the sample is for a request or for a response.</param>\n        /// <returns>The sample that matches the parameters.</returns>\n        public virtual object GetActionSample(string controllerName, string actionName, IEnumerable<string> parameterNames, Type type, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, SampleDirection sampleDirection)\n        {\n            object sample;\n\n            // First, try to get the sample provided for the specified mediaType, sampleDirection, controllerName, actionName and parameterNames.\n            // If not found, try to get the sample provided for the specified mediaType, sampleDirection, controllerName and actionName regardless of the parameterNames.\n            // If still not found, try to get the sample provided for the specified mediaType and type.\n            // Finally, try to get the sample provided for the specified mediaType.\n            if (Act\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void PlayServer(NetState state, PacketReader pvSrc)\n\t\t{\n\t\t\tint index = pvSrc.ReadInt16();\n\t\t\tServerInfo[] info = state.ServerInfo;\n\t\t\tIAccount a = state.Account;\n\n\t\t\tif (info == null || a == null || index < 0 || index >= info.Length)\n\t\t\t{\n\t\t\t\tstate.Dispose();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tServerInfo si = info[index];\n\n\t\t\t\tstate.m_AuthID = PlayServerAck.m_AuthID = GenerateAuthID(state);\n\n\t\t\t\tstate.SentFirstPacket = false;\n\t\t\t\tstate.Send(new PlayServerAck(si));\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void PlayServer(NetState state, PacketReader pvSrc)\n\t\t{\n\t\t\tint index = pvSrc.ReadInt16();\n\t\t\tServerInfo[] info = state.ServerInfo;\n\t\t\tIAccount a = state.Account;\n\n\t\t\tif (info == null || a == null || index < 0 || index >= info.Length)\n\t\t\t{\n\t\t\t\tstate.Dispose();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tServerInfo si = info[index];\n\n\t\t\t\tstate.m_AuthID = PlayServerAck.m_AuthID = GenerateAuthID(state);\n\n\t\t\t\tstate.SentFirstPacket = false;\n\t\t\t\tstate.Send(new PlayServerAck(si));\n\t\t\t}\n\t\t}\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override Expression VisitInvocation(InvocationExpression iv)\n            {\n                if (ClientTypeUtil.TypeOrElementTypeIsEntity(iv.Expression.Type) ||\n                    IsCollectionProducingExpression(iv.Expression) ||\n                    iv.Arguments.Any(a => ClientTypeUtil.TypeOrElementTypeIsEntity(a.Type) || IsCollectionProducingExpression(a)))\n                {\n                    throw new NotSupportedException(Strings.ALinq_ExpressionNotSupportedInProjection(this.type, iv.ToString()));\n                }\n\n                return base.VisitInvocation(iv);\n            }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal override Expression VisitInvocation(InvocationExpression iv)\n            {\n                if (ClientTypeUtil.TypeOrElementTypeIsEntity(iv.Expression.Type) ||\n                    IsCollectionProducingExpression(iv.Expression) ||\n                    iv.Arguments.Any(a => ClientTypeUtil.TypeOrElementTypeIsEntity(a.Type) || IsCollectionProducingExpression(a)))\n                {\n                    throw new NotSupportedException(Strings.ALinq_ExpressionNotSupportedInProjection(this.type, iv.ToString()));\n                }\n\n                return base.VisitInvocation(iv);\n            }\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void CollectOutliningSpans(\n            IndexerDeclarationSyntax indexerDeclaration,\n            List<OutliningSpan> spans,\n            CancellationToken cancellationToken)\n        {\n            CSharpOutliningHelpers.CollectCommentRegions(indexerDeclaration, spans);\n\n            // fault tolerance\n            if (indexerDeclaration.AccessorList == null ||\n                indexerDeclaration.AccessorList.IsMissing ||\n                indexerDeclaration.AccessorList.OpenBraceToken.IsMissing ||\n                indexerDeclaration.AccessorList.CloseBraceToken.IsMissing)\n            {\n                return;\n            }\n\n            spans.Add(CSharpOutliningHelpers.CreateRegion(\n                indexerDeclaration,\n                indexerDeclaration.ParameterList.GetLastToken(includeZeroWidth: true),\n                autoCollapse: true));\n        }\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void CollectOutliningSpans(\n            IndexerDeclarationSyntax indexerDeclaration,\n            List<OutliningSpan> spans,\n            CancellationToken cancellationToken)\n        {\n            CSharpOutliningHelpers.CollectCommentRegions(indexerDeclaration, spans);\n\n            // fault tolerance\n            if (indexerDeclaration.AccessorList == null ||\n                indexerDeclaration.AccessorList.IsMissing ||\n                indexerDeclaration.AccessorList.OpenBraceToken.IsMissing ||\n                indexerDeclaration.AccessorList.CloseBraceToken.IsMissing)\n            {\n                return;\n            }\n\n            spans.Add(CSharpOutliningHelpers.CreateRegion(\n                indexerDeclaration,\n                indexerDeclaration.ParameterList.GetLastToken(includeZeroWidth: true),\n                autoCollapse: true));\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates a declaration matching an existing symbol.\n        /// </summary>\n        public SyntaxNode Declaration(ISymbol symbol)\n        {\n            switch (symbol.Kind)\n            {\n                case SymbolKind.Field:\n                    return FieldDeclaration((IFieldSymbol)symbol);\n\n                case SymbolKind.Property:\n                    var property = (IPropertySymbol)symbol;\n                    if (property.IsIndexer)\n                    {\n                        return IndexerDeclaration(property);\n                    }\n                    else\n                    {\n                        return PropertyDeclaration(property);\n                    }\n\n                case SymbolKind.Event:\n                    var ev = (IEventSymbol)symbol;\n                    if (ev.IsAbstract || ev.IsVirtual || ev.AddMethod != null || ev.RemoveMethod != null)\n                    {\n                        return CustomEventDeclaration(ev);\n                    }\n                    else\n                    {\n                        return EventDeclaration(ev);\n                    }\n\n                case SymbolKind.Method:\n                    var method = (IMethodSymbol)symbol;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                        case MethodKind.SharedConstructor:\n                            return ConstructorDeclaration(method);\n\n                        case Met\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Creates a declaration matching an existing symbol.\n        /// </summary>\n        public SyntaxNode Declaration(ISymbol symbol)\n        {\n            switch (symbol.Kind)\n            {\n                case SymbolKind.Field:\n                    return FieldDeclaration((IFieldSymbol)symbol);\n\n                case SymbolKind.Property:\n                    var property = (IPropertySymbol)symbol;\n                    if (property.IsIndexer)\n                    {\n                        return IndexerDeclaration(property);\n                    }\n                    else\n                    {\n                        return PropertyDeclaration(property);\n                    }\n\n                case SymbolKind.Event:\n                    var ev = (IEventSymbol)symbol;\n                    if (ev.IsAbstract || ev.IsVirtual || ev.AddMethod != null || ev.RemoveMethod != null)\n                    {\n                        return CustomEventDeclaration(ev);\n                    }\n                    else\n                    {\n                        return EventDeclaration(ev);\n                    }\n\n                case SymbolKind.Method:\n                    var method = (IMethodSymbol)symbol;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                        case MethodKind.SharedConstructor:\n                            return ConstructorDeclaration(method);\n\n                        case Met\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\twriter.WriteNull();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tJsonConverter converter;\n\t\t\tif ((((converter = (member != null) ? member.Converter : null) != null) || ((converter = (containerProperty != null) ? containerProperty.ItemConverter : null) != null) || ((converter = (containerContract != null) ? containerContract.ItemConverter : null) != null) || ((converter = valueContract.Converter) != null) || ((converter = Serializer.GetMatchingConverter(valueContract.UnderlyingType)) != null) || ((converter = valueContract.InternalConverter) != null)) && converter.CanWrite)\n\t\t\t{\n\t\t\t\tSerializeConvertable(writer, converter, value, valueContract, containerContract, containerProperty);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (valueContract.ContractType)\n\t\t\t{\n\t\t\t\tcase JsonContractType.Object:\n\t\t\t\t\tSerializeObject(writer, value, (JsonObjectContract) valueContract, member, containerContract, containerProperty);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JsonContractType.Array:\n\t\t\t\t\tvar arrayContract = (JsonArrayContract) valueContract;\n\t\t\t\t\tif (!arrayContract.IsMultidimensionalArray)\n\t\t\t\t\t\tSerializeList(writer, (IEnumerable) value, arrayContract, member, containerContract, containerProperty);\n\t\t\t\t\telse\n\t\t\t\t\t\tSerializeMultidimensionalArray(writer, (Array) value, arrayContract, member, containerContract, containerProperty);\n\t\t\t\t\nAnswer:",
    "expected": "ComplexConditional_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\twriter.WriteNull();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tJsonConverter converter;\n\t\t\tif ((((converter = (member != null) ? member.Converter : null) != null) || ((converter = (containerProperty != null) ? containerProperty.ItemConverter : null) != null) || ((converter = (containerContract != null) ? containerContract.ItemConverter : null) != null) || ((converter = valueContract.Converter) != null) || ((converter = Serializer.GetMatchingConverter(valueContract.UnderlyingType)) != null) || ((converter = valueContract.InternalConverter) != null)) && converter.CanWrite)\n\t\t\t{\n\t\t\t\tSerializeConvertable(writer, converter, value, valueContract, containerContract, containerProperty);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (valueContract.ContractType)\n\t\t\t{\n\t\t\t\tcase JsonContractType.Object:\n\t\t\t\t\tSerializeObject(writer, value, (JsonObjectContract) valueContract, member, containerContract, containerProperty);\n\t\t\t\t\tbreak;\n\t\t\t\tcase JsonContractType.Array:\n\t\t\t\t\tvar arrayContract = (JsonArrayContract) valueContract;\n\t\t\t\t\tif (!arrayContract.IsMultidimensionalArray)\n\t\t\t\t\t\tSerializeList(writer, (IEnumerable) value, arrayContract, member, containerContract, containerProperty);\n\t\t\t\t\telse\n\t\t\t\t\t\tSerializeMultidimensionalArray(writer, (Array) value, arrayContract, member, containerContract, containerProperty);\n\t\t\t\t\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201811.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201902.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201902.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201905.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201811.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201902.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201902.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.ReconciliationReportPage> getReconciliationReportsByStatementAsync(Google.Api.Ads.AdManager.v201905.Statement filterStatement) {\n\t\t\treturn base.Channel.getReconciliationReportsByStatementAsync(filterStatement);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void AttemptsSmall()\n        {\n            var random = new Random();\n            var min = random.Next(1, 30);\n            var max = random.Next(60, 120);\n\n            var time = new ExponentialTiming(min, max);\n            for (ulong i = 1; i < 10; i++)\n            {\n                var calc = time.Get(i);\n\n                var expected = ((Math.Pow(2, i) * .1d) * min) + min;\n                if (expected > max)\n                {\n                    break;// Not testing max\n                }\n                else\n                {\n                    Assert.AreEqual(expected, calc);\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void AttemptsSmall()\n        {\n            var random = new Random();\n            var min = random.Next(1, 30);\n            var max = random.Next(60, 120);\n\n            var time = new ExponentialTiming(min, max);\n            for (ulong i = 1; i < 10; i++)\n            {\n                var calc = time.Get(i);\n\n                var expected = ((Math.Pow(2, i) * .1d) * min) + min;\n                if (expected > max)\n                {\n                    break;// Not testing max\n                }\n                else\n                {\n                    Assert.AreEqual(expected, calc);\n                }\n            }\n        }\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Private Implementation - Metadata Reader\n\n        private bool PrepareMetadata(StreamScope scope)\n        {\n            // The metadata stream can either be inlined or compressed\n            var token = ReadToken();\n            if (token == ArchiveMetadataToken.PackedHeader)\n            {\n                var streams = ReadPackedStreams();\n\n                // Compressed metadata without content is odd but allowed.\n                if (streams.IsDefaultOrEmpty)\n                    return false;\n\n                // Compressed metadata with multiple streams is not allowed.\n                if (streams.Length != 1)\n                    throw new InvalidDataException();\n\n                // Switch over to the decoded metadata stream.\n                scope.SetSource(streams[0]);\n                token = ReadToken();\n            }\n\n            // The metadata stream must start with this token.\n            if (token != ArchiveMetadataToken.Header)\n                throw new InvalidDataException();\n\n            return true;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Private Implementation - Metadata Reader\n\n        private bool PrepareMetadata(StreamScope scope)\n        {\n            // The metadata stream can either be inlined or compressed\n            var token = ReadToken();\n            if (token == ArchiveMetadataToken.PackedHeader)\n            {\n                var streams = ReadPackedStreams();\n\n                // Compressed metadata without content is odd but allowed.\n                if (streams.IsDefaultOrEmpty)\n                    return false;\n\n                // Compressed metadata with multiple streams is not allowed.\n                if (streams.Length != 1)\n                    throw new InvalidDataException();\n\n                // Switch over to the decoded metadata stream.\n                scope.SetSource(streams[0]);\n                token = ReadToken();\n            }\n\n            // The metadata stream must start with this token.\n            if (token != ArchiveMetadataToken.Header)\n                throw new InvalidDataException();\n\n            return true;\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override string ToString()\n        {\n            return string.Format(\"Waypoint \\\"{0}\\\"\", CookedName() );\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override string ToString()\n        {\n            return string.Format(\"Waypoint \\\"{0}\\\"\", CookedName() );\n        }\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// Direct transformations operations\n\t\tpublic Perspective translate(double x, double y)\n\t\t{\n\t\t\ttx += x;\n\t\t\tty += y;\n\t\t\treturn this;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n// Direct transformations operations\n\t\tpublic Perspective translate(double x, double y)\n\t\t{\n\t\t\ttx += x;\n\t\t\tty += y;\n\t\t\treturn this;\n\t\t}\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tSystem.Threading.Tasks.Task<Wrappers.PackageService.createPackagesResponse> Google.Api.Ads.AdManager.v201905.PackageServiceInterface.createPackagesAsync(Wrappers.PackageService.createPackagesRequest request) {\n\t\t\treturn base.Channel.createPackagesAsync(request);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.Package[]> createPackagesAsync(Google.Api.Ads.AdManager.v201905.Package[] packages) {\n\t\t\tWrappers.PackageService.createPackagesRequest inValue = new Wrappers.PackageService.createPackagesRequest();\n\t\t\tinValue.packages = packages;\n\t\t\treturn System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.Package[]>.Factory.StartNew(() => (((Google.Api.Ads.AdManager.v201905.PackageServiceInterface)(this)).createPackagesAsync(inValue)).Result.rval);\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tSystem.Threading.Tasks.Task<Wrappers.PackageService.createPackagesResponse> Google.Api.Ads.AdManager.v201905.PackageServiceInterface.createPackagesAsync(Wrappers.PackageService.createPackagesRequest request) {\n\t\t\treturn base.Channel.createPackagesAsync(request);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.Package[]> createPackagesAsync(Google.Api.Ads.AdManager.v201905.Package[] packages) {\n\t\t\tWrappers.PackageService.createPackagesRequest inValue = new Wrappers.PackageService.createPackagesRequest();\n\t\t\tinValue.packages = packages;\n\t\t\treturn System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.Package[]>.Factory.StartNew(() => (((Google.Api.Ads.AdManager.v201905.PackageServiceInterface)(this)).createPackagesAsync(inValue)).Result.rval);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary><returns>A task that represents the asynchronous read operation. The value of the <paramref name=\"TResult\" /> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </returns><param name=\"buffer\">The buffer to write the data into.</param><param name=\"offset\">The byte offset in <paramref name=\"buffer\" /> at which to begin writing data from the stream.</param><param name=\"count\">The maximum number of bytes to read.</param><param name=\"cancellationToken\">The token to monitor for cancellation requests.</param><exception cref=\"T:System.ArgumentNullException\"><paramref name=\"buffer\" /> is null.</exception><exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"offset\" /> or <paramref name=\"count\" /> is negative.</exception><exception cref=\"T:System.ArgumentException\">The sum of <paramref name=\"offset\" /> and <paramref name=\"count\" /> is larger than the buffer length.</exception><exception cref=\"T:System.NotSupportedException\">The stream does not support reading.</exception><exception cref=\"T:System.ObjectDisposedException\">The stream has been disposed.</exception\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary><returns>A task that represents the asynchronous read operation. The value of the <paramref name=\"TResult\" /> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </returns><param name=\"buffer\">The buffer to write the data into.</param><param name=\"offset\">The byte offset in <paramref name=\"buffer\" /> at which to begin writing data from the stream.</param><param name=\"count\">The maximum number of bytes to read.</param><param name=\"cancellationToken\">The token to monitor for cancellation requests.</param><exception cref=\"T:System.ArgumentNullException\"><paramref name=\"buffer\" /> is null.</exception><exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"offset\" /> or <paramref name=\"count\" /> is negative.</exception><exception cref=\"T:System.ArgumentException\">The sum of <paramref name=\"offset\" /> and <paramref name=\"count\" /> is larger than the buffer length.</exception><exception cref=\"T:System.NotSupportedException\">The stream does not support reading.</exception><exception cref=\"T:System.ObjectDisposedException\">The stream has been disposed.</exception\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DocumentRegistryOnActiveDocumentChanging(object sender, EventArgs eventArgs)\n        {\n            // Save the current cache for ICircuitElementTypes to our cache-per-document.\n            if (m_documentRegistry.ActiveDocument != null)\n                m_cachePerDocument[m_documentRegistry.ActiveDocument] = m_elementTypeCache;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void DocumentRegistryOnActiveDocumentChanging(object sender, EventArgs eventArgs)\n        {\n            // Save the current cache for ICircuitElementTypes to our cache-per-document.\n            if (m_documentRegistry.ActiveDocument != null)\n                m_cachePerDocument[m_documentRegistry.ActiveDocument] = m_elementTypeCache;\n        }\nAnswer: ___________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//used for bithelpers. Note that this implementation is completely different \n    //from the Subset's. The two should not be mixed. This indexes as if the tree were an array.\n    //http://en.wikipedia.org/wiki/Binary_Tree#Methods_for_storing_binary_trees\n    internal virtual int InternalIndexOf(T item)\n    {\n      Node current = _root;\n      int count = 0;\n      while (current != null)\n      {\n        int order = _comparer.Compare(item, current.Item);\n        if (order == 0)\n        {\n          return count;\n        }\n        else\n        {\n          current = (order < 0) ? current.Left : current.Right;\n          count = (order < 0) ? (2 * count + 1) : (2 * count + 2);\n        }\n      }\n      return -1;\n    }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n//used for bithelpers. Note that this implementation is completely different \n    //from the Subset's. The two should not be mixed. This indexes as if the tree were an array.\n    //http://en.wikipedia.org/wiki/Binary_Tree#Methods_for_storing_binary_trees\n    internal virtual int InternalIndexOf(T item)\n    {\n      Node current = _root;\n      int count = 0;\n      while (current != null)\n      {\n        int order = _comparer.Compare(item, current.Item);\n        if (order == 0)\n        {\n          return count;\n        }\n        else\n        {\n          current = (order < 0) ? current.Left : current.Right;\n          count = (order < 0) ? (2 * count + 1) : (2 * count + 2);\n        }\n      }\n      return -1;\n    }\nAnswer: \n</think>\n\nThe code implements"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic CommandProcessingException()\n        {\n        }public CommandProcessingException(SerializationInfo info, StreamingContext context)\n            : base(info, context)\n        {\n        }CommandProcessingException(string message, Exception inner)\n            : base(message, inner)\n        {\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic CommandProcessingException()\n        {\n        }public CommandProcessingException(SerializationInfo info, StreamingContext context)\n            : base(info, context)\n        {\n        }CommandProcessingException(string message, Exception inner)\n            : base(message, inner)\n        {\n        }\nAnswer: [Your Answer]\n\nThe initial"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic new CreateColumnCommand WithDefault(object @default) {\n            base.WithDefault(@default);\n            return this;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic new CreateColumnCommand WithDefault(object @default) {\n            base.WithDefault(@default);\n            return this;\n        }\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Serializes current configuration object into file\n        /// </summary>\n        /// <param name=\"fileName\">full path of outupt xml file</param>\n        /// <param name=\"exception\">output Exception value if failed</param>\n        /// <returns>true if can serialize and save into file; otherwise, false</returns>\n        public virtual bool SaveToFile(string fileName, out System.Exception exception)\n        {\n            exception = null;\n            try\n            {\n                SaveToFile(fileName);\n                return true;\n            }\n            catch (System.Exception e)\n            {\n                exception = e;\n                return false;\n            }\n        }public virtual void SaveToFile(string fileName)\n        {\n            System.IO.StreamWriter streamWriter = null;\n            try\n            {\n                string xmlString = Serialize();\n                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);\n                streamWriter = xmlFile.CreateText();\n                streamWriter.WriteLine(xmlString);\n                streamWriter.Close();\n            }\n            finally\n            {\n                if ((streamWriter != null))\n                {\n                    streamWriter.Dispose();\n                }\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Serializes current configuration object into file\n        /// </summary>\n        /// <param name=\"fileName\">full path of outupt xml file</param>\n        /// <param name=\"exception\">output Exception value if failed</param>\n        /// <returns>true if can serialize and save into file; otherwise, false</returns>\n        public virtual bool SaveToFile(string fileName, out System.Exception exception)\n        {\n            exception = null;\n            try\n            {\n                SaveToFile(fileName);\n                return true;\n            }\n            catch (System.Exception e)\n            {\n                exception = e;\n                return false;\n            }\n        }public virtual void SaveToFile(string fileName)\n        {\n            System.IO.StreamWriter streamWriter = null;\n            try\n            {\n                string xmlString = Serialize();\n                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);\n                streamWriter = xmlFile.CreateText();\n                streamWriter.WriteLine(xmlString);\n                streamWriter.Close();\n            }\n            finally\n            {\n                if ((streamWriter != null))\n                {\n                    streamWriter.Dispose();\n                }\n            }\n        }\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadEncodedInt();\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadEncodedInt();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static IEnumerable<object[]> ImplicitConversion_ToDouble_TestData()\n        {\n            (Half Original, double Expected)[] data = // Fraction is shifted left by 42, Exponent is -15 then +127 = +112\n            {\n                (UInt16BitsToHalf(0b0_01111_0000000000), 1d), // 1\n                (UInt16BitsToHalf(0b1_01111_0000000000), -1d), // -1\n                (Half.MaxValue, 65504d), // 65504\n                (Half.MinValue, -65504d), // -65504\n                (UInt16BitsToHalf(0b0_01011_1001100110), 0.0999755859375d), // 0.1ish\n                (UInt16BitsToHalf(0b1_01011_1001100110), -0.0999755859375d), // -0.1ish\n                (UInt16BitsToHalf(0b0_10100_0101000000), 42d), // 42\n                (UInt16BitsToHalf(0b1_10100_0101000000), -42d), // -42\n                (Half.PositiveInfinity, double.PositiveInfinity), // PosInfinity\n                (Half.NegativeInfinity, double.NegativeInfinity), // NegInfinity\n                (UInt16BitsToHalf(0b0_11111_1000000000), BitConverter.Int64BitsToDouble(0x7FF80000_00000000)), // Positive Quiet NaN\n                (Half.NaN, double.NaN), // Negative Quiet NaN\n                (UInt16BitsToHalf(0b0_11111_1010101010), BitConverter.Int64BitsToDouble(0x7FFAA800_00000000)), // Positive Signalling NaN - Should preserve payload\n                (UInt16BitsToHalf(0b1_11111_1010101010), BitConverter.Int64BitsToDouble(unchecked((long)0xFFFAA800_00000000))), // Negative Signalling NaN - Should preserve payload\n                (Half.Eps\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static IEnumerable<object[]> ImplicitConversion_ToDouble_TestData()\n        {\n            (Half Original, double Expected)[] data = // Fraction is shifted left by 42, Exponent is -15 then +127 = +112\n            {\n                (UInt16BitsToHalf(0b0_01111_0000000000), 1d), // 1\n                (UInt16BitsToHalf(0b1_01111_0000000000), -1d), // -1\n                (Half.MaxValue, 65504d), // 65504\n                (Half.MinValue, -65504d), // -65504\n                (UInt16BitsToHalf(0b0_01011_1001100110), 0.0999755859375d), // 0.1ish\n                (UInt16BitsToHalf(0b1_01011_1001100110), -0.0999755859375d), // -0.1ish\n                (UInt16BitsToHalf(0b0_10100_0101000000), 42d), // 42\n                (UInt16BitsToHalf(0b1_10100_0101000000), -42d), // -42\n                (Half.PositiveInfinity, double.PositiveInfinity), // PosInfinity\n                (Half.NegativeInfinity, double.NegativeInfinity), // NegInfinity\n                (UInt16BitsToHalf(0b0_11111_1000000000), BitConverter.Int64BitsToDouble(0x7FF80000_00000000)), // Positive Quiet NaN\n                (Half.NaN, double.NaN), // Negative Quiet NaN\n                (UInt16BitsToHalf(0b0_11111_1010101010), BitConverter.Int64BitsToDouble(0x7FFAA800_00000000)), // Positive Signalling NaN - Should preserve payload\n                (UInt16BitsToHalf(0b1_11111_1010101010), BitConverter.Int64BitsToDouble(unchecked((long)0xFFFAA800_00000000))), // Negative Signalling NaN - Should preserve payload\n                (Half.Eps\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool IsValid(string uri)\n        {\n            return UriPatternDisallowEmpty.IsMatch(uri);\n        }public bool IsValid(string uri, string match)\n        {\n            Regex regex = GetRegex(match);\n\n            return regex.IsMatch(uri);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool IsValid(string uri)\n        {\n            return UriPatternDisallowEmpty.IsMatch(uri);\n        }public bool IsValid(string uri, string match)\n        {\n            Regex regex = GetRegex(match);\n\n            return regex.IsMatch(uri);\n        }\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// TBD\n            /// </summary>\n            public void OnComplete()\n            {\n                if (!_upstreamCompleted)\n                {\n                    _upstreamCompleted = true;\n                    if (_inputBufferElements == 0)\n                        Complete(_outlet);\n                }\n            }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n            /// TBD\n            /// </summary>\n            public void OnComplete()\n            {\n                if (!_upstreamCompleted)\n                {\n                    _upstreamCompleted = true;\n                    if (_inputBufferElements == 0)\n                        Complete(_outlet);\n                }\n            }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void AddCertificates(\n            IX509Store certStore)\n        {\n            CollectionUtilities.AddRange(_certs, CmsUtilities.GetCertificatesFromStore(certStore));\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void AddCertificates(\n            IX509Store certStore)\n        {\n            CollectionUtilities.AddRange(_certs, CmsUtilities.GetCertificatesFromStore(certStore));\n        }\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns the bounding box for this primitive.\n        /// </summary>\n        /// <returns></returns>\n        public override BoxF2D GetBox()\n        {\n            return _bounds.BoundingBox;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns the bounding box for this primitive.\n        /// </summary>\n        /// <returns></returns>\n        public override BoxF2D GetBox()\n        {\n            return _bounds.BoundingBox;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void CollectPostEffectNodes()\n            {\n                //Get RenderCores with post effect specified.\n                if (postProcNodes.Count > 0)\n                {\n                    if (opaqueNodesInFrustum.Count + transparentNodesInFrustum.Count > 50)\n                    {\n                        getPostEffectCoreTask = Task.Run(() =>\n                        {\n                            for (int i = 0; i < opaqueNodesInFrustum.Count; ++i)\n                            {\n                                if (opaqueNodesInFrustum[i].HasAnyPostEffect)\n                                {\n                                    nodesForPostRender.Add(opaqueNodesInFrustum[i]);\n                                }\n                            }\n                            for (int i = 0; i < transparentNodesInFrustum.Count; ++i)\n                            {\n                                if (transparentNodesInFrustum[i].HasAnyPostEffect)\n                                {\n                                    nodesForPostRender.Add(transparentNodesInFrustum[i]);\n                                }\n                            }\n                        });\n                    }\n                    else\n                    {\n                        for (int i = 0; i < opaqueNodesInFrustum.Count; ++i)\n                        {\n                            if (opaqueNodesInFrustum[i].HasAnyPostEffect)\n                            {\n                                nodesForPostRender.Add(opa\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void CollectPostEffectNodes()\n            {\n                //Get RenderCores with post effect specified.\n                if (postProcNodes.Count > 0)\n                {\n                    if (opaqueNodesInFrustum.Count + transparentNodesInFrustum.Count > 50)\n                    {\n                        getPostEffectCoreTask = Task.Run(() =>\n                        {\n                            for (int i = 0; i < opaqueNodesInFrustum.Count; ++i)\n                            {\n                                if (opaqueNodesInFrustum[i].HasAnyPostEffect)\n                                {\n                                    nodesForPostRender.Add(opaqueNodesInFrustum[i]);\n                                }\n                            }\n                            for (int i = 0; i < transparentNodesInFrustum.Count; ++i)\n                            {\n                                if (transparentNodesInFrustum[i].HasAnyPostEffect)\n                                {\n                                    nodesForPostRender.Add(transparentNodesInFrustum[i]);\n                                }\n                            }\n                        });\n                    }\n                    else\n                    {\n                        for (int i = 0; i < opaqueNodesInFrustum.Count; ++i)\n                        {\n                            if (opaqueNodesInFrustum[i].HasAnyPostEffect)\n                            {\n                                nodesForPostRender.Add(opa\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Main()\n        {\n            Form splash = null; // popup a splash screen in another thread\n            new Task(() => (splash = new SplashScreen()).ShowDialog()).Start();\n            new Task(() => Legal.RefreshMGDB(MGDatabasePath)).Start();\n            string[] args = Environment.GetCommandLineArgs();\n            FormLoadInitialSettings(args, out bool showChangelog, out bool BAKprompt);\n\n            InitializeComponent();\n            C_SAV.EditEnv = new SaveDataEditor<PictureBox>(null) { PKMEditor = PKME_Tabs };\n            FormLoadAddEvents();\n            #if DEBUG // translation updater -- all controls are added at this point -- call translate now\n            if (DevUtil.IsUpdatingTranslations)\n                WinFormsUtil.TranslateInterface(this, CurrentLanguage); // Translate the UI to language.\n            #endif\n            FormInitializeSecond();\n\n            FormLoadCustomBackupPaths();\n            FormLoadInitialFiles(args);\n            FormLoadCheckForUpdates();\n            FormLoadPlugins();\n\n            BringToFront();\n            WindowState = FormWindowState.Minimized;\n            Show();\n            WindowState = FormWindowState.Normal;\n            splash.Invoke((MethodInvoker)(() => splash.Close())); // splash closes\n            if (HaX)\n            {\n                PKMConverter.AllowIncompatibleConversion = true;\n                WinFormsUtil.Alert(MsgProgramIllegalModeActive, MsgProgramIllegalModeBehave);\n            }\n            else if (showChang\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Main()\n        {\n            Form splash = null; // popup a splash screen in another thread\n            new Task(() => (splash = new SplashScreen()).ShowDialog()).Start();\n            new Task(() => Legal.RefreshMGDB(MGDatabasePath)).Start();\n            string[] args = Environment.GetCommandLineArgs();\n            FormLoadInitialSettings(args, out bool showChangelog, out bool BAKprompt);\n\n            InitializeComponent();\n            C_SAV.EditEnv = new SaveDataEditor<PictureBox>(null) { PKMEditor = PKME_Tabs };\n            FormLoadAddEvents();\n            #if DEBUG // translation updater -- all controls are added at this point -- call translate now\n            if (DevUtil.IsUpdatingTranslations)\n                WinFormsUtil.TranslateInterface(this, CurrentLanguage); // Translate the UI to language.\n            #endif\n            FormInitializeSecond();\n\n            FormLoadCustomBackupPaths();\n            FormLoadInitialFiles(args);\n            FormLoadCheckForUpdates();\n            FormLoadPlugins();\n\n            BringToFront();\n            WindowState = FormWindowState.Minimized;\n            Show();\n            WindowState = FormWindowState.Normal;\n            splash.Invoke((MethodInvoker)(() => splash.Close())); // splash closes\n            if (HaX)\n            {\n                PKMConverter.AllowIncompatibleConversion = true;\n                WinFormsUtil.Alert(MsgProgramIllegalModeActive, MsgProgramIllegalModeBehave);\n            }\n            else if (showChang\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void ProcessServerCertificate(Certificate serverCertificate)\n        {\n            if (serverCertificate.IsEmpty)\n                throw new TlsFatalAlert(AlertDescription.bad_certificate);\n\n            X509CertificateStructure x509Cert = serverCertificate.GetCertificateAt(0);\n\n            SubjectPublicKeyInfo keyInfo = x509Cert.SubjectPublicKeyInfo;\n            try\n            {\n                this.mServerPublicKey = PublicKeyFactory.CreateKey(keyInfo);\n            }\n            catch (Exception e)\n            {\n                throw new TlsFatalAlert(AlertDescription.unsupported_certificate, e);\n            }\n\n            // Sanity check the PublicKeyFactory\n            if (this.mServerPublicKey.IsPrivate)\n                throw new TlsFatalAlert(AlertDescription.internal_error);\n\n            this.mRsaServerPublicKey = ValidateRsaPublicKey((RsaKeyParameters)this.mServerPublicKey);\n\n            TlsUtilities.ValidateKeyUsage(x509Cert, KeyUsage.KeyEncipherment);\n\n            base.ProcessServerCertificate(serverCertificate);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void ProcessServerCertificate(Certificate serverCertificate)\n        {\n            if (serverCertificate.IsEmpty)\n                throw new TlsFatalAlert(AlertDescription.bad_certificate);\n\n            X509CertificateStructure x509Cert = serverCertificate.GetCertificateAt(0);\n\n            SubjectPublicKeyInfo keyInfo = x509Cert.SubjectPublicKeyInfo;\n            try\n            {\n                this.mServerPublicKey = PublicKeyFactory.CreateKey(keyInfo);\n            }\n            catch (Exception e)\n            {\n                throw new TlsFatalAlert(AlertDescription.unsupported_certificate, e);\n            }\n\n            // Sanity check the PublicKeyFactory\n            if (this.mServerPublicKey.IsPrivate)\n                throw new TlsFatalAlert(AlertDescription.internal_error);\n\n            this.mRsaServerPublicKey = ValidateRsaPublicKey((RsaKeyParameters)this.mServerPublicKey);\n\n            TlsUtilities.ValidateKeyUsage(x509Cert, KeyUsage.KeyEncipherment);\n\n            base.ProcessServerCertificate(serverCertificate);\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool CanOffer()\n        {\n            return MondainsLegacy.Spellweaving;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool CanOffer()\n        {\n            return MondainsLegacy.Spellweaving;\n        }\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamInventory_GetItemPrice\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool ISteamInventory_GetItemPrice(IntPtr instancePtr, SteamItemDef_t iDefinition, out ulong pCurrentPrice, out ulong pBasePrice);\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamInventory_GetItemPrice\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool ISteamInventory_GetItemPrice(IntPtr instancePtr, SteamItemDef_t iDefinition, out ulong pCurrentPrice, out ulong pBasePrice);\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate Monoeci()\n\t\t{\n\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate Monoeci()\n\t\t{\n\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SqlNode VisitUnion(Expression source1, Expression source2)\n\t\t{\n\t\t\tSqlSelect left = this.VisitSequence(source1);\n\t\t\tSqlSelect right = this.VisitSequence(source2);\n\t\t\tSqlUnion union = new SqlUnion(left, right, false);\n\t\t\tSqlAlias alias = new SqlAlias(union);\n\t\t\tSqlAliasRef aref = new SqlAliasRef(alias);\n\t\t\tSqlSelect result = new SqlSelect(aref, alias, _dominatingExpression);\n\t\t\tresult.OrderingType = SqlOrderingType.Blocked;\n\t\t\treturn result;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate SqlNode VisitUnion(Expression source1, Expression source2)\n\t\t{\n\t\t\tSqlSelect left = this.VisitSequence(source1);\n\t\t\tSqlSelect right = this.VisitSequence(source2);\n\t\t\tSqlUnion union = new SqlUnion(left, right, false);\n\t\t\tSqlAlias alias = new SqlAlias(union);\n\t\t\tSqlAliasRef aref = new SqlAliasRef(alias);\n\t\t\tSqlSelect result = new SqlSelect(aref, alias, _dominatingExpression);\n\t\t\tresult.OrderingType = SqlOrderingType.Blocked;\n\t\t\treturn result;\n\t\t}\nAnswer: ____________ \n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string CreateEncodedSaml(SecurityTokenDescriptor tokenDescriptor, SecurityTokenHandler tokenHandler)\n        {\n            return tokenHandler.WriteToken(tokenHandler.CreateToken(tokenDescriptor));\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static string CreateEncodedSaml(SecurityTokenDescriptor tokenDescriptor, SecurityTokenHandler tokenHandler)\n        {\n            return tokenHandler.WriteToken(tokenHandler.CreateToken(tokenDescriptor));\n        }\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public async Task RunPollNull()\n        {\n            var poller = Substitute.For<IPoller<object>>();\n            poller.PollMany(1).Returns(Task.FromResult<IEnumerable<IQueued<object>>>(null));\n\n            var processor = Substitute.For<IProcessor<object>>();\n            var tracker = Substitute.For<ITimingTracker>();\n\n            var d = new DequeueBatchDynamic<object>(poller, processor, tracker);\n            var result = await d.Run();\n\n            Assert.IsFalse(result);\n\n            await poller.Received().PollMany(1);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public async Task RunPollNull()\n        {\n            var poller = Substitute.For<IPoller<object>>();\n            poller.PollMany(1).Returns(Task.FromResult<IEnumerable<IQueued<object>>>(null));\n\n            var processor = Substitute.For<IProcessor<object>>();\n            var tracker = Substitute.For<ITimingTracker>();\n\n            var d = new DequeueBatchDynamic<object>(poller, processor, tracker);\n            var result = await d.Run();\n\n            Assert.IsFalse(result);\n\n            await poller.Received().PollMany(1);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201811.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201902.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201902.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201905.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201811.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201811.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201902.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201902.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}public virtual System.Threading.Tasks.Task<Google.Api.Ads.AdManager.v201905.LabelPage> getLabelsByStatementAsync(Google.Api.Ads.AdManager.v201905.Statement filterStatement) {\n\t\t\treturn base.Channel.getLabelsByStatementAsync(filterStatement);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201811.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201902.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201905.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201908.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201811.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201902.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201905.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}/// <summary>Returns the current network for which requests are being made.\n\t\t/// </summary><returns>the network for which the user is currently making the\n\t\t/// request</returns>\n\t\tpublic virtual Google.Api.Ads.AdManager.v201908.Network getCurrentNetwork() {\n\t\t\treturn base.Channel.getCurrentNetwork();\n\t\t}\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#if DESKTOP\n        //Test for bug #1627 (https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1627)\n        [TestMethod]\n        public void AuthorityCustomPortTest()\n        {\n            using (var httpManager = new MockHttpManager())\n            {\n                var customPortAuthority = \"https://localhost:5215/common/\";\n                httpManager.AddInstanceDiscoveryMockHandler();\n                var serviceBundle = ServiceBundle.CreateWithCustomHttpManager(httpManager);\n\n                var context = new AuthenticationContext(\n                              serviceBundle,\n                              customPortAuthority,\n                              AuthorityValidationType.False,\n                              new TokenCache());\n\n                //Ensure that the AuthenticationContext init does not remove the port from the authority\n                Assert.AreEqual(customPortAuthority, context.Authority);\n\n                var result = context.AcquireTokenAsync(AdalTestConstants.DefaultRedirectUri.ToString(),\n                                                           AdalTestConstants.DefaultClientId,\n                                                           AdalTestConstants.DefaultRedirectUri,\n                                                           new PlatformParameters(PromptBehavior.SelectAccount));\n\n                //Ensure that acquiring a token does not remove the port from the authority\n                Assert.AreEqual(customPortAuthori\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#if DESKTOP\n        //Test for bug #1627 (https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1627)\n        [TestMethod]\n        public void AuthorityCustomPortTest()\n        {\n            using (var httpManager = new MockHttpManager())\n            {\n                var customPortAuthority = \"https://localhost:5215/common/\";\n                httpManager.AddInstanceDiscoveryMockHandler();\n                var serviceBundle = ServiceBundle.CreateWithCustomHttpManager(httpManager);\n\n                var context = new AuthenticationContext(\n                              serviceBundle,\n                              customPortAuthority,\n                              AuthorityValidationType.False,\n                              new TokenCache());\n\n                //Ensure that the AuthenticationContext init does not remove the port from the authority\n                Assert.AreEqual(customPortAuthority, context.Authority);\n\n                var result = context.AcquireTokenAsync(AdalTestConstants.DefaultRedirectUri.ToString(),\n                                                           AdalTestConstants.DefaultClientId,\n                                                           AdalTestConstants.DefaultRedirectUri,\n                                                           new PlatformParameters(PromptBehavior.SelectAccount));\n\n                //Ensure that acquiring a token does not remove the port from the authority\n                Assert.AreEqual(customPortAuthori\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static TimeStampReq GetInstance(\n\t\t\tobject o)\n\t\t{\n\t\t\tif (o == null || o is TimeStampReq)\n\t\t\t{\n\t\t\t\treturn (TimeStampReq) o;\n\t\t\t}\n\n\t\t\tif (o is Asn1Sequence)\n\t\t\t{\n\t\t\t\treturn new TimeStampReq((Asn1Sequence) o);\n\t\t\t}\n\n\t\t\tthrow new ArgumentException(\n\t\t\t\t\"Unknown object in 'TimeStampReq' factory: \" + Platform.GetTypeName(o));\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static TimeStampReq GetInstance(\n\t\t\tobject o)\n\t\t{\n\t\t\tif (o == null || o is TimeStampReq)\n\t\t\t{\n\t\t\t\treturn (TimeStampReq) o;\n\t\t\t}\n\n\t\t\tif (o is Asn1Sequence)\n\t\t\t{\n\t\t\t\treturn new TimeStampReq((Asn1Sequence) o);\n\t\t\t}\n\n\t\t\tthrow new ArgumentException(\n\t\t\t\t\"Unknown object in 'TimeStampReq' factory: \" + Platform.GetTypeName(o));\n\t\t}\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate async Task ProcessProjectsAsync(\n            IEnumerable<ProjectId> projectSet,\n            Dictionary<Project, Dictionary<Document, List<ValueTuple<ISymbol, IReferenceFinder>>>> projectMap,\n            ProgressWrapper wrapper)\n        {\n            var visitedProjects = new HashSet<ProjectId>();\n\n            // Make sure we process each project in the set.  Process each project in depth first\n            // order.  That way when we process a project, the compilations for all projects that it\n            // depends on will have been created already.\n            foreach (var projectId in projectSet)\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n\n                await ProcessProjectAsync(projectId, projectMap, visitedProjects, wrapper).ConfigureAwait(false);\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate async Task ProcessProjectsAsync(\n            IEnumerable<ProjectId> projectSet,\n            Dictionary<Project, Dictionary<Document, List<ValueTuple<ISymbol, IReferenceFinder>>>> projectMap,\n            ProgressWrapper wrapper)\n        {\n            var visitedProjects = new HashSet<ProjectId>();\n\n            // Make sure we process each project in the set.  Process each project in depth first\n            // order.  That way when we process a project, the compilations for all projects that it\n            // depends on will have been created already.\n            foreach (var projectId in projectSet)\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n\n                await ProcessProjectAsync(projectId, projectMap, visitedProjects, wrapper).ConfigureAwait(false);\n            }\n        }\nAnswer: __________\n\n<think>\nOkay"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#region Equals\n        public bool Equals(TestResponse other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n            if (ReferenceEquals(this, other))\n            {\n                return true;\n            }\n            return TestId == other.TestId && string.Equals(TestText, other.TestText);\n        }public override bool Equals(object obj)\n        {\n            if (ReferenceEquals(null, obj))\n            {\n                return false;\n            }\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }\n            if (obj.GetType() != GetType())\n            {\n                return false;\n            }\n            return Equals((TestResponse) obj);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#region Equals\n        public bool Equals(TestResponse other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n            if (ReferenceEquals(this, other))\n            {\n                return true;\n            }\n            return TestId == other.TestId && string.Equals(TestText, other.TestText);\n        }public override bool Equals(object obj)\n        {\n            if (ReferenceEquals(null, obj))\n            {\n                return false;\n            }\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }\n            if (obj.GetType() != GetType())\n            {\n                return false;\n            }\n            return Equals((TestResponse) obj);\n        }\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Constructors\n\n        protected RetainerTaskBase(IXivSheet sheet, SaintCoinach.Ex.Relational.IRelationalRow sourceRow) : base(sheet, sourceRow) { }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n        #region Constructors\n\n        protected RetainerTaskBase(IXivSheet sheet, SaintCoinach.Ex.Relational.IRelationalRow sourceRow) : base(sheet, sourceRow) { }\nAnswer: ComplexMethod_positive\n\nWait,"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic InviteintoGroupEventArgs(string gmid, string umid)\n        {\n            GroupMid = gmid;\n            UserMid = umid;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic InviteintoGroupEventArgs(string gmid, string umid)\n        {\n            GroupMid = gmid;\n            UserMid = umid;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Sends elements downstream with speed limited to <paramref name=\"elements\"/>/<paramref name=\"per\"/>. In other words, this stage set the maximum rate\n        /// for emitting messages. This combinator works for streams where all elements have the same cost or length.\n        /// \n        /// Throttle implements the token bucket model. There is a bucket with a given token capacity (burst size or maximumBurst).\n        /// Tokens drops into the bucket at a given rate and can be \"spared\" for later use up to bucket capacity\n        /// to allow some burstiness. Whenever stream wants to send an element, it takes as many\n        /// tokens from the bucket as number of elements. If there isn't any, throttle waits until the\n        /// bucket accumulates enough tokens.\n        /// \n        /// Parameter <paramref name=\"mode\"/> manages behaviour when upstream is faster than throttle rate:\n        /// <para/> - <see cref=\"ThrottleMode.Shaping\"/> makes pauses before emitting messages to meet throttle rate\n        /// <para/> - <see cref=\"ThrottleMode.Enforcing\"/> fails with exception when upstream is faster than throttle rate. Enforcing\n        ///  cannot emit elements that cost more than the maximumBurst\n        /// <para>\n        /// Emits when upstream emits an element and configured time per each element elapsed\n        /// </para>\n        /// Backpressures when downstream backpressures\n        /// <para>\n        /// Completes when upstream completes\n       \nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "SendElementsWithThrottle",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Sends elements downstream with speed limited to <paramref name=\"elements\"/>/<paramref name=\"per\"/>. In other words, this stage set the maximum rate\n        /// for emitting messages. This combinator works for streams where all elements have the same cost or length.\n        /// \n        /// Throttle implements the token bucket model. There is a bucket with a given token capacity (burst size or maximumBurst).\n        /// Tokens drops into the bucket at a given rate and can be \"spared\" for later use up to bucket capacity\n        /// to allow some burstiness. Whenever stream wants to send an element, it takes as many\n        /// tokens from the bucket as number of elements. If there isn't any, throttle waits until the\n        /// bucket accumulates enough tokens.\n        /// \n        /// Parameter <paramref name=\"mode\"/> manages behaviour when upstream is faster than throttle rate:\n        /// <para/> - <see cref=\"ThrottleMode.Shaping\"/> makes pauses before emitting messages to meet throttle rate\n        /// <para/> - <see cref=\"ThrottleMode.Enforcing\"/> fails with exception when upstream is faster than throttle rate. Enforcing\n        ///  cannot emit elements that cost more than the maximumBurst\n        /// <para>\n        /// Emits when upstream emits an element and configured time per each element elapsed\n        /// </para>\n        /// Backpressures when downstream backpressures\n        /// <para>\n        /// Completes when upstream completes\n       \nAnswer: SendElementsWithThrottle"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\t\t\t\n            writer.Write((int)0); // version\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\t\t\t\n            writer.Write((int)0); // version\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void RenderAbsolutePositionPerspective(RenderContext context, DeviceContextProxy deviceContext)\n            {\n                float distance = Size / 2 / SizeScale;\n                var globalTrans = context.GlobalTransform;\n                var viewInv = globalTrans.View.PsudoInvert();\n\n                Vector3 newPos;\n                //Determine new camera position. So the size of the object keeps the same. Decouple it from global zooming\n                var pos = Vector3.Normalize(absolutePosition - globalTrans.EyePos);\n                newPos = absolutePosition - pos * distance;\n                newPos -= absolutePosition; // Need to do additional translation, since translation is not in model matrix.\n                viewInv.M41 = newPos.X;\n                viewInv.M42 = newPos.Y;\n                viewInv.M43 = newPos.Z;\n                globalTrans.View = viewInv.PsudoInvert();\n                // Create new projection matrix with proper near/far field.\n                float w = globalTrans.Viewport.X;\n                float h = globalTrans.Viewport.Y;\n                globalTrans.Projection = CreateProjectionMatrix(context.IsPerspective, IsRightHand, 1,\n                    globalTrans.Frustum.X, 0.01f, 500 / SizeScale, w, h);\n                globalTrans.ViewProjection = globalTrans.View * globalTrans.Projection;\n                globalTrans.EyePos = newPos;\n                globalTransformCB.Upload(deviceContext, ref globalTrans);\n                GlobalTransform = globalTran\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate void RenderAbsolutePositionPerspective(RenderContext context, DeviceContextProxy deviceContext)\n            {\n                float distance = Size / 2 / SizeScale;\n                var globalTrans = context.GlobalTransform;\n                var viewInv = globalTrans.View.PsudoInvert();\n\n                Vector3 newPos;\n                //Determine new camera position. So the size of the object keeps the same. Decouple it from global zooming\n                var pos = Vector3.Normalize(absolutePosition - globalTrans.EyePos);\n                newPos = absolutePosition - pos * distance;\n                newPos -= absolutePosition; // Need to do additional translation, since translation is not in model matrix.\n                viewInv.M41 = newPos.X;\n                viewInv.M42 = newPos.Y;\n                viewInv.M43 = newPos.Z;\n                globalTrans.View = viewInv.PsudoInvert();\n                // Create new projection matrix with proper near/far field.\n                float w = globalTrans.Viewport.X;\n                float h = globalTrans.Viewport.Y;\n                globalTrans.Projection = CreateProjectionMatrix(context.IsPerspective, IsRightHand, 1,\n                    globalTrans.Frustum.X, 0.01f, 500 / SizeScale, w, h);\n                globalTrans.ViewProjection = globalTrans.View * globalTrans.Projection;\n                globalTrans.EyePos = newPos;\n                globalTransformCB.Upload(deviceContext, ref globalTrans);\n                GlobalTransform = globalTran\nAnswer: Answer: [Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnItemChecked(int itemIndex)\n        {\n            if (NodeCheckedStateChanged != null)\n                NodeCheckedStateChanged(this, new NodeCheckedStateChangedEventArgs { Node = nodes[itemIndex], Checked = true });\n\n            base.OnItemChecked(itemIndex);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected override void OnItemChecked(int itemIndex)\n        {\n            if (NodeCheckedStateChanged != null)\n                NodeCheckedStateChanged(this, new NodeCheckedStateChangedEventArgs { Node = nodes[itemIndex], Checked = true });\n\n            base.OnItemChecked(itemIndex);\n        }\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void SetToothAche(Mobile from, int acidity, bool direct)\n\t\t{\n\t\t\tToothAcheTimer t = EnsureTimer(from, acidity);\n\t\t\n\t\t\tif (direct)\n\t\t\t{\n\t\t\t\tt.Acidity = acidity;\n\t\t\t}\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void SetToothAche(Mobile from, int acidity, bool direct)\n\t\t{\n\t\t\tToothAcheTimer t = EnsureTimer(from, acidity);\n\t\t\n\t\t\tif (direct)\n\t\t\t{\n\t\t\t\tt.Acidity = acidity;\n\t\t\t}\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n\t#region Methods\n\n\t\t/// <overloads>The SetLayout() methods setup the desired layout of the\n\t\t/// <see cref=\"GraphPane\" /> objects within a <see cref=\"MasterPane\" />.  These functions\n\t\t/// do not make any changes, they merely set the parameters so that future calls\n\t\t/// to <see cref=\"PaneBase.ReSize\" /> or <see cref=\"DoLayout(Graphics,MasterPane)\" />\n\t\t/// will use the desired layout.<br /><br />\n\t\t/// The layout options include a set of \"canned\" layouts provided by the\n\t\t/// <see cref=\"ZedGraph.PaneLayout\" /> enumeration, options to just set a specific\n\t\t/// number of rows and columns of panes (and all pane sizes are the same), and more\n\t\t/// customized options of specifying the number or rows in each column or the number of\n\t\t/// columns in each row, along with proportional values that determine the size of each\n\t\t/// individual column or row.\n\t\t/// </overloads>\n\t\t/// <summary>\n\t\t/// Automatically set all of the <see cref=\"GraphPane\"/> <see cref=\"PaneBase.Rect\"/>'s in\n\t\t/// the list to a pre-defined layout configuration from a <see cref=\"PaneLayout\" />\n\t\t/// enumeration.\n\t\t/// </summary>\n\t\t/// <remarks>This method uses a <see cref=\"PaneLayout\"/> enumeration to describe the type of layout\n\t\t/// to be used.  Overloads are available that provide other layout options</remarks>\n\t\t/// <param name=\"paneLayout\">A <see cref=\"PaneLayout\"/> enumeration that describes how\n\t\t/// the panes should be laid out within the <see cref=\"PaneBase.Rect\"/>.</param>\n\t\t/// <seealso cref\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n#endregion\n\n\t#region Methods\n\n\t\t/// <overloads>The SetLayout() methods setup the desired layout of the\n\t\t/// <see cref=\"GraphPane\" /> objects within a <see cref=\"MasterPane\" />.  These functions\n\t\t/// do not make any changes, they merely set the parameters so that future calls\n\t\t/// to <see cref=\"PaneBase.ReSize\" /> or <see cref=\"DoLayout(Graphics,MasterPane)\" />\n\t\t/// will use the desired layout.<br /><br />\n\t\t/// The layout options include a set of \"canned\" layouts provided by the\n\t\t/// <see cref=\"ZedGraph.PaneLayout\" /> enumeration, options to just set a specific\n\t\t/// number of rows and columns of panes (and all pane sizes are the same), and more\n\t\t/// customized options of specifying the number or rows in each column or the number of\n\t\t/// columns in each row, along with proportional values that determine the size of each\n\t\t/// individual column or row.\n\t\t/// </overloads>\n\t\t/// <summary>\n\t\t/// Automatically set all of the <see cref=\"GraphPane\"/> <see cref=\"PaneBase.Rect\"/>'s in\n\t\t/// the list to a pre-defined layout configuration from a <see cref=\"PaneLayout\" />\n\t\t/// enumeration.\n\t\t/// </summary>\n\t\t/// <remarks>This method uses a <see cref=\"PaneLayout\"/> enumeration to describe the type of layout\n\t\t/// to be used.  Overloads are available that provide other layout options</remarks>\n\t\t/// <param name=\"paneLayout\">A <see cref=\"PaneLayout\"/> enumeration that describes how\n\t\t/// the panes should be laid out within the <see cref=\"PaneBase.Rect\"/>.</param>\n\t\t/// <seealso cref\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Method called to clamp the 'ContentScale' value to its valid range.\n        /// </summary>\n        private static object ContentScale_Coerce(DependencyObject d, object baseValue)\n        {\n            ZoomAndPanControl c = (ZoomAndPanControl)d;\n            double value = (double) baseValue;\n            value = Math.Min(Math.Max(value, c.MinContentScale), c.MaxContentScale);\n            return value;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Method called to clamp the 'ContentScale' value to its valid range.\n        /// </summary>\n        private static object ContentScale_Coerce(DependencyObject d, object baseValue)\n        {\n            ZoomAndPanControl c = (ZoomAndPanControl)d;\n            double value = (double) baseValue;\n            value = Math.Min(Math.Max(value, c.MinContentScale), c.MaxContentScale);\n            return value;\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public void ObjectFunctionWithTableReturnValueTest()\n        {\n            using (SapRfcConnection conn = GetConnection())\n            {\n                var customers = conn.ExecuteFunction(new GetAllCustomersFunction());\n                Assert.Equal(2, customers.Count());\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public void ObjectFunctionWithTableReturnValueTest()\n        {\n            using (SapRfcConnection conn = GetConnection())\n            {\n                var customers = conn.ExecuteFunction(new GetAllCustomersFunction());\n                Assert.Equal(2, customers.Count());\n            }\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Generates a random (security) code.\n        /// </summary>\n        /// <param name=\"length\">A <see cref=\"System.Int32\"/> representing the length that the code needs to be.</param>\n        /// <returns>A <see cref=\"System.String\"/> representing the (security) code.</returns>\n        private static string GenerateRandomCode( int length )\n        {\n            StringBuilder sb = new StringBuilder();\n\n            int poolSize = codeCharacters.Length;\n            for ( int i = 0; i < length; i++ )\n            {\n                sb.Append( codeCharacters[_random.Next( poolSize )] );\n            }\n\n            return sb.ToString();\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Generates a random (security) code.\n        /// </summary>\n        /// <param name=\"length\">A <see cref=\"System.Int32\"/> representing the length that the code needs to be.</param>\n        /// <returns>A <see cref=\"System.String\"/> representing the (security) code.</returns>\n        private static string GenerateRandomCode( int length )\n        {\n            StringBuilder sb = new StringBuilder();\n\n            int poolSize = codeCharacters.Length;\n            for ( int i = 0; i < length; i++ )\n            {\n                sb.Append( codeCharacters[_random.Next( poolSize )] );\n            }\n\n            return sb.ToString();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod, TestCategory(\"Lite\"), TestCategory(\"Misc\")]\n\t\tpublic void ShouldPickCorrectGenericVarientInCaseOfCallOriginal()\n\t\t{\n\t\t\tvar foo = Mock.Create<FooGeneric>();\n\t\t\tMock.Arrange(() => foo.Echo<int, int>(10)).CallOriginal();\n\t\t\tAssert.Throws<ArgumentException>(() => foo.Echo<int, int>(10));\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod, TestCategory(\"Lite\"), TestCategory(\"Misc\")]\n\t\tpublic void ShouldPickCorrectGenericVarientInCaseOfCallOriginal()\n\t\t{\n\t\t\tvar foo = Mock.Create<FooGeneric>();\n\t\t\tMock.Arrange(() => foo.Echo<int, int>(10)).CallOriginal();\n\t\t\tAssert.Throws<ArgumentException>(() => foo.Echo<int, int>(10));\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public async Task TestMissingSemicolonAsync()\n        {\n            string testCode = @\"\nclass ClassName\n{\n    void MethodName()\n    {\n        int x\n    }\n}\n\";\n\n            DiagnosticResult[] expected =\n            {\n                DiagnosticResult.CompilerError(\"CS1002\").WithMessage(\"; expected\").WithLocation(6, 14),\n            };\n\n            await VerifyCSharpDiagnosticAsync(testCode, expected, CancellationToken.None).ConfigureAwait(false);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Fact]\n        public async Task TestMissingSemicolonAsync()\n        {\n            string testCode = @\"\nclass ClassName\n{\n    void MethodName()\n    {\n        int x\n    }\n}\n\";\n\n            DiagnosticResult[] expected =\n            {\n                DiagnosticResult.CompilerError(\"CS1002\").WithMessage(\"; expected\").WithLocation(6, 14),\n            };\n\n            await VerifyCSharpDiagnosticAsync(testCode, expected, CancellationToken.None).ConfigureAwait(false);\n        }\nAnswer: ComplexMethod_positive\n\nOkay,"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Create new writeable bitmap.\n        /// </summary>\n        /// <param name=\"size\">The size of the bitmap in device pixels.</param>\n        /// <param name=\"dpi\">The DPI of the bitmap.</param>\n        /// <param name=\"format\">The pixel format.</param>\n        public WriteableBitmapImpl(PixelSize size, Vector dpi, PixelFormat? format = null)\n        {\n            PixelSize = size;\n            Dpi = dpi;\n\n            var colorType = PixelFormatHelper.ResolveColorType(format);\n            \n            var runtimePlatform = AvaloniaLocator.Current?.GetService<IRuntimePlatform>();\n            \n            if (runtimePlatform != null)\n            {\n                _bitmap = new SKBitmap();\n\n                var nfo = new SKImageInfo(size.Width, size.Height, colorType, SKAlphaType.Premul);\n                var blob = runtimePlatform.AllocBlob(nfo.BytesSize);\n\n                _bitmap.InstallPixels(nfo, blob.Address, nfo.RowBytes, s_releaseDelegate, blob);\n            }\n            else\n            {\n                _bitmap = new SKBitmap(size.Width, size.Height, colorType, SKAlphaType.Premul);\n            }\n\n            _bitmap.Erase(SKColor.Empty);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Create new writeable bitmap.\n        /// </summary>\n        /// <param name=\"size\">The size of the bitmap in device pixels.</param>\n        /// <param name=\"dpi\">The DPI of the bitmap.</param>\n        /// <param name=\"format\">The pixel format.</param>\n        public WriteableBitmapImpl(PixelSize size, Vector dpi, PixelFormat? format = null)\n        {\n            PixelSize = size;\n            Dpi = dpi;\n\n            var colorType = PixelFormatHelper.ResolveColorType(format);\n            \n            var runtimePlatform = AvaloniaLocator.Current?.GetService<IRuntimePlatform>();\n            \n            if (runtimePlatform != null)\n            {\n                _bitmap = new SKBitmap();\n\n                var nfo = new SKImageInfo(size.Width, size.Height, colorType, SKAlphaType.Premul);\n                var blob = runtimePlatform.AllocBlob(nfo.BytesSize);\n\n                _bitmap.InstallPixels(nfo, blob.Address, nfo.RowBytes, s_releaseDelegate, blob);\n            }\n            else\n            {\n                _bitmap = new SKBitmap(size.Width, size.Height, colorType, SKAlphaType.Premul);\n            }\n\n            _bitmap.Erase(SKColor.Empty);\n        }\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nGoogle.Api.Ads.AdManager.v201811.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201811.ReconciliationReport[] reconciliationReports);Google.Api.Ads.AdManager.v201902.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201902.ReconciliationReport[] reconciliationReports);Google.Api.Ads.AdManager.v201905.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201905.ReconciliationReport[] reconciliationReports);\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nGoogle.Api.Ads.AdManager.v201811.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201811.ReconciliationReport[] reconciliationReports);Google.Api.Ads.AdManager.v201902.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201902.ReconciliationReport[] reconciliationReports);Google.Api.Ads.AdManager.v201905.ReconciliationReport[] updateReconciliationReports(Google.Api.Ads.AdManager.v201905.ReconciliationReport[] reconciliationReports);\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool ShouldCancelRename() {\n\t\t\treturn false;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool ShouldCancelRename() {\n\t\t\treturn false;\n\t\t}\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Determine whether the collection contains a specific value</summary>\n        /// <param name=\"value\">The object to locate in the collection</param>\n        /// <returns>True iff the item is found</returns>\n        public bool Contains(object value)\n        {\n            return base.Contains(value as U);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Determine whether the collection contains a specific value</summary>\n        /// <param name=\"value\">The object to locate in the collection</param>\n        /// <returns>True iff the item is found</returns>\n        public bool Contains(object value)\n        {\n            return base.Contains(value as U);\n        }\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static Color GetColor(int colorCode)\n        {\n            return colorCode >= colors.Length ? colors[text] : colors[colorCode]; //color code or use text color as defaut\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "Mult",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static Color GetColor(int colorCode)\n        {\n            return colorCode >= colors.Length ? colors[text] : colors[colorCode]; //color code or use text color as defaut\n        }\nAnswer: \n</think>\n\nAnswer: Mult"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void LoadBrushes()\n        {\n            Brushes.BackLegal = new SolidBrush(BackLegal);\n            Brushes.Text = new SolidBrush(TextColor);\n            Brushes.BackDefault = new SolidBrush(BackColor);\n            Brushes.TextHighlighted = new SolidBrush(TextHighlighted);\n            Brushes.BackHighlighted = new SolidBrush(BackHighlighted);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void LoadBrushes()\n        {\n            Brushes.BackLegal = new SolidBrush(BackLegal);\n            Brushes.Text = new SolidBrush(TextColor);\n            Brushes.BackDefault = new SolidBrush(BackColor);\n            Brushes.TextHighlighted = new SolidBrush(TextHighlighted);\n            Brushes.BackHighlighted = new SolidBrush(BackHighlighted);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Invoked when a new target is set, after all other action has been taken\n        /// </summary>\n        /// <param name=\"oldTarget\">Previous target</param>\n        /// <param name=\"newTarget\">New target</param>\n        protected internal override void OnTargetChanged(object oldTarget, object newTarget)\n        {\n            var oldInpc = oldTarget as INotifyPropertyChanged;\n            if (oldInpc != null)\n                PropertyChangedEventManager.RemoveHandler(oldInpc, this.PropertyChangedHandler, this.GuardName);\n\n            this.guardPropertyGetter = null;\n\n            var inpc = newTarget as INotifyPropertyChanged;\n            if (inpc != null)\n            {\n                var guardPropertyInfo = newTarget.GetType().GetProperty(this.GuardName);\n                if (guardPropertyInfo != null)\n                {\n                    if (guardPropertyInfo.PropertyType == typeof(bool))\n                    {\n                        var targetExpression = Expressions.Expression.Constant(newTarget);\n                        var propertyAccess = Expressions.Expression.Property(targetExpression, guardPropertyInfo);\n                        this.guardPropertyGetter = Expressions.Expression.Lambda<Func<bool>>(propertyAccess).Compile();\n                    }\n                    else\n                    {\n                        logger.Warn(\"Found guard property {0} for action {1} on target {2}, but its return type wasn't bool. Therefore, ignoring\", this.GuardN\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Invoked when a new target is set, after all other action has been taken\n        /// </summary>\n        /// <param name=\"oldTarget\">Previous target</param>\n        /// <param name=\"newTarget\">New target</param>\n        protected internal override void OnTargetChanged(object oldTarget, object newTarget)\n        {\n            var oldInpc = oldTarget as INotifyPropertyChanged;\n            if (oldInpc != null)\n                PropertyChangedEventManager.RemoveHandler(oldInpc, this.PropertyChangedHandler, this.GuardName);\n\n            this.guardPropertyGetter = null;\n\n            var inpc = newTarget as INotifyPropertyChanged;\n            if (inpc != null)\n            {\n                var guardPropertyInfo = newTarget.GetType().GetProperty(this.GuardName);\n                if (guardPropertyInfo != null)\n                {\n                    if (guardPropertyInfo.PropertyType == typeof(bool))\n                    {\n                        var targetExpression = Expressions.Expression.Constant(newTarget);\n                        var propertyAccess = Expressions.Expression.Property(targetExpression, guardPropertyInfo);\n                        this.guardPropertyGetter = Expressions.Expression.Lambda<Func<bool>>(propertyAccess).Compile();\n                    }\n                    else\n                    {\n                        logger.Warn(\"Found guard property {0} for action {1} on target {2}, but its return type wasn't bool. Therefore, ignoring\", this.GuardN\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected EvaluatableExpressionFilterBase ()\n    {\n    }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected EvaluatableExpressionFilterBase ()\n    {\n    }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod, TestCategory(\"Lite\"), TestCategory(\"Mock\")]\n\t\tpublic void ShouldNotCallOriginalMethodIfThereisASetupForCallsOriginal()\n\t\t{\n\t\t\tvar foo = Mock.Create<FooBase>(Behavior.CallOriginal);\n\n\t\t\tGuid expected = Guid.NewGuid();\n\n\t\t\tMock.Arrange(() => foo.GetGuid()).Returns(expected);\n\n\t\t\tAssert.Equal(expected, foo.GetGuid());\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[TestMethod, TestCategory(\"Lite\"), TestCategory(\"Mock\")]\n\t\tpublic void ShouldNotCallOriginalMethodIfThereisASetupForCallsOriginal()\n\t\t{\n\t\t\tvar foo = Mock.Create<FooBase>(Behavior.CallOriginal);\n\n\t\t\tGuid expected = Guid.NewGuid();\n\n\t\t\tMock.Arrange(() => foo.GetGuid()).Returns(expected);\n\n\t\t\tAssert.Equal(expected, foo.GetGuid());\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Equals(UniqueIdentifier obj)\n        {\n            var o = obj as ActivationId;\n            return o != null && Key.Equals(o.Key);\n        }public override bool Equals(object obj)\n        {\n            var o = obj as ActivationId;\n            return o != null && Key.Equals(o.Key);\n        }public bool Equals(ActivationId other)\n        {\n            return other != null && Key.Equals(other.Key);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override bool Equals(UniqueIdentifier obj)\n        {\n            var o = obj as ActivationId;\n            return o != null && Key.Equals(o.Key);\n        }public override bool Equals(object obj)\n        {\n            var o = obj as ActivationId;\n            return o != null && Key.Equals(o.Key);\n        }public bool Equals(ActivationId other)\n        {\n            return other != null && Key.Equals(other.Key);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void Verbose(object message)\n        {\n            if (IsVerbose)\n                LogInfo?.Invoke(new LogEventArgs() { Exception = null, Message = message });\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic static void Verbose(object message)\n        {\n            if (IsVerbose)\n                LogInfo?.Invoke(new LogEventArgs() { Exception = null, Message = message });\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void HandleObjectCreationExpression(SyntaxNodeAnalysisContext context)\n        {\n            ObjectCreationExpressionSyntax newExpression = (ObjectCreationExpressionSyntax)context.Node;\n\n            var typeToCreate = context.SemanticModel.GetTypeInfo(newExpression, context.CancellationToken);\n            if ((typeToCreate.Type == null) || typeToCreate.Type.IsReferenceType || IsReferenceTypeParameter(typeToCreate.Type))\n            {\n                return;\n            }\n\n            if ((newExpression.ArgumentList == null) || (newExpression.ArgumentList.Arguments.Count > 0))\n            {\n                return;\n            }\n\n            if (newExpression.Initializer != null)\n            {\n                return;\n            }\n\n            context.ReportDiagnostic(Diagnostic.Create(Descriptor, newExpression.GetLocation()));\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprivate static void HandleObjectCreationExpression(SyntaxNodeAnalysisContext context)\n        {\n            ObjectCreationExpressionSyntax newExpression = (ObjectCreationExpressionSyntax)context.Node;\n\n            var typeToCreate = context.SemanticModel.GetTypeInfo(newExpression, context.CancellationToken);\n            if ((typeToCreate.Type == null) || typeToCreate.Type.IsReferenceType || IsReferenceTypeParameter(typeToCreate.Type))\n            {\n                return;\n            }\n\n            if ((newExpression.ArgumentList == null) || (newExpression.ArgumentList.Arguments.Count > 0))\n            {\n                return;\n            }\n\n            if (newExpression.Initializer != null)\n            {\n                return;\n            }\n\n            context.ReportDiagnostic(Diagnostic.Create(Descriptor, newExpression.GetLocation()));\n        }\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal MTHD_6b8b63f535f748eaa378f32897254bbc()\n\t\t\t\t{\n\t\t\t\t\tthis.Initialize(\"set_Capacity\", false, new MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor[] {\n                                new MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor(\"value\", typeof(int), false, null, false, false, false)}, false);\n\t\t\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\ninternal MTHD_6b8b63f535f748eaa378f32897254bbc()\n\t\t\t\t{\n\t\t\t\t\tthis.Initialize(\"set_Capacity\", false, new MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor[] {\n                                new MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor(\"value\", typeof(int), false, null, false, false, false)}, false);\n\t\t\t\t}\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"([B)V\")]\n        public virtual void write(byte[] par0) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write2, global::net.sf.jni4net.utils.Convertor.ParArrayPrimC2J(@__env, par0));\n            }\n        }[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"([BII)V\")]\n        public virtual void write(byte[] par0, int par1, int par2) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 16)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write3, global::net.sf.jni4net.utils.Convertor.ParArrayPrimC2J(@__env, par0), global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par1), global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par2));\n            }\n        }[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"(I)V\")]\n        public virtual void write(int par0) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write4, global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par0));\n            }\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"([B)V\")]\n        public virtual void write(byte[] par0) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write2, global::net.sf.jni4net.utils.Convertor.ParArrayPrimC2J(@__env, par0));\n            }\n        }[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"([BII)V\")]\n        public virtual void write(byte[] par0, int par1, int par2) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 16)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write3, global::net.sf.jni4net.utils.Convertor.ParArrayPrimC2J(@__env, par0), global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par1), global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par2));\n            }\n        }[global::net.sf.jni4net.attributes.JavaMethodAttribute(\"(I)V\")]\n        public virtual void write(int par0) {\n            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){\n            @__env.CallVoidMethod(this, global::java.io.OutputStream.j4n_write4, global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par0));\n            }\n        }\nAnswer: __ Answer: ComplexConditional_positive"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Execute(SharedObjects shared)\n        {\n            var node = (Node)PopValueAssert(shared);\n            AssertArgBottomAndConsume(shared);\n            node.AddToVessel(shared.Vessel);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Execute(SharedObjects shared)\n        {\n            var node = (Node)PopValueAssert(shared);\n            AssertArgBottomAndConsume(shared);\n            node.AddToVessel(shared.Vessel);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Return the SE (possibly \"this\") that contains the specified SE.\n\t\t/// </summary>\n\t\tpublic ISemanticTypeStruct SemanticElementContaining(ISemanticTypeStruct stsToFind)\n\t\t{\n\t\t\tISemanticTypeStruct sts = null;\n\n\t\t\tforeach (SemanticElement se in SemanticElements)\n\t\t\t{\n\t\t\t\tif (se.Element.Struct == stsToFind)\n\t\t\t\t{\n\t\t\t\t\tsts = se.Element.Struct;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Recurse.\n\t\t\t\tsts = se.Element.Struct.SemanticElementContaining(stsToFind);\n\n\t\t\t\tif (sts != null)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sts;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// Return the SE (possibly \"this\") that contains the specified SE.\n\t\t/// </summary>\n\t\tpublic ISemanticTypeStruct SemanticElementContaining(ISemanticTypeStruct stsToFind)\n\t\t{\n\t\t\tISemanticTypeStruct sts = null;\n\n\t\t\tforeach (SemanticElement se in SemanticElements)\n\t\t\t{\n\t\t\t\tif (se.Element.Struct == stsToFind)\n\t\t\t\t{\n\t\t\t\t\tsts = se.Element.Struct;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Recurse.\n\t\t\t\tsts = se.Element.Struct.SemanticElementContaining(stsToFind);\n\n\t\t\t\tif (sts != null)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sts;\n\t\t}\nAnswer: ____________\n\n\n<think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic BasicExecutor()\n        {\n            AcceptingJobsDeadline = new ScheduledValue<bool>(true);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic BasicExecutor()\n        {\n            AcceptingJobsDeadline = new ScheduledValue<bool>(true);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Records()\n\t\t{\n\t\t}public Records(IEnumerable<BlockCoordinates> coordinates) : base(coordinates)\n\t\t{\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic Records()\n\t\t{\n\t\t}public Records(IEnumerable<BlockCoordinates> coordinates) : base(coordinates)\n\t\t{\n\t\t}\nAnswer: \nAnsswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns type argument if the type is\n        /// Nullable&lt;T&gt;, otherwise null.\n        /// </summary>\n        internal static Type GetNullableTypeArgument(this Type type)\n        {\n            if (type.IsMscorlibType(\"System\", \"Nullable`1\"))\n            {\n                var typeArgs = type.GetGenericArguments();\n                if (typeArgs.Length == 1)\n                {\n                    return typeArgs[0];\n                }\n            }\n            return null;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Returns type argument if the type is\n        /// Nullable&lt;T&gt;, otherwise null.\n        /// </summary>\n        internal static Type GetNullableTypeArgument(this Type type)\n        {\n            if (type.IsMscorlibType(\"System\", \"Nullable`1\"))\n            {\n                var typeArgs = type.GetGenericArguments();\n                if (typeArgs.Length == 1)\n                {\n                    return typeArgs[0];\n                }\n            }\n            return null;\n        }\nAnswer: ___________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Emphasize(string message)\n        {\n            _logger.Warn(message);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic void Emphasize(string message)\n        {\n            _logger.Warn(message);\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic LocalResourceUrlManager(DotvvmConfiguration configuration, IResourceHashService hasher)\n        {\n            this.resourceRoute = new DotvvmRoute(\n                url: $\"{HostingConstants.ResourceRouteName}/{{{HashParameterName}}}/{{{NameParameterName}:regex(.*)}}\",\n                virtualPath: null,\n                defaultValues: null,\n                presenterFactory: null,\n                configuration: configuration);\n            this.hasher = hasher;\n            this.resources = configuration.Resources;\n            this.alternateDirectories = configuration.Debug ? new ConcurrentDictionary<string, string>() : null;\n            this.suppressVersionHash = configuration.Debug;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic LocalResourceUrlManager(DotvvmConfiguration configuration, IResourceHashService hasher)\n        {\n            this.resourceRoute = new DotvvmRoute(\n                url: $\"{HostingConstants.ResourceRouteName}/{{{HashParameterName}}}/{{{NameParameterName}:regex(.*)}}\",\n                virtualPath: null,\n                defaultValues: null,\n                presenterFactory: null,\n                configuration: configuration);\n            this.hasher = hasher;\n            this.resources = configuration.Resources;\n            this.alternateDirectories = configuration.Debug ? new ConcurrentDictionary<string, string>() : null;\n            this.suppressVersionHash = configuration.Debug;\n        }\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected internal override Expression VisitQuerySourceReference (QuerySourceReferenceExpression expression)\n    {\n      ArgumentUtility.CheckNotNull (\"expression\", expression);\n\n      if (_querySourceMapping.ContainsMapping (expression.ReferencedQuerySource))\n        return _querySourceMapping.GetExpression (expression.ReferencedQuerySource);\n\n      return expression;\n    }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\nprotected internal override Expression VisitQuerySourceReference (QuerySourceReferenceExpression expression)\n    {\n      ArgumentUtility.CheckNotNull (\"expression\", expression);\n\n      if (_querySourceMapping.ContainsMapping (expression.ReferencedQuerySource))\n        return _querySourceMapping.GetExpression (expression.ReferencedQuerySource);\n\n      return expression;\n    }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n            int version = reader.ReadInt();\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n            int version = reader.ReadInt();\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// </summary>\n\t\t/// <param name=\"vk\"> </param>\n\t\tpublic VideoCategory(IVkApiInvoke vk)\n\t\t{\n\t\t\t_vk = vk;\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n\t\t/// </summary>\n\t\t/// <param name=\"vk\"> </param>\n\t\tpublic VideoCategory(IVkApiInvoke vk)\n\t\t{\n\t\t\t_vk = vk;\n\t\t}\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImport(\"sqlite3\", EntryPoint = \"sqlite3_changes\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern int Changes(IntPtr db);\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[DllImport(\"sqlite3\", EntryPoint = \"sqlite3_changes\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern int Changes(IntPtr db);\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Remove(Blocks blocks) {\n\t\t\tif (blocks.Method.Name != \".cctor\")\n\t\t\t\treturn false;\n\t\t\treturn RemoveTamperProtection(blocks);\n\t\t}\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\npublic bool Remove(Blocks blocks) {\n\t\t\tif (blocks.Method.Name != \".cctor\")\n\t\t\t\treturn false;\n\t\t\treturn RemoveTamperProtection(blocks);\n\t\t}\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void TestEqualsExactForGeometryCollections()\n        {\n            Geometry polygon1 = (Polygon) reader.Read(\n                    \"POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))\");\n            Geometry polygon2 = (Polygon) reader.Read(\n                    \"POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))\");\n            var x = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon1, polygon2\n                    });\n            var somethingExactlyEqual = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon1, polygon2\n                    });\n            var somethingNotEqualButSameClass = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon2\n                    });\n            var sameClassButEmpty = geometryFactory.CreateGeometryCollection(null);\n            var anotherSameClassButEmpty = geometryFactory.CreateGeometryCollection(null);\n            var collectionFactory = new GeometryCollectionFactory() ;\n\n            DoTestEqualsExact(x, somethingExactlyEqual,\n                somethingNotEqualButSameClass, sameClassButEmpty,\n                anotherSameClassButEmpty, collectionFactory);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n[Test]\n        public void TestEqualsExactForGeometryCollections()\n        {\n            Geometry polygon1 = (Polygon) reader.Read(\n                    \"POLYGON ((0 0, 0 50, 50 50, 50 0, 0 0))\");\n            Geometry polygon2 = (Polygon) reader.Read(\n                    \"POLYGON ((50 50, 50 0, 0 0, 0 50, 50 50))\");\n            var x = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon1, polygon2\n                    });\n            var somethingExactlyEqual = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon1, polygon2\n                    });\n            var somethingNotEqualButSameClass = geometryFactory.CreateGeometryCollection(new Geometry[] {\n                        polygon2\n                    });\n            var sameClassButEmpty = geometryFactory.CreateGeometryCollection(null);\n            var anotherSameClassButEmpty = geometryFactory.CreateGeometryCollection(null);\n            var collectionFactory = new GeometryCollectionFactory() ;\n\n            DoTestEqualsExact(x, somethingExactlyEqual,\n                somethingNotEqualButSameClass, sameClassButEmpty,\n                anotherSameClassButEmpty, collectionFactory);\n        }\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets an element at the specified view index.\n        /// </summary>\n        /// <param name=\"index\">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>\n        /// <returns>The element at the specified index.</returns>\n        private T DoGetItem(int index)\n        {\n            return this.buffer[this.DequeIndexToBufferIndex(index)];\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets an element at the specified view index.\n        /// </summary>\n        /// <param name=\"index\">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>\n        /// <returns>The element at the specified index.</returns>\n        private T DoGetItem(int index)\n        {\n            return this.buffer[this.DequeIndexToBufferIndex(index)];\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Decompresses the compressed HTTP content.\n        /// </summary>\n        /// <param name=\"compressedContent\">The compressed HTTP content.</param>\n        /// <param name=\"compressor\">The compressor.</param>\n        /// <returns>The decompressed content.</returns>\n        public async Task<HttpContent> DecompressContent(HttpContent compressedContent, ICompressor compressor)\n        {\n            var decompressedContentStream = new MemoryStream();\n\n            // Decompress buffered content\n            using (var ms = new MemoryStream(await compressedContent.ReadAsByteArrayAsync()))\n            {\n                await compressor.Decompress(ms, decompressedContentStream).ConfigureAwait(false);\n            }\n\n            // Set position back to 0 so it can be read again\n            decompressedContentStream.Position = 0;\n\n            var decompressedContent = new StreamContent(decompressedContentStream);\n\n            // Copy content headers so we know what got sent back\n            compressedContent.Headers.CopyTo(decompressedContent.Headers);\n\n            return decompressedContent;\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Decompresses the compressed HTTP content.\n        /// </summary>\n        /// <param name=\"compressedContent\">The compressed HTTP content.</param>\n        /// <param name=\"compressor\">The compressor.</param>\n        /// <returns>The decompressed content.</returns>\n        public async Task<HttpContent> DecompressContent(HttpContent compressedContent, ICompressor compressor)\n        {\n            var decompressedContentStream = new MemoryStream();\n\n            // Decompress buffered content\n            using (var ms = new MemoryStream(await compressedContent.ReadAsByteArrayAsync()))\n            {\n                await compressor.Decompress(ms, decompressedContentStream).ConfigureAwait(false);\n            }\n\n            // Set position back to 0 so it can be read again\n            decompressedContentStream.Position = 0;\n\n            var decompressedContent = new StreamContent(decompressedContentStream);\n\n            // Copy content headers so we know what got sent back\n            compressedContent.Headers.CopyTo(decompressedContent.Headers);\n\n            return decompressedContent;\n        }\nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets the <see cref=\"IPropertyMap\"/> implementation for the current entity map.\n        /// </summary>\n        /// <param name=\"info\">The information about the property.</param>\n        /// <returns>An implementation of <see cref=\"Dapper.FluentMap.Mapping.IPropertyMap\"/>.</returns>\n        protected override DommelPropertyMap GetPropertyMap(PropertyInfo info)\n        {\n            return new DommelPropertyMap(info);\n        }\nAnswer:",
    "expected": "ComplexConditional_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n        /// Gets the <see cref=\"IPropertyMap\"/> implementation for the current entity map.\n        /// </summary>\n        /// <param name=\"info\">The information about the property.</param>\n        /// <returns>An implementation of <see cref=\"Dapper.FluentMap.Mapping.IPropertyMap\"/>.</returns>\n        protected override DommelPropertyMap GetPropertyMap(PropertyInfo info)\n        {\n            return new DommelPropertyMap(info);\n        }\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public sealed class ObjectSpec : TypeSpec, IObjectSpec {\n        private static readonly ILog Log = LogManager.GetLogger(typeof(ObjectSpec));\n\n        private IDictionary<string, IActionSpec[]> locallyContributedActions = new Dictionary<string, IActionSpec[]>();\n        private IActionSpec[] collectionContributedActions;\n        private IActionSpec[] combinedActions;\n        private IActionSpec[] contributedActions;\n        private IActionSpec[] finderActions;\n        private IAssociationSpec[] objectFields;\n\n        public ObjectSpec(SpecFactory memberFactory, IMetamodelManager metamodelManager, INakedObjectManager nakedObjectManager, IObjectSpecImmutable innerSpec) :\n            base(memberFactory, metamodelManager, nakedObjectManager, innerSpec) {}\n\n        private IActionSpec[] ContributedActions => contributedActions ?? (contributedActions = MemberFactory.CreateActionSpecs(InnerSpec.ContributedActions));\n\n        #region IObjectSpec Members\n\n        public IAssociationSpec[] Properties {\n            get { return objectFields ?? (objectFields = InnerSpec.Fields.Select(element => MemberFactory.CreateAssociationSpec(element)).ToArray()); }\n        }\n\n        public IAssociationSpec GetProperty(string id) {\n            try {\n                return Properties.First(f => f.Id.Equals(id));\n            }\n            catch (InvalidOperationException) {\n                throw new ReflectionException(Log.LogAndReturn($\"No field called '{id}' in '{SingularName}'\"));\n            }\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "I",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public sealed class ObjectSpec : TypeSpec, IObjectSpec {\n        private static readonly ILog Log = LogManager.GetLogger(typeof(ObjectSpec));\n\n        private IDictionary<string, IActionSpec[]> locallyContributedActions = new Dictionary<string, IActionSpec[]>();\n        private IActionSpec[] collectionContributedActions;\n        private IActionSpec[] combinedActions;\n        private IActionSpec[] contributedActions;\n        private IActionSpec[] finderActions;\n        private IAssociationSpec[] objectFields;\n\n        public ObjectSpec(SpecFactory memberFactory, IMetamodelManager metamodelManager, INakedObjectManager nakedObjectManager, IObjectSpecImmutable innerSpec) :\n            base(memberFactory, metamodelManager, nakedObjectManager, innerSpec) {}\n\n        private IActionSpec[] ContributedActions => contributedActions ?? (contributedActions = MemberFactory.CreateActionSpecs(InnerSpec.ContributedActions));\n\n        #region IObjectSpec Members\n\n        public IAssociationSpec[] Properties {\n            get { return objectFields ?? (objectFields = InnerSpec.Fields.Select(element => MemberFactory.CreateAssociationSpec(element)).ToArray()); }\n        }\n\n        public IAssociationSpec GetProperty(string id) {\n            try {\n                return Properties.First(f => f.Id.Equals(id));\n            }\n            catch (InvalidOperationException) {\n                throw new ReflectionException(Log.LogAndReturn($\"No field called '{id}' in '{SingularName}'\"));\n            }\nAnswer: I think the code is using"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class PdfA1Checker : PdfAChecker {\n    \n        public static readonly PdfName setState = new PdfName(\"SetState\");\n        public static readonly PdfName noOp = new PdfName(\"NoOp\");\n\n        private static HashSet2<PdfName> allowedAnnotTypes = new HashSet2<PdfName>(new PdfName[] {PdfName.TEXT, PdfName.LINK,\n            PdfName.FREETEXT, PdfName.LINE, PdfName.SQUARE, PdfName.CIRCLE, PdfName.HIGHLIGHT, PdfName.UNDERLINE, PdfName.SQUIGGLY, PdfName.STRIKEOUT, PdfName.STAMP, \n            PdfName.INK, PdfName.POPUP, PdfName.WIDGET, PdfName.PRINTERMARK, PdfName.TRAPNET});\n\n        public static readonly HashSet2<PdfName> allowedNamedActions = new HashSet2<PdfName>(new PdfName[] {\n            PdfName.NEXTPAGE, PdfName.PREVPAGE, PdfName.FIRSTPAGE, PdfName.LASTPAGE});\n\n        private static HashSet2<PdfName> restrictedActions = new HashSet2<PdfName>(new PdfName[] {PdfName.LAUNCH, PdfName.SOUND,\n            PdfName.MOVIE, PdfName.RESETFORM, PdfName.IMPORTDATA, PdfName.JAVASCRIPT});\n\n        public static readonly HashSet2<PdfName> contentAnnotations = new HashSet2<PdfName>(new PdfName[] {PdfName.TEXT,\n            PdfName.FREETEXT, PdfName.LINE, PdfName.SQUARE, PdfName.CIRCLE, PdfName.STAMP, PdfName.INK, PdfName.POPUP});\n\n        private static readonly HashSet2<PdfName> keysForCheck = new HashSet2<PdfName>(new PdfName[] {PdfName.FONTDESCRIPTOR,\n            PdfName.FONTFILE, PdfName.FONTFILE2, PdfName.FONTFILE3, PdfName.FILTER, PdfName.GROUP, PdfName.S,\n            PdfName.EM\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class PdfA1Checker : PdfAChecker {\n    \n        public static readonly PdfName setState = new PdfName(\"SetState\");\n        public static readonly PdfName noOp = new PdfName(\"NoOp\");\n\n        private static HashSet2<PdfName> allowedAnnotTypes = new HashSet2<PdfName>(new PdfName[] {PdfName.TEXT, PdfName.LINK,\n            PdfName.FREETEXT, PdfName.LINE, PdfName.SQUARE, PdfName.CIRCLE, PdfName.HIGHLIGHT, PdfName.UNDERLINE, PdfName.SQUIGGLY, PdfName.STRIKEOUT, PdfName.STAMP, \n            PdfName.INK, PdfName.POPUP, PdfName.WIDGET, PdfName.PRINTERMARK, PdfName.TRAPNET});\n\n        public static readonly HashSet2<PdfName> allowedNamedActions = new HashSet2<PdfName>(new PdfName[] {\n            PdfName.NEXTPAGE, PdfName.PREVPAGE, PdfName.FIRSTPAGE, PdfName.LASTPAGE});\n\n        private static HashSet2<PdfName> restrictedActions = new HashSet2<PdfName>(new PdfName[] {PdfName.LAUNCH, PdfName.SOUND,\n            PdfName.MOVIE, PdfName.RESETFORM, PdfName.IMPORTDATA, PdfName.JAVASCRIPT});\n\n        public static readonly HashSet2<PdfName> contentAnnotations = new HashSet2<PdfName>(new PdfName[] {PdfName.TEXT,\n            PdfName.FREETEXT, PdfName.LINE, PdfName.SQUARE, PdfName.CIRCLE, PdfName.STAMP, PdfName.INK, PdfName.POPUP});\n\n        private static readonly HashSet2<PdfName> keysForCheck = new HashSet2<PdfName>(new PdfName[] {PdfName.FONTDESCRIPTOR,\n            PdfName.FONTFILE, PdfName.FONTFILE2, PdfName.FONTFILE3, PdfName.FILTER, PdfName.GROUP, PdfName.S,\n            PdfName.EM\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Export the 3D visual tree to a Wavefront OBJ file\n    /// </summary>\n    /// <remarks>\n    /// http://en.wikipedia.org/wiki/Obj\n    /// http://www.martinreddy.net/gfx/3d/OBJ.spec\n    /// http://www.eg-models.de/formats/Format_Obj.html\n    /// </remarks>\n    public class ObjExporter : Exporter<ObjExporter.ObjWriters>\n    {\n        /// <summary>\n        /// The exported materials.\n        /// </summary>\n        private readonly Dictionary<Material, string> exportedMaterials = new Dictionary<Material, string>();\n\n        /// <summary>\n        /// The group no.\n        /// </summary>\n        private int groupNo = 1;\n\n        /// <summary>\n        /// The mat no.\n        /// </summary>\n        private int matNo = 1;\n\n        /// <summary>\n        /// Normal index counter.\n        /// </summary>\n        private int normalIndex = 1;\n\n        /// <summary>\n        /// The object no.\n        /// </summary>\n        private int objectNo = 1;\n\n        /// <summary>\n        /// Texture index counter.\n        /// </summary>\n        private int textureIndex = 1;\n\n        /// <summary>\n        /// Vertex index counter.\n        /// </summary>\n        private int vertexIndex = 1;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ObjExporter\" /> class.\n        /// </summary>\n        public ObjExporter()\n        {\n            this.TextureExtension = \".png\";\n            this.TextureSize = 1024;\n            this.TextureQualityLevel = 90;\n   \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Export the 3D visual tree to a Wavefront OBJ file\n    /// </summary>\n    /// <remarks>\n    /// http://en.wikipedia.org/wiki/Obj\n    /// http://www.martinreddy.net/gfx/3d/OBJ.spec\n    /// http://www.eg-models.de/formats/Format_Obj.html\n    /// </remarks>\n    public class ObjExporter : Exporter<ObjExporter.ObjWriters>\n    {\n        /// <summary>\n        /// The exported materials.\n        /// </summary>\n        private readonly Dictionary<Material, string> exportedMaterials = new Dictionary<Material, string>();\n\n        /// <summary>\n        /// The group no.\n        /// </summary>\n        private int groupNo = 1;\n\n        /// <summary>\n        /// The mat no.\n        /// </summary>\n        private int matNo = 1;\n\n        /// <summary>\n        /// Normal index counter.\n        /// </summary>\n        private int normalIndex = 1;\n\n        /// <summary>\n        /// The object no.\n        /// </summary>\n        private int objectNo = 1;\n\n        /// <summary>\n        /// Texture index counter.\n        /// </summary>\n        private int textureIndex = 1;\n\n        /// <summary>\n        /// Vertex index counter.\n        /// </summary>\n        private int vertexIndex = 1;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ObjExporter\" /> class.\n        /// </summary>\n        public ObjExporter()\n        {\n            this.TextureExtension = \".png\";\n            this.TextureSize = 1024;\n            this.TextureQualityLevel = 90;\n   \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n   [DebuggerDisplay(\"{ControllerUrl}\")]\n   abstract class ControllerInfo : ICustomAttributeProvider {\n\n      ReadOnlyCollection<string> _CodeRoutingNamespace;\n      ReadOnlyCollection<string> _CodeRoutingContext;\n      ReadOnlyCollection<string> _NamespaceSegments;\n      ReadOnlyCollection<string> _BaseRouteAndNamespaceSegments;\n      RouteParameterCollection _RouteProperties;\n      Collection<ActionInfo> _Actions;\n      string _Name;\n      string _ControllerSegment;\n      string _CustomRoute;\n      bool _CustomRouteInit;\n      bool? _CustomRouteHasControllerToken;\n      string _UrlTemplate;\n      string _ControllerUrl;\n\n      public Type Type { get; private set; }\n      public RegisterSettings Register { get; private set; }\n      public CodeRoutingProvider Provider { get; private set; }\n\n      public virtual string Name {\n         get {\n            return _Name\n               ?? (_Name = Type.Name.Substring(0, Type.Name.Length - \"Controller\".Length));\n         }\n      }\n\n      public string Namespace {\n         get {\n            return Type.Namespace \n               ?? \"\";\n         }\n      }\n\n      public bool IsInRootNamespace {\n         get {\n            return Namespace == Register.RootNamespace\n               || IsInSubNamespace;\n         }\n      }\n\n      public bool IsInSubNamespace {\n         get {\n            return Namespace.Length > Register.RootNamespace.Length\n               && Namespace.StartsWith(Register.RootNamespace + \".\", StringComparison.Ordinal);\n     \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n   [DebuggerDisplay(\"{ControllerUrl}\")]\n   abstract class ControllerInfo : ICustomAttributeProvider {\n\n      ReadOnlyCollection<string> _CodeRoutingNamespace;\n      ReadOnlyCollection<string> _CodeRoutingContext;\n      ReadOnlyCollection<string> _NamespaceSegments;\n      ReadOnlyCollection<string> _BaseRouteAndNamespaceSegments;\n      RouteParameterCollection _RouteProperties;\n      Collection<ActionInfo> _Actions;\n      string _Name;\n      string _ControllerSegment;\n      string _CustomRoute;\n      bool _CustomRouteInit;\n      bool? _CustomRouteHasControllerToken;\n      string _UrlTemplate;\n      string _ControllerUrl;\n\n      public Type Type { get; private set; }\n      public RegisterSettings Register { get; private set; }\n      public CodeRoutingProvider Provider { get; private set; }\n\n      public virtual string Name {\n         get {\n            return _Name\n               ?? (_Name = Type.Name.Substring(0, Type.Name.Length - \"Controller\".Length));\n         }\n      }\n\n      public string Namespace {\n         get {\n            return Type.Namespace \n               ?? \"\";\n         }\n      }\n\n      public bool IsInRootNamespace {\n         get {\n            return Namespace == Register.RootNamespace\n               || IsInSubNamespace;\n         }\n      }\n\n      public bool IsInSubNamespace {\n         get {\n            return Namespace.Length > Register.RootNamespace.Length\n               && Namespace.StartsWith(Register.RootNamespace + \".\", StringComparison.Ordinal);\n     \nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Query statement parameters.\n\t/// </summary>\n\tpublic sealed class Statement\n\t{\n\t\tinternal string ns;\n\t\tinternal string setName;\n\t\tinternal string indexName;\n\t\tinternal string[] binNames;\n\t\tinternal Filter filter;\n\t\tinternal PredExp[] predExp;\n\t\tinternal Assembly resourceAssembly;\n\t\tinternal string resourcePath;\n\t\tinternal string packageName;\n\t\tinternal string packageContents;\n\t\tinternal string functionName;\n\t\tinternal Value[] functionArgs;\n\t\tinternal ulong taskId;\n\t\tinternal bool returnData;\n\n\t\t/// <summary>\n\t\t/// Query namespace.\n\t\t/// </summary>\n\t\tpublic string Namespace\n\t\t{\n\t\t\tset { ns = value; }\n\t\t\tget { return ns; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set query namespace.\n\t\t/// </summary>\n\t\tpublic void SetNamespace(string ns)\n\t\t{\n\t\t\tthis.ns = ns;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Optional query set name.\n\t\t/// </summary>\n\t\tpublic string SetName\n\t\t{\n\t\t\tset { setName = value; }\n\t\t\tget { return setName; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set optional query set name.\n\t\t/// </summary>\n\t\tpublic void SetSetName(string setName)\n\t\t{\n\t\t\tthis.setName = setName;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Optional query index name.  If not set, the server\n\t\t/// will determine the index from the filter's bin name.\n\t\t/// </summary>\n\t\tpublic string IndexName\n\t\t{\n\t\t\tset { indexName = value; }\n\t\t\tget { return indexName; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set optional query index name.  If not set, the server\n\t\t/// will determine the index from the filter's bin name.\n\t\t/// </summary>\n\t\tpublic void SetIndexName(str\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Query statement parameters.\n\t/// </summary>\n\tpublic sealed class Statement\n\t{\n\t\tinternal string ns;\n\t\tinternal string setName;\n\t\tinternal string indexName;\n\t\tinternal string[] binNames;\n\t\tinternal Filter filter;\n\t\tinternal PredExp[] predExp;\n\t\tinternal Assembly resourceAssembly;\n\t\tinternal string resourcePath;\n\t\tinternal string packageName;\n\t\tinternal string packageContents;\n\t\tinternal string functionName;\n\t\tinternal Value[] functionArgs;\n\t\tinternal ulong taskId;\n\t\tinternal bool returnData;\n\n\t\t/// <summary>\n\t\t/// Query namespace.\n\t\t/// </summary>\n\t\tpublic string Namespace\n\t\t{\n\t\t\tset { ns = value; }\n\t\t\tget { return ns; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set query namespace.\n\t\t/// </summary>\n\t\tpublic void SetNamespace(string ns)\n\t\t{\n\t\t\tthis.ns = ns;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Optional query set name.\n\t\t/// </summary>\n\t\tpublic string SetName\n\t\t{\n\t\t\tset { setName = value; }\n\t\t\tget { return setName; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set optional query set name.\n\t\t/// </summary>\n\t\tpublic void SetSetName(string setName)\n\t\t{\n\t\t\tthis.setName = setName;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Optional query index name.  If not set, the server\n\t\t/// will determine the index from the filter's bin name.\n\t\t/// </summary>\n\t\tpublic string IndexName\n\t\t{\n\t\t\tset { indexName = value; }\n\t\t\tget { return indexName; }\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Set optional query index name.  If not set, the server\n\t\t/// will determine the index from the filter's bin name.\n\t\t/// </summary>\n\t\tpublic void SetIndexName(str\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// An internal set of functionality used for interopping with native Win32 APIs.\n    /// </summary>\n    internal static class NativeMethods\n    {\n        #region Constants\n\n        // Define the window styles we use\n        public const int WS_CHILD = 0x40000000;\n        public const int WS_VISIBLE = 0x10000000;\n\n        // Define the Windows messages we will handle\n        public const int WM_MOUSEMOVE = 0x0200;\n        public const int WM_LBUTTONDOWN = 0x0201;\n        public const int WM_LBUTTONUP = 0x0202;\n        public const int WM_LBUTTONDBLCLK = 0x0203;\n        public const int WM_RBUTTONDOWN = 0x0204;\n        public const int WM_RBUTTONUP = 0x0205;\n        public const int WM_RBUTTONDBLCLK = 0x0206;\n        public const int WM_MBUTTONDOWN = 0x0207;\n        public const int WM_MBUTTONUP = 0x0208;\n        public const int WM_MBUTTONDBLCLK = 0x0209;\n        public const int WM_MOUSEWHEEL = 0x020A;\n        public const int WM_XBUTTONDOWN = 0x020B;\n        public const int WM_XBUTTONUP = 0x020C;\n        public const int WM_XBUTTONDBLCLK = 0x020D;\n        public const int WM_MOUSELEAVE = 0x02A3;\n\n        // Define the values that let us differentiate between the two extra mouse buttons\n        public const int MK_XBUTTON1 = 0x020;\n        public const int MK_XBUTTON2 = 0x040;\n\n        // Define the cursor icons we use\n        public const int  IDC_ARROW\t\t\t= 32512;\n        public const int  IDC_IBEAM\t\t\t= 32513;\n        public const int  IDC_WAIT\t\t\t= 32\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "<empty>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// An internal set of functionality used for interopping with native Win32 APIs.\n    /// </summary>\n    internal static class NativeMethods\n    {\n        #region Constants\n\n        // Define the window styles we use\n        public const int WS_CHILD = 0x40000000;\n        public const int WS_VISIBLE = 0x10000000;\n\n        // Define the Windows messages we will handle\n        public const int WM_MOUSEMOVE = 0x0200;\n        public const int WM_LBUTTONDOWN = 0x0201;\n        public const int WM_LBUTTONUP = 0x0202;\n        public const int WM_LBUTTONDBLCLK = 0x0203;\n        public const int WM_RBUTTONDOWN = 0x0204;\n        public const int WM_RBUTTONUP = 0x0205;\n        public const int WM_RBUTTONDBLCLK = 0x0206;\n        public const int WM_MBUTTONDOWN = 0x0207;\n        public const int WM_MBUTTONUP = 0x0208;\n        public const int WM_MBUTTONDBLCLK = 0x0209;\n        public const int WM_MOUSEWHEEL = 0x020A;\n        public const int WM_XBUTTONDOWN = 0x020B;\n        public const int WM_XBUTTONUP = 0x020C;\n        public const int WM_XBUTTONDBLCLK = 0x020D;\n        public const int WM_MOUSELEAVE = 0x02A3;\n\n        // Define the values that let us differentiate between the two extra mouse buttons\n        public const int MK_XBUTTON1 = 0x020;\n        public const int MK_XBUTTON2 = 0x040;\n\n        // Define the cursor icons we use\n        public const int  IDC_ARROW\t\t\t= 32512;\n        public const int  IDC_IBEAM\t\t\t= 32513;\n        public const int  IDC_WAIT\t\t\t= 32\nAnswer: <empty>\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal sealed partial class ClusterRouterPoolSettings : pb::IMessage<ClusterRouterPoolSettings> {\n    private static readonly pb::MessageParser<ClusterRouterPoolSettings> _parser = new pb::MessageParser<ClusterRouterPoolSettings>(() => new ClusterRouterPoolSettings());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<ClusterRouterPoolSettings> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[13]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings(ClusterRouterPoolSettings other) : this() {\n      totalInstances_ = other.totalInstances_;\n      maxInstancesPerNode_ = other.maxInstancesPerNode_;\n      allowLocalRoutees_ = other.allowLocalRoutees_;\n      useRole_ = other.useRole_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings Clone() {\n      return new ClusterRouterPoolSettings(thi\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal sealed partial class ClusterRouterPoolSettings : pb::IMessage<ClusterRouterPoolSettings> {\n    private static readonly pb::MessageParser<ClusterRouterPoolSettings> _parser = new pb::MessageParser<ClusterRouterPoolSettings>(() => new ClusterRouterPoolSettings());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<ClusterRouterPoolSettings> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[13]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings(ClusterRouterPoolSettings other) : this() {\n      totalInstances_ = other.totalInstances_;\n      maxInstancesPerNode_ = other.maxInstancesPerNode_;\n      allowLocalRoutees_ = other.allowLocalRoutees_;\n      useRole_ = other.useRole_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public ClusterRouterPoolSettings Clone() {\n      return new ClusterRouterPoolSettings(thi\nAnswer: ____________ positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Statics\n    {\n        public static string UpdateCheckUrl = \"https://raw.githubusercontent.com/GoomiChan/Meldii/master/Release/version.txt\";\n        public static string UpdateExeUrl = \"https://raw.githubusercontent.com/GoomiChan/Meldii/master/Release/Meldii.exe\";\n        public static string UpdaterName = \"Meldii.Updater.exe\";\n        public static string LaunchArgs = \"\";\n        public static FirefallPatchData FirefallPatchData = null;\n        private static Regex verStringRegex = new Regex(@\"[^\\d.]\");\n\n        public static string MeldiiAppData = \"\";\n        public static string SettingsPath = \"\";\n        public static string AddonsFolder = \"\";\n        public static bool IsFirstRun = true;\n        public static string DefaultAddonLocation = \"gui\\\\components\\\\MainUI\\\\Addons\";\n        public static string AddonBackupPostfix = \".zip_backup.zip\";\n        public static string ModDataStoreReltivePath = \"system\\\\melder_addons\";\n        public static string[] BlackListedPaths = \n        {\n            \"\\\\bin\\\\\",\n            \"\\\\gui\\\\UISets\\\\\",\n            \"\\\\gui\\\\components\\\\LoginUI\\\\\"\n        };\n        public static string MelderProtcolRegex = \"melder://(.*?)/(.*?):(.*)\";\n\n        public static AddonProviderType OneClickInstallProvider;\n        public static string OneClickAddonToInstall = null; // the url of a forum attachment to install\n        public static bool ShouldUpdate = false;\n\n        public static AddonManager AddonManager = null;\n\n        public stati\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class Statics\n    {\n        public static string UpdateCheckUrl = \"https://raw.githubusercontent.com/GoomiChan/Meldii/master/Release/version.txt\";\n        public static string UpdateExeUrl = \"https://raw.githubusercontent.com/GoomiChan/Meldii/master/Release/Meldii.exe\";\n        public static string UpdaterName = \"Meldii.Updater.exe\";\n        public static string LaunchArgs = \"\";\n        public static FirefallPatchData FirefallPatchData = null;\n        private static Regex verStringRegex = new Regex(@\"[^\\d.]\");\n\n        public static string MeldiiAppData = \"\";\n        public static string SettingsPath = \"\";\n        public static string AddonsFolder = \"\";\n        public static bool IsFirstRun = true;\n        public static string DefaultAddonLocation = \"gui\\\\components\\\\MainUI\\\\Addons\";\n        public static string AddonBackupPostfix = \".zip_backup.zip\";\n        public static string ModDataStoreReltivePath = \"system\\\\melder_addons\";\n        public static string[] BlackListedPaths = \n        {\n            \"\\\\bin\\\\\",\n            \"\\\\gui\\\\UISets\\\\\",\n            \"\\\\gui\\\\components\\\\LoginUI\\\\\"\n        };\n        public static string MelderProtcolRegex = \"melder://(.*?)/(.*?):(.*)\";\n\n        public static AddonProviderType OneClickInstallProvider;\n        public static string OneClickAddonToInstall = null; // the url of a forum attachment to install\n        public static bool ShouldUpdate = false;\n\n        public static AddonManager AddonManager = null;\n\n        public stati\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic partial class DialogVersion : Form\n\t{\n\t\tpublic DialogVersion()\n\t\t{\n\t\t\tInitializeComponent();\n\n\t\t\tTextVersion.Text = string.Format(\"{0} (ver. {1} - {2} Release)\", SoftwareInformation.VersionJapanese, SoftwareInformation.VersionEnglish, SoftwareInformation.UpdateTime.ToString(\"d\"));\n\t\t}\n\n\t\tprivate void TextAuthor_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n\t\t{\n\n\t\t\tSystem.Diagnostics.Process.Start(\"https://twitter.com/andanteyk\");\n\n\t\t}\n\n\t\tprivate void ButtonClose_Click(object sender, EventArgs e)\n\t\t{\n\n\t\t\tthis.Close();\n\n\t\t}\n\n\t\tprivate void TextInformation_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n\t\t{\n\n\t\t\tSystem.Diagnostics.Process.Start(\"http://electronicobserver.blog.fc2.com/\");\n\n\t\t}\n\n\t\tprivate void DialogVersion_Load(object sender, EventArgs e)\n\t\t{\n\n\t\t\tthis.Icon = ResourceManager.Instance.AppIcon;\n\t\t}\n\t}\n\tpartial class DialogVersion\n\t{\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\n\t\t#region Windows Form Designer generated code\n\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "None",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic partial class DialogVersion : Form\n\t{\n\t\tpublic DialogVersion()\n\t\t{\n\t\t\tInitializeComponent();\n\n\t\t\tTextVersion.Text = string.Format(\"{0} (ver. {1} - {2} Release)\", SoftwareInformation.VersionJapanese, SoftwareInformation.VersionEnglish, SoftwareInformation.UpdateTime.ToString(\"d\"));\n\t\t}\n\n\t\tprivate void TextAuthor_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n\t\t{\n\n\t\t\tSystem.Diagnostics.Process.Start(\"https://twitter.com/andanteyk\");\n\n\t\t}\n\n\t\tprivate void ButtonClose_Click(object sender, EventArgs e)\n\t\t{\n\n\t\t\tthis.Close();\n\n\t\t}\n\n\t\tprivate void TextInformation_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n\t\t{\n\n\t\t\tSystem.Diagnostics.Process.Start(\"http://electronicobserver.blog.fc2.com/\");\n\n\t\t}\n\n\t\tprivate void DialogVersion_Load(object sender, EventArgs e)\n\t\t{\n\n\t\t\tthis.Icon = ResourceManager.Instance.AppIcon;\n\t\t}\n\t}\n\tpartial class DialogVersion\n\t{\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\n\t\t#region Windows Form Designer generated code\n\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents\nAnswer: None\n\t\t}"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal sealed partial class Pool : pb::IMessage<Pool> {\n    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<Pool> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[12]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool(Pool other) : this() {\n      serializerId_ = other.serializerId_;\n      manifest_ = other.manifest_;\n      data_ = other.data_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool Clone() {\n      return new Pool(this);\n    }\n\n    /// <summary>Field number for the \"serializerId\" field.</summary>\n    public const int SerializerIdFieldNumber = 1;\n    private uint serializerId_;\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public uint SerializerId {\n      get { return serializerId_; }\n      set {\n        seri\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal sealed partial class Pool : pb::IMessage<Pool> {\n    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<Pool> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Cluster.Serialization.Proto.Msg.ClusterMessagesReflection.Descriptor.MessageTypes[12]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool(Pool other) : this() {\n      serializerId_ = other.serializerId_;\n      manifest_ = other.manifest_;\n      data_ = other.data_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public Pool Clone() {\n      return new Pool(this);\n    }\n\n    /// <summary>Field number for the \"serializerId\" field.</summary>\n    public const int SerializerIdFieldNumber = 1;\n    private uint serializerId_;\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public uint SerializerId {\n      get { return serializerId_; }\n      set {\n        seri\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the key aspects of a sql operation\n    /// </summary>\n    public struct CommandDefinition\n    {\n        internal static CommandDefinition ForCallback(object parameters)\n        {\n            if(parameters is DynamicParameters)\n            {\n                return new CommandDefinition(parameters);\n            }\n            else\n            {\n                return default(CommandDefinition);\n            }\n        }\n        private readonly string commandText;\n        private readonly object parameters;\n        private readonly IDbTransaction transaction;\n        private readonly int? commandTimeout;\n        private readonly CommandType? commandType;\n        private readonly CommandFlags flags;\n\n\n        internal void OnCompleted()\n        {\n            if (parameters is SqlMapper.IParameterCallbacks)\n            {\n                ((SqlMapper.IParameterCallbacks)parameters).OnCompleted();\n            }\n        }\n        /// <summary>\n        /// The command (sql or a stored-procedure name) to execute\n        /// </summary>\n        public string CommandText { get { return commandText; } }\n        /// <summary>\n        /// The parameters associated with the command\n        /// </summary>\n        public object Parameters { get { return parameters; } }\n        /// <summary>\n        /// The active transaction for the command\n        /// </summary>\n        public IDbTransaction Transaction { get { return transaction; } }\n        /// <summary>\n   \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the key aspects of a sql operation\n    /// </summary>\n    public struct CommandDefinition\n    {\n        internal static CommandDefinition ForCallback(object parameters)\n        {\n            if(parameters is DynamicParameters)\n            {\n                return new CommandDefinition(parameters);\n            }\n            else\n            {\n                return default(CommandDefinition);\n            }\n        }\n        private readonly string commandText;\n        private readonly object parameters;\n        private readonly IDbTransaction transaction;\n        private readonly int? commandTimeout;\n        private readonly CommandType? commandType;\n        private readonly CommandFlags flags;\n\n\n        internal void OnCompleted()\n        {\n            if (parameters is SqlMapper.IParameterCallbacks)\n            {\n                ((SqlMapper.IParameterCallbacks)parameters).OnCompleted();\n            }\n        }\n        /// <summary>\n        /// The command (sql or a stored-procedure name) to execute\n        /// </summary>\n        public string CommandText { get { return commandText; } }\n        /// <summary>\n        /// The parameters associated with the command\n        /// </summary>\n        public object Parameters { get { return parameters; } }\n        /// <summary>\n        /// The active transaction for the command\n        /// </summary>\n        public IDbTransaction Transaction { get { return transaction; } }\n        /// <summary>\n   \nAnswer: ___________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the key aspects of a sql operation\n    /// </summary>\n    public struct CommandDefinition\n    {\n        internal static CommandDefinition ForCallback(object parameters)\n        {\n            if(parameters is DynamicParameters)\n            {\n                return new CommandDefinition(parameters);\n            }\n            else\n            {\n                return default(CommandDefinition);\n            }\n        }\n        private readonly string commandText;\n        private readonly object parameters;\n        private readonly IDbTransaction transaction;\n        private readonly int? commandTimeout;\n        private readonly CommandType? commandType;\n        private readonly CommandFlags flags;\n\n\n        internal void OnCompleted()\n        {\n            if (parameters is SqlMapper.IParameterCallbacks)\n            {\n                ((SqlMapper.IParameterCallbacks)parameters).OnCompleted();\n            }\n        }\n        /// <summary>\n        /// The command (sql or a stored-procedure name) to execute\n        /// </summary>\n        public string CommandText { get { return commandText; } }\n        /// <summary>\n        /// The parameters associated with the command\n        /// </summary>\n        public object Parameters { get { return parameters; } }\n        /// <summary>\n        /// The active transaction for the command\n        /// </summary>\n        public IDbTransaction Transaction { get { return transaction; } }\n        /// <summary>\n   \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the key aspects of a sql operation\n    /// </summary>\n    public struct CommandDefinition\n    {\n        internal static CommandDefinition ForCallback(object parameters)\n        {\n            if(parameters is DynamicParameters)\n            {\n                return new CommandDefinition(parameters);\n            }\n            else\n            {\n                return default(CommandDefinition);\n            }\n        }\n        private readonly string commandText;\n        private readonly object parameters;\n        private readonly IDbTransaction transaction;\n        private readonly int? commandTimeout;\n        private readonly CommandType? commandType;\n        private readonly CommandFlags flags;\n\n\n        internal void OnCompleted()\n        {\n            if (parameters is SqlMapper.IParameterCallbacks)\n            {\n                ((SqlMapper.IParameterCallbacks)parameters).OnCompleted();\n            }\n        }\n        /// <summary>\n        /// The command (sql or a stored-procedure name) to execute\n        /// </summary>\n        public string CommandText { get { return commandText; } }\n        /// <summary>\n        /// The parameters associated with the command\n        /// </summary>\n        public object Parameters { get { return parameters; } }\n        /// <summary>\n        /// The active transaction for the command\n        /// </summary>\n        public IDbTransaction Transaction { get { return transaction; } }\n        /// <summary>\n   \nAnswer: ___________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The opening or closing brace within a C# statement, element, or expression is not placed on its own line.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the opening or closing brace within a statement, element, or\n    /// expression is not placed on its own line. For example:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this) {\n    ///     return this.value;\n    ///   }\n    /// }\n    /// </code>\n    ///\n    /// <para>When StyleCop checks this code, a violation of this rule will occur because the opening brace of the lock\n    /// statement is placed on the same line as the lock keyword, rather than being placed on its own line, as\n    /// follows:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this)\n    ///   {\n    ///     return this.value;\n    ///   }\n    /// }\n    /// </code>\n    ///\n    /// <para>A violation will also occur if the closing brace shares a line with other code. For example:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this)\n    ///   {\n    ///     return this.value; }\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1500BracesForMultiLineStatementsMustNotShareLine : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the\n    \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The opening or closing brace within a C# statement, element, or expression is not placed on its own line.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the opening or closing brace within a statement, element, or\n    /// expression is not placed on its own line. For example:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this) {\n    ///     return this.value;\n    ///   }\n    /// }\n    /// </code>\n    ///\n    /// <para>When StyleCop checks this code, a violation of this rule will occur because the opening brace of the lock\n    /// statement is placed on the same line as the lock keyword, rather than being placed on its own line, as\n    /// follows:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this)\n    ///   {\n    ///     return this.value;\n    ///   }\n    /// }\n    /// </code>\n    ///\n    /// <para>A violation will also occur if the closing brace shares a line with other code. For example:</para>\n    ///\n    /// <code language=\"cs\">\n    /// public object Method()\n    /// {\n    ///   lock (this)\n    ///   {\n    ///     return this.value; }\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1500BracesForMultiLineStatementsMustNotShareLine : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the\n    \nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DefaultChannelHandlerInvoker : IChannelHandlerInvoker\n    {\n        private static readonly Action<object> InvokeChannelReadCompleteAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeChannelReadCompleteNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeReadAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeReadNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeChannelWritabilityChangedAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeChannelWritabilityChangedNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeFlushAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeFlushNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object, object> InvokeUserEventTriggeredAction =\n            (ctx, evt) => ChannelHandlerInvokerUtil.InvokeUserEventTriggeredNow((IChannelHandlerContext) ctx, evt);\n\n        private static readonly Action<object, object> InvokeChannelReadAction =\n            (ctx, msg) => ChannelHandlerInvokerUtil.InvokeChannelReadNow((IChannelHandlerContext) ctx, msg);\n\n        private static readonly Action<object, object> InvokeWriteAsyncAction = (p, msg) =>\n        {\n            var promise = (TaskCompletionSource) p;\n            var context = (IChannelHandlerContext) promise.Task.AsyncState;\n            var channel = (AbstractChannel) context.Channel;\n            // todo: size is count\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class DefaultChannelHandlerInvoker : IChannelHandlerInvoker\n    {\n        private static readonly Action<object> InvokeChannelReadCompleteAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeChannelReadCompleteNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeReadAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeReadNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeChannelWritabilityChangedAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeChannelWritabilityChangedNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object> InvokeFlushAction =\n            ctx => ChannelHandlerInvokerUtil.InvokeFlushNow((IChannelHandlerContext) ctx);\n\n        private static readonly Action<object, object> InvokeUserEventTriggeredAction =\n            (ctx, evt) => ChannelHandlerInvokerUtil.InvokeUserEventTriggeredNow((IChannelHandlerContext) ctx, evt);\n\n        private static readonly Action<object, object> InvokeChannelReadAction =\n            (ctx, msg) => ChannelHandlerInvokerUtil.InvokeChannelReadNow((IChannelHandlerContext) ctx, msg);\n\n        private static readonly Action<object, object> InvokeWriteAsyncAction = (p, msg) =>\n        {\n            var promise = (TaskCompletionSource) p;\n            var context = (IChannelHandlerContext) promise.Task.AsyncState;\n            var channel = (AbstractChannel) context.Channel;\n            // todo: size is count\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// The EAppConfigurationSection Configuration Section.\n    /// </summary>\n    public partial class EAppConfigurationSection : global::System.Configuration.ConfigurationSection\n    {\n        \n        #region Singleton Instance\n        /// <summary>\n        /// The XML name of the EAppConfigurationSection Configuration Section.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string EAppConfigurationSectionSectionName = \"EApp\";\n        \n        /// <summary>\n        /// Gets the EAppConfigurationSection instance.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public static global::EApp.Core.Configuration.EAppConfigurationSection Instance\n        {\n            get\n            {\n                return ((global::EApp.Core.Configuration.EAppConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::EApp.Core.Configuration.EAppConfigurationSection.EAppConfigurationSectionSectionName)));\n            }\n        }\n        #endregion\n        \n        #region Xmlns Property\n        /// <summary>\n        /// The XML name of the <see cref=\"Xmlns\"/> property.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// The EAppConfigurationSection Configuration Section.\n    /// </summary>\n    public partial class EAppConfigurationSection : global::System.Configuration.ConfigurationSection\n    {\n        \n        #region Singleton Instance\n        /// <summary>\n        /// The XML name of the EAppConfigurationSection Configuration Section.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string EAppConfigurationSectionSectionName = \"EApp\";\n        \n        /// <summary>\n        /// Gets the EAppConfigurationSection instance.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public static global::EApp.Core.Configuration.EAppConfigurationSection Instance\n        {\n            get\n            {\n                return ((global::EApp.Core.Configuration.EAppConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::EApp.Core.Configuration.EAppConfigurationSection.EAppConfigurationSectionSectionName)));\n            }\n        }\n        #endregion\n        \n        #region Xmlns Property\n        /// <summary>\n        /// The XML name of the <see cref=\"Xmlns\"/> property.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    //------------------------------------------------------------------------------\n    // <auto-generated>\n    //     This code was generated by a tool.\n    //\n    //     Changes to this file may cause incorrect behavior and will be lost if\n    //     the code is regenerated.\n    // </auto-generated>\n    //------------------------------------------------------------------------------\n    internal class WampSubscriptionDescriptorProxyProxy : CalleeProxyBase, global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy\n    {\n        private static readonly MethodInfo mMethod0 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetAllSubscriptionIds());\n        private static readonly MethodInfo mMethod1 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.LookupSubscriptionId(default(string), default(global::WampSharp.V2.Core.Contracts.SubscribeOptions)));\n        private static readonly MethodInfo mMethod2 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetMatchingSubscriptionIds(default(string)));\n        private static readonly MethodInfo mMethod3 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetSubscriptionDetails(default(long)));\n        private static readonly MethodInfo mMethod4 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    //------------------------------------------------------------------------------\n    // <auto-generated>\n    //     This code was generated by a tool.\n    //\n    //     Changes to this file may cause incorrect behavior and will be lost if\n    //     the code is regenerated.\n    // </auto-generated>\n    //------------------------------------------------------------------------------\n    internal class WampSubscriptionDescriptorProxyProxy : CalleeProxyBase, global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy\n    {\n        private static readonly MethodInfo mMethod0 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetAllSubscriptionIds());\n        private static readonly MethodInfo mMethod1 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.LookupSubscriptionId(default(string), default(global::WampSharp.V2.Core.Contracts.SubscribeOptions)));\n        private static readonly MethodInfo mMethod2 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetMatchingSubscriptionIds(default(string)));\n        private static readonly MethodInfo mMethod3 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) => instance.GetSubscriptionDetails(default(long)));\n        private static readonly MethodInfo mMethod4 = GetMethodInfo((global::WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy instance) \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public abstract class RazorPage<TModel> : Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>, IRazorPage\n    {\n        private IDisplayHelper _displayHelper;\n        private IShapeFactory _shapeFactory;\n        private IOrchardDisplayHelper _orchardHelper;\n        private ISite _site;\n\n        public override ViewContext ViewContext\n        {\n            get => base.ViewContext;\n            set\n            {\n                // We make the ViewContext available to other sub-systems that need it.\n                var viewContextAccessor = value.HttpContext.RequestServices.GetService<ViewContextAccessor>();\n                base.ViewContext = viewContextAccessor.ViewContext = value;\n            }\n        }\n\n        private void EnsureDisplayHelper()\n        {\n            if (_displayHelper == null)\n            {\n                _displayHelper = Context.RequestServices.GetService<IDisplayHelper>();\n            }\n        }\n\n        private void EnsureShapeFactory()\n        {\n            if (_shapeFactory == null)\n            {\n                _shapeFactory = Context.RequestServices.GetService<IShapeFactory>();\n            }\n        }\n\n        /// <summary>\n        /// Gets a dynamic shape factory to create new shapes.\n        /// </summary>\n        /// <example>\n        /// Usage:\n        /// <code>\n        /// await New.MyShape()\n        /// await New.MyShape(A: 1, B: \"Some text\")\n        /// (await New.MyShape()).A(1).B(\"Some text\")\n        /// </code>\n        /// </example>\n  \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public abstract class RazorPage<TModel> : Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>, IRazorPage\n    {\n        private IDisplayHelper _displayHelper;\n        private IShapeFactory _shapeFactory;\n        private IOrchardDisplayHelper _orchardHelper;\n        private ISite _site;\n\n        public override ViewContext ViewContext\n        {\n            get => base.ViewContext;\n            set\n            {\n                // We make the ViewContext available to other sub-systems that need it.\n                var viewContextAccessor = value.HttpContext.RequestServices.GetService<ViewContextAccessor>();\n                base.ViewContext = viewContextAccessor.ViewContext = value;\n            }\n        }\n\n        private void EnsureDisplayHelper()\n        {\n            if (_displayHelper == null)\n            {\n                _displayHelper = Context.RequestServices.GetService<IDisplayHelper>();\n            }\n        }\n\n        private void EnsureShapeFactory()\n        {\n            if (_shapeFactory == null)\n            {\n                _shapeFactory = Context.RequestServices.GetService<IShapeFactory>();\n            }\n        }\n\n        /// <summary>\n        /// Gets a dynamic shape factory to create new shapes.\n        /// </summary>\n        /// <example>\n        /// Usage:\n        /// <code>\n        /// await New.MyShape()\n        /// await New.MyShape(A: 1, B: \"Some text\")\n        /// (await New.MyShape()).A(1).B(\"Some text\")\n        /// </code>\n        /// </example>\n  \nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal partial class AboutBox : Form\n    {\n        public AboutBox()\n        {\n            InitializeComponent();\n            Icon = Bitmaps.Azure_Explorer_ico;\n            Text = string.Format(AMSExplorer.Properties.Resources.AboutBox_AboutBox_About0, AssemblyTitle);\n            labelProductName.Text = AssemblyProduct;\n            labelVersion.Text = string.Format(\"Version {0}\", AssemblyVersion);\n            labelCopyright.Text = AssemblyCopyright;\n            labelCompanyName.Text = AssemblyCompany;\n        }\n\n        #region Assembly Attribute Accessors\n\n        public string AssemblyTitle\n        {\n            get\n            {\n                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);\n                if (attributes.Length > 0)\n                {\n                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];\n                    if (titleAttribute.Title != string.Empty)\n                    {\n                        return titleAttribute.Title;\n                    }\n                }\n                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);\n            }\n        }\n\n        public string AssemblyVersion => Assembly.GetExecutingAssembly().GetName().Version.ToString();\n\n        public string AssemblyDescription\n        {\n            get\n            {\n                object[] attributes = Assembly.GetExecutingAssembly\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal partial class AboutBox : Form\n    {\n        public AboutBox()\n        {\n            InitializeComponent();\n            Icon = Bitmaps.Azure_Explorer_ico;\n            Text = string.Format(AMSExplorer.Properties.Resources.AboutBox_AboutBox_About0, AssemblyTitle);\n            labelProductName.Text = AssemblyProduct;\n            labelVersion.Text = string.Format(\"Version {0}\", AssemblyVersion);\n            labelCopyright.Text = AssemblyCopyright;\n            labelCompanyName.Text = AssemblyCompany;\n        }\n\n        #region Assembly Attribute Accessors\n\n        public string AssemblyTitle\n        {\n            get\n            {\n                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);\n                if (attributes.Length > 0)\n                {\n                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];\n                    if (titleAttribute.Title != string.Empty)\n                    {\n                        return titleAttribute.Title;\n                    }\n                }\n                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);\n            }\n        }\n\n        public string AssemblyVersion => Assembly.GetExecutingAssembly().GetName().Version.ToString();\n\n        public string AssemblyDescription\n        {\n            get\n            {\n                object[] attributes = Assembly.GetExecutingAssembly\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'WorkOrderRouting', mapped on table 'AdventureWorks.Production.WorkOrderRouting'.</summary>\n\t[Table(Name=\"[Production].[WorkOrderRouting]\")]\n\tpublic partial class WorkOrderRouting : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate Nullable<System.Decimal>\t_actualCost;\n\t\tprivate Nullable<System.DateTime>\t_actualEndDate;\n\t\tprivate Nullable<System.Decimal>\t_actualResourceHrs;\n\t\tprivate Nullable<System.DateTime>\t_actualStartDate;\n\t\tprivate System.Int16\t_locationId;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate System.Int16\t_operationSequence;\n\t\tprivate System.Decimal\t_plannedCost;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.DateTime\t_scheduledEndDate;\n\t\tprivate System.DateTime\t_scheduledStartDate;\n\t\tprivate System.Int32\t_workOrderId;\n\t\tprivate EntityRef <Location> _location;\n\t\tprivate EntityRef <WorkOrder> _workOrder;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnActualCostChanging(Nullable<System.Decimal> value);\n\t\t\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "<label>...</label>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'WorkOrderRouting', mapped on table 'AdventureWorks.Production.WorkOrderRouting'.</summary>\n\t[Table(Name=\"[Production].[WorkOrderRouting]\")]\n\tpublic partial class WorkOrderRouting : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate Nullable<System.Decimal>\t_actualCost;\n\t\tprivate Nullable<System.DateTime>\t_actualEndDate;\n\t\tprivate Nullable<System.Decimal>\t_actualResourceHrs;\n\t\tprivate Nullable<System.DateTime>\t_actualStartDate;\n\t\tprivate System.Int16\t_locationId;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate System.Int16\t_operationSequence;\n\t\tprivate System.Decimal\t_plannedCost;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.DateTime\t_scheduledEndDate;\n\t\tprivate System.DateTime\t_scheduledStartDate;\n\t\tprivate System.Int32\t_workOrderId;\n\t\tprivate EntityRef <Location> _location;\n\t\tprivate EntityRef <WorkOrder> _workOrder;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnActualCostChanging(Nullable<System.Decimal> value);\n\t\t\nAnswer: <label>...</label>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class JsonTypeReflector\n    {\n        private static bool? _dynamicCodeGeneration;\n        private static bool? _fullyTrusted;\n\n        public const string IdPropertyName = \"$id\";\n        public const string RefPropertyName = \"$ref\";\n        public const string TypePropertyName = \"$type\";\n        public const string ValuePropertyName = \"$value\";\n        public const string ArrayValuesPropertyName = \"$values\";\n\n        public const string ShouldSerializePrefix = \"ShouldSerialize\";\n        public const string SpecifiedPostfix = \"Specified\";\n\n        private static readonly ThreadSafeStore<Type, Func<object[], JsonConverter>> JsonConverterCreatorCache = \n            new ThreadSafeStore<Type, Func<object[], JsonConverter>>(GetJsonConverterCreator);\n\n#if !(NET20 || NETFX_CORE)\n        private static readonly ThreadSafeStore<Type, Type> AssociatedMetadataTypesCache = new ThreadSafeStore<Type, Type>(GetAssociateMetadataTypeFromAttribute);\n        private static ReflectionObject _metadataTypeAttributeReflectionObject;\n#endif\n\n        public static T GetCachedAttribute<T>(object attributeProvider) where T : Attribute\n        {\n            return CachedAttributeGetter<T>.GetAttribute(attributeProvider);\n        }\n\n#if !NET20\n        public static DataContractAttribute GetDataContractAttribute(Type type)\n        {\n            // DataContractAttribute does not have inheritance\n            Type currentType = type;\n\n            while (currentType != null)\n            {\n\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static class JsonTypeReflector\n    {\n        private static bool? _dynamicCodeGeneration;\n        private static bool? _fullyTrusted;\n\n        public const string IdPropertyName = \"$id\";\n        public const string RefPropertyName = \"$ref\";\n        public const string TypePropertyName = \"$type\";\n        public const string ValuePropertyName = \"$value\";\n        public const string ArrayValuesPropertyName = \"$values\";\n\n        public const string ShouldSerializePrefix = \"ShouldSerialize\";\n        public const string SpecifiedPostfix = \"Specified\";\n\n        private static readonly ThreadSafeStore<Type, Func<object[], JsonConverter>> JsonConverterCreatorCache = \n            new ThreadSafeStore<Type, Func<object[], JsonConverter>>(GetJsonConverterCreator);\n\n#if !(NET20 || NETFX_CORE)\n        private static readonly ThreadSafeStore<Type, Type> AssociatedMetadataTypesCache = new ThreadSafeStore<Type, Type>(GetAssociateMetadataTypeFromAttribute);\n        private static ReflectionObject _metadataTypeAttributeReflectionObject;\n#endif\n\n        public static T GetCachedAttribute<T>(object attributeProvider) where T : Attribute\n        {\n            return CachedAttributeGetter<T>.GetAttribute(attributeProvider);\n        }\n\n#if !NET20\n        public static DataContractAttribute GetDataContractAttribute(Type type)\n        {\n            // DataContractAttribute does not have inheritance\n            Type currentType = type;\n\n            while (currentType != null)\n            {\n\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// Defines a remote address.\n  /// </summary>\n  internal sealed partial class AddressData : pb::IMessage<AddressData> {\n    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[3]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData(AddressData other) : this() {\n      system_ = other.system_;\n      hostname_ = other.hostname_;\n      port_ = other.port_;\n      protocol_ = other.protocol_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData Clone() {\n      return new AddressData(this);\n    }\n\n    /// <summary>Field number for the \"system\" field.</summary>\n    public const int SystemFieldNumber = 1;\n    private string system_ = \"\";\n\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// Defines a remote address.\n  /// </summary>\n  internal sealed partial class AddressData : pb::IMessage<AddressData> {\n    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[3]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData(AddressData other) : this() {\n      system_ = other.system_;\n      hostname_ = other.hostname_;\n      port_ = other.port_;\n      protocol_ = other.protocol_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData Clone() {\n      return new AddressData(this);\n    }\n\n    /// <summary>Field number for the \"system\" field.</summary>\n    public const int SystemFieldNumber = 1;\n    private string system_ = \"\";\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Contains the parsed form values.\n    /// </summary>\n    public class FormCollection : IFormCollection\n    {\n        public static readonly FormCollection Empty = new FormCollection();\n        private static readonly string[] EmptyKeys = Array.Empty<string>();\n        private static readonly StringValues[] EmptyValues = Array.Empty<StringValues>();\n        private static readonly Enumerator EmptyEnumerator = new Enumerator();\n        // Pre-box\n        private static readonly IEnumerator<KeyValuePair<string, StringValues>> EmptyIEnumeratorType = EmptyEnumerator;\n        private static readonly IEnumerator EmptyIEnumerator = EmptyEnumerator;\n\n        private static IFormFileCollection EmptyFiles = new FormFileCollection();\n\n        private IFormFileCollection _files;\n\n        private FormCollection()\n        {\n            // For static Empty\n        }\n\n        public FormCollection(Dictionary<string, StringValues> fields, IFormFileCollection files = null)\n        {\n            // can be null\n            Store = fields;\n            _files = files;\n        }\n\n        public IFormFileCollection Files\n        {\n            get\n            {\n                return _files ?? EmptyFiles;\n            }\n            private set { _files = value; }\n        }\n\n        private Dictionary<string, StringValues> Store { get; set; }\n\n        /// <summary>\n        /// Get or sets the associated value from the collection as a single string.\n        /// </summary>\n       \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Contains the parsed form values.\n    /// </summary>\n    public class FormCollection : IFormCollection\n    {\n        public static readonly FormCollection Empty = new FormCollection();\n        private static readonly string[] EmptyKeys = Array.Empty<string>();\n        private static readonly StringValues[] EmptyValues = Array.Empty<StringValues>();\n        private static readonly Enumerator EmptyEnumerator = new Enumerator();\n        // Pre-box\n        private static readonly IEnumerator<KeyValuePair<string, StringValues>> EmptyIEnumeratorType = EmptyEnumerator;\n        private static readonly IEnumerator EmptyIEnumerator = EmptyEnumerator;\n\n        private static IFormFileCollection EmptyFiles = new FormFileCollection();\n\n        private IFormFileCollection _files;\n\n        private FormCollection()\n        {\n            // For static Empty\n        }\n\n        public FormCollection(Dictionary<string, StringValues> fields, IFormFileCollection files = null)\n        {\n            // can be null\n            Store = fields;\n            _files = files;\n        }\n\n        public IFormFileCollection Files\n        {\n            get\n            {\n                return _files ?? EmptyFiles;\n            }\n            private set { _files = value; }\n        }\n\n        private Dictionary<string, StringValues> Store { get; set; }\n\n        /// <summary>\n        /// Get or sets the associated value from the collection as a single string.\n        /// </summary>\n       \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n            #region Sub-classes and Enums\n            class DdsPixelFormat\n            {\n                [Flags]\n                public enum PFFlags : uint\n                {\n                    alphaPixels = 0x01,\n                    alpha = 0x02,\n                    fourCC = 0x04,\n                    // = 0x08,\n                    // = 0x10,\n                    paletteIndexed8 = 0x20,\n                    rgb = 0x40,\n                    // = 0x80,\n                    // ...\n                    yuv = 0x0200,\n                    // ...\n                    luminence = 0x00020000,\n                    // ...\n                    nVidiaNormal = 0x8000000,\n                }\n\n                // Either fourCC is set or one - and only one - of the following:\n                const PFFlags notFourCC = PFFlags.alpha | PFFlags.paletteIndexed8 | PFFlags.rgb | PFFlags.yuv | PFFlags.luminence | PFFlags.nVidiaNormal;\n\n                public enum PFFourCC : uint\n                {\n                    dxt1 = 0x31545844,\n                    dxt3 = 0x33545844,\n                    dxt5 = 0x35545844,\n                }\n\n                enum PFFourCCBlockSize8 : uint\n                {\n                    dxt1 = 0x31545844,\n                    // bc1 and bc4 not supported\n                }\n\n                uint size;//76\n                PFFlags flags;//80\n                PFFourCC fourCC;//84\n                uint rgbBitCount;//88\n                uint rBitMask;//92\n                uint gBitMask;//96\n      \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "Feature",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n            #region Sub-classes and Enums\n            class DdsPixelFormat\n            {\n                [Flags]\n                public enum PFFlags : uint\n                {\n                    alphaPixels = 0x01,\n                    alpha = 0x02,\n                    fourCC = 0x04,\n                    // = 0x08,\n                    // = 0x10,\n                    paletteIndexed8 = 0x20,\n                    rgb = 0x40,\n                    // = 0x80,\n                    // ...\n                    yuv = 0x0200,\n                    // ...\n                    luminence = 0x00020000,\n                    // ...\n                    nVidiaNormal = 0x8000000,\n                }\n\n                // Either fourCC is set or one - and only one - of the following:\n                const PFFlags notFourCC = PFFlags.alpha | PFFlags.paletteIndexed8 | PFFlags.rgb | PFFlags.yuv | PFFlags.luminence | PFFlags.nVidiaNormal;\n\n                public enum PFFourCC : uint\n                {\n                    dxt1 = 0x31545844,\n                    dxt3 = 0x33545844,\n                    dxt5 = 0x35545844,\n                }\n\n                enum PFFourCCBlockSize8 : uint\n                {\n                    dxt1 = 0x31545844,\n                    // bc1 and bc4 not supported\n                }\n\n                uint size;//76\n                PFFlags flags;//80\n                PFFourCC fourCC;//84\n                uint rgbBitCount;//88\n                uint rBitMask;//92\n                uint gBitMask;//96\n      \nAnswer:?\n</think>\n\nAnswer: Feature"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class SongList : IEntryWithNames, \n\t\tIEntryWithVersions<ArchivedSongListVersion, SongListEditableFields>, \n\t\tIEntryWithComments<SongListComment>, IEntryWithStatus {\n\n\t\tIEnumerable<Comment> IEntryWithComments.Comments => Comments;\n\n\t\tINameManager IEntryWithNames.Names => new SingleNameManager(Name);\n\n\t\t/// <summary>\n\t\t/// Generated image sizes for song list images\n\t\t/// </summary>\n\t\tpublic static ImageSizes ImageSizes = ImageSizes.Original | ImageSizes.SmallThumb;\n\n\t\tprivate ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields> archivedVersions\n\t\t\t= new ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields>();\t\t\n\t\tprivate User author;\n\t\tprivate IList<SongListComment> comments = new List<SongListComment>();\n\t\tprivate string description;\n\t\tprivate IList<ReleaseEvent> events = new List<ReleaseEvent>();\n\t\tprivate string name;\n\t\tprivate IList<SongInList> songs = new List<SongInList>();\n\n\t\tpublic SongList() {\n\t\t\tCreateDate = DateTime.Now;\n\t\t\tDescription = string.Empty;\n\t\t}\n\n\t\tpublic SongList(string name, User author)\n\t\t\t: this() {\n\n\t\t\tName = name;\n\t\t\tAuthor = author;\n\n\t\t}\n\n\t\tpublic virtual IList<SongInList> AllSongs {\n\t\t\tget => songs;\n\t\t\tset {\n\t\t\t\tParamIs.NotNull(() => value);\n\t\t\t\tsongs = value;\n\t\t\t}\n\t\t}\n\n\t\tIArchivedVersionsManager IEntryWithVersions.ArchivedVersionsManager => ArchivedVersionsManager;\n\n\t\tpublic virtual ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields> ArchivedVersionsManager {\n\t\t\tget => archivedVersio\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class SongList : IEntryWithNames, \n\t\tIEntryWithVersions<ArchivedSongListVersion, SongListEditableFields>, \n\t\tIEntryWithComments<SongListComment>, IEntryWithStatus {\n\n\t\tIEnumerable<Comment> IEntryWithComments.Comments => Comments;\n\n\t\tINameManager IEntryWithNames.Names => new SingleNameManager(Name);\n\n\t\t/// <summary>\n\t\t/// Generated image sizes for song list images\n\t\t/// </summary>\n\t\tpublic static ImageSizes ImageSizes = ImageSizes.Original | ImageSizes.SmallThumb;\n\n\t\tprivate ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields> archivedVersions\n\t\t\t= new ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields>();\t\t\n\t\tprivate User author;\n\t\tprivate IList<SongListComment> comments = new List<SongListComment>();\n\t\tprivate string description;\n\t\tprivate IList<ReleaseEvent> events = new List<ReleaseEvent>();\n\t\tprivate string name;\n\t\tprivate IList<SongInList> songs = new List<SongInList>();\n\n\t\tpublic SongList() {\n\t\t\tCreateDate = DateTime.Now;\n\t\t\tDescription = string.Empty;\n\t\t}\n\n\t\tpublic SongList(string name, User author)\n\t\t\t: this() {\n\n\t\t\tName = name;\n\t\t\tAuthor = author;\n\n\t\t}\n\n\t\tpublic virtual IList<SongInList> AllSongs {\n\t\t\tget => songs;\n\t\t\tset {\n\t\t\t\tParamIs.NotNull(() => value);\n\t\t\t\tsongs = value;\n\t\t\t}\n\t\t}\n\n\t\tIArchivedVersionsManager IEntryWithVersions.ArchivedVersionsManager => ArchivedVersionsManager;\n\n\t\tpublic virtual ArchivedVersionManager<ArchivedSongListVersion, SongListEditableFields> ArchivedVersionsManager {\n\t\t\tget => archivedVersio\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ResourceContentFile\n    {\n        [Key]\n        [Column(Order = 0)]\n        [DatabaseGenerated(DatabaseGeneratedOption.None)]\n        public int ResourceID { get; set; }\n        [Key]\n        [Column(Order = 1)]\n        [StringLength(32)]\n        public string Md5 { get; set; }\n        public int Length { get; set; }\n        [Required]\n        [StringLength(255)]\n        public string FileName { get; set; }\n        [Column(TypeName = \"text\")]\n        public string Links { get; set; }\n        public int LinkCount { get; set; }\n\n        public virtual Resource Resource { get; set; }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ResourceContentFile\n    {\n        [Key]\n        [Column(Order = 0)]\n        [DatabaseGenerated(DatabaseGeneratedOption.None)]\n        public int ResourceID { get; set; }\n        [Key]\n        [Column(Order = 1)]\n        [StringLength(32)]\n        public string Md5 { get; set; }\n        public int Length { get; set; }\n        [Required]\n        [StringLength(255)]\n        public string FileName { get; set; }\n        [Column(TypeName = \"text\")]\n        public string Links { get; set; }\n        public int LinkCount { get; set; }\n\n        public virtual Resource Resource { get; set; }\n    }\n\nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The name of a C# element does not begin with an upper-case letter.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the names of certain types of elements do not begin with an\n    /// upper-case letter. The following types of elements should use an upper-case letter as the first letter of the\n    /// element name: namespaces, classes, enums, structs, delegates, events, methods, and properties.</para>\n    ///\n    /// <para>In addition, any field which is public, internal, or marked with the const attribute should begin with an\n    /// upper-case letter. Non-private readonly fields should also be named using an upper-case letter.</para>\n    ///\n    /// <para>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and\n    /// thus needs to begin with a lower-case letter, place the field or variable within a special <c>NativeMethods</c>\n    /// class. A <c>NativeMethods</c> class is any class which contains a name ending in <c>NativeMethods</c>, and is\n    /// intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed\n    /// within a <c>NativeMethods</c> class.</para>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1300ElementMustBeginWithUpperCaseLetter : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1300ElementMust\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The name of a C# element does not begin with an upper-case letter.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the names of certain types of elements do not begin with an\n    /// upper-case letter. The following types of elements should use an upper-case letter as the first letter of the\n    /// element name: namespaces, classes, enums, structs, delegates, events, methods, and properties.</para>\n    ///\n    /// <para>In addition, any field which is public, internal, or marked with the const attribute should begin with an\n    /// upper-case letter. Non-private readonly fields should also be named using an upper-case letter.</para>\n    ///\n    /// <para>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and\n    /// thus needs to begin with a lower-case letter, place the field or variable within a special <c>NativeMethods</c>\n    /// class. A <c>NativeMethods</c> class is any class which contains a name ending in <c>NativeMethods</c>, and is\n    /// intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed\n    /// within a <c>NativeMethods</c> class.</para>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1300ElementMustBeginWithUpperCaseLetter : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1300ElementMust\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1137ElementsShouldHaveTheSameIndentation : DiagnosticAnalyzer\n    {\n        public const string ExpectedIndentationKey = \"ExpectedIndentation\";\n\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1137ElementsShouldHaveTheSameIndentation\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1137\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1137Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(ReadabilityResources.SA1137MessageFormat), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString Description = new LocalizableResourceString(nameof(ReadabilityResources.SA1137Description), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly string HelpLink = \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1137.md\";\n\n        private static readonly DiagnosticDescriptor Descriptor =\n            new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, AnalyzerCategory.ReadabilityRules, DiagnosticSeverity.Warning, AnalyzerConstants.EnabledByDefault, Description, HelpLink);\n\n        private static readonly Action<\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "[Missing]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1137ElementsShouldHaveTheSameIndentation : DiagnosticAnalyzer\n    {\n        public const string ExpectedIndentationKey = \"ExpectedIndentation\";\n\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1137ElementsShouldHaveTheSameIndentation\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1137\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1137Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(ReadabilityResources.SA1137MessageFormat), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString Description = new LocalizableResourceString(nameof(ReadabilityResources.SA1137Description), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly string HelpLink = \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1137.md\";\n\n        private static readonly DiagnosticDescriptor Descriptor =\n            new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, AnalyzerCategory.ReadabilityRules, DiagnosticSeverity.Warning, AnalyzerConstants.EnabledByDefault, Description, HelpLink);\n\n        private static readonly Action<\nAnswer: [Missing]\n]\nWait,"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n\n        /// <summary>\n        ///\n        /// </summary>\n        public abstract partial class SceneNode2D : DisposeObject, IHitable2D\n        {\n            public sealed class UpdateEventArgs : EventArgs\n            {\n                public RenderContext2D Context { private set; get; }\n\n                public UpdateEventArgs(RenderContext2D context)\n                {\n                    Context = context;\n                }\n            }\n\n            /// <summary>\n            /// Gets the unique identifier.\n            /// </summary>\n            /// <value>\n            /// The unique identifier.\n            /// </value>\n            public Guid GUID { get; } = Guid.NewGuid();\n\n            /// <summary>\n            /// Gets or sets the parent.\n            /// </summary>\n            /// <value>\n            /// The parent.\n            /// </value>\n            public SceneNode2D Parent { set; get; }\n\n            private Visibility visibility = Visibility.Visible;\n\n            /// <summary>\n            /// Gets or sets a value indicating whether this <see cref=\"SceneNode2D\"/> is visible.\n            /// </summary>\n            /// <value>\n            ///   <c>true</c> if visible; otherwise, <c>false</c>.\n            /// </value>\n            public Visibility Visibility\n            {\n                set\n                {\n                    if (Set(ref visibility, value))\n                    { InvalidateVisual(); }\n                }\n                get { return visibility; }\n  \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n\n        /// <summary>\n        ///\n        /// </summary>\n        public abstract partial class SceneNode2D : DisposeObject, IHitable2D\n        {\n            public sealed class UpdateEventArgs : EventArgs\n            {\n                public RenderContext2D Context { private set; get; }\n\n                public UpdateEventArgs(RenderContext2D context)\n                {\n                    Context = context;\n                }\n            }\n\n            /// <summary>\n            /// Gets the unique identifier.\n            /// </summary>\n            /// <value>\n            /// The unique identifier.\n            /// </value>\n            public Guid GUID { get; } = Guid.NewGuid();\n\n            /// <summary>\n            /// Gets or sets the parent.\n            /// </summary>\n            /// <value>\n            /// The parent.\n            /// </value>\n            public SceneNode2D Parent { set; get; }\n\n            private Visibility visibility = Visibility.Visible;\n\n            /// <summary>\n            /// Gets or sets a value indicating whether this <see cref=\"SceneNode2D\"/> is visible.\n            /// </summary>\n            /// <value>\n            ///   <c>true</c> if visible; otherwise, <c>false</c>.\n            /// </value>\n            public Visibility Visibility\n            {\n                set\n                {\n                    if (Set(ref visibility, value))\n                    { InvalidateVisual(); }\n                }\n                get { return visibility; }\n  \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ServerInfo : INotifyPropertyChangedExt\n    {\n        private static ServerInfo _instance;\n\n        public static ServerInfo Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    _instance = new ServerInfo();\n                    _instance.Init();\n                }\n\n                return _instance;\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void NotifyPropertyChanged(string propname)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propname));\n        }\n\n\n        private ServerInfo()\n        {\n            ImportFolders = new AsyncObservableCollection<SVR_ImportFolder>();\n            CloudAccounts = new AsyncObservableCollection<SVR_CloudAccount>();\n            AdminMessages = new AsyncObservableCollection<Azure_AdminMessage>();\n            CloudProviders = new AsyncObservableCollection<CloudProvider>();\n            FolderProviders = new AsyncObservableCollection<SVR_CloudAccount>();\n        }\n\n        private void Init()\n        {\n            //RefreshImportFolders();\n\n            ShokoService.CmdProcessorGeneral.OnQueueCountChangedEvent += CmdProcessorGeneral_OnQueueCountChangedEvent;\n            ShokoService.CmdProcessorGeneral.OnQueueStateChangedEvent += CmdProcessorGeneral_OnQueueStateChangedEvent;\n\n            ShokoService.CmdProcessorHasher.OnQueueCountChangedEvent += CmdProcessorHasher_On\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ServerInfo : INotifyPropertyChangedExt\n    {\n        private static ServerInfo _instance;\n\n        public static ServerInfo Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    _instance = new ServerInfo();\n                    _instance.Init();\n                }\n\n                return _instance;\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void NotifyPropertyChanged(string propname)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propname));\n        }\n\n\n        private ServerInfo()\n        {\n            ImportFolders = new AsyncObservableCollection<SVR_ImportFolder>();\n            CloudAccounts = new AsyncObservableCollection<SVR_CloudAccount>();\n            AdminMessages = new AsyncObservableCollection<Azure_AdminMessage>();\n            CloudProviders = new AsyncObservableCollection<CloudProvider>();\n            FolderProviders = new AsyncObservableCollection<SVR_CloudAccount>();\n        }\n\n        private void Init()\n        {\n            //RefreshImportFolders();\n\n            ShokoService.CmdProcessorGeneral.OnQueueCountChangedEvent += CmdProcessorGeneral_OnQueueCountChangedEvent;\n            ShokoService.CmdProcessorGeneral.OnQueueStateChangedEvent += CmdProcessorGeneral_OnQueueStateChangedEvent;\n\n            ShokoService.CmdProcessorHasher.OnQueueCountChangedEvent += CmdProcessorHasher_On\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// SlackClient is intended to solely handle RPC (HTTP-based) functionality. Does not handle WebSocket connectivity.\n    ///\n    /// For WebSocket connectivity, refer to <see cref=\"SlackAPI.SlackSocketClient\"/>\n    /// </summary>\n    public class SlackClient : SlackClientBase\n    {\n        private readonly string APIToken;\n\n        public Self MySelf;\n        public User MyData;\n        public Team MyTeam;\n\n        public List<string> starredChannels;\n\n        public List<User> Users;\n        public List<Bot> Bots;\n        public List<Channel> Channels;\n        public List<Channel> Groups;\n        public List<DirectMessageConversation> DirectMessages;\n\n        public Dictionary<string, User> UserLookup;\n        public Dictionary<string, Channel> ChannelLookup;\n        public Dictionary<string, Channel> GroupLookup;\n        public Dictionary<string, DirectMessageConversation> DirectMessageLookup;\n        public Dictionary<string, Conversation> ConversationLookup;\n\n        public SlackClient(string token)\n        {\n            APIToken = token;\n        }\n\n        public SlackClient(string token, IWebProxy proxySettings)\n            : base(proxySettings)\n        {\n            APIToken = token;\n        }\n\n\t\tpublic virtual void Connect(Action<LoginResponse> onConnected = null, Action onSocketConnected = null)\n        {\n            EmitLogin((loginDetails) =>\n            {\n                if (loginDetails.ok)\n                    Connected(loginDetails);\n\n     \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// SlackClient is intended to solely handle RPC (HTTP-based) functionality. Does not handle WebSocket connectivity.\n    ///\n    /// For WebSocket connectivity, refer to <see cref=\"SlackAPI.SlackSocketClient\"/>\n    /// </summary>\n    public class SlackClient : SlackClientBase\n    {\n        private readonly string APIToken;\n\n        public Self MySelf;\n        public User MyData;\n        public Team MyTeam;\n\n        public List<string> starredChannels;\n\n        public List<User> Users;\n        public List<Bot> Bots;\n        public List<Channel> Channels;\n        public List<Channel> Groups;\n        public List<DirectMessageConversation> DirectMessages;\n\n        public Dictionary<string, User> UserLookup;\n        public Dictionary<string, Channel> ChannelLookup;\n        public Dictionary<string, Channel> GroupLookup;\n        public Dictionary<string, DirectMessageConversation> DirectMessageLookup;\n        public Dictionary<string, Conversation> ConversationLookup;\n\n        public SlackClient(string token)\n        {\n            APIToken = token;\n        }\n\n        public SlackClient(string token, IWebProxy proxySettings)\n            : base(proxySettings)\n        {\n            APIToken = token;\n        }\n\n\t\tpublic virtual void Connect(Action<LoginResponse> onConnected = null, Action onSocketConnected = null)\n        {\n            EmitLogin((loginDetails) =>\n            {\n                if (loginDetails.ok)\n                    Connected(loginDetails);\n\n     \nAnswer: ____________ ____________"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Abstract base class for 3d Manipulators.</summary>\n    public abstract class Manipulator : IManipulator\n    {\n        public Manipulator()\n        {\n            NodeList = new List<ITransformable>();\n            HitMatrix = new Matrix4F();\n            DesignView = null;\n        }\n\n        #region IManipulator Members\n\n        public virtual bool Pick(ViewControl vc, Point scrPt)\n        {\n            Matrix4F normWorld = GetManipulatorMatrix();\n            if (normWorld == null) return false;\n            HitRayV = vc.GetRay(scrPt, vc.Camera.ProjectionMatrix);            \n            HitMatrix.Set(normWorld);            \n            return true;\n        }\n        public abstract void Render(ViewControl vc);\n        public abstract void OnBeginDrag();\n        public abstract void OnDragging(ViewControl vc, Point scrPt);\n        public abstract void OnEndDrag(ViewControl vc, Point scrPt);\n\n        public ManipulatorInfo ManipulatorInfo\n        {\n            get;\n            protected set;\n        }\n\n        #endregion\n        protected abstract Matrix4F GetManipulatorMatrix();\n        \n        protected ITransformable GetManipulatorNode(TransformationTypes xformType)\n        {\n            ITransformable manipNode = null;\n            var selectionCntx = DesignView.Context.As<ISelectionContext>();\n            var visibilityContext = DesignView.Context.As<IVisibilityContext>();\n            if (selectionCntx.LastSelected != null)\n            {\n             \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Abstract base class for 3d Manipulators.</summary>\n    public abstract class Manipulator : IManipulator\n    {\n        public Manipulator()\n        {\n            NodeList = new List<ITransformable>();\n            HitMatrix = new Matrix4F();\n            DesignView = null;\n        }\n\n        #region IManipulator Members\n\n        public virtual bool Pick(ViewControl vc, Point scrPt)\n        {\n            Matrix4F normWorld = GetManipulatorMatrix();\n            if (normWorld == null) return false;\n            HitRayV = vc.GetRay(scrPt, vc.Camera.ProjectionMatrix);            \n            HitMatrix.Set(normWorld);            \n            return true;\n        }\n        public abstract void Render(ViewControl vc);\n        public abstract void OnBeginDrag();\n        public abstract void OnDragging(ViewControl vc, Point scrPt);\n        public abstract void OnEndDrag(ViewControl vc, Point scrPt);\n\n        public ManipulatorInfo ManipulatorInfo\n        {\n            get;\n            protected set;\n        }\n\n        #endregion\n        protected abstract Matrix4F GetManipulatorMatrix();\n        \n        protected ITransformable GetManipulatorNode(TransformationTypes xformType)\n        {\n            ITransformable manipNode = null;\n            var selectionCntx = DesignView.Context.As<ISelectionContext>();\n            var visibilityContext = DesignView.Context.As<IVisibilityContext>();\n            if (selectionCntx.LastSelected != null)\n            {\n             \nAnswer: \n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// There are no comments for Microsoft.WindowsAzure.ActiveDirectory.SubscribedSku in the schema.\n    /// </summary>\n    /// <KeyProperties>\n    /// objectId\n    /// </KeyProperties>\n    [global::System.Data.Services.Common.DataServiceKeyAttribute(\"objectId\")]\n    public partial class SubscribedSku\n    {\n        /// <summary>\n        /// Create a new SubscribedSku object.\n        /// </summary>\n        /// <param name=\"objectId\">Initial value of objectId.</param>\n        /// <param name=\"servicePlans\">Initial value of servicePlans.</param>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Data.Services.Design\", \"1.0.0\")]\n        public static SubscribedSku CreateSubscribedSku(string objectId, global::System.Collections.ObjectModel.Collection<ServicePlanInfo> servicePlans)\n        {\n            SubscribedSku subscribedSku = new SubscribedSku();\n            subscribedSku.objectId = objectId;\n            if ((servicePlans == null))\n            {\n                throw new global::System.ArgumentNullException(\"servicePlans\");\n            }\n            subscribedSku.servicePlans = servicePlans;\n            return subscribedSku;\n        }\n        /// <summary>\n        /// There are no comments for Property capabilityStatus in the schema.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Data.Services.Design\", \"1.0.0\")]\n        public string capabilityStatus\n        {\n            get\n            \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// There are no comments for Microsoft.WindowsAzure.ActiveDirectory.SubscribedSku in the schema.\n    /// </summary>\n    /// <KeyProperties>\n    /// objectId\n    /// </KeyProperties>\n    [global::System.Data.Services.Common.DataServiceKeyAttribute(\"objectId\")]\n    public partial class SubscribedSku\n    {\n        /// <summary>\n        /// Create a new SubscribedSku object.\n        /// </summary>\n        /// <param name=\"objectId\">Initial value of objectId.</param>\n        /// <param name=\"servicePlans\">Initial value of servicePlans.</param>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Data.Services.Design\", \"1.0.0\")]\n        public static SubscribedSku CreateSubscribedSku(string objectId, global::System.Collections.ObjectModel.Collection<ServicePlanInfo> servicePlans)\n        {\n            SubscribedSku subscribedSku = new SubscribedSku();\n            subscribedSku.objectId = objectId;\n            if ((servicePlans == null))\n            {\n                throw new global::System.ArgumentNullException(\"servicePlans\");\n            }\n            subscribedSku.servicePlans = servicePlans;\n            return subscribedSku;\n        }\n        /// <summary>\n        /// There are no comments for Property capabilityStatus in the schema.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Data.Services.Design\", \"1.0.0\")]\n        public string capabilityStatus\n        {\n            get\n            \nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public partial class Edsdk\n    {\n\n\n        #region Callback Functions\n\n        public delegate uint EdsProgressCallback( uint inPercent, IntPtr inContext, ref bool outCancel);\n        public delegate uint EdsCameraAddedHandler(IntPtr inContext);\n        public delegate uint EdsPropertyEventHandler(uint inEvent, uint inPropertyID, uint inParam, IntPtr inContext); \n        public delegate uint EdsObjectEventHandler( uint inEvent, IntPtr inRef, IntPtr inContext); \n        public delegate uint EdsStateEventHandler( uint inEvent, uint inParameter, IntPtr inContext);\n\n        #endregion\n\n        #region Data Types\n\n        public enum EdsDataType : uint\n        {       \n            Unknown     = 0,      \n            Bool        = 1,     \n            String      = 2,     \n            Int8        = 3,     \n            UInt8       = 6,    \n            Int16       = 4,      \n            UInt16      = 7,      \n            Int32       = 8,      \n            UInt32      = 9,      \n            Int64       = 10,     \n            UInt64      = 11,    \n            Float       = 12,\n            Double      = 13,\n            ByteBlock   = 14,    \n            Rational    = 20,    \n            Point       = 21,   \n            Rect        = 22,\n            Time        = 23,\n\n            Bool_Array   = 30,     \n            Int8_Array   = 31,     \n            Int16_Array  = 32,     \n            Int32_Array  = 33,     \n            UInt8_Array  = 34,     \n            UInt16_Array     = 35,     \n \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "...",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public partial class Edsdk\n    {\n\n\n        #region Callback Functions\n\n        public delegate uint EdsProgressCallback( uint inPercent, IntPtr inContext, ref bool outCancel);\n        public delegate uint EdsCameraAddedHandler(IntPtr inContext);\n        public delegate uint EdsPropertyEventHandler(uint inEvent, uint inPropertyID, uint inParam, IntPtr inContext); \n        public delegate uint EdsObjectEventHandler( uint inEvent, IntPtr inRef, IntPtr inContext); \n        public delegate uint EdsStateEventHandler( uint inEvent, uint inParameter, IntPtr inContext);\n\n        #endregion\n\n        #region Data Types\n\n        public enum EdsDataType : uint\n        {       \n            Unknown     = 0,      \n            Bool        = 1,     \n            String      = 2,     \n            Int8        = 3,     \n            UInt8       = 6,    \n            Int16       = 4,      \n            UInt16      = 7,      \n            Int32       = 8,      \n            UInt32      = 9,      \n            Int64       = 10,     \n            UInt64      = 11,    \n            Float       = 12,\n            Double      = 13,\n            ByteBlock   = 14,    \n            Rational    = 20,    \n            Point       = 21,   \n            Rect        = 22,\n            Time        = 23,\n\n            Bool_Array   = 30,     \n            Int8_Array   = 31,     \n            Int16_Array  = 32,     \n            Int32_Array  = 33,     \n            UInt8_Array  = 34,     \n            UInt16_Array     = 35,     \n \nAnswer:... \n</think>\n\nThe given"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class PlantTypeInfo\n    {\n        private static readonly PlantTypeInfo[] m_Table = new PlantTypeInfo[]\n        {\n            new PlantTypeInfo(0xC83, 0, 0, PlantType.CampionFlowers, false, true, true),\n            new PlantTypeInfo(0xC86, 0, 0, PlantType.Poppies, false, true, true),\n            new PlantTypeInfo(0xC88, 0, 10,\tPlantType.Snowdrops, false, true, true),\n            new PlantTypeInfo(0xC94, -15, 0,\tPlantType.Bulrushes, false, true, true),\n            new PlantTypeInfo(0xC8B, 0, 0, PlantType.Lilies, false, true, true),\n            new PlantTypeInfo(0xCA5, -8, 0,\tPlantType.PampasGrass, false, true, true),\n            new PlantTypeInfo(0xCA7, -10, 0,\tPlantType.Rushes, false, true, true),\n            new PlantTypeInfo(0xC97, -20, 0,\tPlantType.ElephantEarPlant, true, false, true),\n            new PlantTypeInfo(0xC9F, -20, 0,\tPlantType.Fern, false, false, true),\n            new PlantTypeInfo(0xCA6, -16, -5,\tPlantType.PonytailPalm, false, false, true),\n            new PlantTypeInfo(0xC9C, -5, -10,\tPlantType.SmallPalm, false, false, true),\n            new PlantTypeInfo(0xD31, 0, -27,\tPlantType.CenturyPlant, true, false, true),\n            new PlantTypeInfo(0xD04, 0, 10,\tPlantType.WaterPlant, true, false, true),\n            new PlantTypeInfo(0xCA9, 0, 0, PlantType.SnakePlant, true, false, true),\n            new PlantTypeInfo(0xD2C, 0, 10,\tPlantType.PricklyPearCactus,\tfalse, false, true),\n            new PlantTypeInfo(0xD26, 0, 10,\tPlantType.BarrelCactus, false\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class PlantTypeInfo\n    {\n        private static readonly PlantTypeInfo[] m_Table = new PlantTypeInfo[]\n        {\n            new PlantTypeInfo(0xC83, 0, 0, PlantType.CampionFlowers, false, true, true),\n            new PlantTypeInfo(0xC86, 0, 0, PlantType.Poppies, false, true, true),\n            new PlantTypeInfo(0xC88, 0, 10,\tPlantType.Snowdrops, false, true, true),\n            new PlantTypeInfo(0xC94, -15, 0,\tPlantType.Bulrushes, false, true, true),\n            new PlantTypeInfo(0xC8B, 0, 0, PlantType.Lilies, false, true, true),\n            new PlantTypeInfo(0xCA5, -8, 0,\tPlantType.PampasGrass, false, true, true),\n            new PlantTypeInfo(0xCA7, -10, 0,\tPlantType.Rushes, false, true, true),\n            new PlantTypeInfo(0xC97, -20, 0,\tPlantType.ElephantEarPlant, true, false, true),\n            new PlantTypeInfo(0xC9F, -20, 0,\tPlantType.Fern, false, false, true),\n            new PlantTypeInfo(0xCA6, -16, -5,\tPlantType.PonytailPalm, false, false, true),\n            new PlantTypeInfo(0xC9C, -5, -10,\tPlantType.SmallPalm, false, false, true),\n            new PlantTypeInfo(0xD31, 0, -27,\tPlantType.CenturyPlant, true, false, true),\n            new PlantTypeInfo(0xD04, 0, 10,\tPlantType.WaterPlant, true, false, true),\n            new PlantTypeInfo(0xCA9, 0, 0, PlantType.SnakePlant, true, false, true),\n            new PlantTypeInfo(0xD2C, 0, 10,\tPlantType.PricklyPearCactus,\tfalse, false, true),\n            new PlantTypeInfo(0xD26, 0, 10,\tPlantType.BarrelCactus, false\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    class Program\n    {\n        private const string BaseSnippetLocation = \"MaterialColourSwatchesSnippet.xml\";\n        private const string MdPaletteJsonLocation = \"MdPaletteJson.json\";\n\n        // Legacy\n        private const string OldXamlFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.xaml\";\n        private const string OldXamlNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.xaml\";\n\n\n        private const string XamlPrimaryFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Primary.xaml\";\n        private const string XamlAccentFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Accent.xaml\";\n        private const string XamlPrimaryNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.Primary.xaml\";\n        private const string XamlAccentNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.Accent.xaml\";\n\n        private const string RecommendedPrimaryFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\Recommended\\Primary\\MaterialDesignColor.{0}.xaml\";\n        private const string RecommendedAccentFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\Recommended\\Accent\\MaterialDesignColor.{0}.xaml\";\n        private const string RecommendedPrimaryTemplateLocation = \"RecommendedPrimaryTemplate.xaml\";\n        private const string RecommendedAccentTemplateLocation = \"Rec\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    class Program\n    {\n        private const string BaseSnippetLocation = \"MaterialColourSwatchesSnippet.xml\";\n        private const string MdPaletteJsonLocation = \"MdPaletteJson.json\";\n\n        // Legacy\n        private const string OldXamlFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.xaml\";\n        private const string OldXamlNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.xaml\";\n\n\n        private const string XamlPrimaryFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Primary.xaml\";\n        private const string XamlAccentFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Accent.xaml\";\n        private const string XamlPrimaryNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.Primary.xaml\";\n        private const string XamlAccentNamedFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\MaterialDesignColor.{0}.Named.Accent.xaml\";\n\n        private const string RecommendedPrimaryFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\Recommended\\Primary\\MaterialDesignColor.{0}.xaml\";\n        private const string RecommendedAccentFileFormat = @\"..\\..\\..\\MaterialDesignColors.Wpf\\Themes\\Recommended\\Accent\\MaterialDesignColor.{0}.xaml\";\n        private const string RecommendedPrimaryTemplateLocation = \"RecommendedPrimaryTemplate.xaml\";\n        private const string RecommendedAccentTemplateLocation = \"Rec\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class SpellInfo\n    {\n        private string m_Name;\n        private string m_Mantra;\n        private Type[] m_Reagents;\n        private int[] m_Amounts;\n        private int m_Action;\n        private bool m_AllowTown;\n        private int m_LeftHandEffect, m_RightHandEffect;\n        public SpellInfo(string name, string mantra, params Type[] regs)\n            : this(name, mantra, 16, 0, 0, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, bool allowTown, params Type[] regs)\n            : this(name, mantra, 16, 0, 0, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, params Type[] regs)\n            : this(name, mantra, action, 0, 0, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, bool allowTown, params Type[] regs)\n            : this(name, mantra, action, 0, 0, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int handEffect, params Type[] regs)\n            : this(name, mantra, action, handEffect, handEffect, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int handEffect, bool allowTown, params Type[] regs)\n            : this(name, mantra, action, handEffect, handEffect, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int leftHandEffect, int rightHandEffect, bool allowTown, par\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class SpellInfo\n    {\n        private string m_Name;\n        private string m_Mantra;\n        private Type[] m_Reagents;\n        private int[] m_Amounts;\n        private int m_Action;\n        private bool m_AllowTown;\n        private int m_LeftHandEffect, m_RightHandEffect;\n        public SpellInfo(string name, string mantra, params Type[] regs)\n            : this(name, mantra, 16, 0, 0, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, bool allowTown, params Type[] regs)\n            : this(name, mantra, 16, 0, 0, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, params Type[] regs)\n            : this(name, mantra, action, 0, 0, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, bool allowTown, params Type[] regs)\n            : this(name, mantra, action, 0, 0, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int handEffect, params Type[] regs)\n            : this(name, mantra, action, handEffect, handEffect, true, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int handEffect, bool allowTown, params Type[] regs)\n            : this(name, mantra, action, handEffect, handEffect, allowTown, regs)\n        {\n        }\n\n        public SpellInfo(string name, string mantra, int action, int leftHandEffect, int rightHandEffect, bool allowTown, par\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class CmsSignedGenerator\n    {\n        /**\n        * Default type for the signed data.\n        */\n        public static readonly string Data = CmsObjectIdentifiers.Data.Id;\n\n        public static readonly string DigestSha1 = OiwObjectIdentifiers.IdSha1.Id;\n        public static readonly string DigestSha224 = NistObjectIdentifiers.IdSha224.Id;\n        public static readonly string DigestSha256 = NistObjectIdentifiers.IdSha256.Id;\n        public static readonly string DigestSha384 = NistObjectIdentifiers.IdSha384.Id;\n        public static readonly string DigestSha512 = NistObjectIdentifiers.IdSha512.Id;\n        public static readonly string DigestMD5 = PkcsObjectIdentifiers.MD5.Id;\n        public static readonly string DigestGost3411 = CryptoProObjectIdentifiers.GostR3411.Id;\n        public static readonly string DigestRipeMD128 = TeleTrusTObjectIdentifiers.RipeMD128.Id;\n        public static readonly string DigestRipeMD160 = TeleTrusTObjectIdentifiers.RipeMD160.Id;\n        public static readonly string DigestRipeMD256 = TeleTrusTObjectIdentifiers.RipeMD256.Id;\n\n        public static readonly string EncryptionRsa = PkcsObjectIdentifiers.RsaEncryption.Id;\n        public static readonly string EncryptionDsa = X9ObjectIdentifiers.IdDsaWithSha1.Id;\n        public static readonly string EncryptionECDsa = X9ObjectIdentifiers.ECDsaWithSha1.Id;\n        public static readonly string EncryptionRsaPss = PkcsObjectIdentifiers.IdRsassaPss.Id;\n        public static readonly strin\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class CmsSignedGenerator\n    {\n        /**\n        * Default type for the signed data.\n        */\n        public static readonly string Data = CmsObjectIdentifiers.Data.Id;\n\n        public static readonly string DigestSha1 = OiwObjectIdentifiers.IdSha1.Id;\n        public static readonly string DigestSha224 = NistObjectIdentifiers.IdSha224.Id;\n        public static readonly string DigestSha256 = NistObjectIdentifiers.IdSha256.Id;\n        public static readonly string DigestSha384 = NistObjectIdentifiers.IdSha384.Id;\n        public static readonly string DigestSha512 = NistObjectIdentifiers.IdSha512.Id;\n        public static readonly string DigestMD5 = PkcsObjectIdentifiers.MD5.Id;\n        public static readonly string DigestGost3411 = CryptoProObjectIdentifiers.GostR3411.Id;\n        public static readonly string DigestRipeMD128 = TeleTrusTObjectIdentifiers.RipeMD128.Id;\n        public static readonly string DigestRipeMD160 = TeleTrusTObjectIdentifiers.RipeMD160.Id;\n        public static readonly string DigestRipeMD256 = TeleTrusTObjectIdentifiers.RipeMD256.Id;\n\n        public static readonly string EncryptionRsa = PkcsObjectIdentifiers.RsaEncryption.Id;\n        public static readonly string EncryptionDsa = X9ObjectIdentifiers.IdDsaWithSha1.Id;\n        public static readonly string EncryptionECDsa = X9ObjectIdentifiers.ECDsaWithSha1.Id;\n        public static readonly string EncryptionRsaPss = PkcsObjectIdentifiers.IdRsassaPss.Id;\n        public static readonly strin\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The access modifier for a C# element has not been explicitly defined.\n    /// </summary>\n    /// <remarks>\n    /// <para>C# allows elements to be defined without an access modifier. Depending upon the type of element, C# will\n    /// automatically assign an access level to the element in this case.</para>\n    ///\n    /// <para>This rule requires an access modifier to be explicitly defined for every element. This removes the need\n    /// for the reader to make assumptions about the code, improving the readability of the code.</para>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1400AccessModifierMustBeDeclared : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1400AccessModifierMustBeDeclared\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1400\";\n        private const string Title = \"Access modifier should be declared\";\n        private const string MessageFormat = \"Element '{0}' should declare an access modifier\";\n        private const string Description = \"The access modifier for a C# element has not been explicitly defined.\";\n        private const string HelpLink = \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1400.md\";\n\n        private static readonly DiagnosticDescriptor Descriptor =\n            new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, AnalyzerCategory.Main\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The access modifier for a C# element has not been explicitly defined.\n    /// </summary>\n    /// <remarks>\n    /// <para>C# allows elements to be defined without an access modifier. Depending upon the type of element, C# will\n    /// automatically assign an access level to the element in this case.</para>\n    ///\n    /// <para>This rule requires an access modifier to be explicitly defined for every element. This removes the need\n    /// for the reader to make assumptions about the code, improving the readability of the code.</para>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1400AccessModifierMustBeDeclared : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1400AccessModifierMustBeDeclared\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1400\";\n        private const string Title = \"Access modifier should be declared\";\n        private const string MessageFormat = \"Element '{0}' should declare an access modifier\";\n        private const string Description = \"The access modifier for a C# element has not been explicitly defined.\";\n        private const string HelpLink = \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1400.md\";\n\n        private static readonly DiagnosticDescriptor Descriptor =\n            new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, AnalyzerCategory.Main\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous\n    /// parameter, or on the next line.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when there are one or more blank lines between a parameter and the\n    /// previous parameter. For example:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(\n    /// \u00a0\u00a0\u00a0 string first,\n    ///\n    /// \u00a0\u00a0\u00a0 string last)\n    /// {\n    /// }\n    /// </code>\n    /// <para>The parameter should begin on the same line as the previous comma, or on the next line. For example:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(string first, string last)\n    /// {\n    /// }\n    ///\n    /// public string JoinName(\n    /// \u00a0\u00a0\u00a0 string first,\n    /// \u00a0\u00a0\u00a0 string last)\n    /// {\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1115ParameterMustFollowComma : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1115ParameterMustFollowComma\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1115\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1115Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFo\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous\n    /// parameter, or on the next line.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when there are one or more blank lines between a parameter and the\n    /// previous parameter. For example:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(\n    /// \u00a0\u00a0\u00a0 string first,\n    ///\n    /// \u00a0\u00a0\u00a0 string last)\n    /// {\n    /// }\n    /// </code>\n    /// <para>The parameter should begin on the same line as the previous comma, or on the next line. For example:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(string first, string last)\n    /// {\n    /// }\n    ///\n    /// public string JoinName(\n    /// \u00a0\u00a0\u00a0 string first,\n    /// \u00a0\u00a0\u00a0 string last)\n    /// {\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1115ParameterMustFollowComma : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1115ParameterMustFollowComma\"/> analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1115\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1115Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFo\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class User : IEntryWithNames, IUserWithEmail, IEquatable<IUser>, IWebLinkFactory<UserWebLink>, IEntryWithComments {\n\n\t\tprivate static readonly Logger log = LogManager.GetCurrentClassLogger();\n\t\tpublic const string NameRegex = \"^[a-zA-Z0-9_]+$\";\n\t\tpublic static readonly TimeSpan UsernameCooldown = TimeSpan.FromDays(365);\n\n\t\tpublic static bool IsValidName(string name) {\n\t\t\treturn Regex.IsMatch(name, NameRegex);\n\t\t}\n\n\t\tIEnumerable<Comment> IEntryWithComments.Comments => Comments;\n\t\tINameManager IEntryWithNames.Names => new SingleNameManager(Name);\n\t\tint IEntryBase.Version => 0;\n\n\t\tprivate string accessKey;\n\t\tprivate PermissionCollection additionalPermissions = new PermissionCollection();\n\t\tprivate IList<AlbumForUser> albums = new List<AlbumForUser>();\n\t\tprivate IList<ArtistForUser> artists = new List<ArtistForUser>();\n\t\tprivate IList<UserComment> comments = new List<UserComment>();\n\t\tprivate string culture;\n\t\tprivate string email;\n\t\tprivate IList<EventForUser> events = new List<EventForUser>();\n\t\tprivate IList<FavoriteSongForUser> favoriteSongs = new List<FavoriteSongForUser>();\n\t\tprivate OptionalCultureCode language;\n\t\tprivate IList<UserKnownLanguage> knownLanguages = new List<UserKnownLanguage>();\n\t\tprivate IList<UserMessage> messages = new List<UserMessage>();\n\t\tprivate string name;\n\t\tprivate string nameLc;\n\t\tprivate IList<OldUsername> oldUsernames = new List<OldUsername>();\n\t\tprivate UserOptions options;\n\t\tprivate IList<OwnedArtistForUser> ownedArtists = new List<Ow\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class User : IEntryWithNames, IUserWithEmail, IEquatable<IUser>, IWebLinkFactory<UserWebLink>, IEntryWithComments {\n\n\t\tprivate static readonly Logger log = LogManager.GetCurrentClassLogger();\n\t\tpublic const string NameRegex = \"^[a-zA-Z0-9_]+$\";\n\t\tpublic static readonly TimeSpan UsernameCooldown = TimeSpan.FromDays(365);\n\n\t\tpublic static bool IsValidName(string name) {\n\t\t\treturn Regex.IsMatch(name, NameRegex);\n\t\t}\n\n\t\tIEnumerable<Comment> IEntryWithComments.Comments => Comments;\n\t\tINameManager IEntryWithNames.Names => new SingleNameManager(Name);\n\t\tint IEntryBase.Version => 0;\n\n\t\tprivate string accessKey;\n\t\tprivate PermissionCollection additionalPermissions = new PermissionCollection();\n\t\tprivate IList<AlbumForUser> albums = new List<AlbumForUser>();\n\t\tprivate IList<ArtistForUser> artists = new List<ArtistForUser>();\n\t\tprivate IList<UserComment> comments = new List<UserComment>();\n\t\tprivate string culture;\n\t\tprivate string email;\n\t\tprivate IList<EventForUser> events = new List<EventForUser>();\n\t\tprivate IList<FavoriteSongForUser> favoriteSongs = new List<FavoriteSongForUser>();\n\t\tprivate OptionalCultureCode language;\n\t\tprivate IList<UserKnownLanguage> knownLanguages = new List<UserKnownLanguage>();\n\t\tprivate IList<UserMessage> messages = new List<UserMessage>();\n\t\tprivate string name;\n\t\tprivate string nameLc;\n\t\tprivate IList<OldUsername> oldUsernames = new List<OldUsername>();\n\t\tprivate UserOptions options;\n\t\tprivate IList<OwnedArtistForUser> ownedArtists = new List<Ow\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// A collection of NameTypeElement instances.\n    /// </summary>\n    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::EApp.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::EApp.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName)]\n    public partial class SerializationFormatElementCollection : global::System.Configuration.ConfigurationElementCollection\n    {\n        \n        #region Constants\n        /// <summary>\n        /// The XML name of the individual <see cref=\"global::EApp.Core.Configuration.NameTypeElement\"/> instances in this collection.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string NameTypeElementPropertyName = \"format\";\n        #endregion\n        \n        #region Overrides\n        /// <summary>\n        /// Gets the type of the <see cref=\"global::System.Configuration.ConfigurationElementCollection\"/>.\n        /// </summary>\n        /// <returns>The <see cref=\"global::System.Configuration.ConfigurationElementCollectionType\"/> of this collection.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public override global::System.Configuration.Configurati\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// A collection of NameTypeElement instances.\n    /// </summary>\n    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::EApp.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::EApp.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName)]\n    public partial class SerializationFormatElementCollection : global::System.Configuration.ConfigurationElementCollection\n    {\n        \n        #region Constants\n        /// <summary>\n        /// The XML name of the individual <see cref=\"global::EApp.Core.Configuration.NameTypeElement\"/> instances in this collection.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string NameTypeElementPropertyName = \"format\";\n        #endregion\n        \n        #region Overrides\n        /// <summary>\n        /// Gets the type of the <see cref=\"global::System.Configuration.ConfigurationElementCollection\"/>.\n        /// </summary>\n        /// <returns>The <see cref=\"global::System.Configuration.ConfigurationElementCollectionType\"/> of this collection.</returns>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public override global::System.Configuration.Configurati\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// A CIL opcode\n\t/// </summary>\n\tpublic sealed class OpCode {\n\t\t/// <summary>\n\t\t/// The opcode name\n\t\t/// </summary>\n\t\tpublic readonly string Name;\n\n\t\t/// <summary>\n\t\t/// The opcode as a <see cref=\"Code\"/> enum\n\t\t/// </summary>\n\t\tpublic readonly Code Code;\n\n\t\t/// <summary>\n\t\t/// Operand type\n\t\t/// </summary>\n\t\tpublic readonly OperandType OperandType;\n\n\t\t/// <summary>\n\t\t/// Flow control info\n\t\t/// </summary>\n\t\tpublic readonly FlowControl FlowControl;\n\n\t\t/// <summary>\n\t\t/// Opcode type\n\t\t/// </summary>\n\t\tpublic readonly OpCodeType OpCodeType;\n\n\t\t/// <summary>\n\t\t/// Push stack behavior\n\t\t/// </summary>\n\t\tpublic readonly StackBehaviour StackBehaviourPush;\n\n\t\t/// <summary>\n\t\t/// Pop stack behavior\n\t\t/// </summary>\n\t\tpublic readonly StackBehaviour StackBehaviourPop;\n\n\t\t/// <summary>\n\t\t/// Gets the value which is compatible with <see cref=\"System.Reflection.Emit.OpCode.Value\"/>\n\t\t/// </summary>\n\t\tpublic short Value => (short)Code;\n\n\t\t/// <summary>\n\t\t/// Gets the size of the opcode. It's either 1 or 2 bytes.\n\t\t/// </summary>\n\t\tpublic int Size => Code < (Code)0x100 || Code == Code.UNKNOWN1 ? 1 : 2;\n\n\t\tinternal OpCode(string name, Code code, OperandType operandType, FlowControl flowControl, OpCodeType opCodeType, StackBehaviour push, StackBehaviour pop) {\n\t\t\tName = name;\n\t\t\tCode = code;\n\t\t\tOperandType = operandType;\n\t\t\tFlowControl = flowControl;\n\t\t\tOpCodeType = opCodeType;\n\t\t\tStackBehaviourPush = push;\n\t\t\tStackBehaviourPop = pop;\n\t\t\tif (((ushort)code >> 8) == 0)\n\t\t\t\tOp\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// A CIL opcode\n\t/// </summary>\n\tpublic sealed class OpCode {\n\t\t/// <summary>\n\t\t/// The opcode name\n\t\t/// </summary>\n\t\tpublic readonly string Name;\n\n\t\t/// <summary>\n\t\t/// The opcode as a <see cref=\"Code\"/> enum\n\t\t/// </summary>\n\t\tpublic readonly Code Code;\n\n\t\t/// <summary>\n\t\t/// Operand type\n\t\t/// </summary>\n\t\tpublic readonly OperandType OperandType;\n\n\t\t/// <summary>\n\t\t/// Flow control info\n\t\t/// </summary>\n\t\tpublic readonly FlowControl FlowControl;\n\n\t\t/// <summary>\n\t\t/// Opcode type\n\t\t/// </summary>\n\t\tpublic readonly OpCodeType OpCodeType;\n\n\t\t/// <summary>\n\t\t/// Push stack behavior\n\t\t/// </summary>\n\t\tpublic readonly StackBehaviour StackBehaviourPush;\n\n\t\t/// <summary>\n\t\t/// Pop stack behavior\n\t\t/// </summary>\n\t\tpublic readonly StackBehaviour StackBehaviourPop;\n\n\t\t/// <summary>\n\t\t/// Gets the value which is compatible with <see cref=\"System.Reflection.Emit.OpCode.Value\"/>\n\t\t/// </summary>\n\t\tpublic short Value => (short)Code;\n\n\t\t/// <summary>\n\t\t/// Gets the size of the opcode. It's either 1 or 2 bytes.\n\t\t/// </summary>\n\t\tpublic int Size => Code < (Code)0x100 || Code == Code.UNKNOWN1 ? 1 : 2;\n\n\t\tinternal OpCode(string name, Code code, OperandType operandType, FlowControl flowControl, OpCodeType opCodeType, StackBehaviour push, StackBehaviour pop) {\n\t\t\tName = name;\n\t\t\tCode = code;\n\t\t\tOperandType = operandType;\n\t\t\tFlowControl = flowControl;\n\t\t\tOpCodeType = opCodeType;\n\t\t\tStackBehaviourPush = push;\n\t\t\tStackBehaviourPop = pop;\n\t\t\tif (((ushort)code >> 8) == 0)\n\t\t\t\tOp\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'ProductVendor', mapped on table 'AdventureWorks.Purchasing.ProductVendor'.</summary>\n\t[Table(Name=\"[Purchasing].[ProductVendor]\")]\n\tpublic partial class ProductVendor : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate System.Int32\t_averageLeadTime;\n\t\tprivate System.Int32\t_businessEntityId;\n\t\tprivate Nullable<System.Decimal>\t_lastReceiptCost;\n\t\tprivate Nullable<System.DateTime>\t_lastReceiptDate;\n\t\tprivate System.Int32\t_maxOrderQty;\n\t\tprivate System.Int32\t_minOrderQty;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate Nullable<System.Int32>\t_onOrderQty;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.Decimal\t_standardPrice;\n\t\tprivate System.String\t_unitMeasureCode;\n\t\tprivate EntityRef <Product> _product;\n\t\tprivate EntityRef <UnitMeasure> _unitMeasure;\n\t\tprivate EntityRef <Vendor> _vendor;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnAverageLeadTimeChanging(System.Int32 value);\n\t\tpartial void OnAverageLeadTimeChanged();\n\t\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'ProductVendor', mapped on table 'AdventureWorks.Purchasing.ProductVendor'.</summary>\n\t[Table(Name=\"[Purchasing].[ProductVendor]\")]\n\tpublic partial class ProductVendor : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate System.Int32\t_averageLeadTime;\n\t\tprivate System.Int32\t_businessEntityId;\n\t\tprivate Nullable<System.Decimal>\t_lastReceiptCost;\n\t\tprivate Nullable<System.DateTime>\t_lastReceiptDate;\n\t\tprivate System.Int32\t_maxOrderQty;\n\t\tprivate System.Int32\t_minOrderQty;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate Nullable<System.Int32>\t_onOrderQty;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.Decimal\t_standardPrice;\n\t\tprivate System.String\t_unitMeasureCode;\n\t\tprivate EntityRef <Product> _product;\n\t\tprivate EntityRef <UnitMeasure> _unitMeasure;\n\t\tprivate EntityRef <Vendor> _vendor;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnAverageLeadTimeChanging(System.Int32 value);\n\t\tpartial void OnAverageLeadTimeChanged();\n\t\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Class JsWriter.\n\t/// </summary>\n\tpublic static class JsWriter\n    {\n\t\t/// <summary>\n\t\t/// The type attribute\n\t\t/// </summary>\n\t\tpublic const string TypeAttr = \"__type\";\n\n\t\t/// <summary>\n\t\t/// The map start character\n\t\t/// </summary>\n\t\tpublic const char MapStartChar = '{';\n\t\t/// <summary>\n\t\t/// The map key seperator\n\t\t/// </summary>\n\t\tpublic const char MapKeySeperator = ':';\n\t\t/// <summary>\n\t\t/// The item seperator\n\t\t/// </summary>\n\t\tpublic const char ItemSeperator = ',';\n\t\t/// <summary>\n\t\t/// The map end character\n\t\t/// </summary>\n\t\tpublic const char MapEndChar = '}';\n\t\t/// <summary>\n\t\t/// The map null value\n\t\t/// </summary>\n\t\tpublic const string MapNullValue = \"\\\"\\\"\";\n\t\t/// <summary>\n\t\t/// The empty map\n\t\t/// </summary>\n\t\tpublic const string EmptyMap = \"{}\";\n\n\t\t/// <summary>\n\t\t/// The list start character\n\t\t/// </summary>\n\t\tpublic const char ListStartChar = '[';\n\t\t/// <summary>\n\t\t/// The list end character\n\t\t/// </summary>\n\t\tpublic const char ListEndChar = ']';\n\t\t/// <summary>\n\t\t/// The return character\n\t\t/// </summary>\n\t\tpublic const char ReturnChar = '\\r';\n\t\t/// <summary>\n\t\t/// The line feed character\n\t\t/// </summary>\n\t\tpublic const char LineFeedChar = '\\n';\n\n\t\t/// <summary>\n\t\t/// The quote character\n\t\t/// </summary>\n\t\tpublic const char QuoteChar = '\"';\n\t\t/// <summary>\n\t\t/// The quote string\n\t\t/// </summary>\n\t\tpublic const string QuoteString = \"\\\"\";\n\t\t/// <summary>\n\t\t/// The escaped quote string\n\t\t/// </summary>\n\t\tpublic const string EscapedQuoteString \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// Class JsWriter.\n\t/// </summary>\n\tpublic static class JsWriter\n    {\n\t\t/// <summary>\n\t\t/// The type attribute\n\t\t/// </summary>\n\t\tpublic const string TypeAttr = \"__type\";\n\n\t\t/// <summary>\n\t\t/// The map start character\n\t\t/// </summary>\n\t\tpublic const char MapStartChar = '{';\n\t\t/// <summary>\n\t\t/// The map key seperator\n\t\t/// </summary>\n\t\tpublic const char MapKeySeperator = ':';\n\t\t/// <summary>\n\t\t/// The item seperator\n\t\t/// </summary>\n\t\tpublic const char ItemSeperator = ',';\n\t\t/// <summary>\n\t\t/// The map end character\n\t\t/// </summary>\n\t\tpublic const char MapEndChar = '}';\n\t\t/// <summary>\n\t\t/// The map null value\n\t\t/// </summary>\n\t\tpublic const string MapNullValue = \"\\\"\\\"\";\n\t\t/// <summary>\n\t\t/// The empty map\n\t\t/// </summary>\n\t\tpublic const string EmptyMap = \"{}\";\n\n\t\t/// <summary>\n\t\t/// The list start character\n\t\t/// </summary>\n\t\tpublic const char ListStartChar = '[';\n\t\t/// <summary>\n\t\t/// The list end character\n\t\t/// </summary>\n\t\tpublic const char ListEndChar = ']';\n\t\t/// <summary>\n\t\t/// The return character\n\t\t/// </summary>\n\t\tpublic const char ReturnChar = '\\r';\n\t\t/// <summary>\n\t\t/// The line feed character\n\t\t/// </summary>\n\t\tpublic const char LineFeedChar = '\\n';\n\n\t\t/// <summary>\n\t\t/// The quote character\n\t\t/// </summary>\n\t\tpublic const char QuoteChar = '\"';\n\t\t/// <summary>\n\t\t/// The quote string\n\t\t/// </summary>\n\t\tpublic const string QuoteString = \"\\\"\";\n\t\t/// <summary>\n\t\t/// The escaped quote string\n\t\t/// </summary>\n\t\tpublic const string EscapedQuoteString \nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal class FTD2XX {\n\n    public delegate FT_STATUS FT_CreateDeviceInfoListDelegate(\n      out uint numDevices);\n    public delegate FT_STATUS FT_GetDeviceInfoListDelegate(\n      [Out] FT_DEVICE_INFO_NODE[] deviceInfoNodes, ref uint length);\n    public delegate FT_STATUS FT_OpenDelegate(int device, out FT_HANDLE handle);\n    public delegate FT_STATUS FT_CloseDelegate(FT_HANDLE handle);\n    public delegate FT_STATUS FT_SetBaudRateDelegate(FT_HANDLE handle,\n      uint baudRate);\n    public delegate FT_STATUS FT_SetDataCharacteristicsDelegate(\n      FT_HANDLE handle, byte wordLength, byte stopBits, byte parity);\n    public delegate FT_STATUS FT_SetFlowControlDelegate(FT_HANDLE handle,\n      FT_FLOW_CONTROL flowControl, byte xon, byte xoff);\n    public delegate FT_STATUS FT_SetTimeoutsDelegate(FT_HANDLE handle,\n      uint readTimeout, uint writeTimeout);\n    public delegate FT_STATUS FT_WriteDelegate(FT_HANDLE handle, byte[] buffer,\n      uint bytesToWrite, out uint bytesWritten);\n    public delegate FT_STATUS FT_PurgeDelegate(FT_HANDLE handle, FT_PURGE mask);\n    public delegate FT_STATUS FT_GetStatusDelegate(FT_HANDLE handle,\n      out uint amountInRxQueue, out uint amountInTxQueue, out uint eventStatus);\n    public delegate FT_STATUS FT_ReadDelegate(FT_HANDLE handle, \n      [Out] byte[] buffer, uint bytesToRead, out uint bytesReturned);\n    public delegate FT_STATUS FT_ReadByteDelegate(FT_HANDLE handle,\n      out byte buffer, uint bytesToRead, out uint bytesReturned);\n\n \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  internal class FTD2XX {\n\n    public delegate FT_STATUS FT_CreateDeviceInfoListDelegate(\n      out uint numDevices);\n    public delegate FT_STATUS FT_GetDeviceInfoListDelegate(\n      [Out] FT_DEVICE_INFO_NODE[] deviceInfoNodes, ref uint length);\n    public delegate FT_STATUS FT_OpenDelegate(int device, out FT_HANDLE handle);\n    public delegate FT_STATUS FT_CloseDelegate(FT_HANDLE handle);\n    public delegate FT_STATUS FT_SetBaudRateDelegate(FT_HANDLE handle,\n      uint baudRate);\n    public delegate FT_STATUS FT_SetDataCharacteristicsDelegate(\n      FT_HANDLE handle, byte wordLength, byte stopBits, byte parity);\n    public delegate FT_STATUS FT_SetFlowControlDelegate(FT_HANDLE handle,\n      FT_FLOW_CONTROL flowControl, byte xon, byte xoff);\n    public delegate FT_STATUS FT_SetTimeoutsDelegate(FT_HANDLE handle,\n      uint readTimeout, uint writeTimeout);\n    public delegate FT_STATUS FT_WriteDelegate(FT_HANDLE handle, byte[] buffer,\n      uint bytesToWrite, out uint bytesWritten);\n    public delegate FT_STATUS FT_PurgeDelegate(FT_HANDLE handle, FT_PURGE mask);\n    public delegate FT_STATUS FT_GetStatusDelegate(FT_HANDLE handle,\n      out uint amountInRxQueue, out uint amountInTxQueue, out uint eventStatus);\n    public delegate FT_STATUS FT_ReadDelegate(FT_HANDLE handle, \n      [Out] byte[] buffer, uint bytesToRead, out uint bytesReturned);\n    public delegate FT_STATUS FT_ReadByteDelegate(FT_HANDLE handle,\n      out byte buffer, uint bytesToRead, out uint bytesReturned);\n\n \nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// A specialized query for searching messages in a <see cref=\"IMailFolder\"/>.\n\t/// </summary>\n\t/// <remarks>\n\t/// A specialized query for searching messages in a <see cref=\"IMailFolder\"/>.\n\t/// </remarks>\n\tpublic class SearchQuery\n\t{\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"T:MailKit.Search.SearchQuery\"/> class.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Creates a new <see cref=\"SearchQuery\"/> that matches all messages.\n\t\t/// </remarks>\n\t\tpublic SearchQuery () : this (SearchTerm.All)\n\t\t{\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"T:MailKit.Search.SearchQuery\"/> class.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Creates a new <see cref=\"SearchQuery\"/> with the specified search term.\n\t\t/// </remarks>\n\t\t/// <param name=\"term\">The search term.</param>\n\t\tprotected SearchQuery (SearchTerm term)\n\t\t{\n\t\t\tTerm = term;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Get the search term used by the search query.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Gets the search term used by the search query.\n\t\t/// </remarks>\n\t\t/// <value>The term.</value>\n\t\tpublic SearchTerm Term {\n\t\t\tget; private set;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Match all messages in the folder.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Matches all messages in the folder.\n\t\t/// </remarks>\n\t\tpublic static readonly SearchQuery All = new SearchQuery (SearchTerm.All);\n\n\t\t/// <summary>\n\t\t/// Create a conditional AND operation.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// A conditional AND operation only e\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>\n\t/// A specialized query for searching messages in a <see cref=\"IMailFolder\"/>.\n\t/// </summary>\n\t/// <remarks>\n\t/// A specialized query for searching messages in a <see cref=\"IMailFolder\"/>.\n\t/// </remarks>\n\tpublic class SearchQuery\n\t{\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"T:MailKit.Search.SearchQuery\"/> class.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Creates a new <see cref=\"SearchQuery\"/> that matches all messages.\n\t\t/// </remarks>\n\t\tpublic SearchQuery () : this (SearchTerm.All)\n\t\t{\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Initializes a new instance of the <see cref=\"T:MailKit.Search.SearchQuery\"/> class.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Creates a new <see cref=\"SearchQuery\"/> with the specified search term.\n\t\t/// </remarks>\n\t\t/// <param name=\"term\">The search term.</param>\n\t\tprotected SearchQuery (SearchTerm term)\n\t\t{\n\t\t\tTerm = term;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Get the search term used by the search query.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Gets the search term used by the search query.\n\t\t/// </remarks>\n\t\t/// <value>The term.</value>\n\t\tpublic SearchTerm Term {\n\t\t\tget; private set;\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Match all messages in the folder.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// Matches all messages in the folder.\n\t\t/// </remarks>\n\t\tpublic static readonly SearchQuery All = new SearchQuery (SearchTerm.All);\n\n\t\t/// <summary>\n\t\t/// Create a conditional AND operation.\n\t\t/// </summary>\n\t\t/// <remarks>\n\t\t/// A conditional AND operation only e\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class Page : Microsoft.AspNetCore.Mvc.RazorPages.Page\n    {\n        private dynamic _displayHelper;\n        private IShapeFactory _shapeFactory;\n        private IOrchardDisplayHelper _orchardHelper;\n        private ISite _site;\n\n        public override ViewContext ViewContext\n        {\n            get => base.ViewContext;\n            set\n            {\n                // We make the ViewContext available to other sub-systems that need it.\n                var viewContextAccessor = value.HttpContext.RequestServices.GetService<ViewContextAccessor>();\n                base.ViewContext = viewContextAccessor.ViewContext = value;\n            }\n        }\n\n        private void EnsureDisplayHelper()\n        {\n            if (_displayHelper == null)\n            {\n                _displayHelper = HttpContext.RequestServices.GetService<IDisplayHelper>();\n            }\n        }\n\n        private void EnsureShapeFactory()\n        {\n            if (_shapeFactory == null)\n            {\n                _shapeFactory = HttpContext.RequestServices.GetService<IShapeFactory>();\n            }\n        }\n\n        /// <summary>\n        /// Gets a dynamic shape factory to create new shapes.\n        /// </summary>\n        /// <example>\n        /// Usage:\n        /// <code>\n        /// await New.MyShape()\n        /// await New.MyShape(A: 1, B: \"Some text\")\n        /// (await New.MyShape()).A(1).B(\"Some text\")\n        /// </code>\n        /// </example>\n        public dynamic New\n        \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class Page : Microsoft.AspNetCore.Mvc.RazorPages.Page\n    {\n        private dynamic _displayHelper;\n        private IShapeFactory _shapeFactory;\n        private IOrchardDisplayHelper _orchardHelper;\n        private ISite _site;\n\n        public override ViewContext ViewContext\n        {\n            get => base.ViewContext;\n            set\n            {\n                // We make the ViewContext available to other sub-systems that need it.\n                var viewContextAccessor = value.HttpContext.RequestServices.GetService<ViewContextAccessor>();\n                base.ViewContext = viewContextAccessor.ViewContext = value;\n            }\n        }\n\n        private void EnsureDisplayHelper()\n        {\n            if (_displayHelper == null)\n            {\n                _displayHelper = HttpContext.RequestServices.GetService<IDisplayHelper>();\n            }\n        }\n\n        private void EnsureShapeFactory()\n        {\n            if (_shapeFactory == null)\n            {\n                _shapeFactory = HttpContext.RequestServices.GetService<IShapeFactory>();\n            }\n        }\n\n        /// <summary>\n        /// Gets a dynamic shape factory to create new shapes.\n        /// </summary>\n        /// <example>\n        /// Usage:\n        /// <code>\n        /// await New.MyShape()\n        /// await New.MyShape(A: 1, B: \"Some text\")\n        /// (await New.MyShape()).A(1).B(\"Some text\")\n        /// </code>\n        /// </example>\n        public dynamic New\n        \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The opening parenthesis or brace in a call to a C# method or indexer, or the declaration of a method or\n    /// indexer, is not placed on the same line as the method or indexer name.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the opening brace of a method or indexer call or declaration is not\n    /// placed on the same line as the method or indexer. The following examples show correct placement of the opening\n    /// brace:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(string first, string last)\n    /// {\n    /// \u00a0\u00a0\u00a0 return JoinStrings(\n    /// \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 first, last);\n    /// }\n    ///\n    /// public int this[int x]\n    /// {\n    /// \u00a0\u00a0\u00a0 get { return this.items[x]; }\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1110OpeningParenthesisMustBeOnDeclarationLine : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1110OpeningParenthesisMustBeOnDeclarationLine\"/>\n        /// analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1110\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1110Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(Readabil\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// The opening parenthesis or brace in a call to a C# method or indexer, or the declaration of a method or\n    /// indexer, is not placed on the same line as the method or indexer name.\n    /// </summary>\n    /// <remarks>\n    /// <para>A violation of this rule occurs when the opening brace of a method or indexer call or declaration is not\n    /// placed on the same line as the method or indexer. The following examples show correct placement of the opening\n    /// brace:</para>\n    /// <code language=\"csharp\">\n    /// public string JoinName(string first, string last)\n    /// {\n    /// \u00a0\u00a0\u00a0 return JoinStrings(\n    /// \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 first, last);\n    /// }\n    ///\n    /// public int this[int x]\n    /// {\n    /// \u00a0\u00a0\u00a0 get { return this.items[x]; }\n    /// }\n    /// </code>\n    /// </remarks>\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    internal class SA1110OpeningParenthesisMustBeOnDeclarationLine : DiagnosticAnalyzer\n    {\n        /// <summary>\n        /// The ID for diagnostics produced by the <see cref=\"SA1110OpeningParenthesisMustBeOnDeclarationLine\"/>\n        /// analyzer.\n        /// </summary>\n        public const string DiagnosticId = \"SA1110\";\n        private static readonly LocalizableString Title = new LocalizableResourceString(nameof(ReadabilityResources.SA1110Title), ReadabilityResources.ResourceManager, typeof(ReadabilityResources));\n        private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(Readabil\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class Message : IOutgoingMessage\n    {\n        public const int LENGTH_HEADER_SIZE = 8;\n        public const int LENGTH_META_HEADER = 4;\n\n        [NonSerialized]\n        private string _targetHistory;\n\n        [NonSerialized]\n        private DateTime? _queuedTime;\n\n        [NonSerialized]\n        private int _retryCount;\n\n        public string TargetHistory\n        {\n            get { return _targetHistory; }\n            set { _targetHistory = value; }\n        }\n\n        \n        public DateTime? QueuedTime\n        {\n            get { return _queuedTime; }\n            set { _queuedTime = value; }\n        }\n\n        public int RetryCount\n        {\n            get { return _retryCount; }\n            set { _retryCount = value; }\n        }\n        \n        // Cache values of TargetAddess and SendingAddress as they are used very frequently\n        private ActivationAddress targetAddress;\n        private ActivationAddress sendingAddress;\n        \n        static Message()\n        {\n        }\n\n        public enum Categories\n        {\n            Ping,\n            System,\n            Application,\n        }\n\n        public enum Directions\n        {\n            Request,\n            Response,\n            OneWay\n        }\n\n        public enum ResponseTypes\n        {\n            Success,\n            Error,\n            Rejection\n        }\n\n        public enum RejectionTypes\n        {\n            Transient,\n            Overloaded,\n            DuplicateRequest,\n            Unreco\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class Message : IOutgoingMessage\n    {\n        public const int LENGTH_HEADER_SIZE = 8;\n        public const int LENGTH_META_HEADER = 4;\n\n        [NonSerialized]\n        private string _targetHistory;\n\n        [NonSerialized]\n        private DateTime? _queuedTime;\n\n        [NonSerialized]\n        private int _retryCount;\n\n        public string TargetHistory\n        {\n            get { return _targetHistory; }\n            set { _targetHistory = value; }\n        }\n\n        \n        public DateTime? QueuedTime\n        {\n            get { return _queuedTime; }\n            set { _queuedTime = value; }\n        }\n\n        public int RetryCount\n        {\n            get { return _retryCount; }\n            set { _retryCount = value; }\n        }\n        \n        // Cache values of TargetAddess and SendingAddress as they are used very frequently\n        private ActivationAddress targetAddress;\n        private ActivationAddress sendingAddress;\n        \n        static Message()\n        {\n        }\n\n        public enum Categories\n        {\n            Ping,\n            System,\n            Application,\n        }\n\n        public enum Directions\n        {\n            Request,\n            Response,\n            OneWay\n        }\n\n        public enum ResponseTypes\n        {\n            Success,\n            Error,\n            Rejection\n        }\n\n        public enum RejectionTypes\n        {\n            Transient,\n            Overloaded,\n            DuplicateRequest,\n            Unreco\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// \n        /// </summary>\n        public class ShadowMapNode : SceneNode\n        {\n            /// <summary>\n            /// Gets or sets the resolution.\n            /// </summary>\n            /// <value>\n            /// The resolution.\n            /// </value>\n            public Size2 Resolution\n            {\n                get { return new Size2((RenderCore as ShadowMapCore).Width, (RenderCore as ShadowMapCore).Height); }\n                set { (RenderCore as ShadowMapCore).Width = value.Width; (RenderCore as ShadowMapCore).Height = value.Height; }\n            }\n\n            /// <summary>\n            ///\n            /// </summary>\n            public float Bias\n            {\n                get { return (RenderCore as ShadowMapCore).Bias; }\n                set { (RenderCore as ShadowMapCore).Bias = value; }\n            }\n\n            /// <summary>\n            ///\n            /// </summary>\n            public float Intensity\n            {\n                get { return (RenderCore as ShadowMapCore).Intensity; }\n                set { (RenderCore as ShadowMapCore).Intensity = value; }\n            }\n\n            private float distance = 200;\n            public float Distance\n            {\n                set\n                {\n                    SetAffectsRender(ref distance, value);\n                }\n                get { return distance; }\n            }\n\n            private float orthoWidth = 100;\n            public float OrthoWidth\n            {\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// \n        /// </summary>\n        public class ShadowMapNode : SceneNode\n        {\n            /// <summary>\n            /// Gets or sets the resolution.\n            /// </summary>\n            /// <value>\n            /// The resolution.\n            /// </value>\n            public Size2 Resolution\n            {\n                get { return new Size2((RenderCore as ShadowMapCore).Width, (RenderCore as ShadowMapCore).Height); }\n                set { (RenderCore as ShadowMapCore).Width = value.Width; (RenderCore as ShadowMapCore).Height = value.Height; }\n            }\n\n            /// <summary>\n            ///\n            /// </summary>\n            public float Bias\n            {\n                get { return (RenderCore as ShadowMapCore).Bias; }\n                set { (RenderCore as ShadowMapCore).Bias = value; }\n            }\n\n            /// <summary>\n            ///\n            /// </summary>\n            public float Intensity\n            {\n                get { return (RenderCore as ShadowMapCore).Intensity; }\n                set { (RenderCore as ShadowMapCore).Intensity = value; }\n            }\n\n            private float distance = 200;\n            public float Distance\n            {\n                set\n                {\n                    SetAffectsRender(ref distance, value);\n                }\n                get { return distance; }\n            }\n\n            private float orthoWidth = 100;\n            public float OrthoWidth\n            {\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// A representation of a method symbol that is intended only to be used for comparison purposes\n    /// (esp in MethodSignatureComparer).\n    /// </summary>\n    internal sealed class SignatureOnlyMethodSymbol : MethodSymbol\n    {\n        private readonly string _name;\n        private readonly TypeSymbol _containingType;\n        private readonly MethodKind _methodKind;\n        private readonly Cci.CallingConvention _callingConvention;\n        private readonly ImmutableArray<TypeParameterSymbol> _typeParameters;\n        private readonly ImmutableArray<ParameterSymbol> _parameters;\n        private readonly TypeSymbol _returnType;\n        private readonly ImmutableArray<CustomModifier> _returnTypeCustomModifiers;\n        private readonly ImmutableArray<MethodSymbol> _explicitInterfaceImplementations;\n\n        public SignatureOnlyMethodSymbol(\n            string name,\n            TypeSymbol containingType,\n            MethodKind methodKind,\n            Cci.CallingConvention callingConvention,\n            ImmutableArray<TypeParameterSymbol> typeParameters,\n            ImmutableArray<ParameterSymbol> parameters,\n            TypeSymbol returnType,\n            ImmutableArray<CustomModifier> returnTypeCustomModifiers,\n            ImmutableArray<MethodSymbol> explicitInterfaceImplementations)\n        {\n            _callingConvention = callingConvention;\n            _typeParameters = typeParameters;\n            _returnType = returnType;\n            _returnTypeCusto\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// A representation of a method symbol that is intended only to be used for comparison purposes\n    /// (esp in MethodSignatureComparer).\n    /// </summary>\n    internal sealed class SignatureOnlyMethodSymbol : MethodSymbol\n    {\n        private readonly string _name;\n        private readonly TypeSymbol _containingType;\n        private readonly MethodKind _methodKind;\n        private readonly Cci.CallingConvention _callingConvention;\n        private readonly ImmutableArray<TypeParameterSymbol> _typeParameters;\n        private readonly ImmutableArray<ParameterSymbol> _parameters;\n        private readonly TypeSymbol _returnType;\n        private readonly ImmutableArray<CustomModifier> _returnTypeCustomModifiers;\n        private readonly ImmutableArray<MethodSymbol> _explicitInterfaceImplementations;\n\n        public SignatureOnlyMethodSymbol(\n            string name,\n            TypeSymbol containingType,\n            MethodKind methodKind,\n            Cci.CallingConvention callingConvention,\n            ImmutableArray<TypeParameterSymbol> typeParameters,\n            ImmutableArray<ParameterSymbol> parameters,\n            TypeSymbol returnType,\n            ImmutableArray<CustomModifier> returnTypeCustomModifiers,\n            ImmutableArray<MethodSymbol> explicitInterfaceImplementations)\n        {\n            _callingConvention = callingConvention;\n            _typeParameters = typeParameters;\n            _returnType = returnType;\n            _returnTypeCusto\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Implements a <see cref=\"IReportWriter\" /> that writes to wiki format.\n    /// </summary>\n    /// <remarks>This will not write figures/images.</remarks>\n    public class WikiReportWriter : StreamWriter, IReportWriter\n    {\n        /// <summary>\n        /// The table cell separator.\n        /// </summary>\n        private const string TableCellSeparator = \" | \";\n\n        /// <summary>\n        /// The table header cell separator.\n        /// </summary>\n        private const string TableHeaderCellSeparator = \" || \";\n\n        /// <summary>\n        /// The table header row end.\n        /// </summary>\n        private const string TableHeaderRowEnd = \" ||\";\n\n        /// <summary>\n        /// The table header row start.\n        /// </summary>\n        private const string TableHeaderRowStart = \"|| \";\n\n        /// <summary>\n        /// The table row end.\n        /// </summary>\n        private const string TableRowEnd = \" |\";\n\n        /// <summary>\n        /// The table row start.\n        /// </summary>\n        private const string TableRowStart = \"| \";\n\n        /// <summary>\n        /// The table counter.\n        /// </summary>\n        private int tableCounter;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"WikiReportWriter\" /> class.\n        /// </summary>\n        /// <param name=\"s\">The s.</param>\n        public WikiReportWriter(Stream s)\n            : base(s)\n        {\n            this.MaxLineLength = 60;\n        }\n\n        /\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Implements a <see cref=\"IReportWriter\" /> that writes to wiki format.\n    /// </summary>\n    /// <remarks>This will not write figures/images.</remarks>\n    public class WikiReportWriter : StreamWriter, IReportWriter\n    {\n        /// <summary>\n        /// The table cell separator.\n        /// </summary>\n        private const string TableCellSeparator = \" | \";\n\n        /// <summary>\n        /// The table header cell separator.\n        /// </summary>\n        private const string TableHeaderCellSeparator = \" || \";\n\n        /// <summary>\n        /// The table header row end.\n        /// </summary>\n        private const string TableHeaderRowEnd = \" ||\";\n\n        /// <summary>\n        /// The table header row start.\n        /// </summary>\n        private const string TableHeaderRowStart = \"|| \";\n\n        /// <summary>\n        /// The table row end.\n        /// </summary>\n        private const string TableRowEnd = \" |\";\n\n        /// <summary>\n        /// The table row start.\n        /// </summary>\n        private const string TableRowStart = \"| \";\n\n        /// <summary>\n        /// The table counter.\n        /// </summary>\n        private int tableCounter;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"WikiReportWriter\" /> class.\n        /// </summary>\n        /// <param name=\"s\">The s.</param>\n        public WikiReportWriter(Stream s)\n            : base(s)\n        {\n            this.MaxLineLength = 60;\n        }\n\n        /\nAnswer: ___________\n\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// Class StringExtensions.\n\t/// </summary>\n\tpublic static class StringExtensions\n\t{\n\t\t/// <summary>\n\t\t/// To the specified value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T To<T>(this string value)\n\t\t{\n\t\t\treturn TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the specified default value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <param name=\"defaultValue\">The default value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T To<T>(this string value, T defaultValue)\n\t\t{\n\t\t\treturn String.IsNullOrEmpty(value) ? defaultValue : TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the or default value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T ToOrDefaultValue<T>(this string value)\n\t\t{\n\t\t\treturn String.IsNullOrEmpty(value) ? default(T) : TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the specified type.\n\t\t/// </summary>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <param name=\"type\">The type.</param>\n\t\t/// <returns>System.Object.</returns>\n\t\tpublic static object To(this string value, Type type)\n\t\t{\n\t\t\treturn TypeSerializer.DeserializeFromString(value, type);\n\t\t}\n\n\n\t\t/// <summary>\n\t\t/// Converts from bas\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <summary>\n\t/// Class StringExtensions.\n\t/// </summary>\n\tpublic static class StringExtensions\n\t{\n\t\t/// <summary>\n\t\t/// To the specified value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T To<T>(this string value)\n\t\t{\n\t\t\treturn TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the specified default value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <param name=\"defaultValue\">The default value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T To<T>(this string value, T defaultValue)\n\t\t{\n\t\t\treturn String.IsNullOrEmpty(value) ? defaultValue : TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the or default value.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></typeparam>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <returns>T.</returns>\n\t\tpublic static T ToOrDefaultValue<T>(this string value)\n\t\t{\n\t\t\treturn String.IsNullOrEmpty(value) ? default(T) : TypeSerializer.DeserializeFromString<T>(value);\n\t\t}\n\n\t\t/// <summary>\n\t\t/// To the specified type.\n\t\t/// </summary>\n\t\t/// <param name=\"value\">The value.</param>\n\t\t/// <param name=\"type\">The type.</param>\n\t\t/// <returns>System.Object.</returns>\n\t\tpublic static object To(this string value, Type type)\n\t\t{\n\t\t\treturn TypeSerializer.DeserializeFromString(value, type);\n\t\t}\n\n\n\t\t/// <summary>\n\t\t/// Converts from bas\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public sealed class EventManager : IEventManager\n    {\n        private const string InterfaceTargetName = @\"MvcForum.Core.Interfaces.Events.IEventHandler\";\n\n        private static volatile EventManager _instance;\n\n        private static readonly object SyncRoot = new object();\n\n        public EventHandler<BadgeEventArgs> AfterBadgeAwarded;\n        public EventHandler<FavouriteEventArgs> AfterFavourite;\n        public EventHandler<LoginEventArgs> AfterLogin;\n        public EventHandler<MarkedAsSolutionEventArgs> AfterMarkedAsSolution;\n        public EventHandler<PostMadeEventArgs> AfterPostMade;\n        public EventHandler<PrivateMessageEventArgs> AfterPrivateMessage;\n        public EventHandler<TopicMadeEventArgs> AfterTopicMade;\n        public EventHandler<UpdateProfileEventArgs> AfterUpdateProfile;\n        public EventHandler<VoteEventArgs> AfterVoteMade;\n        public EventHandler<BadgeEventArgs> BeforeBadgeAwarded;\n        public EventHandler<FavouriteEventArgs> BeforeFavourite;\n        public EventHandler<LoginEventArgs> BeforeLogin;\n        public EventHandler<MarkedAsSolutionEventArgs> BeforeMarkedAsSolution;\n        public EventHandler<PostMadeEventArgs> BeforePostMade;\n        public EventHandler<PrivateMessageEventArgs> BeforePrivateMessage;\n        public EventHandler<TopicMadeEventArgs> BeforeTopicMade;\n        public EventHandler<UpdateProfileEventArgs> BeforeUpdateProfile;\n        public EventHandler<VoteEventArgs> BeforeVoteMade;\n\n        public ILoggingS\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public sealed class EventManager : IEventManager\n    {\n        private const string InterfaceTargetName = @\"MvcForum.Core.Interfaces.Events.IEventHandler\";\n\n        private static volatile EventManager _instance;\n\n        private static readonly object SyncRoot = new object();\n\n        public EventHandler<BadgeEventArgs> AfterBadgeAwarded;\n        public EventHandler<FavouriteEventArgs> AfterFavourite;\n        public EventHandler<LoginEventArgs> AfterLogin;\n        public EventHandler<MarkedAsSolutionEventArgs> AfterMarkedAsSolution;\n        public EventHandler<PostMadeEventArgs> AfterPostMade;\n        public EventHandler<PrivateMessageEventArgs> AfterPrivateMessage;\n        public EventHandler<TopicMadeEventArgs> AfterTopicMade;\n        public EventHandler<UpdateProfileEventArgs> AfterUpdateProfile;\n        public EventHandler<VoteEventArgs> AfterVoteMade;\n        public EventHandler<BadgeEventArgs> BeforeBadgeAwarded;\n        public EventHandler<FavouriteEventArgs> BeforeFavourite;\n        public EventHandler<LoginEventArgs> BeforeLogin;\n        public EventHandler<MarkedAsSolutionEventArgs> BeforeMarkedAsSolution;\n        public EventHandler<PostMadeEventArgs> BeforePostMade;\n        public EventHandler<PrivateMessageEventArgs> BeforePrivateMessage;\n        public EventHandler<TopicMadeEventArgs> BeforeTopicMade;\n        public EventHandler<UpdateProfileEventArgs> BeforeUpdateProfile;\n        public EventHandler<VoteEventArgs> BeforeVoteMade;\n\n        public ILoggingS\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Provides access to the Splunk REST API offered on a Splunk management port.\n    /// </summary>\n    /// <seealso cref=\"T:System.IDisposable\"/>\n    /// <seealso cref=\"T:Splunk.Client.IService\"/>\n    public class Service : IDisposable, IService\n    {\n        #region Constructors\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"Service\"/> class.\n        /// </summary>\n        /// <param name=\"context\">\n        /// The context for requests by the new <see cref=\"Service\"/>.\n        /// </param>\n        /// <param name=\"ns\">\n        /// The namespace for requests by the new <see cref=\"Service\"/>. The default\n        /// value is <c>null</c> indicating that <see cref= \"Namespace\"/>.Default\n        /// should be used.\n        /// </param>\n        ///\n        /// ### <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"context\"/> is <c>null</c>.\n        /// </exception>\n        public Service(Context context, Namespace ns = null)\n        {\n            Contract.Requires<ArgumentNullException>(context != null, \"context\");\n\n            this.context = context;\n            this.ns = ns ?? Namespace.Default;\n\n            this.storagePasswords = new StoragePasswordCollection(this);\n            this.configurations = new ConfigurationCollection(this);\n            this.savedSearches = new SavedSearchCollection(this);\n            this.applications = new ApplicationCollection(this);\n            this.indexes = new IndexCollec\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Provides access to the Splunk REST API offered on a Splunk management port.\n    /// </summary>\n    /// <seealso cref=\"T:System.IDisposable\"/>\n    /// <seealso cref=\"T:Splunk.Client.IService\"/>\n    public class Service : IDisposable, IService\n    {\n        #region Constructors\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"Service\"/> class.\n        /// </summary>\n        /// <param name=\"context\">\n        /// The context for requests by the new <see cref=\"Service\"/>.\n        /// </param>\n        /// <param name=\"ns\">\n        /// The namespace for requests by the new <see cref=\"Service\"/>. The default\n        /// value is <c>null</c> indicating that <see cref= \"Namespace\"/>.Default\n        /// should be used.\n        /// </param>\n        ///\n        /// ### <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"context\"/> is <c>null</c>.\n        /// </exception>\n        public Service(Context context, Namespace ns = null)\n        {\n            Contract.Requires<ArgumentNullException>(context != null, \"context\");\n\n            this.context = context;\n            this.ns = ns ?? Namespace.Default;\n\n            this.storagePasswords = new StoragePasswordCollection(this);\n            this.configurations = new ConfigurationCollection(this);\n            this.savedSearches = new SavedSearchCollection(this);\n            this.applications = new ApplicationCollection(this);\n            this.indexes = new IndexCollec\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tsealed class InnerResolver : IJsonFormatterResolver\n\t\t{\n\t\t\tpublic static readonly IJsonFormatterResolver Instance = new InnerResolver();\n\n\t\t\tstatic readonly IJsonFormatterResolver[] resolvers = StandardResolverHelper.CompositeResolverBase.Concat(new[] { DynamicObjectResolver.Default }).ToArray();\n\n\t\t\tInnerResolver()\n\t\t\t{\n\t\t\t}\n\n\t\t\tpublic IJsonFormatter<T> GetFormatter<T>()\n\t\t\t{\n\t\t\t\treturn FormatterCache<T>.formatter;\n\t\t\t}\n\n\t\t\tstatic class FormatterCache<T>\n\t\t\t{\n\t\t\t\tpublic static readonly IJsonFormatter<T> formatter;\n\n\t\t\t\tstatic FormatterCache()\n\t\t\t\t{\n\t\t\t\t\tforeach (var item in resolvers)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar f = item.GetFormatter<T>();\n\t\t\t\t\t\tif (f != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformatter = f;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsealed class InnerResolver : IJsonFormatterResolver\n\t\t{\n\t\t\tpublic static readonly IJsonFormatterResolver Instance = new InnerResolver();\n\n\t\t\tstatic readonly IJsonFormatterResolver[] resolvers = StandardResolverHelper.CompositeResolverBase.Concat(new[] { DynamicObjectResolver.CamelCase }).ToArray();\n\n\t\t\tInnerResolver()\n\t\t\t{\n\t\t\t}\n\n\t\t\tpublic IJsonFormatter<T> GetFormatter<T>()\n\t\t\t{\n\t\t\t\treturn FormatterCache<T>.formatter;\n\t\t\t}\n\n\t\t\tstatic class FormatterCache<T>\n\t\t\t{\n\t\t\t\tpublic static readonly IJsonFormatter<T> formatter;\n\n\t\t\t\tstatic FormatterCache()\n\t\t\t\t{\n\t\t\t\t\tforeach (var item in resolvers)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar f = item.GetFormatter<T>();\n\t\t\t\t\t\tif (f != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformatter = f;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsealed class InnerRes\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tsealed class InnerResolver : IJsonFormatterResolver\n\t\t{\n\t\t\tpublic static readonly IJsonFormatterResolver Instance = new InnerResolver();\n\n\t\t\tstatic readonly IJsonFormatterResolver[] resolvers = StandardResolverHelper.CompositeResolverBase.Concat(new[] { DynamicObjectResolver.Default }).ToArray();\n\n\t\t\tInnerResolver()\n\t\t\t{\n\t\t\t}\n\n\t\t\tpublic IJsonFormatter<T> GetFormatter<T>()\n\t\t\t{\n\t\t\t\treturn FormatterCache<T>.formatter;\n\t\t\t}\n\n\t\t\tstatic class FormatterCache<T>\n\t\t\t{\n\t\t\t\tpublic static readonly IJsonFormatter<T> formatter;\n\n\t\t\t\tstatic FormatterCache()\n\t\t\t\t{\n\t\t\t\t\tforeach (var item in resolvers)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar f = item.GetFormatter<T>();\n\t\t\t\t\t\tif (f != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformatter = f;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsealed class InnerResolver : IJsonFormatterResolver\n\t\t{\n\t\t\tpublic static readonly IJsonFormatterResolver Instance = new InnerResolver();\n\n\t\t\tstatic readonly IJsonFormatterResolver[] resolvers = StandardResolverHelper.CompositeResolverBase.Concat(new[] { DynamicObjectResolver.CamelCase }).ToArray();\n\n\t\t\tInnerResolver()\n\t\t\t{\n\t\t\t}\n\n\t\t\tpublic IJsonFormatter<T> GetFormatter<T>()\n\t\t\t{\n\t\t\t\treturn FormatterCache<T>.formatter;\n\t\t\t}\n\n\t\t\tstatic class FormatterCache<T>\n\t\t\t{\n\t\t\t\tpublic static readonly IJsonFormatter<T> formatter;\n\n\t\t\t\tstatic FormatterCache()\n\t\t\t\t{\n\t\t\t\t\tforeach (var item in resolvers)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar f = item.GetFormatter<T>();\n\t\t\t\t\t\tif (f != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformatter = f;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsealed class InnerRes\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// static utility function\n    /// </summary>\n    internal static class Util\n    {\n        /// <summary>Tool name for the GeneratedCode attribute used by Astoria CodeGen</summary>\n        internal const string CodeGeneratorToolName = \"Microsoft.OData.Service.Design\";\n\n        /// <summary>Method name for the LoadProperty method.</summary>\n        internal const string LoadPropertyMethodName = \"LoadProperty\";\n\n        /// <summary>Method name for the Execute method.</summary>\n        internal const string ExecuteMethodName = \"Execute\";\n\n        /// <summary>Method name for the Async Execute method overload which expects void result.</summary>\n        internal const string ExecuteMethodNameForVoidResults = \"ExecuteVoid\";\n\n        /// <summary>Method name for the SaveChanges method.</summary>\n        internal const string SaveChangesMethodName = \"SaveChanges\";\n\n        /// <summary>\n        /// The number of components of version.\n        /// </summary>\n        internal const int ODataVersionFieldCount = 2;\n\n        /// <summary>\n        /// Empty OData Version - represents a blank OData-Version header\n        /// </summary>\n        internal static readonly Version ODataVersionEmpty = new Version(0, 0);\n\n        /// <summary>\n        /// OData Version 4\n        /// </summary>\n        internal static readonly Version ODataVersion4 = new Version(4, 0);\n\n        /// <summary>\n        /// OData Version 4.01\n        /// </summary>\n        internal static reado\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// static utility function\n    /// </summary>\n    internal static class Util\n    {\n        /// <summary>Tool name for the GeneratedCode attribute used by Astoria CodeGen</summary>\n        internal const string CodeGeneratorToolName = \"Microsoft.OData.Service.Design\";\n\n        /// <summary>Method name for the LoadProperty method.</summary>\n        internal const string LoadPropertyMethodName = \"LoadProperty\";\n\n        /// <summary>Method name for the Execute method.</summary>\n        internal const string ExecuteMethodName = \"Execute\";\n\n        /// <summary>Method name for the Async Execute method overload which expects void result.</summary>\n        internal const string ExecuteMethodNameForVoidResults = \"ExecuteVoid\";\n\n        /// <summary>Method name for the SaveChanges method.</summary>\n        internal const string SaveChangesMethodName = \"SaveChanges\";\n\n        /// <summary>\n        /// The number of components of version.\n        /// </summary>\n        internal const int ODataVersionFieldCount = 2;\n\n        /// <summary>\n        /// Empty OData Version - represents a blank OData-Version header\n        /// </summary>\n        internal static readonly Version ODataVersionEmpty = new Version(0, 0);\n\n        /// <summary>\n        /// OData Version 4\n        /// </summary>\n        internal static readonly Version ODataVersion4 = new Version(4, 0);\n\n        /// <summary>\n        /// OData Version 4.01\n        /// </summary>\n        internal static reado\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ValueAccessingStrategy\n    {\n        public static readonly ValueAccess CustomResolver = CustomResolverFn;\n        public static readonly ValueAccess PropertyOrField = PropertyOrFieldFn;\n        public static readonly ValueAccess GetMethod = GetMethodFn;\n        public static readonly ValueAccess FlattenMember = FlattenMemberFn;\n        public static readonly ValueAccess Dictionary = DictionaryFn;\n        public static readonly ValueAccess CustomResolverForDictionary = CustomResolverForDictionaryFn;\n\n        public static readonly HashSet<ValueAccess> CustomResolvers = new HashSet<ValueAccess>\n        {\n            CustomResolver,\n            CustomResolverForDictionary,\n        };\n\n        private static Expression? CustomResolverFn(Expression source, IMemberModel destinationMember, CompileArgument arg)\n        {\n            var config = arg.Settings;\n            var resolvers = config.Resolvers;\n            if (resolvers == null || resolvers.Count <= 0)\n                return null;\n\n            var invokes = new List<Tuple<Expression, Expression>>();\n\n            Expression? getter = null;\n            foreach (var resolver in resolvers)\n            {\n                if (!destinationMember.Name.Equals(resolver.DestinationMemberName))\n                    continue;\n                var invoke = resolver.Invoker == null\n                    ? ExpressionEx.PropertyOrField(source, resolver.SourceMemberName)\n                    : resolver.IsChildPath\n        \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ValueAccessingStrategy\n    {\n        public static readonly ValueAccess CustomResolver = CustomResolverFn;\n        public static readonly ValueAccess PropertyOrField = PropertyOrFieldFn;\n        public static readonly ValueAccess GetMethod = GetMethodFn;\n        public static readonly ValueAccess FlattenMember = FlattenMemberFn;\n        public static readonly ValueAccess Dictionary = DictionaryFn;\n        public static readonly ValueAccess CustomResolverForDictionary = CustomResolverForDictionaryFn;\n\n        public static readonly HashSet<ValueAccess> CustomResolvers = new HashSet<ValueAccess>\n        {\n            CustomResolver,\n            CustomResolverForDictionary,\n        };\n\n        private static Expression? CustomResolverFn(Expression source, IMemberModel destinationMember, CompileArgument arg)\n        {\n            var config = arg.Settings;\n            var resolvers = config.Resolvers;\n            if (resolvers == null || resolvers.Count <= 0)\n                return null;\n\n            var invokes = new List<Tuple<Expression, Expression>>();\n\n            Expression? getter = null;\n            foreach (var resolver in resolvers)\n            {\n                if (!destinationMember.Name.Equals(resolver.DestinationMemberName))\n                    continue;\n                var invoke = resolver.Invoker == null\n                    ? ExpressionEx.PropertyOrField(source, resolver.SourceMemberName)\n                    : resolver.IsChildPath\n        \nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    public static class ReactiveStreamsCompliance\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string CanNotSubscribeTheSameSubscriberMultipleTimes =\n            \"can not subscribe the same subscriber multiple times (see reactive-streams specification, rules 1.10 and 2.12)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SupportsOnlyASingleSubscriber =\n            \"only supports one subscriber (which is allowed, see reactive-streams specification, rule 1.12)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string NumberOfElementsInRequestMustBePositiveMsg =\n            \"The number of requested elements must be > 0 (see reactive-streams specification, rule 3.9)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SubscriberMustNotBeNullMsg = \"Subscriber must not be null, rule 1.9\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string ExceptionMustNotBeNullMsg = \"Exception must not be null, rule 2.13\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string ElementMustNotBeNullMsg = \"Element must not be null, rule 2.13\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SubscriptionMustNotBeNullMsg = \"Subscription must not be null, rule 2.13\";\n\n        /// <summary>\n \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "None",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// TBD\n    /// </summary>\n    public static class ReactiveStreamsCompliance\n    {\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string CanNotSubscribeTheSameSubscriberMultipleTimes =\n            \"can not subscribe the same subscriber multiple times (see reactive-streams specification, rules 1.10 and 2.12)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SupportsOnlyASingleSubscriber =\n            \"only supports one subscriber (which is allowed, see reactive-streams specification, rule 1.12)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string NumberOfElementsInRequestMustBePositiveMsg =\n            \"The number of requested elements must be > 0 (see reactive-streams specification, rule 3.9)\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SubscriberMustNotBeNullMsg = \"Subscriber must not be null, rule 1.9\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string ExceptionMustNotBeNullMsg = \"Exception must not be null, rule 2.13\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string ElementMustNotBeNullMsg = \"Element must not be null, rule 2.13\";\n        /// <summary>\n        /// TBD\n        /// </summary>\n        public const string SubscriptionMustNotBeNullMsg = \"Subscription must not be null, rule 2.13\";\n\n        /// <summary>\n \nAnswer: \n</think>\n\nAnswer: None"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Generation 5 <see cref=\"SaveFile\"/> object.\n    /// </summary>\n    public abstract class SAV5 : SaveFile\n    {\n        protected override PKM GetPKM(byte[] data) => new PK5(data);\n        protected override byte[] DecryptPKM(byte[] data) => PKX.DecryptArray45(data);\n\n        protected override string BAKText => $\"{OT} ({(GameVersion)Game}) - {PlayTimeString}\";\n        public override string Filter => (Footer.Length != 0 ? \"DeSmuME DSV|*.dsv|\" : string.Empty) + \"SAV File|*.sav|All Files|*.*\";\n        public override string Extension => \".sav\";\n\n        public override int SIZE_STORED => PKX.SIZE_5STORED;\n        protected override int SIZE_PARTY => PKX.SIZE_5PARTY;\n        public override PKM BlankPKM => new PK5();\n        public override Type PKMType => typeof(PK5);\n\n        public override int BoxCount => 24;\n        public override int MaxEV => 255;\n        public override int Generation => 5;\n        public override int OTLength => 7;\n        public override int NickLength => 10;\n        protected override int GiftCountMax => 12;\n\n        public override int MaxMoveID => Legal.MaxMoveID_5;\n        public override int MaxSpeciesID => Legal.MaxSpeciesID_5;\n        public override int MaxAbilityID => Legal.MaxAbilityID_5;\n        public override int MaxBallID => Legal.MaxBallID_5;\n        public override int MaxGameID => Legal.MaxGameID_5; // B2\n\n        protected SAV5(int size) : base(size)\n        {\n            Initialize();\n            ClearBoxes(\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Generation 5 <see cref=\"SaveFile\"/> object.\n    /// </summary>\n    public abstract class SAV5 : SaveFile\n    {\n        protected override PKM GetPKM(byte[] data) => new PK5(data);\n        protected override byte[] DecryptPKM(byte[] data) => PKX.DecryptArray45(data);\n\n        protected override string BAKText => $\"{OT} ({(GameVersion)Game}) - {PlayTimeString}\";\n        public override string Filter => (Footer.Length != 0 ? \"DeSmuME DSV|*.dsv|\" : string.Empty) + \"SAV File|*.sav|All Files|*.*\";\n        public override string Extension => \".sav\";\n\n        public override int SIZE_STORED => PKX.SIZE_5STORED;\n        protected override int SIZE_PARTY => PKX.SIZE_5PARTY;\n        public override PKM BlankPKM => new PK5();\n        public override Type PKMType => typeof(PK5);\n\n        public override int BoxCount => 24;\n        public override int MaxEV => 255;\n        public override int Generation => 5;\n        public override int OTLength => 7;\n        public override int NickLength => 10;\n        protected override int GiftCountMax => 12;\n\n        public override int MaxMoveID => Legal.MaxMoveID_5;\n        public override int MaxSpeciesID => Legal.MaxSpeciesID_5;\n        public override int MaxAbilityID => Legal.MaxAbilityID_5;\n        public override int MaxBallID => Legal.MaxBallID_5;\n        public override int MaxGameID => Legal.MaxGameID_5; // B2\n\n        protected SAV5(int size) : base(size)\n        {\n            Initialize();\n            ClearBoxes(\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class TypeHelper\n    {\n        private static readonly ConcurrentDictionary<Type, string> TypeSerializerCache = new ConcurrentDictionary<Type, string>();\n\n        private static readonly AssemblyName MscorlibAssemblyName = new AssemblyName(\"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\");\n        private static readonly ConcurrentDictionary<string, Assembly> AssemblyCache = new ConcurrentDictionary<string, Assembly>();\n        private static readonly ConcurrentDictionary<string, Type> TypeResolverCache = new ConcurrentDictionary<string, Type>();\n\n        private static readonly Regex VersionRegex = new Regex(@\", Version=\\d+.\\d+.\\d+.\\d+\", RegexOptions.Compiled);\n        private static readonly Regex CultureRegex = new Regex(@\", Culture=\\w+\", RegexOptions.Compiled);\n        private static readonly Regex PublicKeyTokenRegex = new Regex(@\", PublicKeyToken=\\w+\", RegexOptions.Compiled);\n\n        private static Func<string, Type> _currentTypeResolver;\n        private static Func<Type, string> _currentTypeSerializer;\n\n        public static Func<string, Type> CurrentTypeResolver\n        {\n            get => Volatile.Read(ref _currentTypeResolver) ?? DefaultTypeResolver;\n            set => Volatile.Write(ref _currentTypeResolver, value);\n        }\n\n        public static Func<Type, string> CurrentTypeSerializer\n        {\n            get => Volatile.Read(ref _currentTypeSerializer) ?? DefaultTypeSerializer;\n            set => Volatile.Write(ref \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal class TypeHelper\n    {\n        private static readonly ConcurrentDictionary<Type, string> TypeSerializerCache = new ConcurrentDictionary<Type, string>();\n\n        private static readonly AssemblyName MscorlibAssemblyName = new AssemblyName(\"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\");\n        private static readonly ConcurrentDictionary<string, Assembly> AssemblyCache = new ConcurrentDictionary<string, Assembly>();\n        private static readonly ConcurrentDictionary<string, Type> TypeResolverCache = new ConcurrentDictionary<string, Type>();\n\n        private static readonly Regex VersionRegex = new Regex(@\", Version=\\d+.\\d+.\\d+.\\d+\", RegexOptions.Compiled);\n        private static readonly Regex CultureRegex = new Regex(@\", Culture=\\w+\", RegexOptions.Compiled);\n        private static readonly Regex PublicKeyTokenRegex = new Regex(@\", PublicKeyToken=\\w+\", RegexOptions.Compiled);\n\n        private static Func<string, Type> _currentTypeResolver;\n        private static Func<Type, string> _currentTypeSerializer;\n\n        public static Func<string, Type> CurrentTypeResolver\n        {\n            get => Volatile.Read(ref _currentTypeResolver) ?? DefaultTypeResolver;\n            set => Volatile.Write(ref _currentTypeResolver, value);\n        }\n\n        public static Func<Type, string> CurrentTypeSerializer\n        {\n            get => Volatile.Read(ref _currentTypeSerializer) ?? DefaultTypeSerializer;\n            set => Volatile.Write(ref \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Native\n    {\n        #region Delegates\n\n        public delegate bool EnumWindows_CallBackProc(IntPtr hwnd, uint lParam);\n\n        #endregion\n\n        public const int INVALID_HANDLE_VALUE = -1;\n        private const uint WM_GETTEXT = 0x0000000D;\n        private const uint WM_GETTEXTLENGTH = 0x0000000E;\n        public const uint WM_MOUSEMOVE = 0x00000200;\n        public const uint WM_HOTKEY = 0x00000312;\n\n        public static List<WindowStyleFlags> TargetStyles = new List<WindowStyleFlags>\n        {\n            WindowStyleFlags.Border,\n            WindowStyleFlags.DialogFrame,\n            WindowStyleFlags.ThickFrame,\n            WindowStyleFlags.SystemMenu,\n            WindowStyleFlags.MaximizeBox,\n            WindowStyleFlags.MinimizeBox\n        };\n\n        public static List<WindowStyleFlags> ExtendedStyles = new List<WindowStyleFlags>\n        {\n            WindowStyleFlags.ExtendedDlgModalFrame,\n            WindowStyleFlags.ExtendedComposited,\n            WindowStyleFlags.ExtendedWindowEdge,\n            WindowStyleFlags.ExtendedClientEdge,\n            WindowStyleFlags.ExtendedLayered,\n            WindowStyleFlags.ExtendedStaticEdge,\n            WindowStyleFlags.ExtendedToolWindow,\n            WindowStyleFlags.ExtendedAppWindow\n        };\n\n        public static readonly IntPtr HWND_TOPMOST = new IntPtr(-1);\n        public static readonly IntPtr HWND_NOTTOPMOST = new IntPtr(-2);\n\n        private static readonly object GetMainWindowForProcess_Locker = \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Native\n    {\n        #region Delegates\n\n        public delegate bool EnumWindows_CallBackProc(IntPtr hwnd, uint lParam);\n\n        #endregion\n\n        public const int INVALID_HANDLE_VALUE = -1;\n        private const uint WM_GETTEXT = 0x0000000D;\n        private const uint WM_GETTEXTLENGTH = 0x0000000E;\n        public const uint WM_MOUSEMOVE = 0x00000200;\n        public const uint WM_HOTKEY = 0x00000312;\n\n        public static List<WindowStyleFlags> TargetStyles = new List<WindowStyleFlags>\n        {\n            WindowStyleFlags.Border,\n            WindowStyleFlags.DialogFrame,\n            WindowStyleFlags.ThickFrame,\n            WindowStyleFlags.SystemMenu,\n            WindowStyleFlags.MaximizeBox,\n            WindowStyleFlags.MinimizeBox\n        };\n\n        public static List<WindowStyleFlags> ExtendedStyles = new List<WindowStyleFlags>\n        {\n            WindowStyleFlags.ExtendedDlgModalFrame,\n            WindowStyleFlags.ExtendedComposited,\n            WindowStyleFlags.ExtendedWindowEdge,\n            WindowStyleFlags.ExtendedClientEdge,\n            WindowStyleFlags.ExtendedLayered,\n            WindowStyleFlags.ExtendedStaticEdge,\n            WindowStyleFlags.ExtendedToolWindow,\n            WindowStyleFlags.ExtendedAppWindow\n        };\n\n        public static readonly IntPtr HWND_TOPMOST = new IntPtr(-1);\n        public static readonly IntPtr HWND_NOTTOPMOST = new IntPtr(-2);\n\n        private static readonly object GetMainWindowForProcess_Locker = \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    #endregion\n    \n    #region Component Designer generated code \n    [global::net.sf.jni4net.attributes.JavaProxyAttribute(typeof(global::System.Collections.IDictionaryEnumerator), typeof(global::System.Collections.IDictionaryEnumerator_))]\n    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::System.Collections.IDictionaryEnumerator), typeof(global::System.Collections.IDictionaryEnumerator_))]\n    internal sealed partial class @__IDictionaryEnumerator : global::java.lang.Object, global::System.Collections.IDictionaryEnumerator {\n        \n        internal new static global::java.lang.Class staticClass;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_MoveNext0;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Current1;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Reset2;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Key3;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Value4;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Entry5;\n        \n        private @__IDictionaryEnumerator(global::net.sf.jni4net.jni.JNIEnv @__env) : \n                base(@__env) {\n        }\n        \n        public object Current {\n            get {\n                global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){\n                return global::net.sf.jni\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    #endregion\n    \n    #region Component Designer generated code \n    [global::net.sf.jni4net.attributes.JavaProxyAttribute(typeof(global::System.Collections.IDictionaryEnumerator), typeof(global::System.Collections.IDictionaryEnumerator_))]\n    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::System.Collections.IDictionaryEnumerator), typeof(global::System.Collections.IDictionaryEnumerator_))]\n    internal sealed partial class @__IDictionaryEnumerator : global::java.lang.Object, global::System.Collections.IDictionaryEnumerator {\n        \n        internal new static global::java.lang.Class staticClass;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_MoveNext0;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Current1;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Reset2;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Key3;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Value4;\n        \n        internal static global::net.sf.jni4net.jni.MethodId j4n_Entry5;\n        \n        private @__IDictionaryEnumerator(global::net.sf.jni4net.jni.JNIEnv @__env) : \n                base(@__env) {\n        }\n        \n        public object Current {\n            get {\n                global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;\n            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){\n                return global::net.sf.jni\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  public abstract class BaseRecord\n  {\n    public string Name;\n\n    public abstract long Size { get; }\n    public abstract long Size2 { get; }\n\n    private static byte[] input;\n    private static byte[] output;\n    private static MemoryStream ms;\n    private static BinaryReader compReader;\n    private static Inflater inf;\n\n    protected static BinaryReader Decompress(BinaryReader br, int size, int outsize)\n    {\n      if (input.Length < size)\n      {\n        input = new byte[size];\n      }\n      if (output.Length < outsize)\n      {\n        output = new byte[outsize];\n      }\n      br.Read(input, 0, size);\n\n      inf.SetInput(input, 0, size);\n      try\n      {\n        inf.Inflate(output);\n      }\n      catch (SharpZipBaseException e)\n      {\n        //we ignore adler checksum mismatches, as I have a notion that they aren't always correctly\n        // stored in the records.\n        if (!e.Message.StartsWith(\"Adler\"))\n        {\n          throw e;\n        }\n      }\n      inf.Reset();\n\n      ms.Position = 0;\n      ms.Write(output, 0, outsize);\n      ms.Position = 0;\n\n      return compReader;\n    }\n\n    protected static void InitDecompressor()\n    {\n      inf = new Inflater(false);\n      ms = new MemoryStream();\n      compReader = new BinaryReader(ms);\n      input = new byte[0x1000];\n      output = new byte[0x4000];\n    }\n\n    protected static void CloseDecompressor()\n    {\n      compReader.Close();\n      compReader = null;\n      inf = null;\n      input = null;\n      output = null\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  public abstract class BaseRecord\n  {\n    public string Name;\n\n    public abstract long Size { get; }\n    public abstract long Size2 { get; }\n\n    private static byte[] input;\n    private static byte[] output;\n    private static MemoryStream ms;\n    private static BinaryReader compReader;\n    private static Inflater inf;\n\n    protected static BinaryReader Decompress(BinaryReader br, int size, int outsize)\n    {\n      if (input.Length < size)\n      {\n        input = new byte[size];\n      }\n      if (output.Length < outsize)\n      {\n        output = new byte[outsize];\n      }\n      br.Read(input, 0, size);\n\n      inf.SetInput(input, 0, size);\n      try\n      {\n        inf.Inflate(output);\n      }\n      catch (SharpZipBaseException e)\n      {\n        //we ignore adler checksum mismatches, as I have a notion that they aren't always correctly\n        // stored in the records.\n        if (!e.Message.StartsWith(\"Adler\"))\n        {\n          throw e;\n        }\n      }\n      inf.Reset();\n\n      ms.Position = 0;\n      ms.Write(output, 0, outsize);\n      ms.Position = 0;\n\n      return compReader;\n    }\n\n    protected static void InitDecompressor()\n    {\n      inf = new Inflater(false);\n      ms = new MemoryStream();\n      compReader = new BinaryReader(ms);\n      input = new byte[0x1000];\n      output = new byte[0x4000];\n    }\n\n    protected static void CloseDecompressor()\n    {\n      compReader.Close();\n      compReader = null;\n      inf = null;\n      input = null;\n      output = null\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Export]\n    [Export(typeof(IOutput))]\n    [Export(typeof(ITool))]\n    public class OutputViewModel : Tool, IOutput\n\t{\n\t\tprivate IOutputView _view;\n\n        [ImportingConstructor]\n        public OutputViewModel(IEventAggregator eventAggregator)\n        {\n            eventAggregator.Subscribe(this);\n            BufferLength = 200;\n            Font = \"Consolas\";\n            FontSize = 12;\n            BackgroundColor = Color.FromArgb(255, 40, 40, 40);\n            TextColor = Color.FromArgb(255, 242, 242, 242);\n            DisplayName = \"Output\";\n        }\n\n\t\tpublic override PaneLocation PreferredLocation\n\t\t{\n\t\t\tget { return PaneLocation.Bottom; }\n\t\t}\n\n        public override Uri Uri\n        {\n            get { return new Uri(\"tool://cshell/output\"); }\n        }\n\n        public override Uri IconSource\n        {\n            get { return new Uri(\"pack://application:,,,/CShell;component/Resources/Icons/Output.png\"); }\n        }\n\n\t\tprivate string _text = string.Empty;\n\t\tpublic string Text\n\t\t{\n\t\t\tget { return _text; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t_text = value;\n                if (_text != null)\n                {\n                    var lines = _text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);\n                    //only remove old lines every 10 updates \n                    if (lines.Length > BufferLength && (bufferLength <= 10 || lines.Length % 10 == 0))\n                        _text = String.Join(Environment.NewLine, lines.Skip(lines.Length - bufferLength));\n       \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "[What",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Export]\n    [Export(typeof(IOutput))]\n    [Export(typeof(ITool))]\n    public class OutputViewModel : Tool, IOutput\n\t{\n\t\tprivate IOutputView _view;\n\n        [ImportingConstructor]\n        public OutputViewModel(IEventAggregator eventAggregator)\n        {\n            eventAggregator.Subscribe(this);\n            BufferLength = 200;\n            Font = \"Consolas\";\n            FontSize = 12;\n            BackgroundColor = Color.FromArgb(255, 40, 40, 40);\n            TextColor = Color.FromArgb(255, 242, 242, 242);\n            DisplayName = \"Output\";\n        }\n\n\t\tpublic override PaneLocation PreferredLocation\n\t\t{\n\t\t\tget { return PaneLocation.Bottom; }\n\t\t}\n\n        public override Uri Uri\n        {\n            get { return new Uri(\"tool://cshell/output\"); }\n        }\n\n        public override Uri IconSource\n        {\n            get { return new Uri(\"pack://application:,,,/CShell;component/Resources/Icons/Output.png\"); }\n        }\n\n\t\tprivate string _text = string.Empty;\n\t\tpublic string Text\n\t\t{\n\t\t\tget { return _text; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t_text = value;\n                if (_text != null)\n                {\n                    var lines = _text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);\n                    //only remove old lines every 10 updates \n                    if (lines.Length > BufferLength && (bufferLength <= 10 || lines.Length % 10 == 0))\n                        _text = String.Join(Environment.NewLine, lines.Skip(lines.Length - bufferLength));\n       \nAnswer: [What is the correct label"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n   [DebuggerDisplay(\"{ActionUrl}\")]\n   abstract class ActionInfo : ICustomAttributeProvider {\n\n      string _Name;\n      string _ActionSegment;\n      string _CustomRoute;\n      bool _CustomRouteInit;\n      bool? _CustomRouteHasActionToken;\n      Collection<ActionParameterInfo> _Parameters;\n      RouteParameterCollection _RouteParameters;\n\n      public ControllerInfo Controller { get; private set; }\n      \n      public string Name {\n         get {\n            return _Name\n               ?? (_Name = GetName());\n         }\n      }\n\n      public virtual string MethodName { get { return Name; } }\n      public virtual Type DeclaringType { get { return Controller.Type; } }\n\n      public string ActionSegment {\n         get {\n            return _ActionSegment\n               ?? (_ActionSegment = Controller.Register.Settings.FormatRouteSegment(new RouteFormatterArgs(Name, RouteSegmentType.Action, Controller.Type)));\n         }\n      }\n\n      public Collection<ActionParameterInfo> Parameters {\n         get {\n            return _Parameters\n               ?? (_Parameters = new Collection<ActionParameterInfo>(GetParameters()));\n         }\n      }\n\n      public RouteParameterCollection RouteParameters {\n         get {\n            if (_RouteParameters == null) {\n\n               _RouteParameters = new RouteParameterCollection(\n                  (from p in Parameters\n                   where p.FromRouteAttribute != null\n                   select CreateRouteParameter(p))\n                  .ToLi\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n   [DebuggerDisplay(\"{ActionUrl}\")]\n   abstract class ActionInfo : ICustomAttributeProvider {\n\n      string _Name;\n      string _ActionSegment;\n      string _CustomRoute;\n      bool _CustomRouteInit;\n      bool? _CustomRouteHasActionToken;\n      Collection<ActionParameterInfo> _Parameters;\n      RouteParameterCollection _RouteParameters;\n\n      public ControllerInfo Controller { get; private set; }\n      \n      public string Name {\n         get {\n            return _Name\n               ?? (_Name = GetName());\n         }\n      }\n\n      public virtual string MethodName { get { return Name; } }\n      public virtual Type DeclaringType { get { return Controller.Type; } }\n\n      public string ActionSegment {\n         get {\n            return _ActionSegment\n               ?? (_ActionSegment = Controller.Register.Settings.FormatRouteSegment(new RouteFormatterArgs(Name, RouteSegmentType.Action, Controller.Type)));\n         }\n      }\n\n      public Collection<ActionParameterInfo> Parameters {\n         get {\n            return _Parameters\n               ?? (_Parameters = new Collection<ActionParameterInfo>(GetParameters()));\n         }\n      }\n\n      public RouteParameterCollection RouteParameters {\n         get {\n            if (_RouteParameters == null) {\n\n               _RouteParameters = new RouteParameterCollection(\n                  (from p in Parameters\n                   where p.FromRouteAttribute != null\n                   select CreateRouteParameter(p))\n                  .ToLi\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    internal static partial class LZMA\n    {\n        /* #define SHOW_STAT */\n        /* #define SHOW_STAT2 */\n        /* #define SHOW_DEBUG_INFO */\n        /* #define PROTOTYPE */\n\n        [System.Diagnostics.Conditional(\"SHOW_DEBUG_INFO\")]\n        internal static void DebugPrint(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n\n        internal static void Print(string format, params object[] args)\n        {\n#if BUILD_TESTING\n            System.Diagnostics.Debug.Write(String.Format(format, args));\n#endif\n        }\n    }\n    partial class LZMA\n    {\n        internal class CMatchFinder\n        {\n            #region Constants\n\n            internal const int kEmptyHashValue = 0;\n            internal const uint kMaxValForNormalize = 0xFFFFFFFF;\n            internal const uint kNormalizeStepMin = 1u << 10; // it must be power of 2\n            internal const uint kNormalizeMask = ~(kNormalizeStepMin - 1u);\n            internal const uint kMaxHistorySize = (3u << 30);\n\n            internal const int kStartMaxLen = 3;\n\n            #endregion\n\n            #region Variables\n\n            public P<byte> mBuffer;\n            public uint mPos;\n            public uint mPosLimit;\n            public uint mStreamPos;\n            public uint mLenLimit;\n\n            public uint mCyclicBufferPos;\n            public uint mCyclicBufferSize; // it must be = (historySize + 1)\n\n            public \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Class representing a node of a tree.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of the value of the node.</typeparam>\n    public class TreeNode<T> : ITreeNode<T>\n    {\n        #region Fields\n\n        /// <summary>\n        ///     The ancestors traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _ancestorsTraversalDirection;\n\n        /// <summary>\n        ///     The children of the node.\n        /// </summary>\n        private ITreeNodeCollection<T> _children;\n\n        /// <summary>\n        ///     The descendants traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _descendantsTraversalDirection;\n\n        /// <summary>\n        ///     The disposable traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _disposeTraversalDirection;\n\n        /// <summary>\n        ///     The parent of the node.\n        /// </summary>\n        private ITreeNode<T> _parent;\n\n        /// <summary>\n        ///     The search traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _searchTraversalDirection;\n\n        /// <summary>\n        ///     The traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _traversalDirection;\n\n        /// <summary>\n        ///     The value of the node.\n        /// </summary>\n        private T _value;\n\n        #endregion\n\n        #region Ctor\n\n        /// <summary>\n        ///     Crea\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    ///     Class representing a node of a tree.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of the value of the node.</typeparam>\n    public class TreeNode<T> : ITreeNode<T>\n    {\n        #region Fields\n\n        /// <summary>\n        ///     The ancestors traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _ancestorsTraversalDirection;\n\n        /// <summary>\n        ///     The children of the node.\n        /// </summary>\n        private ITreeNodeCollection<T> _children;\n\n        /// <summary>\n        ///     The descendants traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _descendantsTraversalDirection;\n\n        /// <summary>\n        ///     The disposable traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _disposeTraversalDirection;\n\n        /// <summary>\n        ///     The parent of the node.\n        /// </summary>\n        private ITreeNode<T> _parent;\n\n        /// <summary>\n        ///     The search traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _searchTraversalDirection;\n\n        /// <summary>\n        ///     The traversal direction.\n        /// </summary>\n        private TreeTraversalDirection _traversalDirection;\n\n        /// <summary>\n        ///     The value of the node.\n        /// </summary>\n        private T _value;\n\n        #endregion\n\n        #region Ctor\n\n        /// <summary>\n        ///     Crea\nAnswer: Ansswer: ComplexMethod"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        /// <summary>\n        /// \n        /// </summary>\n        public class ParticleStormNode : SceneNode, IInstancing, IBoundable\n        {\n            #region Properties\n            /// <summary>\n            /// Gets or sets the particle count.\n            /// </summary>\n            /// <value>\n            /// The particle count.\n            /// </value>\n            public int ParticleCount\n            {\n                set\n                {\n                    particleCore.ParticleCount = value;\n                }\n                get\n                {\n                    return particleCore.ParticleCount;\n                }\n            }\n            /// <summary>\n            /// Gets or sets the emitter location.\n            /// </summary>\n            /// <value>\n            /// The emitter location.\n            /// </value>\n            public Vector3 EmitterLocation\n            {\n                set\n                {\n                    particleCore.EmitterLocation = value;\n                }\n                get\n                {\n                    return particleCore.EmitterLocation;\n                }\n            }\n            /// <summary>\n            /// Gets or sets the emitter radius.\n            /// </summary>\n            /// <value>\n            /// The emitter radius.\n            /// </value>\n            public float EmitterRadius\n            {\n                set\n                {\n                    particleCore.EmitterRadius = value;\n                }\n         \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        /// <summary>\n        /// \n        /// </summary>\n        public class ParticleStormNode : SceneNode, IInstancing, IBoundable\n        {\n            #region Properties\n            /// <summary>\n            /// Gets or sets the particle count.\n            /// </summary>\n            /// <value>\n            /// The particle count.\n            /// </value>\n            public int ParticleCount\n            {\n                set\n                {\n                    particleCore.ParticleCount = value;\n                }\n                get\n                {\n                    return particleCore.ParticleCount;\n                }\n            }\n            /// <summary>\n            /// Gets or sets the emitter location.\n            /// </summary>\n            /// <value>\n            /// The emitter location.\n            /// </value>\n            public Vector3 EmitterLocation\n            {\n                set\n                {\n                    particleCore.EmitterLocation = value;\n                }\n                get\n                {\n                    return particleCore.EmitterLocation;\n                }\n            }\n            /// <summary>\n            /// Gets or sets the emitter radius.\n            /// </summary>\n            /// <value>\n            /// The emitter radius.\n            /// </value>\n            public float EmitterRadius\n            {\n                set\n                {\n                    particleCore.EmitterRadius = value;\n                }\n         \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        \n\n        /// <summary>\n        /// \n        /// </summary>\n        public abstract class MaterialVariable : ReferenceCountDisposeObject\n        {\n            public static readonly ConstantBufferDescription DefaultMeshConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.ModelCB,\n                          PhongPBRMaterialStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultPointLineConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.PointLineModelCB,\n                            PointLineMaterialStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultVolumeConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.VolumeModelCB,\n                            VolumeParamsStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultNonMaterialBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.SimpleMeshCB,\n                    SimpleMeshStruct.SizeInBytes);\n\n            public event EventHandler UpdateNeeded;\n            /// <summary>\n            /// Gets or sets the identifier. Used for material sorting\n            /// </summary>\n            /// <value>\n            /// The identifier.\n            /// </value>\n            public ushort ID { set; get; } = 0;\n\n            protected IRenderTechnique Technique { get; }\n            protected IEffectsManager Effe\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        \n\n        /// <summary>\n        /// \n        /// </summary>\n        public abstract class MaterialVariable : ReferenceCountDisposeObject\n        {\n            public static readonly ConstantBufferDescription DefaultMeshConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.ModelCB,\n                          PhongPBRMaterialStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultPointLineConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.PointLineModelCB,\n                            PointLineMaterialStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultVolumeConstantBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.VolumeModelCB,\n                            VolumeParamsStruct.SizeInBytes);\n\n            public static readonly ConstantBufferDescription DefaultNonMaterialBufferDesc\n                = new ConstantBufferDescription(DefaultBufferNames.SimpleMeshCB,\n                    SimpleMeshStruct.SizeInBytes);\n\n            public event EventHandler UpdateNeeded;\n            /// <summary>\n            /// Gets or sets the identifier. Used for material sorting\n            /// </summary>\n            /// <value>\n            /// The identifier.\n            /// </value>\n            public ushort ID { set; get; } = 0;\n\n            protected IRenderTechnique Technique { get; }\n            protected IEffectsManager Effe\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// Defines a remote address.\n  /// </summary>\n  internal sealed partial class AddressData : pb::IMessage<AddressData> {\n    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[3]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData(AddressData other) : this() {\n      system_ = other.system_;\n      hostname_ = other.hostname_;\n      port_ = other.port_;\n      protocol_ = other.protocol_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData Clone() {\n      return new AddressData(this);\n    }\n\n    /// <summary>Field number for the \"system\" field.</summary>\n    public const int SystemFieldNumber = 1;\n    private string system_ = \"\";\n\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// Defines a remote address.\n  /// </summary>\n  internal sealed partial class AddressData : pb::IMessage<AddressData> {\n    private static readonly pb::MessageParser<AddressData> _parser = new pb::MessageParser<AddressData>(() => new AddressData());\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pb::MessageParser<AddressData> Parser { get { return _parser; } }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public static pbr::MessageDescriptor Descriptor {\n      get { return global::Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection.Descriptor.MessageTypes[3]; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    pbr::MessageDescriptor pb::IMessage.Descriptor {\n      get { return Descriptor; }\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData() {\n      OnConstruction();\n    }\n\n    partial void OnConstruction();\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData(AddressData other) : this() {\n      system_ = other.system_;\n      hostname_ = other.hostname_;\n      port_ = other.port_;\n      protocol_ = other.protocol_;\n    }\n\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    public AddressData Clone() {\n      return new AddressData(this);\n    }\n\n    /// <summary>Field number for the \"system\" field.</summary>\n    public const int SystemFieldNumber = 1;\n    private string system_ = \"\";\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'PurchaseOrderDetail', mapped on table 'AdventureWorks.Purchasing.PurchaseOrderDetail'.</summary>\n\t[Table(Name=\"[Purchasing].[PurchaseOrderDetail]\")]\n\tpublic partial class PurchaseOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate System.DateTime\t_dueDate;\n\t\tprivate System.Decimal\t_lineTotal;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate System.Int16\t_orderQty;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.Int32\t_purchaseOrderDetailId;\n\t\tprivate System.Int32\t_purchaseOrderId;\n\t\tprivate System.Decimal\t_receivedQty;\n\t\tprivate System.Decimal\t_rejectedQty;\n\t\tprivate System.Decimal\t_stockedQty;\n\t\tprivate System.Decimal\t_unitPrice;\n\t\tprivate EntityRef <Product> _product;\n\t\tprivate EntityRef <PurchaseOrderHeader> _purchaseOrderHeader;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnDueDateChanging(System.DateTime value);\n\t\tpartial void OnDueDateChanged();\n\t\tpartial void OnLineTotalChanging(System.Decimal value);\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Class which represents the entity 'PurchaseOrderDetail', mapped on table 'AdventureWorks.Purchasing.PurchaseOrderDetail'.</summary>\n\t[Table(Name=\"[Purchasing].[PurchaseOrderDetail]\")]\n\tpublic partial class PurchaseOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged\n\t{\n\t\t#region Events\n\t\t/// <summary>Event which is raised when a property value is changing.</summary>\n\t\tpublic event PropertyChangingEventHandler PropertyChanging;\n\t\t/// <summary>Event which is raised when a property value changes.</summary>\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\t\t#endregion\n\t\t\n\t\t#region Class Member Declarations\n\t\tprivate System.DateTime\t_dueDate;\n\t\tprivate System.Decimal\t_lineTotal;\n\t\tprivate System.DateTime\t_modifiedDate;\n\t\tprivate System.Int16\t_orderQty;\n\t\tprivate System.Int32\t_productId;\n\t\tprivate System.Int32\t_purchaseOrderDetailId;\n\t\tprivate System.Int32\t_purchaseOrderId;\n\t\tprivate System.Decimal\t_receivedQty;\n\t\tprivate System.Decimal\t_rejectedQty;\n\t\tprivate System.Decimal\t_stockedQty;\n\t\tprivate System.Decimal\t_unitPrice;\n\t\tprivate EntityRef <Product> _product;\n\t\tprivate EntityRef <PurchaseOrderHeader> _purchaseOrderHeader;\n\t\t#endregion\n\t\t\n\t\t#region Extensibility Method Definitions\n\t\tpartial void OnLoaded();\n\t\tpartial void OnValidate(System.Data.Linq.ChangeAction action);\n\t\tpartial void OnCreated();\n\t\tpartial void OnDueDateChanging(System.DateTime value);\n\t\tpartial void OnDueDateChanged();\n\t\tpartial void OnLineTotalChanging(System.Decimal value);\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ImageUtils\n    {\n        public static int GetMipmapWidth(int width, int mipmapIndex)\n        {\n            return width / (1 << mipmapIndex);\n        }\n\n        public static int GetMipmapHeight(int height, int mipmapIndex)\n        {\n            return height / (1 << mipmapIndex);\n        }\n\n        public static int Conv5To8(int value)\n        {\n            return cc58[value];\n        }\n\n        public static int Conv6To8(int value)\n        {\n            return cc68[value];\n        }\n\n        public static int Conv4To8(int value)\n        {\n            return cc48[value];\n        }\n\n        public static int Conv3To8(int value)\n        {\n            return cc38[value];\n        }\n\n        public static int Conv8To5(int value)\n        {\n            return cc85[value];\n        }\n\n        public static int Conv8To6(int value)\n        {\n            return cc86[value];\n        }\n\n        public static int Conv8To4(int value)\n        {\n            return cc84[value];\n        }\n\n        public static int Conv8To3(int value)\n        {\n            return cc83[value];\n        }\n\n        public static Color ToGrayScale(Color color)\n        {\n            if (color.R == color.G && color.G == color.B)\n            {\n                return color;\n            }\n\n            int intensity = (int)(color.R * 0.2126 + color.G * 0.7152 + color.B * 0.0722);\n            return Color.FromArgb(color.A, intensity, intensity, intensity);\n        }\n\n        // Color conversion tab\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "?",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ImageUtils\n    {\n        public static int GetMipmapWidth(int width, int mipmapIndex)\n        {\n            return width / (1 << mipmapIndex);\n        }\n\n        public static int GetMipmapHeight(int height, int mipmapIndex)\n        {\n            return height / (1 << mipmapIndex);\n        }\n\n        public static int Conv5To8(int value)\n        {\n            return cc58[value];\n        }\n\n        public static int Conv6To8(int value)\n        {\n            return cc68[value];\n        }\n\n        public static int Conv4To8(int value)\n        {\n            return cc48[value];\n        }\n\n        public static int Conv3To8(int value)\n        {\n            return cc38[value];\n        }\n\n        public static int Conv8To5(int value)\n        {\n            return cc85[value];\n        }\n\n        public static int Conv8To6(int value)\n        {\n            return cc86[value];\n        }\n\n        public static int Conv8To4(int value)\n        {\n            return cc84[value];\n        }\n\n        public static int Conv8To3(int value)\n        {\n            return cc83[value];\n        }\n\n        public static Color ToGrayScale(Color color)\n        {\n            if (color.R == color.G && color.G == color.B)\n            {\n                return color;\n            }\n\n            int intensity = (int)(color.R * 0.2126 + color.G * 0.7152 + color.B * 0.0722);\n            return Color.FromArgb(color.A, intensity, intensity, intensity);\n        }\n\n        // Color conversion tab\nAnswer:?\n</think>\n\nThe code provided"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// The PluginHostElement Configuration Element.\n    /// </summary>\n    public partial class PluginHostElement : global::System.Configuration.ConfigurationElement\n    {\n        \n        #region IsReadOnly override\n        /// <summary>\n        /// Gets a value indicating whether the element is read-only.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public override bool IsReadOnly()\n        {\n            return false;\n        }\n        #endregion\n        \n        #region Provider Property\n        /// <summary>\n        /// The XML name of the <see cref=\"Provider\"/> property.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string ProviderPropertyName = \"provider\";\n        \n        /// <summary>\n        /// Gets or sets the Provider.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        [global::System.ComponentModel.DescriptionAttribute(\"The Provider.\")]\n        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Core.Configuration.PluginHostElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]\n        public virtual string Provider\n        {\n            get\n    \nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    /// The PluginHostElement Configuration Element.\n    /// </summary>\n    public partial class PluginHostElement : global::System.Configuration.ConfigurationElement\n    {\n        \n        #region IsReadOnly override\n        /// <summary>\n        /// Gets a value indicating whether the element is read-only.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        public override bool IsReadOnly()\n        {\n            return false;\n        }\n        #endregion\n        \n        #region Provider Property\n        /// <summary>\n        /// The XML name of the <see cref=\"Provider\"/> property.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        internal const string ProviderPropertyName = \"provider\";\n        \n        /// <summary>\n        /// Gets or sets the Provider.\n        /// </summary>\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ConfigurationSectionDesigner.CsdFileGenerator\", \"2.0.0.5\")]\n        [global::System.ComponentModel.DescriptionAttribute(\"The Provider.\")]\n        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Core.Configuration.PluginHostElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]\n        public virtual string Provider\n        {\n            get\n    \nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class EventStreamSubscriberSettingsBuilder\n    {\n        private IEventStoreHttpConnection _connection;\n        private IEventHandlerResolver _eventHandlerResolver;\n        private IStreamPositionRepository _streamPositionRepository;\n        private ISubscriptionTimerManager _subscriptionTimerManager;\n        private IEventTypeResolver _eventTypeResolver = new EventTypeResolver();\n        private ILog _log;\n        private TimeSpan _messageProcessingStatsWindowPeriod = TimeSpan.FromSeconds(30);\n        private int _messageProcessingStatsWindowCount = 120;\n        private TimeSpan? _longPollingTimeout;\n        private List<IEventStreamSubscriberPerformanceMonitor> _performanceMonitors = new List<IEventStreamSubscriberPerformanceMonitor>();\n        private IStreamSubscriberIntervalMonitor _subscriberIntervalMonitor;\n\n        private TimeSpan _defaultPollingInterval = TimeSpan.FromSeconds(30);\n        private int _sliceSize = 100;\n        \n        private int _eventNotFoundRetryCount = 3;\n        private TimeSpan _eventNotFoundRetryDelay = TimeSpan.FromMilliseconds(100);\n\n        public EventStreamSubscriberSettingsBuilder(IEventStoreHttpConnection connection, IEventHandlerResolver eventHandlerResolver, IStreamPositionRepository streamPositionRepository)\n        {\n            _connection = connection;\n            _eventHandlerResolver = eventHandlerResolver;\n            _streamPositionRepository = streamPositionRepository;\n            _subscriptionTimerManager = new S\nAnswer:",
    "expected": "MultifacetedAbstraction_positive",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class EventStreamSubscriberSettingsBuilder\n    {\n        private IEventStoreHttpConnection _connection;\n        private IEventHandlerResolver _eventHandlerResolver;\n        private IStreamPositionRepository _streamPositionRepository;\n        private ISubscriptionTimerManager _subscriptionTimerManager;\n        private IEventTypeResolver _eventTypeResolver = new EventTypeResolver();\n        private ILog _log;\n        private TimeSpan _messageProcessingStatsWindowPeriod = TimeSpan.FromSeconds(30);\n        private int _messageProcessingStatsWindowCount = 120;\n        private TimeSpan? _longPollingTimeout;\n        private List<IEventStreamSubscriberPerformanceMonitor> _performanceMonitors = new List<IEventStreamSubscriberPerformanceMonitor>();\n        private IStreamSubscriberIntervalMonitor _subscriberIntervalMonitor;\n\n        private TimeSpan _defaultPollingInterval = TimeSpan.FromSeconds(30);\n        private int _sliceSize = 100;\n        \n        private int _eventNotFoundRetryCount = 3;\n        private TimeSpan _eventNotFoundRetryDelay = TimeSpan.FromMilliseconds(100);\n\n        public EventStreamSubscriberSettingsBuilder(IEventStoreHttpConnection connection, IEventHandlerResolver eventHandlerResolver, IStreamPositionRepository streamPositionRepository)\n        {\n            _connection = connection;\n            _eventHandlerResolver = eventHandlerResolver;\n            _streamPositionRepository = streamPositionRepository;\n            _subscriptionTimerManager = new S\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class TermsOrderDescriptor<T> : DescriptorPromiseBase<TermsOrderDescriptor<T>, IList<TermsOrder>>\n\t\twhere T : class\n\t{\n\t\tpublic TermsOrderDescriptor() : base(new List<TermsOrder>()) { }\n\n\t\tpublic TermsOrderDescriptor<T> CountAscending() => Assign(a => a.Add(TermsOrder.CountAscending));\n\n\t\tpublic TermsOrderDescriptor<T> CountDescending() => Assign(a => a.Add(TermsOrder.CountDescending));\n\n\t\tpublic TermsOrderDescriptor<T> KeyAscending() => Assign(a => a.Add(TermsOrder.KeyAscending));\n\n\t\tpublic TermsOrderDescriptor<T> KeyDescending() => Assign(a => a.Add(TermsOrder.KeyDescending));\n\n\t\tpublic TermsOrderDescriptor<T> Ascending(string key) =>\n\t\t\tstring.IsNullOrWhiteSpace(key) ? this : Assign(key,(a, v) => a.Add(new TermsOrder { Key = v, Order = SortOrder.Ascending }));\n\n\t\tpublic TermsOrderDescriptor<T> Descending(string key) =>\n\t\t\tstring.IsNullOrWhiteSpace(key) ? this : Assign(key,(a, v) => a.Add(new TermsOrder { Key = v, Order = SortOrder.Descending }));\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class TermsOrderDescriptor<T> : DescriptorPromiseBase<TermsOrderDescriptor<T>, IList<TermsOrder>>\n\t\twhere T : class\n\t{\n\t\tpublic TermsOrderDescriptor() : base(new List<TermsOrder>()) { }\n\n\t\tpublic TermsOrderDescriptor<T> CountAscending() => Assign(a => a.Add(TermsOrder.CountAscending));\n\n\t\tpublic TermsOrderDescriptor<T> CountDescending() => Assign(a => a.Add(TermsOrder.CountDescending));\n\n\t\tpublic TermsOrderDescriptor<T> KeyAscending() => Assign(a => a.Add(TermsOrder.KeyAscending));\n\n\t\tpublic TermsOrderDescriptor<T> KeyDescending() => Assign(a => a.Add(TermsOrder.KeyDescending));\n\n\t\tpublic TermsOrderDescriptor<T> Ascending(string key) =>\n\t\t\tstring.IsNullOrWhiteSpace(key) ? this : Assign(key,(a, v) => a.Add(new TermsOrder { Key = v, Order = SortOrder.Ascending }));\n\n\t\tpublic TermsOrderDescriptor<T> Descending(string key) =>\n\t\t\tstring.IsNullOrWhiteSpace(key) ? this : Assign(key,(a, v) => a.Add(new TermsOrder { Key = v, Order = SortOrder.Descending }));\n\t}\n\nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SuperGumpLayout : Dictionary<string, Action<string>>\n\t{\n\t\tpublic SuperGumpLayout()\n\t\t\t: this(null)\n\t\t{ }\n\n\t\tpublic SuperGumpLayout(IEnumerable<KeyValuePair<string, Action<string>>> entries)\n\t\t{\n\t\t\tif (entries != null)\n\t\t\t{\n\t\t\t\tentries.ForEach(kv => AddReplace(kv.Key, kv.Value));\n\t\t\t}\n\t\t}\n\n\t\tpublic void Replace(string xpath, Action value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath) || !ContainsKey(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tRemove(xpath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis[xpath] = x => value();\n\t\t}\n\n\t\tpublic void Replace(string xpath, Action<string> value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath) || !ContainsKey(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tRemove(xpath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis[xpath] = value;\n\t\t}\n\n\t\tpublic void AddReplace(string xpath, Action value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tif (ContainsKey(xpath))\n\t\t\t\t{\n\t\t\t\t\tRemove(xpath);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ContainsKey(xpath))\n\t\t\t{\n\t\t\t\tAdd(xpath, x => value());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis[xpath] = x => value();\n\t\t\t}\n\t\t}\n\n\t\tpublic void AddReplace(string xpath, Action<string> value)\n\t\t{\n\t\t\tif (!ContainsKey(xpath))\n\t\t\t{\n\t\t\t\tAdd(xpath, value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis[xpath] = value;\n\t\t\t}\n\t\t}\n\n\t\tpublic void Add(string xpath, Action value)\n\t\t{\n\t\t\tAdd(\n\t\t\t\txpath,\n\t\t\t\tx =>\n\t\t\t\t{\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tpublic void AddBefore(string search, \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class SuperGumpLayout : Dictionary<string, Action<string>>\n\t{\n\t\tpublic SuperGumpLayout()\n\t\t\t: this(null)\n\t\t{ }\n\n\t\tpublic SuperGumpLayout(IEnumerable<KeyValuePair<string, Action<string>>> entries)\n\t\t{\n\t\t\tif (entries != null)\n\t\t\t{\n\t\t\t\tentries.ForEach(kv => AddReplace(kv.Key, kv.Value));\n\t\t\t}\n\t\t}\n\n\t\tpublic void Replace(string xpath, Action value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath) || !ContainsKey(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tRemove(xpath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis[xpath] = x => value();\n\t\t}\n\n\t\tpublic void Replace(string xpath, Action<string> value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath) || !ContainsKey(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tRemove(xpath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis[xpath] = value;\n\t\t}\n\n\t\tpublic void AddReplace(string xpath, Action value)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(xpath))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (value == null)\n\t\t\t{\n\t\t\t\tif (ContainsKey(xpath))\n\t\t\t\t{\n\t\t\t\t\tRemove(xpath);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ContainsKey(xpath))\n\t\t\t{\n\t\t\t\tAdd(xpath, x => value());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis[xpath] = x => value();\n\t\t\t}\n\t\t}\n\n\t\tpublic void AddReplace(string xpath, Action<string> value)\n\t\t{\n\t\t\tif (!ContainsKey(xpath))\n\t\t\t{\n\t\t\t\tAdd(xpath, value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis[xpath] = value;\n\t\t\t}\n\t\t}\n\n\t\tpublic void Add(string xpath, Action value)\n\t\t{\n\t\t\tAdd(\n\t\t\t\txpath,\n\t\t\t\tx =>\n\t\t\t\t{\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tpublic void AddBefore(string search, \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Main\n    {\n        public static FormatCompress Get_Format(string input)\n        {\n            CompressionFormat fmt = null;\n\n            foreach (FormatCompress f in Enum.GetValues(typeof(FormatCompress)))\n            {\n                switch (f)\n                {\n                    //case FormatCompress.LZOVL: fmt = new LZOvl(); break;\n                    case FormatCompress.LZ10: fmt = new LZ10(); break;\n                    case FormatCompress.LZ11: fmt = new LZ11(); break;\n                    case FormatCompress.RLE: fmt = new RLE(); break;\n                    case FormatCompress.HUFF: fmt = new Huffman(); break;\n                }\n\n                if (fmt == null)\n                    continue;\n\n                if (fmt.Supports(input))\n                    return f;\n            }\n\n            return FormatCompress.Invalid;\n        }\n        public static FormatCompress Get_Format(FileStream input, bool arm9)\n        {\n            CompressionFormat fmt = null;\n\n            foreach (FormatCompress f in Enum.GetValues(typeof(FormatCompress)))\n            {\n                switch (f)\n                {\n                    //case FormatCompress.LZOVL: fmt = new LZOvl(); break;\n                    case FormatCompress.LZ10: fmt = new LZ10(); break;\n                    case FormatCompress.LZ11: fmt = new LZ11(); break;\n                    case FormatCompress.RLE: fmt = new RLE(); break;\n                    case FormatCompress.HUFF: fmt = new Huffman(); break\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class Main\n    {\n        public static FormatCompress Get_Format(string input)\n        {\n            CompressionFormat fmt = null;\n\n            foreach (FormatCompress f in Enum.GetValues(typeof(FormatCompress)))\n            {\n                switch (f)\n                {\n                    //case FormatCompress.LZOVL: fmt = new LZOvl(); break;\n                    case FormatCompress.LZ10: fmt = new LZ10(); break;\n                    case FormatCompress.LZ11: fmt = new LZ11(); break;\n                    case FormatCompress.RLE: fmt = new RLE(); break;\n                    case FormatCompress.HUFF: fmt = new Huffman(); break;\n                }\n\n                if (fmt == null)\n                    continue;\n\n                if (fmt.Supports(input))\n                    return f;\n            }\n\n            return FormatCompress.Invalid;\n        }\n        public static FormatCompress Get_Format(FileStream input, bool arm9)\n        {\n            CompressionFormat fmt = null;\n\n            foreach (FormatCompress f in Enum.GetValues(typeof(FormatCompress)))\n            {\n                switch (f)\n                {\n                    //case FormatCompress.LZOVL: fmt = new LZOvl(); break;\n                    case FormatCompress.LZ10: fmt = new LZ10(); break;\n                    case FormatCompress.LZ11: fmt = new LZ11(); break;\n                    case FormatCompress.RLE: fmt = new RLE(); break;\n                    case FormatCompress.HUFF: fmt = new Huffman(); break\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class FeedReader : BaseReceptor\n    {\n\t\tpublic override string Name { get { return \"Feed Reader\"; } }\n\t\tpublic override string Subname { get { return FeedName; } }\n\t\tpublic override bool IsEdgeReceptor { get { return true; } }\n\t\tpublic override string ConfigurationUI { get { return \"FeedReaderConfig.xml\"; } }\n\n\t\t[UserConfigurableProperty(\"Feed URL:\")]\n\t\tpublic string FeedUrl { get; set; }\n\n\t\t[UserConfigurableProperty(\"Feed Name:\")]\n\t\tpublic string FeedName {get;set;}\n\n\t\tprotected string lastFeedUrl;\n\t\tprotected SyndicationFeed feed;\n\n\t\tpublic FeedReader(IReceptorSystem rsys)\n\t\t\t: base(rsys)\n\t\t{\n\t\t\tAddReceiveProtocol(\"RSSFeedUrl\", (Action<dynamic>)(s => ProcessUrl(s)));\n\t\t\tAddReceiveProtocol(\"RSSFeedRefresh\", (Action<dynamic>)(s => AcquireFeed(lastFeedUrl)));\n\t\t\tAddEmitProtocol(\"RSSFeedItem\");\n\t\t\tAddEmitProtocol(\"ExceptionMessage\");\n\t\t\tAddEmitProtocol(\"LoggerMessage\");\n\t\t}\n\n\t\t/// <summary>\n\t\t/// If specified, immmediately acquire the feed and start emitting feed items.\n\t\t/// </summary>\n\t\tpublic override void EndSystemInit()\n\t\t{\n\t\t\tbase.EndSystemInit();\n\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tAcquireFeed(FeedUrl);\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t/// When the user configuration fields have been updated, re-acquire the feed.\n\t\t/// </summary>\n\t\tpublic override bool UserConfigurationUpdated()\n\t\t{\n\t\t\tbase.UserConfigurationUpdated();\n\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tAcquireFeed(FeedUrl);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tprotected void ProcessUrl(dynamic signal)\n\t\t{\n\t\t\tstring feedUrl = signal.Url.Value;\n\t\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class FeedReader : BaseReceptor\n    {\n\t\tpublic override string Name { get { return \"Feed Reader\"; } }\n\t\tpublic override string Subname { get { return FeedName; } }\n\t\tpublic override bool IsEdgeReceptor { get { return true; } }\n\t\tpublic override string ConfigurationUI { get { return \"FeedReaderConfig.xml\"; } }\n\n\t\t[UserConfigurableProperty(\"Feed URL:\")]\n\t\tpublic string FeedUrl { get; set; }\n\n\t\t[UserConfigurableProperty(\"Feed Name:\")]\n\t\tpublic string FeedName {get;set;}\n\n\t\tprotected string lastFeedUrl;\n\t\tprotected SyndicationFeed feed;\n\n\t\tpublic FeedReader(IReceptorSystem rsys)\n\t\t\t: base(rsys)\n\t\t{\n\t\t\tAddReceiveProtocol(\"RSSFeedUrl\", (Action<dynamic>)(s => ProcessUrl(s)));\n\t\t\tAddReceiveProtocol(\"RSSFeedRefresh\", (Action<dynamic>)(s => AcquireFeed(lastFeedUrl)));\n\t\t\tAddEmitProtocol(\"RSSFeedItem\");\n\t\t\tAddEmitProtocol(\"ExceptionMessage\");\n\t\t\tAddEmitProtocol(\"LoggerMessage\");\n\t\t}\n\n\t\t/// <summary>\n\t\t/// If specified, immmediately acquire the feed and start emitting feed items.\n\t\t/// </summary>\n\t\tpublic override void EndSystemInit()\n\t\t{\n\t\t\tbase.EndSystemInit();\n\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tAcquireFeed(FeedUrl);\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t/// When the user configuration fields have been updated, re-acquire the feed.\n\t\t/// </summary>\n\t\tpublic override bool UserConfigurationUpdated()\n\t\t{\n\t\t\tbase.UserConfigurationUpdated();\n\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tAcquireFeed(FeedUrl);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tprotected void ProcessUrl(dynamic signal)\n\t\t{\n\t\t\tstring feedUrl = signal.Url.Value;\n\t\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]\n    public class Relation : Attribute\n    {\n        public Relation()\n        {\n            LocalField = null;\n            RemoteField = null;\n            AutoLoad = true;\n            AutoDelete = false;\n        }\n        \n        // Relation entre plusieurs champs de table diff\u00e9rente\n        public string LocalField { get; set; }\n\n        // Supprime la relation\n        public string RemoteField { get; set; }\n\n        // Chargement automatique de la table\n        public bool AutoLoad { get; set; }\n\n        // Suppression de l'objet automatiquement lorsque l'objet est supprim\u00e9 dans le core\n        public bool AutoDelete { get; set; }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]\n    public class Relation : Attribute\n    {\n        public Relation()\n        {\n            LocalField = null;\n            RemoteField = null;\n            AutoLoad = true;\n            AutoDelete = false;\n        }\n        \n        // Relation entre plusieurs champs de table diff\u00e9rente\n        public string LocalField { get; set; }\n\n        // Supprime la relation\n        public string RemoteField { get; set; }\n\n        // Chargement automatique de la table\n        public bool AutoLoad { get; set; }\n\n        // Suppression de l'objet automatiquement lorsque l'objet est supprim\u00e9 dans le core\n        public bool AutoDelete { get; set; }\n    }\n\nAnswer: [Your Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class BlogMlImporter\n    {\n        private readonly ArticulateTempFileSystem _fileSystem;\n        private readonly DisqusXmlExporter _disqusXmlExporter;\n        private readonly IContentTypeBaseServiceProvider _contentTypeBaseServiceProvider;\n        private readonly IContentService _contentService;\n        private readonly IContentTypeService _contentTypeService;\n        private readonly IUserService _userService;\n        private readonly ILogger _logger;\n        private readonly IDataTypeService _dataTypeService;\n\n        public BlogMlImporter(ArticulateTempFileSystem fileSystem, DisqusXmlExporter disqusXmlExporter, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IContentService contentService, IContentTypeService contentTypeService, IUserService userService, ILogger logger, IDataTypeService dataTypeService)\n        {\n            _fileSystem = fileSystem;\n            _disqusXmlExporter = disqusXmlExporter;\n            _contentTypeBaseServiceProvider = contentTypeBaseServiceProvider;\n            _contentService = contentService;\n            _contentTypeService = contentTypeService;\n            _userService = userService;\n            _logger = logger;\n            _dataTypeService = dataTypeService;\n        }\n\n        public int GetPostCount(string fileName)\n        {\n            var doc = GetDocument(fileName);\n            return doc.Posts.Count();\n        }\n\n        public async Task<bool> Import(\n            int userId,\n            string fileName\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class BlogMlImporter\n    {\n        private readonly ArticulateTempFileSystem _fileSystem;\n        private readonly DisqusXmlExporter _disqusXmlExporter;\n        private readonly IContentTypeBaseServiceProvider _contentTypeBaseServiceProvider;\n        private readonly IContentService _contentService;\n        private readonly IContentTypeService _contentTypeService;\n        private readonly IUserService _userService;\n        private readonly ILogger _logger;\n        private readonly IDataTypeService _dataTypeService;\n\n        public BlogMlImporter(ArticulateTempFileSystem fileSystem, DisqusXmlExporter disqusXmlExporter, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IContentService contentService, IContentTypeService contentTypeService, IUserService userService, ILogger logger, IDataTypeService dataTypeService)\n        {\n            _fileSystem = fileSystem;\n            _disqusXmlExporter = disqusXmlExporter;\n            _contentTypeBaseServiceProvider = contentTypeBaseServiceProvider;\n            _contentService = contentService;\n            _contentTypeService = contentTypeService;\n            _userService = userService;\n            _logger = logger;\n            _dataTypeService = dataTypeService;\n        }\n\n        public int GetPostCount(string fileName)\n        {\n            var doc = GetDocument(fileName);\n            return doc.Posts.Count();\n        }\n\n        public async Task<bool> Import(\n            int userId,\n            string fileName\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]\n    public class CodeMethodReferenceExpression : CodeExpression\n    {\n    \n        public CodeExpression TargetObject\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n        public string MethodName\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n        [ComVisibleAttribute(false)]\n        public CodeTypeReferenceCollection TypeArguments\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n    \n        public CodeMethodReferenceExpression()\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName, params  CodeTypeReference[] typeParameters)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]\n    public class CodeMethodReferenceExpression : CodeExpression\n    {\n    \n        public CodeExpression TargetObject\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n        public string MethodName\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n        [ComVisibleAttribute(false)]\n        public CodeTypeReferenceCollection TypeArguments\n        {\n            get { throw new NotImplementedException(); }\n        }\n    \n    \n        public CodeMethodReferenceExpression()\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName, params  CodeTypeReference[] typeParameters)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n    }\n\nAnswer: [Answer]\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    class RoofPatternResource : ObjectCatalogResource\n    {\n        #region Attributes\n        uint unknown;\n        TGIBlock matdTGIReference;\n        TGIBlock cflrTGIReference;\n        ulong catalogGroupID;\n        SwatchColorList colorList;\n        #endregion\n\n        public RoofPatternResource(int APIversion, Stream s) : base(APIversion, s) { }\n\n        #region Data I/O\n        protected override void Parse(Stream s)\n        {\n            base.Parse(s);\n            BinaryReader r = new BinaryReader(s);\n            this.unknown = r.ReadUInt32();\n            this.matdTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\", s);\n            this.cflrTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\", s);\n            this.catalogGroupID = r.ReadUInt64();\n            this.colorList = new SwatchColorList(OnResourceChanged, s);\n        }\n\n        protected override Stream UnParse()\n        {\n            var s = base.UnParse();\n            BinaryWriter w = new BinaryWriter(s);\n            w.Write(this.unknown);\n            if (this.matdTGIReference == null) this.matdTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\");\n            this.matdTGIReference.UnParse(s);\n            if (this.cflrTGIReference == null) this.cflrTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\");\n            this.cflrTGIReference.UnParse(s);\n            w.Write(this.catalogGroupID);\n            if (this.colorList \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    class RoofPatternResource : ObjectCatalogResource\n    {\n        #region Attributes\n        uint unknown;\n        TGIBlock matdTGIReference;\n        TGIBlock cflrTGIReference;\n        ulong catalogGroupID;\n        SwatchColorList colorList;\n        #endregion\n\n        public RoofPatternResource(int APIversion, Stream s) : base(APIversion, s) { }\n\n        #region Data I/O\n        protected override void Parse(Stream s)\n        {\n            base.Parse(s);\n            BinaryReader r = new BinaryReader(s);\n            this.unknown = r.ReadUInt32();\n            this.matdTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\", s);\n            this.cflrTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\", s);\n            this.catalogGroupID = r.ReadUInt64();\n            this.colorList = new SwatchColorList(OnResourceChanged, s);\n        }\n\n        protected override Stream UnParse()\n        {\n            var s = base.UnParse();\n            BinaryWriter w = new BinaryWriter(s);\n            w.Write(this.unknown);\n            if (this.matdTGIReference == null) this.matdTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\");\n            this.matdTGIReference.UnParse(s);\n            if (this.cflrTGIReference == null) this.cflrTGIReference = new TGIBlock(RecommendedApiVersion, OnResourceChanged, \"ITG\");\n            this.cflrTGIReference.UnParse(s);\n            w.Write(this.catalogGroupID);\n            if (this.colorList \nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic enum EntryType {\n\n\t\tArtist,\n\t\tAlbum,\n\t\tReleaseEvent,\n\t\tSong,\n\t\tTag\n\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic enum EntryType {\n\n\t\tArtist,\n\t\tAlbum,\n\t\tReleaseEvent,\n\t\tSong,\n\t\tTag\n\n\t}\n\nAnswer: __________\n\nI need to"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        protected class DeflateOutputStream : ZOutputStream\n        {\n            public DeflateOutputStream(Stream output, ZStream z, bool compress)\n                : base(output, z)\n            {\n                this.compress = compress;\n\n                /*\n                 * See discussion at http://www.bolet.org/~pornin/deflate-flush.html .\n                 */\n                this.FlushMode = JZlib.Z_SYNC_FLUSH;\n            }\n\n            public override void Flush()\n            {\n                /*\n                 * TODO The inflateSyncPoint doesn't appear to work the way I hoped at the moment.\n                 * In any case, we may like to accept PARTIAL_FLUSH input, not just SYNC_FLUSH.\n                 * It's not clear how to check this in the Inflater.\n                 */\n                //if (!this.compress && (z == null || z.istate == null || z.istate.inflateSyncPoint(z) <= 0))\n                //{\n                //    throw new TlsFatalAlert(AlertDescription.decompression_failure);\n                //}\n            }\n        }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        protected class DeflateOutputStream : ZOutputStream\n        {\n            public DeflateOutputStream(Stream output, ZStream z, bool compress)\n                : base(output, z)\n            {\n                this.compress = compress;\n\n                /*\n                 * See discussion at http://www.bolet.org/~pornin/deflate-flush.html .\n                 */\n                this.FlushMode = JZlib.Z_SYNC_FLUSH;\n            }\n\n            public override void Flush()\n            {\n                /*\n                 * TODO The inflateSyncPoint doesn't appear to work the way I hoped at the moment.\n                 * In any case, we may like to accept PARTIAL_FLUSH input, not just SYNC_FLUSH.\n                 * It's not clear how to check this in the Inflater.\n                 */\n                //if (!this.compress && (z == null || z.istate == null || z.istate.inflateSyncPoint(z) <= 0))\n                //{\n                //    throw new TlsFatalAlert(AlertDescription.decompression_failure);\n                //}\n            }\n        }\n\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class FileExtensionTests\n    {\n        [TestMethod]\n        public void MakeRelativePathShouldReturnRelativePath()\n        {\n            var path = FileExtensions.MakeRelativePath(@\"file://mystuff\\stuff\\assets\\test.txt\", @\"file://mystuff\\stuff\\test.txt\");\n            path.Should().Be(@\"../test.txt\");\n        }\n\n        [TestMethod]\n        public void MakeReleativePathShouldThrowWhenFirstArgNull()\n        {\n            Action act = () => FileExtensions.MakeRelativePath(null, @\"file://somestuff\");\n            act.Should().Throw<ArgumentNullException>().Where(e => e.ParamName == \"fromPath\");\n        }\n\n        [TestMethod]\n        public void MakeReleativePathShouldThrowWhenSecondeArgNull()\n        {\n            Action act = () => FileExtensions.MakeRelativePath(@\"file://somestuff\", null);\n            act.Should().Throw<ArgumentNullException>().Where(e => e.ParamName == \"toPath\");\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class FileExtensionTests\n    {\n        [TestMethod]\n        public void MakeRelativePathShouldReturnRelativePath()\n        {\n            var path = FileExtensions.MakeRelativePath(@\"file://mystuff\\stuff\\assets\\test.txt\", @\"file://mystuff\\stuff\\test.txt\");\n            path.Should().Be(@\"../test.txt\");\n        }\n\n        [TestMethod]\n        public void MakeReleativePathShouldThrowWhenFirstArgNull()\n        {\n            Action act = () => FileExtensions.MakeRelativePath(null, @\"file://somestuff\");\n            act.Should().Throw<ArgumentNullException>().Where(e => e.ParamName == \"fromPath\");\n        }\n\n        [TestMethod]\n        public void MakeReleativePathShouldThrowWhenSecondeArgNull()\n        {\n            Action act = () => FileExtensions.MakeRelativePath(@\"file://somestuff\", null);\n            act.Should().Throw<ArgumentNullException>().Where(e => e.ParamName == \"toPath\");\n        }\n    }\n\nAnswer: [Answer]\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]\n    public class CodeVariableReferenceExpression : CodeExpression\n    {\n    \n        public string VariableName\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n    \n        public CodeVariableReferenceExpression()\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeVariableReferenceExpression(string variableName)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Answer]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    [ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]\n    public class CodeVariableReferenceExpression : CodeExpression\n    {\n    \n        public string VariableName\n        {\n            get { throw new NotImplementedException(); }\n            set { throw new NotImplementedException(); }\n        }\n    \n    \n        public CodeVariableReferenceExpression()\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n        public CodeVariableReferenceExpression(string variableName)\n        {\n             throw new NotImplementedException();\n        }\n        \n        \n    }\n\nAnswer: [Answer]\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>Expresses a literal in the query.</summary>\n    [QueryComponentNavigator(typeof(ListNavigator))]\n    public class List : QueryComponent, IExpression\n    {\n        #region Fields\n        private IList<IExpression> _values;\n        #endregion\n\n        #region Constructors\n        /// <summary>Base parameterles constructor.</summary>\n        public List()\n            : base()\n        {\n            _values = new List<IExpression>();\n        }\n        #endregion\n\n        #region Properties\n        /// <summary>Gets a list of values.</summary>\n        public IList<IExpression> Values { get { return _values; } }\n        #endregion\n\n        #region Public methods\n        /// <summary>Creates a string representation of this literal.</summary>\n        /// <returns>String representation of this literal.</returns>\n        public override string ToString()\n        {\n            return System.String.Format(\"({0})\", System.String.Join(\" \", _values));\n        }\n\n        /// <summary>Determines whether the specified object is equal to the current object.</summary>\n        /// <param name=\"operand\">Type: <see cref=\"System.Object\" />\n        /// The object to compare with the current object.</param>\n        /// <returns>Type: <see cref=\"System.Boolean\" />\n        /// <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>\n        public override bool Equals([AllowNull] object operand)\n        {\n            return (!Object.Equals(op\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>Expresses a literal in the query.</summary>\n    [QueryComponentNavigator(typeof(ListNavigator))]\n    public class List : QueryComponent, IExpression\n    {\n        #region Fields\n        private IList<IExpression> _values;\n        #endregion\n\n        #region Constructors\n        /// <summary>Base parameterles constructor.</summary>\n        public List()\n            : base()\n        {\n            _values = new List<IExpression>();\n        }\n        #endregion\n\n        #region Properties\n        /// <summary>Gets a list of values.</summary>\n        public IList<IExpression> Values { get { return _values; } }\n        #endregion\n\n        #region Public methods\n        /// <summary>Creates a string representation of this literal.</summary>\n        /// <returns>String representation of this literal.</returns>\n        public override string ToString()\n        {\n            return System.String.Format(\"({0})\", System.String.Join(\" \", _values));\n        }\n\n        /// <summary>Determines whether the specified object is equal to the current object.</summary>\n        /// <param name=\"operand\">Type: <see cref=\"System.Object\" />\n        /// The object to compare with the current object.</param>\n        /// <returns>Type: <see cref=\"System.Boolean\" />\n        /// <b>true</b> if the specified object is equal to the current object; otherwise, <b>false</b>.</returns>\n        public override bool Equals([AllowNull] object operand)\n        {\n            return (!Object.Equals(op\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for retracting <a href='Proposal'>Proposal</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class RetractProposals : ProposalAction {\n\t\tprivate RetractionDetails retractionDetailsField;\n\n\t\t/// <summary><a href='RetractionDetails'>Details</a> describing why the <a\n\t\t/// href='Proposal'>Proposal</a> is being retracted.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic RetractionDetails retractionDetails {\n\t\t\tget {\n\t\t\t\treturn this.retractionDetailsField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.retractionDetailsField = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>The action used for retracting <a href='Proposal'>Proposal</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class RetractProposals : ProposalAction {\n\t\tprivate RetractionDetails retractionDetailsField;\n\n\t\t/// <summary><a href='RetractionDe\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for retracting <a href='Proposal'>Proposal</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class RetractProposals : ProposalAction {\n\t\tprivate RetractionDetails retractionDetailsField;\n\n\t\t/// <summary><a href='RetractionDetails'>Details</a> describing why the <a\n\t\t/// href='Proposal'>Proposal</a> is being retracted.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic RetractionDetails retractionDetails {\n\t\t\tget {\n\t\t\t\treturn this.retractionDetailsField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.retractionDetailsField = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>The action used for retracting <a href='Proposal'>Proposal</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class RetractProposals : ProposalAction {\n\t\tprivate RetractionDetails retractionDetailsField;\n\n\t\t/// <summary><a href='RetractionDe\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal class BTerOrders\n    {\n        /*[JsonProperty(\"result\")]\n        public string Result { get; set; }*/\n\n        [JsonProperty(\"asks\")]\n        public double[][] Asks { get; set; }\n\n        [JsonProperty(\"bids\")]\n        public double[][] Bids { get; set; }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    internal class BTerOrders\n    {\n        /*[JsonProperty(\"result\")]\n        public string Result { get; set; }*/\n\n        [JsonProperty(\"asks\")]\n        public double[][] Asks { get; set; }\n\n        [JsonProperty(\"bids\")]\n        public double[][] Bids { get; set; }\n    }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class Pipeline : IPipeline\n\t{\n\t\tpublic string Description { get; set; }\n\n\t\tpublic IEnumerable<IProcessor> OnFailure { get; set; }\n\n\t\tpublic IEnumerable<IProcessor> Processors { get; set; }\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\tpublic class Pipeline : IPipeline\n\t{\n\t\tpublic string Description { get; set; }\n\n\t\tpublic IEnumerable<IProcessor> OnFailure { get; set; }\n\n\t\tpublic IEnumerable<IProcessor> Processors { get; set; }\n\t}\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class EnumValueDescription\n    {\n        public string Documentation { get; set; }\n\n        public string Name { get; set; }\n\n        public string Value { get; set; }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class EnumValueDescription\n    {\n        public string Documentation { get; set; }\n\n        public string Name { get; set; }\n\n        public string Value { get; set; }\n    }\n\nAnswer: \n</think>\n\nThe provided C"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <inheritdoc cref=\"IGrokProcessor\" />\n\tpublic class GrokProcessorDescriptor<T>\n\t\t: ProcessorDescriptorBase<GrokProcessorDescriptor<T>, IGrokProcessor>, IGrokProcessor\n\t\twhere T : class\n\t{\n\t\tprotected override string Name => \"grok\";\n\n\t\tField IGrokProcessor.Field { get; set; }\n\t\tIDictionary<string, string> IGrokProcessor.PatternDefinitions { get; set; }\n\t\tIEnumerable<string> IGrokProcessor.Patterns { get; set; }\n\t\tbool? IGrokProcessor.TraceMatch { get; set; }\n\t\tbool? IGrokProcessor.IgnoreMissing { get; set; }\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Field\" />\n\t\tpublic GrokProcessorDescriptor<T> Field(Field field) => Assign(field, (a, v) => a.Field = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Field\" />\n\t\tpublic GrokProcessorDescriptor<T> Field<TValue>(Expression<Func<T, TValue>> objectPath) =>\n\t\t\tAssign(objectPath, (a, v) => a.Field = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Patterns\" />\n\t\tpublic GrokProcessorDescriptor<T> Patterns(IEnumerable<string> patterns) => Assign(patterns, (a, v) => a.Patterns = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Patterns\" />\n\t\tpublic GrokProcessorDescriptor<T> Patterns(params string[] patterns) => Assign(patterns, (a, v) => a.Patterns = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.PatternDefinitions\" />\n\t\tpublic GrokProcessorDescriptor<T> PatternDefinitions(\n\t\t\tFunc<FluentDictionary<string, string>, FluentDictionary<string, string>> patternDefinitions\n\t\t) =>\n\t\t\tAssign(patternDefinitions, (a, v) => a.PatternDefinitions = v?.Invoke(new Flu\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/// <inheritdoc cref=\"IGrokProcessor\" />\n\tpublic class GrokProcessorDescriptor<T>\n\t\t: ProcessorDescriptorBase<GrokProcessorDescriptor<T>, IGrokProcessor>, IGrokProcessor\n\t\twhere T : class\n\t{\n\t\tprotected override string Name => \"grok\";\n\n\t\tField IGrokProcessor.Field { get; set; }\n\t\tIDictionary<string, string> IGrokProcessor.PatternDefinitions { get; set; }\n\t\tIEnumerable<string> IGrokProcessor.Patterns { get; set; }\n\t\tbool? IGrokProcessor.TraceMatch { get; set; }\n\t\tbool? IGrokProcessor.IgnoreMissing { get; set; }\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Field\" />\n\t\tpublic GrokProcessorDescriptor<T> Field(Field field) => Assign(field, (a, v) => a.Field = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Field\" />\n\t\tpublic GrokProcessorDescriptor<T> Field<TValue>(Expression<Func<T, TValue>> objectPath) =>\n\t\t\tAssign(objectPath, (a, v) => a.Field = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Patterns\" />\n\t\tpublic GrokProcessorDescriptor<T> Patterns(IEnumerable<string> patterns) => Assign(patterns, (a, v) => a.Patterns = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.Patterns\" />\n\t\tpublic GrokProcessorDescriptor<T> Patterns(params string[] patterns) => Assign(patterns, (a, v) => a.Patterns = v);\n\n\t\t/// <inheritdoc cref=\"IGrokProcessor.PatternDefinitions\" />\n\t\tpublic GrokProcessorDescriptor<T> PatternDefinitions(\n\t\t\tFunc<FluentDictionary<string, string>, FluentDictionary<string, string>> patternDefinitions\n\t\t) =>\n\t\t\tAssign(patternDefinitions, (a, v) => a.PatternDefinitions = v?.Invoke(new Flu\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [KSPModule(\"Device: Clock\")]\n    public sealed class ModuleKetchupGenericClock : PartModule, IDevice\n    {\n        #region Constants\n\n        private const string ConfigKeyVersion = \"Version\";\n        private const string ConfigKeyIsClockEnabled = \"IsClockEnabled\";\n        private const string ConfigKeyPeriod = \"Period\";\n        private const string ConfigKeyElapsedTicks = \"ElapsedTicks\";\n        private const string ConfigKeyInterruptMessage = \"InterruptMessage\";\n        private const string ConfigKeyTimeUntilNextTick = \"TimeUntilNextTick\";\n        \n\n        private const uint ConfigVersion = 1;\n\n        #endregion\n\n        #region Instance Fields\n\n        private IDcpu16 _dcpu16;\n\n        private bool _isClockEnabled;\n        private float _period;\n        private ushort _elapsedTicks;\n        private ushort _interruptMessage;\n        private float _timeUntilNextTick;\n\n        #endregion\n\n        #region Device Identifiers\n\n        public string FriendlyName\n        {\n            get { return \"Generic Clock (compatible)\"; }\n        }\n\n        public uint ManufacturerId\n        {\n            get { return (uint)Constants.ManufacturerId.Unknown; }\n        }\n\n        public uint DeviceId\n        {\n            get { return (uint)Constants.DeviceId.GenericClock; }\n        }\n\n        public ushort Version\n        {\n            get { return 0x0001; }\n        }\n\n        public Port Port { get; set; }\n\n        #endregion\n\n        #region IDevice Methods\n\n        public void OnCon\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [KSPModule(\"Device: Clock\")]\n    public sealed class ModuleKetchupGenericClock : PartModule, IDevice\n    {\n        #region Constants\n\n        private const string ConfigKeyVersion = \"Version\";\n        private const string ConfigKeyIsClockEnabled = \"IsClockEnabled\";\n        private const string ConfigKeyPeriod = \"Period\";\n        private const string ConfigKeyElapsedTicks = \"ElapsedTicks\";\n        private const string ConfigKeyInterruptMessage = \"InterruptMessage\";\n        private const string ConfigKeyTimeUntilNextTick = \"TimeUntilNextTick\";\n        \n\n        private const uint ConfigVersion = 1;\n\n        #endregion\n\n        #region Instance Fields\n\n        private IDcpu16 _dcpu16;\n\n        private bool _isClockEnabled;\n        private float _period;\n        private ushort _elapsedTicks;\n        private ushort _interruptMessage;\n        private float _timeUntilNextTick;\n\n        #endregion\n\n        #region Device Identifiers\n\n        public string FriendlyName\n        {\n            get { return \"Generic Clock (compatible)\"; }\n        }\n\n        public uint ManufacturerId\n        {\n            get { return (uint)Constants.ManufacturerId.Unknown; }\n        }\n\n        public uint DeviceId\n        {\n            get { return (uint)Constants.DeviceId.GenericClock; }\n        }\n\n        public ushort Version\n        {\n            get { return 0x0001; }\n        }\n\n        public Port Port { get; set; }\n\n        #endregion\n\n        #region IDevice Methods\n\n        public void OnCon\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Generates model descriptions for given types.\n    /// </summary>\n    public class ModelDescriptionGenerator\n    {\n        // Modify this to support more data annotation attributes.\n        private readonly IDictionary<Type, Func<object, string>> AnnotationTextGenerator = new Dictionary<Type, Func<object, string>>\n        {\n            { typeof(RequiredAttribute), a => \"Required\" },\n            { typeof(RangeAttribute), a =>\n                {\n                    RangeAttribute range = (RangeAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Range: inclusive between {0} and {1}\", range.Minimum, range.Maximum);\n                }\n            },\n            { typeof(MaxLengthAttribute), a =>\n                {\n                    MaxLengthAttribute maxLength = (MaxLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Max length: {0}\", maxLength.Length);\n                }\n            },\n            { typeof(MinLengthAttribute), a =>\n                {\n                    MinLengthAttribute minLength = (MinLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Min length: {0}\", minLength.Length);\n                }\n            },\n            { typeof(StringLengthAttribute), a =>\n                {\n                    StringLengthAttribute strLength = (StringLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"String length: in\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ModelDescriptionGenerator",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Generates model descriptions for given types.\n    /// </summary>\n    public class ModelDescriptionGenerator\n    {\n        // Modify this to support more data annotation attributes.\n        private readonly IDictionary<Type, Func<object, string>> AnnotationTextGenerator = new Dictionary<Type, Func<object, string>>\n        {\n            { typeof(RequiredAttribute), a => \"Required\" },\n            { typeof(RangeAttribute), a =>\n                {\n                    RangeAttribute range = (RangeAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Range: inclusive between {0} and {1}\", range.Minimum, range.Maximum);\n                }\n            },\n            { typeof(MaxLengthAttribute), a =>\n                {\n                    MaxLengthAttribute maxLength = (MaxLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Max length: {0}\", maxLength.Length);\n                }\n            },\n            { typeof(MinLengthAttribute), a =>\n                {\n                    MinLengthAttribute minLength = (MinLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Min length: {0}\", minLength.Length);\n                }\n            },\n            { typeof(StringLengthAttribute), a =>\n                {\n                    StringLengthAttribute strLength = (StringLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"String length: in\nAnswer: ModelDescriptionGenerator\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>Defines how a method is implemented.</summary>\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    public enum MethodCodeType : int\n    {\n        /// <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>\n        IL = 0,\n        /// <summary>Specifies that the method is implemented in native code.</summary>\n        Native = 1,\n        /// <summary>Specifies that the method implementation is in optimized intermediate language (OPTIL).</summary>\n        OPTIL = 2,\n        /// <summary>Specifies that the method implementation is provided by the runtime.</summary>\n        Runtime = 3\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>Defines how a method is implemented.</summary>\n    [Serializable]\n    [ComVisibleAttribute(true)]\n    public enum MethodCodeType : int\n    {\n        /// <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>\n        IL = 0,\n        /// <summary>Specifies that the method is implemented in native code.</summary>\n        Native = 1,\n        /// <summary>Specifies that the method implementation is in optimized intermediate language (OPTIL).</summary>\n        OPTIL = 2,\n        /// <summary>Specifies that the method implementation is provided by the runtime.</summary>\n        Runtime = 3\n    }\n\nAnswer: [Answer: FeatureEnvy"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class ProgramPersistableOnlyAnnotationFacetFactoryTest : AbstractFacetFactoryTest {\n        private ProgramPersistableOnlyAnnotationFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get { return new[] {typeof (IProgramPersistableOnlyFacet)}; }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        [TestMethod]\n        public override void TestFeatureTypes() {\n            FeatureType featureTypes = facetFactory.FeatureTypes;\n            Assert.IsTrue(featureTypes.HasFlag(FeatureType.Objects));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Properties));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Collections));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Actions));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.ActionParameters));\n        }\n\n        [TestMethod]\n        public void TestProgramPersistableOnlyNotPickup() {\n            facetFactory.Process(Reflector, typeof (Customer1), MethodRemover, Specification);\n            IFacet facet = Specification.GetFacet(typeof (IProgramPersistableOnlyFacet));\n            Assert.IsNull(facet);\n            AssertNoMethodsRemoved();\n        }\n\n        [TestMethod]\n        public void TestProgramPersistableOnlyPickup() {\n            facetFactory.Process(Reflector, typeof (Customer), MethodRemover, Specification);\n            IFacet facet = Spe\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    [TestClass]\n    public class ProgramPersistableOnlyAnnotationFacetFactoryTest : AbstractFacetFactoryTest {\n        private ProgramPersistableOnlyAnnotationFacetFactory facetFactory;\n\n        protected override Type[] SupportedTypes {\n            get { return new[] {typeof (IProgramPersistableOnlyFacet)}; }\n        }\n\n        protected override IFacetFactory FacetFactory {\n            get { return facetFactory; }\n        }\n\n        [TestMethod]\n        public override void TestFeatureTypes() {\n            FeatureType featureTypes = facetFactory.FeatureTypes;\n            Assert.IsTrue(featureTypes.HasFlag(FeatureType.Objects));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Properties));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Collections));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.Actions));\n            Assert.IsFalse(featureTypes.HasFlag(FeatureType.ActionParameters));\n        }\n\n        [TestMethod]\n        public void TestProgramPersistableOnlyNotPickup() {\n            facetFactory.Process(Reflector, typeof (Customer1), MethodRemover, Specification);\n            IFacet facet = Specification.GetFacet(typeof (IProgramPersistableOnlyFacet));\n            Assert.IsNull(facet);\n            AssertNoMethodsRemoved();\n        }\n\n        [TestMethod]\n        public void TestProgramPersistableOnlyPickup() {\n            facetFactory.Process(Reflector, typeof (Customer), MethodRemover, Specification);\n            IFacet facet = Spe\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// Formula Expression Type\n/// </summary>\npublic enum FormulaExpressionValues\n{\n\t///<summary>\n///Reference.\n///<para>When the item is serialized out as xml, its value is \"ref\".</para>\n///</summary>\n[EnumString(\"ref\")]\nReference,\n///<summary>\n///Reference Is Error.\n///<para>When the item is serialized out as xml, its value is \"refError\".</para>\n///</summary>\n[EnumString(\"refError\")]\nReferenceError,\n///<summary>\n///Area.\n///<para>When the item is serialized out as xml, its value is \"area\".</para>\n///</summary>\n[EnumString(\"area\")]\nArea,\n///<summary>\n///Area Error.\n///<para>When the item is serialized out as xml, its value is \"areaError\".</para>\n///</summary>\n[EnumString(\"areaError\")]\nAreaError,\n///<summary>\n///Computed Area.\n///<para>When the item is serialized out as xml, its value is \"computedArea\".</para>\n///</summary>\n[EnumString(\"computedArea\")]\nComputedArea,\n\n}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[ComplexConditional_positive]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// Formula Expression Type\n/// </summary>\npublic enum FormulaExpressionValues\n{\n\t///<summary>\n///Reference.\n///<para>When the item is serialized out as xml, its value is \"ref\".</para>\n///</summary>\n[EnumString(\"ref\")]\nReference,\n///<summary>\n///Reference Is Error.\n///<para>When the item is serialized out as xml, its value is \"refError\".</para>\n///</summary>\n[EnumString(\"refError\")]\nReferenceError,\n///<summary>\n///Area.\n///<para>When the item is serialized out as xml, its value is \"area\".</para>\n///</summary>\n[EnumString(\"area\")]\nArea,\n///<summary>\n///Area Error.\n///<para>When the item is serialized out as xml, its value is \"areaError\".</para>\n///</summary>\n[EnumString(\"areaError\")]\nAreaError,\n///<summary>\n///Computed Area.\n///<para>When the item is serialized out as xml, its value is \"computedArea\".</para>\n///</summary>\n[EnumString(\"computedArea\")]\nComputedArea,\n\n}\n\nAnswer: [ComplexConditional_positive]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class OcspObjectIdentifiers\n    {\n        internal const string PkixOcspId = \"1.3.6.1.5.5.7.48.1\";\n\n\t\tpublic static readonly DerObjectIdentifier PkixOcsp = new DerObjectIdentifier(PkixOcspId);\n        public static readonly DerObjectIdentifier PkixOcspBasic = new DerObjectIdentifier(PkixOcspId + \".1\");\n\n\t\t//\n\t\t// extensions\n\t\t//\n\t\tpublic static readonly DerObjectIdentifier PkixOcspNonce = new DerObjectIdentifier(PkixOcsp + \".2\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspCrl = new DerObjectIdentifier(PkixOcsp + \".3\");\n\n\t\tpublic static readonly DerObjectIdentifier PkixOcspResponse = new DerObjectIdentifier(PkixOcsp + \".4\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspNocheck = new DerObjectIdentifier(PkixOcsp + \".5\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspArchiveCutoff = new DerObjectIdentifier(PkixOcsp + \".6\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspServiceLocator = new DerObjectIdentifier(PkixOcsp + \".7\");\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public abstract class OcspObjectIdentifiers\n    {\n        internal const string PkixOcspId = \"1.3.6.1.5.5.7.48.1\";\n\n\t\tpublic static readonly DerObjectIdentifier PkixOcsp = new DerObjectIdentifier(PkixOcspId);\n        public static readonly DerObjectIdentifier PkixOcspBasic = new DerObjectIdentifier(PkixOcspId + \".1\");\n\n\t\t//\n\t\t// extensions\n\t\t//\n\t\tpublic static readonly DerObjectIdentifier PkixOcspNonce = new DerObjectIdentifier(PkixOcsp + \".2\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspCrl = new DerObjectIdentifier(PkixOcsp + \".3\");\n\n\t\tpublic static readonly DerObjectIdentifier PkixOcspResponse = new DerObjectIdentifier(PkixOcsp + \".4\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspNocheck = new DerObjectIdentifier(PkixOcsp + \".5\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspArchiveCutoff = new DerObjectIdentifier(PkixOcsp + \".6\");\n\t\tpublic static readonly DerObjectIdentifier PkixOcspServiceLocator = new DerObjectIdentifier(PkixOcsp + \".7\");\n\t}\n\nAnswer: [Your Answer]\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Structure for storing lightweight color info and transformation from and to spring format\n    /// </summary>\n    public struct MyCol\n    {\n        /************************************************************************/\n        /*   PUBLIC ATTRIBS                                                     */\n        /************************************************************************/\n\n        public byte B;\n        public byte G;\n        public byte R;\n\n        /************************************************************************/\n        /*   PUBLIC METHODS                                                     */\n        /************************************************************************/\n\n        public MyCol(byte r, byte g, byte b)\n        {\n            R = r;\n            G = g;\n            B = b;\n        }\n\n        /// <summary>\n        /// This method calculates visual apparent \"distance\" of colors\n        /// </summary>\n        /// <param name=\"e1\">first color to compare</param>\n        /// <param name=\"e2\">second color to compare</param>\n        /// <returns>Return number representing distance .. values under 30 000 or so seems similar</returns>\n        public static int Distance(MyCol e1, MyCol e2)\n        {\n            int r, g, b;\n            int rmean;\n            rmean = (e1.R + e2.R)/2;\n            r = e1.R - e2.R;\n            g = e1.G - e2.G;\n            b = e1.B - e2.B;\n            return (((512 + rmean)*r*r) >> 8) + 4*g*g + (\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexMethod_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Structure for storing lightweight color info and transformation from and to spring format\n    /// </summary>\n    public struct MyCol\n    {\n        /************************************************************************/\n        /*   PUBLIC ATTRIBS                                                     */\n        /************************************************************************/\n\n        public byte B;\n        public byte G;\n        public byte R;\n\n        /************************************************************************/\n        /*   PUBLIC METHODS                                                     */\n        /************************************************************************/\n\n        public MyCol(byte r, byte g, byte b)\n        {\n            R = r;\n            G = g;\n            B = b;\n        }\n\n        /// <summary>\n        /// This method calculates visual apparent \"distance\" of colors\n        /// </summary>\n        /// <param name=\"e1\">first color to compare</param>\n        /// <param name=\"e2\">second color to compare</param>\n        /// <returns>Return number representing distance .. values under 30 000 or so seems similar</returns>\n        public static int Distance(MyCol e1, MyCol e2)\n        {\n            int r, g, b;\n            int rmean;\n            rmean = (e1.R + e2.R)/2;\n            r = e1.R - e2.R;\n            g = e1.G - e2.G;\n            b = e1.B - e2.B;\n            return (((512 + rmean)*r*r) >> 8) + 4*g*g + (\nAnswer: ComplexMethod_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>A <code>Creative</code> that is created by the specified creative template.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class TemplateCreative : Creative {\n\t\tprivate long creativeTemplateIdField;\n\n\t\tprivate bool creativeTemplateIdFieldSpecified;\n\n\t\tprivate bool isInterstitialField;\n\n\t\tprivate bool isInterstitialFieldSpecified;\n\n\t\tprivate bool isNativeEligibleField;\n\n\t\tprivate bool isNativeEligibleFieldSpecified;\n\n\t\tprivate bool isSafeFrameCompatibleField;\n\n\t\tprivate bool isSafeFrameCompatibleFieldSpecified;\n\n\t\tprivate string destinationUrlField;\n\n\t\tprivate BaseCreativeTemplateVariableValue[] creativeTemplateVariableValuesField;\n\n\t\tprivate SslScanResult sslScanResultField;\n\n\t\tprivate bool sslScanResultFieldSpecified;\n\n\t\tprivate SslManualOverride sslManualOverrideField;\n\n\t\tprivate bool sslManualOverrideFieldSpecified;\n\n\t\tprivate LockedOrientation lockedOrientationField;\n\n\t\tprivate bool lockedOrientationFieldSpecified;\n\n\t\t/// <summary>Creative template ID that this creative is created from.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic long creativeTemplateId {\n\t\t\tget {\n\t\t\t\treturn this.creativeTemplateIdField;\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>A <code>Creative</code> that is created by the specified creative template.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class TemplateCreative : Creative {\n\t\tprivate long creativeTemplateIdField;\n\n\t\tprivate bool creativeTemplateIdFieldSpecified;\n\n\t\tprivate bool isInterstitialField;\n\n\t\tprivate bool isInterstitialFieldSpecified;\n\n\t\tprivate bool isNativeEligibleField;\n\n\t\tprivate bool isNativeEligibleFieldSpecified;\n\n\t\tprivate bool isSafeFrameCompatibleField;\n\n\t\tprivate bool isSafeFrameCompatibleFieldSpecified;\n\n\t\tprivate string destinationUrlField;\n\n\t\tprivate BaseCreativeTemplateVariableValue[] creativeTemplateVariableValuesField;\n\n\t\tprivate SslScanResult sslScanResultField;\n\n\t\tprivate bool sslScanResultFieldSpecified;\n\n\t\tprivate SslManualOverride sslManualOverrideField;\n\n\t\tprivate bool sslManualOverrideFieldSpecified;\n\n\t\tprivate LockedOrientation lockedOrientationField;\n\n\t\tprivate bool lockedOrientationFieldSpecified;\n\n\t\t/// <summary>Creative template ID that this creative is created from.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic long creativeTemplateId {\n\t\t\tget {\n\t\t\t\treturn this.creativeTemplateIdField;\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public interface TlsHandshakeHash\n        :   IDigest\n    {\n        void Init(TlsContext context);\n\n        TlsHandshakeHash NotifyPrfDetermined();\n\n        void TrackHashAlgorithm(byte hashAlgorithm);\n\n        void SealHashAlgorithms();\n\n        TlsHandshakeHash StopTracking();\n\n        IDigest ForkPrfHash();\n\n        byte[] GetFinalHash(byte hashAlgorithm);\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public interface TlsHandshakeHash\n        :   IDigest\n    {\n        void Init(TlsContext context);\n\n        TlsHandshakeHash NotifyPrfDetermined();\n\n        void TrackHashAlgorithm(byte hashAlgorithm);\n\n        void SealHashAlgorithms();\n\n        TlsHandshakeHash StopTracking();\n\n        IDigest ForkPrfHash();\n\n        byte[] GetFinalHash(byte hashAlgorithm);\n    }\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class ArtistRes {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal ArtistRes() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::Sys\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class ArtistRes {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal ArtistRes() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::Sys\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public static class Async {\n        public static async Task<TReturn> Using<TResource, TReturn>(TResource resource, Func<TResource, Task<TReturn>> body)\n            where TResource : IAsyncDisposable {\n            Exception exception = null;\n            var result = default(TReturn);\n            try {\n                result = await body(resource).AnyContext();\n            } catch (Exception ex) {\n                exception = ex;\n            }\n\n            await resource.DisposeAsync().AnyContext();\n            if (exception != null) {\n                var info = ExceptionDispatchInfo.Capture(exception);\n                info.Throw();\n            }\n\n            return result;\n        }\n\n        public static Task Using<TResource>(TResource resource, Func<Task> body) where TResource : IAsyncDisposable {\n            return Using(resource, r => body());\n        }\n\n        public static Task Using<TResource>(TResource resource, Action body) where TResource : IAsyncDisposable {\n            return Using(resource, r => {\n                body();\n                return Task.CompletedTask;\n            });\n        }\n\n        public static Task Using<TResource>(TResource resource, Func<TResource, Task> body) where TResource : IAsyncDisposable {\n            return Using(resource, async r => {\n                await body(resource).AnyContext();\n                return Task.CompletedTask;\n            });\n        }\n\n        public static Task<TReturn> Using<TResource, TReturn>(TResource resou\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public static class Async {\n        public static async Task<TReturn> Using<TResource, TReturn>(TResource resource, Func<TResource, Task<TReturn>> body)\n            where TResource : IAsyncDisposable {\n            Exception exception = null;\n            var result = default(TReturn);\n            try {\n                result = await body(resource).AnyContext();\n            } catch (Exception ex) {\n                exception = ex;\n            }\n\n            await resource.DisposeAsync().AnyContext();\n            if (exception != null) {\n                var info = ExceptionDispatchInfo.Capture(exception);\n                info.Throw();\n            }\n\n            return result;\n        }\n\n        public static Task Using<TResource>(TResource resource, Func<Task> body) where TResource : IAsyncDisposable {\n            return Using(resource, r => body());\n        }\n\n        public static Task Using<TResource>(TResource resource, Action body) where TResource : IAsyncDisposable {\n            return Using(resource, r => {\n                body();\n                return Task.CompletedTask;\n            });\n        }\n\n        public static Task Using<TResource>(TResource resource, Func<TResource, Task> body) where TResource : IAsyncDisposable {\n            return Using(resource, async r => {\n                await body(resource).AnyContext();\n                return Task.CompletedTask;\n            });\n        }\n\n        public static Task<TReturn> Using<TResource, TReturn>(TResource resou\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n   class MonthWithAssociatedBinderParameterBinder : ParameterBinder {\n\n      public override Type ParameterType {\n         get { return typeof(MonthWithAssociatedBinder); }\n      }\n\n      public override bool TryBind(string value, IFormatProvider provider, out object result) {\n\n         result = null;\n\n         MonthWithAssociatedBinder r;\n\n         bool success = MonthWithAssociatedBinder.TryParse(value, out r);\n\n         if (success) {\n            result = r;\n         }\n\n         return success;\n      }\n   }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n   class MonthWithAssociatedBinderParameterBinder : ParameterBinder {\n\n      public override Type ParameterType {\n         get { return typeof(MonthWithAssociatedBinder); }\n      }\n\n      public override bool TryBind(string value, IFormatProvider provider, out object result) {\n\n         result = null;\n\n         MonthWithAssociatedBinder r;\n\n         bool success = MonthWithAssociatedBinder.TryParse(value, out r);\n\n         if (success) {\n            result = r;\n         }\n\n         return success;\n      }\n   }\n\nAnswer: ___________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Provides line items the ability to target or exclude users' mobile applications.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class MobileApplicationTargeting {\n\t\tprivate long[] mobileApplicationIdsField;\n\n\t\tprivate bool isTargetedField;\n\n\t\tprivate bool isTargetedFieldSpecified;\n\n\t\t/// <summary>The <a href='MobileApplication#id'>IDs</a> that are being targeted or excluded\n\t\t/// by the <a href='LineItem'>LineItem</a>.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(\"mobileApplicationIds\", Order = 0)]\n\t\tpublic long[] mobileApplicationIds {\n\t\t\tget {\n\t\t\t\treturn this.mobileApplicationIdsField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.mobileApplicationIdsField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>Indicates whether mobile apps should be targeted or excluded. This attribute is\n\t\t/// optional and defaults to <code>true</code>.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 1)]\n\t\tpublic bool isTargeted {\n\t\t\tget {\n\t\t\t\treturn this.isTargetedField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.isTargetedField = value;\n\t\t\t\tthis.isTargetedSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"isTargeted\"\n\t\t/// />, <co\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Provides line items the ability to target or exclude users' mobile applications.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class MobileApplicationTargeting {\n\t\tprivate long[] mobileApplicationIdsField;\n\n\t\tprivate bool isTargetedField;\n\n\t\tprivate bool isTargetedFieldSpecified;\n\n\t\t/// <summary>The <a href='MobileApplication#id'>IDs</a> that are being targeted or excluded\n\t\t/// by the <a href='LineItem'>LineItem</a>.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(\"mobileApplicationIds\", Order = 0)]\n\t\tpublic long[] mobileApplicationIds {\n\t\t\tget {\n\t\t\t\treturn this.mobileApplicationIdsField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.mobileApplicationIdsField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>Indicates whether mobile apps should be targeted or excluded. This attribute is\n\t\t/// optional and defaults to <code>true</code>.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 1)]\n\t\tpublic bool isTargeted {\n\t\t\tget {\n\t\t\t\treturn this.isTargetedField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.isTargetedField = value;\n\t\t\t\tthis.isTargetedSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"isTargeted\"\n\t\t/// />, <co\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents an Info log event.\n    /// </summary>\n    public class Info : LogEvent\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"Info\" /> class.\n        /// </summary>\n        /// <param name=\"logSource\">The log source.</param>\n        /// <param name=\"logClass\">The log class.</param>\n        /// <param name=\"message\">The message.</param>\n        public Info(string logSource, Type logClass, object message)\n        {\n            LogSource = logSource;\n            LogClass = logClass;\n            Message = message;\n        }\n\n        public override LogLevel LogLevel()\n        {\n            return Event.LogLevel.InfoLevel;\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents an Info log event.\n    /// </summary>\n    public class Info : LogEvent\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"Info\" /> class.\n        /// </summary>\n        /// <param name=\"logSource\">The log source.</param>\n        /// <param name=\"logClass\">The log class.</param>\n        /// <param name=\"message\">The message.</param>\n        public Info(string logSource, Type logClass, object message)\n        {\n            LogSource = logSource;\n            LogClass = logClass;\n            Message = message;\n        }\n\n        public override LogLevel LogLevel()\n        {\n            return Event.LogLevel.InfoLevel;\n        }\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    static class Program\n    {\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            //enable application styles\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n\n            //add header to log file\n            string dat = Environment.NewLine;\n            for (int i = 0; i < 80; ++i) dat += '*';\n            dat += Environment.NewLine;\n            System.IO.File.AppendAllText(LocalDirectory.GetLogFile(), dat);\n\n            //load user-names\n            LocalDatabase.usernames = RegistryAccess.GetAllUsers();\n            if (string.IsNullOrEmpty(RegistryAccess.DefaultUsername) ||\n                Properties.Settings.Default.AskForUsernameEverytime)\n            {\n                UsernameForm uf = new UsernameForm();\n                Application.Run(uf);\n            }\n\n            //task queue\n            TaskQueue.StartTimer();\n\n            //try\n            {\n                //launch application\n                Interactivity.mainForm = new MainForm();\n                Application.Run(Interactivity.mainForm);\n            }\n            //catch (Exception ex)\n            {\n                //Logger.Add(\"Error in main form => \", ex.Message + \" => \" + ex.StackTrace);\n                //Application.Exit();\n            }\n\n            //end of application works\n            Interactivity.CloseAllOpenedForms();\n      \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    static class Program\n    {\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            //enable application styles\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n\n            //add header to log file\n            string dat = Environment.NewLine;\n            for (int i = 0; i < 80; ++i) dat += '*';\n            dat += Environment.NewLine;\n            System.IO.File.AppendAllText(LocalDirectory.GetLogFile(), dat);\n\n            //load user-names\n            LocalDatabase.usernames = RegistryAccess.GetAllUsers();\n            if (string.IsNullOrEmpty(RegistryAccess.DefaultUsername) ||\n                Properties.Settings.Default.AskForUsernameEverytime)\n            {\n                UsernameForm uf = new UsernameForm();\n                Application.Run(uf);\n            }\n\n            //task queue\n            TaskQueue.StartTimer();\n\n            //try\n            {\n                //launch application\n                Interactivity.mainForm = new MainForm();\n                Application.Run(Interactivity.mainForm);\n            }\n            //catch (Exception ex)\n            {\n                //Logger.Add(\"Error in main form => \", ex.Message + \" => \" + ex.StackTrace);\n                //Application.Exit();\n            }\n\n            //end of application works\n            Interactivity.CloseAllOpenedForms();\n      \nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents the result of performing an action on objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class UpdateResult {\n\t\tprivate int numChangesField;\n\n\t\tprivate bool numChangesFieldSpecified;\n\n\t\t/// <summary>The number of objects that were changed as a result of performing the action.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic int numChanges {\n\t\t\tget {\n\t\t\t\treturn this.numChangesField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.numChangesField = value;\n\t\t\t\tthis.numChangesSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"numChanges\"\n\t\t/// />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool numChangesSpecified {\n\t\t\tget {\n\t\t\t\treturn this.numChangesFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.numChangesFieldSpecified = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>Represents the result of performing an action on objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttri\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents the result of performing an action on objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class UpdateResult {\n\t\tprivate int numChangesField;\n\n\t\tprivate bool numChangesFieldSpecified;\n\n\t\t/// <summary>The number of objects that were changed as a result of performing the action.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic int numChanges {\n\t\t\tget {\n\t\t\t\treturn this.numChangesField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.numChangesField = value;\n\t\t\t\tthis.numChangesSpecified = true;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary> <code>true</code>, if a value is specified for <see cref=\"numChanges\"\n\t\t/// />, <code>false</code> otherwise. </summary>\n\t\t[System.Xml.Serialization.XmlIgnoreAttribute()]\n\t\t[EditorBrowsable(EditorBrowsableState.Never)]\n\t\tpublic bool numChangesSpecified {\n\t\t\tget {\n\t\t\t\treturn this.numChangesFieldSpecified;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.numChangesFieldSpecified = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>Represents the result of performing an action on objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttri\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public sealed class VoSOrderId : AbstractIntBasedId, OrderId\n    {\n        public VoSOrderId(int value) : base (value)\n        {\n        }\n\n        public KeyValuePair<string, string> KeyValuePair\n        {\n            get\n            {\n                return new KeyValuePair<string, string>(\"order_id\", this.Value.ToString());\n            }\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public sealed class VoSOrderId : AbstractIntBasedId, OrderId\n    {\n        public VoSOrderId(int value) : base (value)\n        {\n        }\n\n        public KeyValuePair<string, string> KeyValuePair\n        {\n            get\n            {\n                return new KeyValuePair<string, string>(\"order_id\", this.Value.ToString());\n            }\n        }\n    }\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public interface IWebHookRepository : IRepositoryOwnedByOrganizationAndProject<WebHook> {\n        Task<FindResults<WebHook>> GetByUrlAsync(string targetUrl);\n        Task<FindResults<WebHook>> GetByOrganizationIdOrProjectIdAsync(string organizationId, string projectId);\n        Task MarkDisabledAsync(string id);\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public interface IWebHookRepository : IRepositoryOwnedByOrganizationAndProject<WebHook> {\n        Task<FindResults<WebHook>> GetByUrlAsync(string targetUrl);\n        Task<FindResults<WebHook>> GetByOrganizationIdOrProjectIdAsync(string organizationId, string projectId);\n        Task MarkDisabledAsync(string id);\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateReconciliationOrderReportsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateReconciliationOrderReportsResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.ReconciliationOrderReport[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationOrderReportsResponse\"/> class. </summary>\n\t\t\tpublic updateReconciliationOrderReportsResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationOrderReportsResponse\"/> class. </summary>\n\t\t\tpublic updateReconciliationOrderReportsResponse(Google.Api.Ads.AdManager.v201811.ReconciliationOrderReport[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.Service\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateReconciliationOrderReportsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateReconciliationOrderReportsResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.ReconciliationOrderReport[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationOrderReportsResponse\"/> class. </summary>\n\t\t\tpublic updateReconciliationOrderReportsResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see\n\t\t\t/// cref=\"updateReconciliationOrderReportsResponse\"/> class. </summary>\n\t\t\tpublic updateReconciliationOrderReportsResponse(Google.Api.Ads.AdManager.v201811.ReconciliationOrderReport[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.Service\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public enum MyEnum\n    {\n        A = 2,\n        B = 3,\n        C = 4\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public enum MyEnum\n    {\n        A = 2,\n        B = 3,\n        C = 4\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The status of the workflow approval request.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum WorkflowApprovalRequestStatus {\n\t\t/// <summary>The request is pending approval.\n\t\t/// </summary>\n\t\tPENDING_APPROVAL = 0,\n\t\t/// <summary>The workflow approval request has been approved.\n\t\t/// </summary>\n\t\tAPPROVED = 1,\n\t\t/// <summary>The workflow approval request has been rejected.\n\t\t/// </summary>\n\t\tREJECTED = 2,\n\t\t/// <summary>The workflow request was retracted because the proposal was retracted.\n\t\t/// </summary>\n\t\tRETRACTED = 3,\n\t\t/// <summary>The entity might have a non-applicable status in several scenarios: <ul\n\t\t/// class=\"noindent\"> <li>The <a href='User'>User</a> is not an approver when\n\t\t/// querying the <code>ApprovalStatus</code> of an action.</li> <li>The <a\n\t\t/// href='User'>User</a> is not an approver of any actions within the <a\n\t\t/// href='Proposal#workflowProgress'>Proposal#workflowProgress</a>.</li>\n\t\t/// <li>Querying for the <code>ApprovalStatus</code> for a <a\n\t\t/// href='ProposalStatus#DRAFT'>ProposalStatus#DRAFT</a> <a\n\t\t/// href='Proposal'>Proposal</a>.</li> </ul>\n\t\t/// </summary>\n\t\tNOT_APPLICABLE = 5,\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 4,\n\t}\n\n\n\t/// <su\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The status of the workflow approval request.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum WorkflowApprovalRequestStatus {\n\t\t/// <summary>The request is pending approval.\n\t\t/// </summary>\n\t\tPENDING_APPROVAL = 0,\n\t\t/// <summary>The workflow approval request has been approved.\n\t\t/// </summary>\n\t\tAPPROVED = 1,\n\t\t/// <summary>The workflow approval request has been rejected.\n\t\t/// </summary>\n\t\tREJECTED = 2,\n\t\t/// <summary>The workflow request was retracted because the proposal was retracted.\n\t\t/// </summary>\n\t\tRETRACTED = 3,\n\t\t/// <summary>The entity might have a non-applicable status in several scenarios: <ul\n\t\t/// class=\"noindent\"> <li>The <a href='User'>User</a> is not an approver when\n\t\t/// querying the <code>ApprovalStatus</code> of an action.</li> <li>The <a\n\t\t/// href='User'>User</a> is not an approver of any actions within the <a\n\t\t/// href='Proposal#workflowProgress'>Proposal#workflowProgress</a>.</li>\n\t\t/// <li>Querying for the <code>ApprovalStatus</code> for a <a\n\t\t/// href='ProposalStatus#DRAFT'>ProposalStatus#DRAFT</a> <a\n\t\t/// href='Proposal'>Proposal</a>.</li> </ul>\n\t\t/// </summary>\n\t\tNOT_APPLICABLE = 5,\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 4,\n\t}\n\n\n\t/// <su\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>OLAP KPI.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is x:kpi.</para>\n/// </summary>\n\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(22, \"kpi\")]\npublic partial class Kpi : OpenXmlLeafElement\n{\n    \n        /// <summary>\n    /// <para> KPI Unique Name.</para>\n    /// <para>Represents the following attribute in the schema: uniqueName </para>\n    /// </summary>\n[RequiredValidator]\n    [SchemaAttr(0, \"uniqueName\")]\n    [Index(0)]\n    public StringValue UniqueName { get; set; }\n    /// <summary>\n    /// <para> KPI Display Name.</para>\n    /// <para>Represents the following attribute in the schema: caption </para>\n    /// </summary>\n[RequiredValidator]\n    [SchemaAttr(0, \"caption\")]\n    [Index(1)]\n    public StringValue Caption { get; set; }\n    /// <summary>\n    /// <para> KPI Display Folder.</para>\n    /// <para>Represents the following attribute in the schema: displayFolder </para>\n    /// </summary>\n    [SchemaAttr(0, \"displayFolder\")]\n    [Index(2)]\n    public StringValue DisplayFolder { get; set; }\n    /// <summary>\n    /// <para> KPI Measure Group Name.</para>\n    /// <para>Represents the following attribute in the schema: measureGroup </para>\n    /// </summary>\n    [SchemaAttr(0, \"measureGroup\")]\n    [Index(3)]\n    public StringValue MeasureGroup { get; set; }\n    /// <summary>\n    /// <para> Parent KPI.</para>\n    /// <para>Represe\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>OLAP KPI.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is x:kpi.</para>\n/// </summary>\n\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(22, \"kpi\")]\npublic partial class Kpi : OpenXmlLeafElement\n{\n    \n        /// <summary>\n    /// <para> KPI Unique Name.</para>\n    /// <para>Represents the following attribute in the schema: uniqueName </para>\n    /// </summary>\n[RequiredValidator]\n    [SchemaAttr(0, \"uniqueName\")]\n    [Index(0)]\n    public StringValue UniqueName { get; set; }\n    /// <summary>\n    /// <para> KPI Display Name.</para>\n    /// <para>Represents the following attribute in the schema: caption </para>\n    /// </summary>\n[RequiredValidator]\n    [SchemaAttr(0, \"caption\")]\n    [Index(1)]\n    public StringValue Caption { get; set; }\n    /// <summary>\n    /// <para> KPI Display Folder.</para>\n    /// <para>Represents the following attribute in the schema: displayFolder </para>\n    /// </summary>\n    [SchemaAttr(0, \"displayFolder\")]\n    [Index(2)]\n    public StringValue DisplayFolder { get; set; }\n    /// <summary>\n    /// <para> KPI Measure Group Name.</para>\n    /// <para>Represents the following attribute in the schema: measureGroup </para>\n    /// </summary>\n    [SchemaAttr(0, \"measureGroup\")]\n    [Index(3)]\n    public StringValue MeasureGroup { get; set; }\n    /// <summary>\n    /// <para> Parent KPI.</para>\n    /// <para>Represe\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Contains a number of different claims sets used to test round tripping claims sets.\n    /// </summary>\n    public static class ClaimSets\n    {\n        static ClaimSets()\n        {\n#if !CrossVersionTokenValidation\n            AllReserved = new List<Claim>()\n            {\n                new Claim(JwtRegisteredClaimNames.Actort, \"TOKEN\"),\n                new Claim(JwtRegisteredClaimNames.Aud, \"audClaimSets.Value\"),\n                new Claim(JwtHeaderParameterNames.Typ, \"BADDTYPE\"),\n                new Claim(JwtRegisteredClaimNames.Exp, \"BADDATEFORMAT\"),\n                new Claim(JwtRegisteredClaimNames.Iat, \"issuedatClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Iss, \"issuerClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Jti, \"jwtIdClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Nbf, \"BADDATEFORMAT\"),\n                new Claim(JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(DateTime.UtcNow + TimeSpan.FromHours(1)).ToString()),\n                new Claim(JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(DateTime.UtcNow).ToString()),\n                new Claim(JwtRegisteredClaimNames.Prn, \"princlipalClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Sub, \"Subject.Value\"),\n                new Claim(JwtRegisteredClaimNames.Typ, \"Type.Value\"),\n            };\n#endif\n\n            DefaultClaims = new List<Claim>\n            {\n                new Claim(ClaimTypes.Country, \"USA\", \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    /// <summary>\n    /// Contains a number of different claims sets used to test round tripping claims sets.\n    /// </summary>\n    public static class ClaimSets\n    {\n        static ClaimSets()\n        {\n#if !CrossVersionTokenValidation\n            AllReserved = new List<Claim>()\n            {\n                new Claim(JwtRegisteredClaimNames.Actort, \"TOKEN\"),\n                new Claim(JwtRegisteredClaimNames.Aud, \"audClaimSets.Value\"),\n                new Claim(JwtHeaderParameterNames.Typ, \"BADDTYPE\"),\n                new Claim(JwtRegisteredClaimNames.Exp, \"BADDATEFORMAT\"),\n                new Claim(JwtRegisteredClaimNames.Iat, \"issuedatClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Iss, \"issuerClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Jti, \"jwtIdClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Nbf, \"BADDATEFORMAT\"),\n                new Claim(JwtRegisteredClaimNames.Exp, EpochTime.GetIntDate(DateTime.UtcNow + TimeSpan.FromHours(1)).ToString()),\n                new Claim(JwtRegisteredClaimNames.Nbf, EpochTime.GetIntDate(DateTime.UtcNow).ToString()),\n                new Claim(JwtRegisteredClaimNames.Prn, \"princlipalClaimSets.Value\"),\n                new Claim(JwtRegisteredClaimNames.Sub, \"Subject.Value\"),\n                new Claim(JwtRegisteredClaimNames.Typ, \"Type.Value\"),\n            };\n#endif\n\n            DefaultClaims = new List<Claim>\n            {\n                new Claim(ClaimTypes.Country, \"USA\", \nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t#region Enums\n\t/// <summary>\n\t///     Summary description for MobileAI.\n\t/// </summary>\n\tpublic enum FightMode\n\t{\n\t\tNone, // Never focus on others\n\t\tAggressor, // Only attack aggressors\n\t\tStrongest, // Attack the strongest\n\t\tWeakest, // Attack the weakest\n\t\tClosest, // Attack the closest\n\t\tEvil // Only attack aggressor -or- negative karma\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "Ansswer:",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t#region Enums\n\t/// <summary>\n\t///     Summary description for MobileAI.\n\t/// </summary>\n\tpublic enum FightMode\n\t{\n\t\tNone, // Never focus on others\n\t\tAggressor, // Only attack aggressors\n\t\tStrongest, // Attack the strongest\n\t\tWeakest, // Attack the weakest\n\t\tClosest, // Attack the closest\n\t\tEvil // Only attack aggressor -or- negative karma\n\t}\n\nAnswer: Ansswer: ComplexConditional"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public enum PrefixOrigin : int\n    {\n        Other = 0,\n        Manual = 1,\n        WellKnown = 2,\n        Dhcp = 3,\n        RouterAdvertisement = 4\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public enum PrefixOrigin : int\n    {\n        Other = 0,\n        Manual = 1,\n        WellKnown = 2,\n        Dhcp = 3,\n        RouterAdvertisement = 4\n    }\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activatin\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activating <a href='Label'>Label</a> objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201905\")]\n\tpublic partial class ActivateLabels : LabelAction {\n\t}\n\n\n\t/// <summary>The action used for activatin\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class GifHelper : GifHelperBase<Bitmap>\n\t\t{\n\t\t\tprotected override Bitmap GetNextBitmap()\n\t\t\t{\n\t\t\t\tvar config = IsFirstFrameTransparent == null || IsFirstFrameTransparent.Value\n\t\t\t\t\t? Bitmap.Config.Argb8888 : Bitmap.Config.Rgb565;\n\t\t\t\tvar result = Bitmap.CreateBitmap(DownsampledWidth, DownsampledHeight, config);\n\t\t\t\tresult.HasAlpha = config == Bitmap.Config.Argb8888;\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tprotected override void GetPixels(Bitmap bitmap, int[] pixels, int width, int height)\n\t\t\t{\n\t\t\t\tbitmap.GetPixels(pixels, 0, width, 0, 0, width, height);\n\t\t\t}\n\n\t\t\tprotected override void Release(Bitmap bitmap)\n\t\t\t{\n\t\t\t\tbitmap?.Recycle();\n\t\t\t}\n\n\t\t\tprotected override void SetPixels(Bitmap bitmap, int[] pixels, int width, int height)\n\t\t\t{\n\t\t\t\tbitmap.SetPixels(pixels, 0, width, 0, 0, width, height);\n\t\t\t}\n\t\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "GifHelper",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class GifHelper : GifHelperBase<Bitmap>\n\t\t{\n\t\t\tprotected override Bitmap GetNextBitmap()\n\t\t\t{\n\t\t\t\tvar config = IsFirstFrameTransparent == null || IsFirstFrameTransparent.Value\n\t\t\t\t\t? Bitmap.Config.Argb8888 : Bitmap.Config.Rgb565;\n\t\t\t\tvar result = Bitmap.CreateBitmap(DownsampledWidth, DownsampledHeight, config);\n\t\t\t\tresult.HasAlpha = config == Bitmap.Config.Argb8888;\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tprotected override void GetPixels(Bitmap bitmap, int[] pixels, int width, int height)\n\t\t\t{\n\t\t\t\tbitmap.GetPixels(pixels, 0, width, 0, 0, width, height);\n\t\t\t}\n\n\t\t\tprotected override void Release(Bitmap bitmap)\n\t\t\t{\n\t\t\t\tbitmap?.Recycle();\n\t\t\t}\n\n\t\t\tprotected override void SetPixels(Bitmap bitmap, int[] pixels, int width, int height)\n\t\t\t{\n\t\t\t\tbitmap.SetPixels(pixels, 0, width, 0, 0, width, height);\n\t\t\t}\n\t\t}\n\nAnswer: GifHelper is a class"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        #region device-group-full\n        public sealed class RequestDeviceList\n        {\n            public RequestDeviceList(long requestId)\n            {\n                RequestId = requestId;\n            }\n\n            public long RequestId { get; }\n        }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "Simple",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n        #region device-group-full\n        public sealed class RequestDeviceList\n        {\n            public RequestDeviceList(long requestId)\n            {\n                RequestId = requestId;\n            }\n\n            public long RequestId { get; }\n        }\n\nAnswer: \n</think>\n\nAnswer: Simple"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class SqlJoinClause\n\t\t{\n\t\t\tprivate readonly Sql _sql;\n\n\t\t\tpublic SqlJoinClause(Sql sql)\n\t\t\t{\n\t\t\t\t_sql = sql;\n\t\t\t}\n\n\t\t\tpublic Sql On(string onClause, params object[] args)\n\t\t\t{\n\t\t\t\treturn _sql.Append(\"ON \" + onClause, args);\n\t\t\t}\n\t\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t\tpublic class SqlJoinClause\n\t\t{\n\t\t\tprivate readonly Sql _sql;\n\n\t\t\tpublic SqlJoinClause(Sql sql)\n\t\t\t{\n\t\t\t\t_sql = sql;\n\t\t\t}\n\n\t\t\tpublic Sql On(string onClause, params object[] args)\n\t\t\t{\n\t\t\t\treturn _sql.Append(\"ON \" + onClause, args);\n\t\t\t}\n\t\t}\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Decribes the type of <a href='BuyerRfp'>BuyerRfp</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum RfpType {\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 0,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Programmatic Guaranteed RFP.\n\t\t/// </summary>\n\t\tPROGRAMMATIC_GUARANTEED = 1,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Preferred Deal RFP.\n\t\t/// </summary>\n\t\tPREFERRED_DEAL = 2,\n\t}\n\n\n\t/// <summary>Decribes the type of <a href='BuyerRfp'>BuyerRfp</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic enum RfpType {\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 0,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Programmatic Guaranteed RFP.\n\t\t/// </summary>\n\t\tPROGRAMMATIC_GUARANTEED = 1,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Preferred Deal RFP.\n\t\t/// </summary>\n\t\tPREFERRED_DEAL = 2,\n\t}\n\n\n\t/// <summary>Decribes the\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "___________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Decribes the type of <a href='BuyerRfp'>BuyerRfp</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic enum RfpType {\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 0,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Programmatic Guaranteed RFP.\n\t\t/// </summary>\n\t\tPROGRAMMATIC_GUARANTEED = 1,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Preferred Deal RFP.\n\t\t/// </summary>\n\t\tPREFERRED_DEAL = 2,\n\t}\n\n\n\t/// <summary>Decribes the type of <a href='BuyerRfp'>BuyerRfp</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic enum RfpType {\n\t\t/// <summary>The value returned if the actual value is not exposed by the requested API\n\t\t/// version.\n\t\t/// </summary>\n\t\tUNKNOWN = 0,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Programmatic Guaranteed RFP.\n\t\t/// </summary>\n\t\tPROGRAMMATIC_GUARANTEED = 1,\n\t\t/// <summary>Indicates the <a href='BuyerRfp'>BuyerRfp</a> is a Preferred Deal RFP.\n\t\t/// </summary>\n\t\tPREFERRED_DEAL = 2,\n\t}\n\n\n\t/// <summary>Decribes the\nAnswer: ___________ (Select one"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>This service provides operations for retrieving and approving <a\n\t/// href='SuggestedAdUnit'>SuggestedAdUnit</a> objects. <p>Publishers may create ad\n\t/// tags that lack a corresponding ad unit defined in DFP, in order to gather\n\t/// information about potential ads without needing to create dummy ad units and\n\t/// make them available for targeting in line items. Any undefined ad unit to\n\t/// receive more than ten serving requests in the past week is treated as a\n\t/// 'suggested ad unit'. These can be queried by the client and selectively\n\t/// approved. Approval causes a new ad unit to be created based on the suggested ad\n\t/// unit. Unapproved suggested ad units cease to exist whenever their corresponding\n\t/// ad tag has been served fewer than ten times in the past seven days.</p> <p>This\n\t/// service is only available to Premium publishers. Before use, suggested ad units\n\t/// must be enabled for the client's network. This can be done in the UI: in the\n\t/// Inventory tab, click \"Network settings\" in the left-hand panel, then enable the\n\t/// checkbox \"Get suggestions for new ad units.\" If suggested ad units are not\n\t/// enabled, then <a\n\t/// href='#getSuggestedAdUnitsByStatement'>#getSuggestedAdUnitsByStatement</a> will\n\t/// always return an empty page.</p>\n\t/// </summary>\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic partial class SuggestedAdUnitService : AdManage\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>This service provides operations for retrieving and approving <a\n\t/// href='SuggestedAdUnit'>SuggestedAdUnit</a> objects. <p>Publishers may create ad\n\t/// tags that lack a corresponding ad unit defined in DFP, in order to gather\n\t/// information about potential ads without needing to create dummy ad units and\n\t/// make them available for targeting in line items. Any undefined ad unit to\n\t/// receive more than ten serving requests in the past week is treated as a\n\t/// 'suggested ad unit'. These can be queried by the client and selectively\n\t/// approved. Approval causes a new ad unit to be created based on the suggested ad\n\t/// unit. Unapproved suggested ad units cease to exist whenever their corresponding\n\t/// ad tag has been served fewer than ten times in the past seven days.</p> <p>This\n\t/// service is only available to Premium publishers. Before use, suggested ad units\n\t/// must be enabled for the client's network. This can be done in the UI: in the\n\t/// Inventory tab, click \"Network settings\" in the left-hand panel, then enable the\n\t/// checkbox \"Get suggestions for new ad units.\" If suggested ad units are not\n\t/// enabled, then <a\n\t/// href='#getSuggestedAdUnitsByStatement'>#getSuggestedAdUnitsByStatement</a> will\n\t/// always return an empty page.</p>\n\t/// </summary>\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic partial class SuggestedAdUnitService : AdManage\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t\t/// <summary>\n\t\t\t/// [\u8266\u968a]\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8a2d\u5b9a\u3092\u6271\u3044\u307e\u3059\u3002\n\t\t\t/// </summary>\n\t\t\tpublic class ConfigFormFleet : ConfigPartBase\n\t\t\t{\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u8f09\u6a5f\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAircraft { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u7d22\u6575\u5f0f\u306e\u8a08\u7b97\u65b9\u6cd5\n\t\t\t\t/// </summary>\n\t\t\t\tpublic int SearchingAbilityMethod { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u30b9\u30af\u30ed\u30fc\u30eb\u53ef\u80fd\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool IsScrollable { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u540d\u8868\u793a\u306e\u5e45\u3092\u56fa\u5b9a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool FixShipNameWidth { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// HP\u30d0\u30fc\u3092\u77ed\u7e2e\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShortenHPBar { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// next lv. \u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowNextExp { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u88c5\u5099\u306e\u6539\u4fee\u30ec\u30d9\u30eb\u30fb\u8266\u8f09\u6a5f\u719f\u7df4\u5ea6\u306e\u8868\u793a\u30d5\u30e9\u30b0\n\t\t\t\t/// </summary>\n\t\t\t\tpublic Window.Control.ShipStatusEquipment.LevelVisibilityFlag EquipmentLevelVisibility { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u8f09\u6a5f\u719f\u7df4\u5ea6\u3092\u6570\u5b57\u3067\u8868\u793a\u3059\u308b\u30d5\u30e9\u30b0\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAircraftLevelByNumber { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u5236\u7a7a\u6226\u529b\u306e\u8a08\u7b97\u65b9\u6cd5\n\t\t\t\t/// </summary>\n\t\t\t\tpublic int AirSuperiorityMethod { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u6cca\u5730\u4fee\u7406\u30bf\u30a4\u30de\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAnchorageRepairingTimer { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u30bf\u30a4\u30de\u30fc\u5b8c\u4e86\u6642\u306b\u70b9\u6ec5\u3055\u305b\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool BlinkAtCompletion { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u75b2\u52b4\u5ea6\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowConditionIcon { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u540d\u8868\u793a\u5e45\u56fa\u5b9a\u6642\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t\t/// <summary>\n\t\t\t/// [\u8266\u968a]\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8a2d\u5b9a\u3092\u6271\u3044\u307e\u3059\u3002\n\t\t\t/// </summary>\n\t\t\tpublic class ConfigFormFleet : ConfigPartBase\n\t\t\t{\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u8f09\u6a5f\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAircraft { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u7d22\u6575\u5f0f\u306e\u8a08\u7b97\u65b9\u6cd5\n\t\t\t\t/// </summary>\n\t\t\t\tpublic int SearchingAbilityMethod { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u30b9\u30af\u30ed\u30fc\u30eb\u53ef\u80fd\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool IsScrollable { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u540d\u8868\u793a\u306e\u5e45\u3092\u56fa\u5b9a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool FixShipNameWidth { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// HP\u30d0\u30fc\u3092\u77ed\u7e2e\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShortenHPBar { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// next lv. \u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowNextExp { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u88c5\u5099\u306e\u6539\u4fee\u30ec\u30d9\u30eb\u30fb\u8266\u8f09\u6a5f\u719f\u7df4\u5ea6\u306e\u8868\u793a\u30d5\u30e9\u30b0\n\t\t\t\t/// </summary>\n\t\t\t\tpublic Window.Control.ShipStatusEquipment.LevelVisibilityFlag EquipmentLevelVisibility { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u8f09\u6a5f\u719f\u7df4\u5ea6\u3092\u6570\u5b57\u3067\u8868\u793a\u3059\u308b\u30d5\u30e9\u30b0\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAircraftLevelByNumber { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u5236\u7a7a\u6226\u529b\u306e\u8a08\u7b97\u65b9\u6cd5\n\t\t\t\t/// </summary>\n\t\t\t\tpublic int AirSuperiorityMethod { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u6cca\u5730\u4fee\u7406\u30bf\u30a4\u30de\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowAnchorageRepairingTimer { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u30bf\u30a4\u30de\u30fc\u5b8c\u4e86\u6642\u306b\u70b9\u6ec5\u3055\u305b\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool BlinkAtCompletion { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u75b2\u52b4\u5ea6\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3059\u308b\u304b\n\t\t\t\t/// </summary>\n\t\t\t\tpublic bool ShowConditionIcon { get; set; }\n\n\t\t\t\t/// <summary>\n\t\t\t\t/// \u8266\u540d\u8868\u793a\u5e45\u56fa\u5b9a\u6642\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents a time series data. The <code>timeSeriesValues</code> should contain\n\t/// of a list value accordingly to the specified <a href='PeriodType'>PeriodType</a>\n\t/// for the <code>timeSeriesDateRange</code>. The order of the values in this list\n\t/// should be sorted by its chronological order.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class TimeSeries {\n\t\tprivate DateRange timeSeriesDateRangeField;\n\n\t\tprivate long[] timeSeriesValuesField;\n\n\t\tprivate PeriodType valuePeriodTypeField;\n\n\t\tprivate bool valuePeriodTypeFieldSpecified;\n\n\t\t/// <summary>The date range of the time series.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic DateRange timeSeriesDateRange {\n\t\t\tget {\n\t\t\t\treturn this.timeSeriesDateRangeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.timeSeriesDateRangeField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>The traffic volume values for the <code>timeSeriesDateRange</code>. <p>The list\n\t\t/// will contain a single value if <code>valuePeriodType</code> is <a\n\t\t/// href=''>PeriodType.CUSTOM</a>, and will contain a value for each day in\n\t\t/// <code>timeSeriesDateRange</code> if <code>valuePeriodType</code> is <a\n\t\t/// href='Per\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Represents a time series data. The <code>timeSeriesValues</code> should contain\n\t/// of a list value accordingly to the specified <a href='PeriodType'>PeriodType</a>\n\t/// for the <code>timeSeriesDateRange</code>. The order of the values in this list\n\t/// should be sorted by its chronological order.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class TimeSeries {\n\t\tprivate DateRange timeSeriesDateRangeField;\n\n\t\tprivate long[] timeSeriesValuesField;\n\n\t\tprivate PeriodType valuePeriodTypeField;\n\n\t\tprivate bool valuePeriodTypeFieldSpecified;\n\n\t\t/// <summary>The date range of the time series.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic DateRange timeSeriesDateRange {\n\t\t\tget {\n\t\t\t\treturn this.timeSeriesDateRangeField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.timeSeriesDateRangeField = value;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>The traffic volume values for the <code>timeSeriesDateRange</code>. <p>The list\n\t\t/// will contain a single value if <code>valuePeriodType</code> is <a\n\t\t/// href=''>PeriodType.CUSTOM</a>, and will contain a value for each day in\n\t\t/// <code>timeSeriesDateRange</code> if <code>valuePeriodType</code> is <a\n\t\t/// href='Per\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/**\n\t * [float]\n\t * [[significant-terms-numeric-field]]\n\t * == Numeric fields\n\t *\n\t * A significant terms aggregation on a numeric field\n\t */\n\tpublic class NumericSignificantTermsAggregationUsageTests : AggregationUsageTestBase\n\t{\n\t\tpublic NumericSignificantTermsAggregationUsageTests(ReadOnlyCluster i, EndpointUsage usage) : base(i, usage) { }\n\n\t\tprotected override object AggregationJson => new\n\t\t{\n\t\t\tcommits = new\n\t\t\t{\n\t\t\t\tsignificant_terms = new\n\t\t\t\t{\n\t\t\t\t\tfield = \"numberOfContributors\"\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprotected override Func<AggregationContainerDescriptor<Project>, IAggregationContainer> FluentAggs => a => a\n\t\t\t.SignificantTerms(\"commits\", st => st\n\t\t\t\t.Field(p => p.NumberOfContributors)\n\t\t\t);\n\n\t\tprotected override AggregationDictionary InitializerAggs =>\n\t\t\tnew SignificantTermsAggregation(\"commits\")\n\t\t\t{\n\t\t\t\tField = Field<Project, int>(p => p.NumberOfContributors)\n\t\t\t};\n\n\t\tprotected override void ExpectResponse(ISearchResponse<Project> response)\n\t\t{\n\t\t\tresponse.ShouldBeValid();\n\t\t\tvar commits = response.Aggregations.SignificantTerms<int>(\"commits\");\n\t\t\tcommits.Should().NotBeNull();\n\t\t\tcommits.Buckets.Should().NotBeNull();\n\t\t\tcommits.Buckets.Count.Should().BeGreaterThan(0);\n\t\t\tforeach (var item in commits.Buckets)\n\t\t\t{\n\t\t\t\titem.Key.Should().BeGreaterThan(0);\n\t\t\t\titem.DocCount.Should().BeGreaterOrEqualTo(1);\n\t\t\t}\n\t\t}\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "_____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\t/**\n\t * [float]\n\t * [[significant-terms-numeric-field]]\n\t * == Numeric fields\n\t *\n\t * A significant terms aggregation on a numeric field\n\t */\n\tpublic class NumericSignificantTermsAggregationUsageTests : AggregationUsageTestBase\n\t{\n\t\tpublic NumericSignificantTermsAggregationUsageTests(ReadOnlyCluster i, EndpointUsage usage) : base(i, usage) { }\n\n\t\tprotected override object AggregationJson => new\n\t\t{\n\t\t\tcommits = new\n\t\t\t{\n\t\t\t\tsignificant_terms = new\n\t\t\t\t{\n\t\t\t\t\tfield = \"numberOfContributors\"\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprotected override Func<AggregationContainerDescriptor<Project>, IAggregationContainer> FluentAggs => a => a\n\t\t\t.SignificantTerms(\"commits\", st => st\n\t\t\t\t.Field(p => p.NumberOfContributors)\n\t\t\t);\n\n\t\tprotected override AggregationDictionary InitializerAggs =>\n\t\t\tnew SignificantTermsAggregation(\"commits\")\n\t\t\t{\n\t\t\t\tField = Field<Project, int>(p => p.NumberOfContributors)\n\t\t\t};\n\n\t\tprotected override void ExpectResponse(ISearchResponse<Project> response)\n\t\t{\n\t\t\tresponse.ShouldBeValid();\n\t\t\tvar commits = response.Aggregations.SignificantTerms<int>(\"commits\");\n\t\t\tcommits.Should().NotBeNull();\n\t\t\tcommits.Buckets.Should().NotBeNull();\n\t\t\tcommits.Buckets.Count.Should().BeGreaterThan(0);\n\t\t\tforeach (var item in commits.Buckets)\n\t\t\t{\n\t\t\t\titem.Key.Should().BeGreaterThan(0);\n\t\t\t\titem.DocCount.Should().BeGreaterOrEqualTo(1);\n\t\t\t}\n\t\t}\n\t}\n\nAnswer: _____________\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n            /// <summary>\n            ///     Packet received when a player reconnected.\n            /// </summary>\n            public class PlayerReconnected\n            {\n                #region Static Fields\n\n                /// <summary>\n                ///     The header\n                /// </summary>\n                public static byte Header = 0xF;\n\n                #endregion\n\n                #region Public Methods and Operators\n\n                /// <summary>\n                ///     Decodes the specified data.\n                /// </summary>\n                /// <param name=\"data\">The data.</param>\n                /// <returns>Struct.</returns>\n                public static Struct Decoded(byte[] data)\n                {\n                    var packet = new GamePacket(data);\n                    var result = new Struct();\n\n                    packet.Position = 5;\n                    result.ClientId = packet.ReadInteger();\n                    result.Player = ObjectManager.Get<Obj_AI_Hero>().ElementAt(result.ClientId);\n\n                    return result;\n                }\n\n                #endregion\n\n                /// <summary>\n                ///     Represents the packet received when a player reconnectes to the game.\n                /// </summary>\n                public struct Struct\n                {\n                    #region Fields\n\n                    /// <summary>\n                    ///     The client identifier\n                    /// </summary>\n                 \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n            /// <summary>\n            ///     Packet received when a player reconnected.\n            /// </summary>\n            public class PlayerReconnected\n            {\n                #region Static Fields\n\n                /// <summary>\n                ///     The header\n                /// </summary>\n                public static byte Header = 0xF;\n\n                #endregion\n\n                #region Public Methods and Operators\n\n                /// <summary>\n                ///     Decodes the specified data.\n                /// </summary>\n                /// <param name=\"data\">The data.</param>\n                /// <returns>Struct.</returns>\n                public static Struct Decoded(byte[] data)\n                {\n                    var packet = new GamePacket(data);\n                    var result = new Struct();\n\n                    packet.Position = 5;\n                    result.ClientId = packet.ReadInteger();\n                    result.Player = ObjectManager.Get<Obj_AI_Hero>().ElementAt(result.ClientId);\n\n                    return result;\n                }\n\n                #endregion\n\n                /// <summary>\n                ///     Represents the packet received when a player reconnectes to the game.\n                /// </summary>\n                public struct Struct\n                {\n                    #region Fields\n\n                    /// <summary>\n                    ///     The client identifier\n                    /// </summary>\n                 \nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [Flags]\n    public enum CommandOptions\n    {\n        None = 0,\n        NoKeyCustomize = 1,\n        NoButtonCustomize = 2,\n        NoCustomize = 3,\n        TextContextUseButton = 4,\n        TextChanges = 8,\n        DefaultDisabled = 0x10,\n        DefaultInvisible = 0x20,\n        DynamicVisibility = 0x40,\n        Repeat = 0x80,\n        AllowParams = 0x1000,\n        DynamicItemStart = 0x100,\n        CommandWellOnly = 0x200,\n        Picture = 0x400,\n        Text = 0x800,\n        PictureAndText = 0xc00,\n        FilterKeys = 0x2000,\n        PostExec = 0x4000,\n        DontCache = 0x8000,\n        FixMenuController = 0x10000,\n        NoShowOnMenuController = 0x20000,\n        RouteToDocuments = 0x40000,\n        NoAutoComplete = 0x80000,\n        TextMenuUseBtn = 0x100000,\n        TextMenuCtrlUseMnu = 0x200000,\n        TextCascadeUseBtn = 0x400000,\n        CaseSensitive = 0x800000,\n\n        MenuDefaultDocked = 0x1000000,\n        MenuNoToolbarClose = 0x2000000,\n        MenuNotInTbList = 0x4000000,\n        MenuAlwaysCreate = 0x8000000,\n\n        ProfferedCommand = 0x10000000,\n        TextIsAnchor = 0x20000000,\n        StretchHorizontally = 0x40000000,\n\n        ValidFlags = 0x7fffffff\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "[Flags]",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    [Flags]\n    public enum CommandOptions\n    {\n        None = 0,\n        NoKeyCustomize = 1,\n        NoButtonCustomize = 2,\n        NoCustomize = 3,\n        TextContextUseButton = 4,\n        TextChanges = 8,\n        DefaultDisabled = 0x10,\n        DefaultInvisible = 0x20,\n        DynamicVisibility = 0x40,\n        Repeat = 0x80,\n        AllowParams = 0x1000,\n        DynamicItemStart = 0x100,\n        CommandWellOnly = 0x200,\n        Picture = 0x400,\n        Text = 0x800,\n        PictureAndText = 0xc00,\n        FilterKeys = 0x2000,\n        PostExec = 0x4000,\n        DontCache = 0x8000,\n        FixMenuController = 0x10000,\n        NoShowOnMenuController = 0x20000,\n        RouteToDocuments = 0x40000,\n        NoAutoComplete = 0x80000,\n        TextMenuUseBtn = 0x100000,\n        TextMenuCtrlUseMnu = 0x200000,\n        TextCascadeUseBtn = 0x400000,\n        CaseSensitive = 0x800000,\n\n        MenuDefaultDocked = 0x1000000,\n        MenuNoToolbarClose = 0x2000000,\n        MenuNotInTbList = 0x4000000,\n        MenuAlwaysCreate = 0x8000000,\n\n        ProfferedCommand = 0x10000000,\n        TextIsAnchor = 0x20000000,\n        StretchHorizontally = 0x40000000,\n\n        ValidFlags = 0x7fffffff\n    }\n\nAnswer: [Flags]\n    public enum"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Implements the relations factory for the entity: ShoppingCartItem. </summary>\n\tpublic partial class ShoppingCartItemRelations: RelationFactory\n\t{\n\n\t\t/// <summary>Returns a new IEntityRelation object, between ShoppingCartItemEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: ShoppingCartItem.ProductId - Product.ProductId</summary>\n\t\tpublic virtual IEntityRelation ProductEntityUsingProductId\n\t\t{\n\t\t\tget\t{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, \"Product\", false, new[] { ProductFields.ProductId, ShoppingCartItemFields.ProductId }); }\n\t\t}\n\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\t/// <summary>Implements the relations factory for the entity: ShoppingCartItem. </summary>\n\tpublic partial class ShoppingCartItemRelations: RelationFactory\n\t{\n\n\t\t/// <summary>Returns a new IEntityRelation object, between ShoppingCartItemEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: ShoppingCartItem.ProductId - Product.ProductId</summary>\n\t\tpublic virtual IEntityRelation ProductEntityUsingProductId\n\t\t{\n\t\t\tget\t{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, \"Product\", false, new[] { ProductFields.ProductId, ShoppingCartItemFields.ProductId }); }\n\t\t}\n\n\t}\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class ExternalUserAssociation\n\t{\n\t\tpublic int ExternalUserAssociationID { get; set; }\n\t\tpublic int UserID { get; set; }\n\t\tpublic string Issuer { get; set; }\n\t\tpublic string ProviderKey { get; set; }\n\t\tpublic string Name { get; set; }\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ExternalUserAssociation",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class ExternalUserAssociation\n\t{\n\t\tpublic int ExternalUserAssociationID { get; set; }\n\t\tpublic int UserID { get; set; }\n\t\tpublic string Issuer { get; set; }\n\t\tpublic string ProviderKey { get; set; }\n\t\tpublic string Name { get; set; }\n\t}\n\nAnswer: ExternalUserAssociation\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class IconExtensionMethods\n    {\n        public static ImageSource ToImageSource(this Icon icon)\n        {\n            ImageSource imageSource = Imaging.CreateBitmapSourceFromHIcon(\n                icon.Handle,\n                Int32Rect.Empty,\n                BitmapSizeOptions.FromEmptyOptions());\n\n            return imageSource;\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class IconExtensionMethods\n    {\n        public static ImageSource ToImageSource(this Icon icon)\n        {\n            ImageSource imageSource = Imaging.CreateBitmapSourceFromHIcon(\n                icon.Handle,\n                Int32Rect.Empty,\n                BitmapSizeOptions.FromEmptyOptions());\n\n            return imageSource;\n        }\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class RunOverrideTargetResponse : ModifiedFileResponse {\n        public RunOverrideTargetResponse() {}\n        public RunOverrideTargetResponse\n            ( string fileName\n            , string buffer\n            , int    line\n            , int    column)\n            : base(fileName: fileName, buffer: buffer) {\n            this.Line = line;\n            this.Column = column;\n        }\n\n        public int Line {get; set;}\n        public int Column {get; set;}\n\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class RunOverrideTargetResponse : ModifiedFileResponse {\n        public RunOverrideTargetResponse() {}\n        public RunOverrideTargetResponse\n            ( string fileName\n            , string buffer\n            , int    line\n            , int    column)\n            : base(fileName: fileName, buffer: buffer) {\n            this.Line = line;\n            this.Column = column;\n        }\n\n        public int Line {get; set;}\n        public int Column {get; set;}\n\n    }\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ApiModule: NancyModule\n    {\n        private static readonly Response PoolNotFound = JsonConvert.SerializeObject(new JsonError(\"Pool not found!\"));\n        private static readonly Response AlgorithmNotFound = JsonConvert.SerializeObject(new JsonError(\"Algorithm not found!\"));\n\n        public ApiModule(IStatisticsManager statisticsManager, IPoolManager poolManager, IAlgorithmManager algorithmManager)\n            :base(\"/api\")\n        {\n            Get[\"/\"] = _ =>\n            {\n                // include common data required by layout.\n                ViewBag.Header = \"Public API\";\n\n                // return our view\n                return View[\"api\", new ApiModel\n                {\n                    BaseUrl = Request.Url.SiteBase,\n                    Coin = poolManager.First().Config.Coin\n                }];\n            };\n\n\n            Get[\"/pools\"] = _ =>\n            {\n                var response = (Response) poolManager.ServiceResponse;\n                response.ContentType = \"application/json\";\n                return response;\n            };\n\n            Get[\"/pool/{slug}\"] = _ =>\n            {\n                var pool = poolManager.Get(HttpUtility.HtmlEncode(_.slug)); // query the requested pool.\n\n                var response = pool != null ? (Response)pool.ServiceResponse : PoolNotFound;\n                response.ContentType = \"application/json\";\n                return response;\n            };\n\n            Get[\"/algorithms\"] = _ =>\n            {\n        \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public class ApiModule: NancyModule\n    {\n        private static readonly Response PoolNotFound = JsonConvert.SerializeObject(new JsonError(\"Pool not found!\"));\n        private static readonly Response AlgorithmNotFound = JsonConvert.SerializeObject(new JsonError(\"Algorithm not found!\"));\n\n        public ApiModule(IStatisticsManager statisticsManager, IPoolManager poolManager, IAlgorithmManager algorithmManager)\n            :base(\"/api\")\n        {\n            Get[\"/\"] = _ =>\n            {\n                // include common data required by layout.\n                ViewBag.Header = \"Public API\";\n\n                // return our view\n                return View[\"api\", new ApiModel\n                {\n                    BaseUrl = Request.Url.SiteBase,\n                    Coin = poolManager.First().Config.Coin\n                }];\n            };\n\n\n            Get[\"/pools\"] = _ =>\n            {\n                var response = (Response) poolManager.ServiceResponse;\n                response.ContentType = \"application/json\";\n                return response;\n            };\n\n            Get[\"/pool/{slug}\"] = _ =>\n            {\n                var pool = poolManager.Get(HttpUtility.HtmlEncode(_.slug)); // query the requested pool.\n\n                var response = pool != null ? (Response)pool.ServiceResponse : PoolNotFound;\n                response.ContentType = \"application/json\";\n                return response;\n            };\n\n            Get[\"/algorithms\"] = _ =>\n            {\n        \nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public enum ApiType\n        {\n            Normal,\n            DB\n        }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "Complex",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public enum ApiType\n        {\n            Normal,\n            DB\n        }\n\nAnswer: \n</think>\n\nAnswer: Complex"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// For internal use only.\n  /// </summary>\n  internal class PropertyCollection : KeyedCollection<String, StructuralProperty> {\n    protected override String GetKeyForItem(StructuralProperty item) {\n      return item.Name;\n    }\n  }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n  /// <summary>\n  /// For internal use only.\n  /// </summary>\n  internal class PropertyCollection : KeyedCollection<String, StructuralProperty> {\n    protected override String GetKeyForItem(StructuralProperty item) {\n      return item.Name;\n    }\n  }\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Windows phone device.\n    /// </summary>\n    [ImplementPropertyChanged]\n    public class WindowsDevice : IDevice\n    {\n        #region Private Variables\n        private static IDevice _currentDevice;\n\n        private IBluetoothHub _bluetoothHub;\n\n        private IFileManager _fileManager;\n\n        private IMediaPicker _mediaPicker;\n\n        private INetwork _network;\n\n        private IAudioStream _microphone;\n\n        private IPhoneService _phoneService;\n\n        private IBattery _battery;\n\n        private IDisplay _display;\n\n        private IAccelerometer _accelerometer;\n\n        private IGyroscope _gyroscope;\n\n        private Orientation _orientation = Orientation.Portrait;\n        #endregion Private Variables\n\n        /// <summary>\n        /// Creates an instance of <see cref=\"WindowsDevice\" />.\n        /// </summary>\n        public WindowsDevice()\n        {\n\n            _display = new Display();\n            _battery = new Battery();\n\n            Query();\n\n            try\n            {\n                var result = Windows.Devices.Sensors.Accelerometer.GetDefault();\n\n                if (result != null)\n                {\n                    _accelerometer = new Accelerometer();\n                }\n            }\n            catch (Exception)\n            {\n            }\n\n            try\n            {\n                var result = Windows.Devices.Sensors.Gyrometer.GetDefault();\n\n                if (result != null)\n                {\n                    _gy\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Windows phone device.\n    /// </summary>\n    [ImplementPropertyChanged]\n    public class WindowsDevice : IDevice\n    {\n        #region Private Variables\n        private static IDevice _currentDevice;\n\n        private IBluetoothHub _bluetoothHub;\n\n        private IFileManager _fileManager;\n\n        private IMediaPicker _mediaPicker;\n\n        private INetwork _network;\n\n        private IAudioStream _microphone;\n\n        private IPhoneService _phoneService;\n\n        private IBattery _battery;\n\n        private IDisplay _display;\n\n        private IAccelerometer _accelerometer;\n\n        private IGyroscope _gyroscope;\n\n        private Orientation _orientation = Orientation.Portrait;\n        #endregion Private Variables\n\n        /// <summary>\n        /// Creates an instance of <see cref=\"WindowsDevice\" />.\n        /// </summary>\n        public WindowsDevice()\n        {\n\n            _display = new Display();\n            _battery = new Battery();\n\n            Query();\n\n            try\n            {\n                var result = Windows.Devices.Sensors.Accelerometer.GetDefault();\n\n                if (result != null)\n                {\n                    _accelerometer = new Accelerometer();\n                }\n            }\n            catch (Exception)\n            {\n            }\n\n            try\n            {\n                var result = Windows.Devices.Sensors.Gyrometer.GetDefault();\n\n                if (result != null)\n                {\n                    _gy\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateLabelsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateLabelsResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.Label[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see cref=\"updateLabelsResponse\"/>\n\t\t\t/// class. </summary>\n\t\t\tpublic updateLabelsResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see cref=\"updateLabelsResponse\"/>\n\t\t\t/// class. </summary>\n\t\t\tpublic updateLabelsResponse(Google.Api.Ads.AdManager.v201811.Label[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateLabelsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201902\", IsWrapped = true)]\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateLabelsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201811\", IsWrapped = true)]\n\t\tpublic partial class updateLabelsResponse {\n\t\t\t[System.ServiceModel.MessageBodyMemberAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\", Order = 0)]\n\t\t\t[System.Xml.Serialization.XmlElementAttribute(\"rval\")]\n\t\t\tpublic Google.Api.Ads.AdManager.v201811.Label[] rval;\n\n\t\t\t/// <summary> Creates a new instance of the <see cref=\"updateLabelsResponse\"/>\n\t\t\t/// class. </summary>\n\t\t\tpublic updateLabelsResponse() {\n\t\t\t}\n\n\t\t\t/// <summary> Creates a new instance of the <see cref=\"updateLabelsResponse\"/>\n\t\t\t/// class. </summary>\n\t\t\tpublic updateLabelsResponse(Google.Api.Ads.AdManager.v201811.Label[] rval) {\n\t\t\t\tthis.rval = rval;\n\t\t\t}\n\t\t}\n\n\n\t\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\t\t[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\t[System.ServiceModel.MessageContractAttribute(WrapperName = \"updateLabelsResponse\", WrapperNamespace = \"https://www.google.com/apis/ads/publisher/v201902\", IsWrapped = true)]\n\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// \n        /// </summary>\n        public class HistoryChange\n        {\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"summary\">The summary.</param>\n            [RockObsolete( \"1.8\" )]\n            [Obsolete]\n            public HistoryChange( string summary )\n            {\n                this.Summary = summary;\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            public HistoryChange()\n            {\n                //\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"historyVerb\">The history verb.</param>\n            /// <param name=\"historyChangeType\">Type of the history change.</param>\n            /// <param name=\"valueName\">Name of the value.</param>\n            public HistoryChange( HistoryVerb historyVerb, HistoryChangeType historyChangeType, string valueName )\n                : this( historyVerb, historyChangeType, valueName, null, null )\n            {\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"historyVerb\">The history verb.</param>\n            \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "<your",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        /// <summary>\n        /// \n        /// </summary>\n        public class HistoryChange\n        {\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"summary\">The summary.</param>\n            [RockObsolete( \"1.8\" )]\n            [Obsolete]\n            public HistoryChange( string summary )\n            {\n                this.Summary = summary;\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            public HistoryChange()\n            {\n                //\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"historyVerb\">The history verb.</param>\n            /// <param name=\"historyChangeType\">Type of the history change.</param>\n            /// <param name=\"valueName\">Name of the value.</param>\n            public HistoryChange( HistoryVerb historyVerb, HistoryChangeType historyChangeType, string valueName )\n                : this( historyVerb, historyChangeType, valueName, null, null )\n            {\n            }\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"HistoryChange\"/> class.\n            /// </summary>\n            /// <param name=\"historyVerb\">The history verb.</param>\n            \nAnswer: <your answer>\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class Reeds : Block\n\t{\n\t\tpublic Reeds() : base(83)\n\t\t{\n\t\t\tIsSolid = false;\n\t\t\tIsTransparent = true;\n\t\t}\n\n\t\tpublic override void BlockUpdate(Level level, BlockCoordinates blockCoordinates)\n\t\t{\n\t\t\tif (Coordinates.BlockDown() == blockCoordinates)\n\t\t\t{\n\t\t\t\tlevel.BreakBlock(null, this);\n\t\t\t}\n\t\t}\n\n\t\tpublic override Item[] GetDrops(Item tool)\n\t\t{\n\t\t\treturn new[] {ItemFactory.GetItem(338, 0, 1)};\n\t\t}\n\t}\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class Reeds : Block\n\t{\n\t\tpublic Reeds() : base(83)\n\t\t{\n\t\t\tIsSolid = false;\n\t\t\tIsTransparent = true;\n\t\t}\n\n\t\tpublic override void BlockUpdate(Level level, BlockCoordinates blockCoordinates)\n\t\t{\n\t\t\tif (Coordinates.BlockDown() == blockCoordinates)\n\t\t\t{\n\t\t\t\tlevel.BreakBlock(null, this);\n\t\t\t}\n\t\t}\n\n\t\tpublic override Item[] GetDrops(Item tool)\n\t\t{\n\t\t\treturn new[] {ItemFactory.GetItem(338, 0, 1)};\n\t\t}\n\t}\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [TestFixture]\n  public class CountResultOperatorTest\n  {\n    private CountResultOperator _resultOperator;\n\n    [SetUp]\n    public void SetUp ()\n    {\n      _resultOperator = new CountResultOperator ();\n    }\n\n    [Test]\n    public void Clone ()\n    {\n      var clonedClauseMapping = new QuerySourceMapping ();\n      var cloneContext = new CloneContext (clonedClauseMapping);\n      var clone = _resultOperator.Clone (cloneContext);\n\n      Assert.That (clone, Is.InstanceOf (typeof (CountResultOperator)));\n    }\n\n    [Test]\n    public void ExecuteInMemory ()\n    {\n      var input = new StreamedSequence (new[] { 1, 2, 3 }, new StreamedSequenceInfo (typeof (int[]), Expression.Constant (0)));\n      var result = _resultOperator.ExecuteInMemory<int> (input);\n\n      Assert.That (result.Value, Is.EqualTo (3));\n    }\n\n    [Test]\n    public void GetOutputDataInfo ()\n    {\n      var studentExpression = Expression.Constant (new Cook ());\n      var input = new StreamedSequenceInfo (typeof (Cook[]), studentExpression);\n      var result = _resultOperator.GetOutputDataInfo (input);\n\n      Assert.That (result, Is.InstanceOf (typeof (StreamedValueInfo)));\n      Assert.That (result.DataType, Is.SameAs (typeof (int)));\n    }\n\n    [Test]\n    [ExpectedException (typeof (ArgumentException), ExpectedMessage = \n        \"Parameter 'inputInfo' has type 'Remotion.Linq.Clauses.StreamedData.StreamedScalarValueInfo' \"\n        + \"when type 'Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo' was expected.\"\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n  [TestFixture]\n  public class CountResultOperatorTest\n  {\n    private CountResultOperator _resultOperator;\n\n    [SetUp]\n    public void SetUp ()\n    {\n      _resultOperator = new CountResultOperator ();\n    }\n\n    [Test]\n    public void Clone ()\n    {\n      var clonedClauseMapping = new QuerySourceMapping ();\n      var cloneContext = new CloneContext (clonedClauseMapping);\n      var clone = _resultOperator.Clone (cloneContext);\n\n      Assert.That (clone, Is.InstanceOf (typeof (CountResultOperator)));\n    }\n\n    [Test]\n    public void ExecuteInMemory ()\n    {\n      var input = new StreamedSequence (new[] { 1, 2, 3 }, new StreamedSequenceInfo (typeof (int[]), Expression.Constant (0)));\n      var result = _resultOperator.ExecuteInMemory<int> (input);\n\n      Assert.That (result.Value, Is.EqualTo (3));\n    }\n\n    [Test]\n    public void GetOutputDataInfo ()\n    {\n      var studentExpression = Expression.Constant (new Cook ());\n      var input = new StreamedSequenceInfo (typeof (Cook[]), studentExpression);\n      var result = _resultOperator.GetOutputDataInfo (input);\n\n      Assert.That (result, Is.InstanceOf (typeof (StreamedValueInfo)));\n      Assert.That (result.DataType, Is.SameAs (typeof (int)));\n    }\n\n    [Test]\n    [ExpectedException (typeof (ArgumentException), ExpectedMessage = \n        \"Parameter 'inputInfo' has type 'Remotion.Linq.Clauses.StreamedData.StreamedScalarValueInfo' \"\n        + \"when type 'Remotion.Linq.Clauses.StreamedData.StreamedSequenceInfo' was expected.\"\nAnswer: FeatureEnvy_positive\nWait"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class DeobfuscatorInfo : DeobfuscatorInfoBase {\n\t\tpublic const string THE_NAME = \"Crypto Obfuscator\";\n\t\tpublic const string THE_TYPE = \"co\";\n\t\tconst string DEFAULT_REGEX = @\"!^(get_|set_|add_|remove_)?[A-Z]{1,3}(?:`\\d+)?$&!^(get_|set_|add_|remove_)?c[0-9a-f]{32}(?:`\\d+)?$&\" + DeobfuscatorBase.DEFAULT_ASIAN_VALID_NAME_REGEX;\n\t\tBoolOption removeTamperProtection;\n\t\tBoolOption decryptConstants;\n\t\tBoolOption inlineMethods;\n\t\tBoolOption fixLdnull;\n\n\t\tpublic DeobfuscatorInfo()\n\t\t\t: base(DEFAULT_REGEX) {\n\t\t\tremoveTamperProtection = new BoolOption(null, MakeArgName(\"tamper\"), \"Remove tamper protection code\", true);\n\t\t\tdecryptConstants = new BoolOption(null, MakeArgName(\"consts\"), \"Decrypt constants\", true);\n\t\t\tinlineMethods = new BoolOption(null, MakeArgName(\"inline\"), \"Inline short methods\", true);\n\t\t\tfixLdnull = new BoolOption(null, MakeArgName(\"ldnull\"), \"Restore ldnull instructions\", true);\n\t\t}\n\n\t\tpublic override string Name {\n\t\t\tget { return THE_NAME; }\n\t\t}\n\n\t\tpublic override string Type {\n\t\t\tget { return THE_TYPE; }\n\t\t}\n\n\t\tpublic override IDeobfuscator CreateDeobfuscator() {\n\t\t\treturn new Deobfuscator(new Deobfuscator.Options {\n\t\t\t\tValidNameRegex = validNameRegex.Get(),\n\t\t\t\tRemoveTamperProtection = removeTamperProtection.Get(),\n\t\t\t\tDecryptConstants = decryptConstants.Get(),\n\t\t\t\tInlineMethods = inlineMethods.Get(),\n\t\t\t\tFixLdnull = fixLdnull.Get(),\n\t\t\t});\n\t\t}\n\n\t\tprotected override IEnumerable<Option> GetOptionsInternal() {\n\t\t\treturn new List<Option>() {\n\t\t\t\tremoveTamperPro\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "ComplexConditional_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\tpublic class DeobfuscatorInfo : DeobfuscatorInfoBase {\n\t\tpublic const string THE_NAME = \"Crypto Obfuscator\";\n\t\tpublic const string THE_TYPE = \"co\";\n\t\tconst string DEFAULT_REGEX = @\"!^(get_|set_|add_|remove_)?[A-Z]{1,3}(?:`\\d+)?$&!^(get_|set_|add_|remove_)?c[0-9a-f]{32}(?:`\\d+)?$&\" + DeobfuscatorBase.DEFAULT_ASIAN_VALID_NAME_REGEX;\n\t\tBoolOption removeTamperProtection;\n\t\tBoolOption decryptConstants;\n\t\tBoolOption inlineMethods;\n\t\tBoolOption fixLdnull;\n\n\t\tpublic DeobfuscatorInfo()\n\t\t\t: base(DEFAULT_REGEX) {\n\t\t\tremoveTamperProtection = new BoolOption(null, MakeArgName(\"tamper\"), \"Remove tamper protection code\", true);\n\t\t\tdecryptConstants = new BoolOption(null, MakeArgName(\"consts\"), \"Decrypt constants\", true);\n\t\t\tinlineMethods = new BoolOption(null, MakeArgName(\"inline\"), \"Inline short methods\", true);\n\t\t\tfixLdnull = new BoolOption(null, MakeArgName(\"ldnull\"), \"Restore ldnull instructions\", true);\n\t\t}\n\n\t\tpublic override string Name {\n\t\t\tget { return THE_NAME; }\n\t\t}\n\n\t\tpublic override string Type {\n\t\t\tget { return THE_TYPE; }\n\t\t}\n\n\t\tpublic override IDeobfuscator CreateDeobfuscator() {\n\t\t\treturn new Deobfuscator(new Deobfuscator.Options {\n\t\t\t\tValidNameRegex = validNameRegex.Get(),\n\t\t\t\tRemoveTamperProtection = removeTamperProtection.Get(),\n\t\t\t\tDecryptConstants = decryptConstants.Get(),\n\t\t\t\tInlineMethods = inlineMethods.Get(),\n\t\t\t\tFixLdnull = fixLdnull.Get(),\n\t\t\t});\n\t\t}\n\n\t\tprotected override IEnumerable<Option> GetOptionsInternal() {\n\t\t\treturn new List<Option>() {\n\t\t\t\tremoveTamperPro\nAnswer: ComplexConditional_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents a CSDL \"on delete\" action.\n    /// </summary>\n    internal class CsdlOnDelete : CsdlElement\n    {\n        private readonly EdmOnDeleteAction action;\n\n        public CsdlOnDelete(EdmOnDeleteAction action, CsdlLocation location)\n            : base(location)\n        {\n            this.action = action;\n        }\n\n        public EdmOnDeleteAction Action\n        {\n            get { return this.action; }\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents a CSDL \"on delete\" action.\n    /// </summary>\n    internal class CsdlOnDelete : CsdlElement\n    {\n        private readonly EdmOnDeleteAction action;\n\n        public CsdlOnDelete(EdmOnDeleteAction action, CsdlLocation location)\n            : base(location)\n        {\n            this.action = action;\n        }\n\n        public EdmOnDeleteAction Action\n        {\n            get { return this.action; }\n        }\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n   /// <summary>\n   /// Specifies a set of features that affect the way modules are exposed in a host application.\n   /// </summary>\n   public class CodeRoutingSettings {\n\n      // IMPORTANT: When new properties are added Import and Reset must be updated.\n\n      static readonly CodeRoutingSettings _Defaults = new CodeRoutingSettings(defaultsConstructor: true);\n\n      readonly IDictionary<Type, string> _DefaultConstraints = new Dictionary<Type, string>();\n      readonly ParameterBinderCollection _ParameterBinders = new ParameterBinderCollection();\n      readonly Collection<Type> _IgnoredControllers = new Collection<Type>();\n      readonly IDictionary<string, object> _Properties = new Dictionary<string, object>();\n      Func<RouteFormatterArgs, string> _RouteFormatter;\n\n      /// <summary>\n      /// The settings that all new <see cref=\"CodeRoutingSettings\"/> instances inherit.\n      /// Use this property to affect the behavior of the <c>MapCodeRoutes</c> \n      /// methods without having to pass a settings instance for each call.\n      /// </summary>\n      public static CodeRoutingSettings Defaults {\n         get { return _Defaults; }\n      }\n\n      /// <summary>\n      /// Gets default constraints used for route parameters that represents action parameters\n      /// and controller properties.\n      /// </summary>\n      /// <remarks>\n      /// Consider using <see cref=\"ParameterBinders\"/> instead, for a more flexible constraining\n      /// mechanism.\n      /// </remarks>\n   \nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n   \n   /// <summary>\n   /// Specifies a set of features that affect the way modules are exposed in a host application.\n   /// </summary>\n   public class CodeRoutingSettings {\n\n      // IMPORTANT: When new properties are added Import and Reset must be updated.\n\n      static readonly CodeRoutingSettings _Defaults = new CodeRoutingSettings(defaultsConstructor: true);\n\n      readonly IDictionary<Type, string> _DefaultConstraints = new Dictionary<Type, string>();\n      readonly ParameterBinderCollection _ParameterBinders = new ParameterBinderCollection();\n      readonly Collection<Type> _IgnoredControllers = new Collection<Type>();\n      readonly IDictionary<string, object> _Properties = new Dictionary<string, object>();\n      Func<RouteFormatterArgs, string> _RouteFormatter;\n\n      /// <summary>\n      /// The settings that all new <see cref=\"CodeRoutingSettings\"/> instances inherit.\n      /// Use this property to affect the behavior of the <c>MapCodeRoutes</c> \n      /// methods without having to pass a settings instance for each call.\n      /// </summary>\n      public static CodeRoutingSettings Defaults {\n         get { return _Defaults; }\n      }\n\n      /// <summary>\n      /// Gets default constraints used for route parameters that represents action parameters\n      /// and controller properties.\n      /// </summary>\n      /// <remarks>\n      /// Consider using <see cref=\"ParameterBinders\"/> instead, for a more flexible constraining\n      /// mechanism.\n      /// </remarks>\n   \nAnswer: ____________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ExpressionTreeCompilers\n    {\n        /// <summary>\n        ///     This compiler uses the .net built-in Expression.Compile() method to compile an expression tree.\n        /// </summary>\n        public static readonly IExpressionCompiler DotnetExpressionCompiler = new DotnetExpressionCompiler();\n\n        /// <summary>\n        ///     This expression tree compiler should have the same semantics as the .net built-in Expression.Compile() method, but\n        ///     it's faster.\n        ///     It only supports a subset of parameterless lambdas.\n        ///     Unsupported expressions fall-back to the builtin Expression.Compile methods.\n        ///     This compiler is relatively new, so if anything breaks, consider using the DotnetExpressionCompiler.\n        /// </summary>\n        public static readonly IExpressionCompiler FastExpressionCompiler =\n            new FastExpressionCompilerImpl();\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    public static class ExpressionTreeCompilers\n    {\n        /// <summary>\n        ///     This compiler uses the .net built-in Expression.Compile() method to compile an expression tree.\n        /// </summary>\n        public static readonly IExpressionCompiler DotnetExpressionCompiler = new DotnetExpressionCompiler();\n\n        /// <summary>\n        ///     This expression tree compiler should have the same semantics as the .net built-in Expression.Compile() method, but\n        ///     it's faster.\n        ///     It only supports a subset of parameterless lambdas.\n        ///     Unsupported expressions fall-back to the builtin Expression.Compile methods.\n        ///     This compiler is relatively new, so if anything breaks, consider using the DotnetExpressionCompiler.\n        /// </summary>\n        public static readonly IExpressionCompiler FastExpressionCompiler =\n            new FastExpressionCompilerImpl();\n    }\n\nAnswer: __________\n</think>\n\nAnswer"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public sealed class Failure : Exception\n        {\n            static string s_message = \"precondition failed\";\n            internal Failure() : base(s_message) { }\n        } \n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "</think>",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n        public sealed class Failure : Exception\n        {\n            static string s_message = \"precondition failed\";\n            internal Failure() : base(s_message) { }\n        } \n\nAnswer: \n</think>\n\nThe class `"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the selection adapter contained in the drop-down portion of\n    /// an <see cref=\"T:Avalonia.Controls.AutoCompleteBox\" /> control.\n    /// </summary>\n    public class SelectingItemsControlSelectionAdapter : ISelectionAdapter\n    {\n        /// <summary>\n        /// The SelectingItemsControl instance.\n        /// </summary>\n        private SelectingItemsControl _selector;\n\n        /// <summary>\n        /// Gets or sets a value indicating whether the selection change event \n        /// should not be fired.\n        /// </summary>\n        private bool IgnoringSelectionChanged { get; set; }\n\n        /// <summary>\n        /// Gets or sets the underlying\n        /// <see cref=\"T:Avalonia.Controls.Primitives.SelectingItemsControl\" />\n        /// control.\n        /// </summary>\n        /// <value>The underlying\n        /// <see cref=\"T:Avalonia.Controls.Primitives.SelectingItemsControl\" />\n        /// control.</value>\n        public SelectingItemsControl SelectorControl\n        {\n            get { return _selector; }\n\n            set\n            {\n                if (_selector != null)\n                {\n                    _selector.SelectionChanged -= OnSelectionChanged;\n                    _selector.PointerReleased -= OnSelectorPointerReleased;\n                }\n\n                _selector = value;\n\n                if (_selector != null)\n                {\n                    _selector.SelectionChanged += OnSelectionChanged;\n                    _sel\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "__________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Represents the selection adapter contained in the drop-down portion of\n    /// an <see cref=\"T:Avalonia.Controls.AutoCompleteBox\" /> control.\n    /// </summary>\n    public class SelectingItemsControlSelectionAdapter : ISelectionAdapter\n    {\n        /// <summary>\n        /// The SelectingItemsControl instance.\n        /// </summary>\n        private SelectingItemsControl _selector;\n\n        /// <summary>\n        /// Gets or sets a value indicating whether the selection change event \n        /// should not be fired.\n        /// </summary>\n        private bool IgnoringSelectionChanged { get; set; }\n\n        /// <summary>\n        /// Gets or sets the underlying\n        /// <see cref=\"T:Avalonia.Controls.Primitives.SelectingItemsControl\" />\n        /// control.\n        /// </summary>\n        /// <value>The underlying\n        /// <see cref=\"T:Avalonia.Controls.Primitives.SelectingItemsControl\" />\n        /// control.</value>\n        public SelectingItemsControl SelectorControl\n        {\n            get { return _selector; }\n\n            set\n            {\n                if (_selector != null)\n                {\n                    _selector.SelectionChanged -= OnSelectionChanged;\n                    _selector.PointerReleased -= OnSelectorPointerReleased;\n                }\n\n                _selector = value;\n\n                if (_selector != null)\n                {\n                    _selector.SelectionChanged += OnSelectionChanged;\n                    _sel\nAnswer: __________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Defines the Indentation Class.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is w:ind.</para>\n/// </summary>\n\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(23, \"ind\")]\npublic partial class Indentation : OpenXmlLeafElement\n{\n    \n        /// <summary>\n    /// <para> Left Indentation.</para>\n    /// <para>Represents the following attribute in the schema: w:left </para>\n    /// </summary>\n///<remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main\n///</remark>\n[NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]\n[NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]\n[StringValidator(Pattern = @\"-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)\", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]\n    [SchemaAttr(23, \"left\")]\n    [Index(0)]\n    public StringValue Left { get; set; }\n    /// <summary>\n    /// <para> start, this property is only available in Office2010, Office2013, Office2016.</para>\n    /// <para>Represents the following attribute in the schema: w:start </para>\n    /// </summary>\n///<remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main\n///</remark>\n[OfficeAvailability(FileFormatVersions.Office2010)]\n[NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office200\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "MultifacetedAbstraction",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n/// <summary>\n/// <para>Defines the Indentation Class.</para>\n/// <para>This class is available in Office 2007 or above.</para>\n/// <para> When the object is serialized out as xml, its qualified name is w:ind.</para>\n/// </summary>\n\n\n[OfficeAvailability(FileFormatVersions.Office2007)]\n[SchemaAttr(23, \"ind\")]\npublic partial class Indentation : OpenXmlLeafElement\n{\n    \n        /// <summary>\n    /// <para> Left Indentation.</para>\n    /// <para>Represents the following attribute in the schema: w:left </para>\n    /// </summary>\n///<remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main\n///</remark>\n[NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office2007)]\n[NumberValidator(SimpleType = typeof(IntegerValue), InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]\n[StringValidator(Pattern = @\"-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)\", InitialVersion = FileFormatVersions.Office2010, UnionId = 0)]\n    [SchemaAttr(23, \"left\")]\n    [Index(0)]\n    public StringValue Left { get; set; }\n    /// <summary>\n    /// <para> start, this property is only available in Office2010, Office2013, Office2016.</para>\n    /// <para>Represents the following attribute in the schema: w:start </para>\n    /// </summary>\n///<remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main\n///</remark>\n[OfficeAvailability(FileFormatVersions.Office2010)]\n[NumberValidator(SimpleType = typeof(Int32Value), Version = FileFormatVersions.Office200\nAnswer: MultifacetedAbstraction"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class TomeOfEnlightenment : Spellbook\n    {\n        [Constructable]\n        public TomeOfEnlightenment()\n            : base()\n        {\n            this.LootType = LootType.Regular;\n            this.Hue = 0x455;\n\n            this.Attributes.BonusInt = 5;\n            this.Attributes.SpellDamage = 10;\n            this.Attributes.CastSpeed = 1;\n        }\n\n        public TomeOfEnlightenment(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int LabelNumber\n        {\n            get\n            {\n                return 1070934;\n            }\n        }// Tome of Enlightenment\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write((int)0);\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n    public class TomeOfEnlightenment : Spellbook\n    {\n        [Constructable]\n        public TomeOfEnlightenment()\n            : base()\n        {\n            this.LootType = LootType.Regular;\n            this.Hue = 0x455;\n\n            this.Attributes.BonusInt = 5;\n            this.Attributes.SpellDamage = 10;\n            this.Attributes.CastSpeed = 1;\n        }\n\n        public TomeOfEnlightenment(Serial serial)\n            : base(serial)\n        {\n        }\n\n        public override int LabelNumber\n        {\n            get\n            {\n                return 1070934;\n            }\n        }// Tome of Enlightenment\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\n            writer.Write((int)0);\n        }\n\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n\n            int version = reader.ReadInt();\n        }\n    }\n\nAnswer: ____________\n\n\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ArchiveLiveStreamEvents : LiveStreamEventAction {\n\t}\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ArchiveLiveStreamEvents : LiveStreamEventAction {\n\t}\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v2\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class ArchiveLiveStreamEvents : LiveStreamEventAction {\n\t}\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201902\")]\n\tpublic partial class ArchiveLiveStreamEvents : LiveStreamEventAction {\n\t}\n\n\n\t/// <summary>The action used for archiving <a href='LiveStreamEvent'>LiveStreamEvent</a>\n\t/// objects.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v2\nAnswer: FeatureEnvy_positive\n</think>"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Defines a configuration for a <see cref=\"IxxHash\"/> implementation.\n    /// </summary>\n    public class xxHashConfig\n        : IxxHashConfig\n    {\n        /// <summary>\n        /// Gets the desired hash size, in bits.\n        /// </summary>\n        /// <value>\n        /// The desired hash size, in bits.\n        /// </value>\n        public int HashSizeInBits { get; set; } = 32;\n\n        /// <summary>\n        /// Gets the seed.\n        /// </summary>\n        /// <value>\n        /// The seed.\n        /// </value>\n        public UInt64 Seed { get; set; } = 0UL;\n\n\n\n        /// <summary>\n        /// Makes a deep clone of current instance.\n        /// </summary>\n        /// <returns>A deep clone of the current instance.</returns>\n        public IxxHashConfig Clone() =>\n            new xxHashConfig() {\n                HashSizeInBits = HashSizeInBits,\n                Seed = Seed\n            };\n    }\n\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "____________",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n    /// <summary>\n    /// Defines a configuration for a <see cref=\"IxxHash\"/> implementation.\n    /// </summary>\n    public class xxHashConfig\n        : IxxHashConfig\n    {\n        /// <summary>\n        /// Gets the desired hash size, in bits.\n        /// </summary>\n        /// <value>\n        /// The desired hash size, in bits.\n        /// </value>\n        public int HashSizeInBits { get; set; } = 32;\n\n        /// <summary>\n        /// Gets the seed.\n        /// </summary>\n        /// <value>\n        /// The seed.\n        /// </value>\n        public UInt64 Seed { get; set; } = 0UL;\n\n\n\n        /// <summary>\n        /// Makes a deep clone of current instance.\n        /// </summary>\n        /// <returns>A deep clone of the current instance.</returns>\n        public IxxHashConfig Clone() =>\n            new xxHashConfig() {\n                HashSizeInBits = HashSizeInBits,\n                Seed = Seed\n            };\n    }\n\nAnswer: ____________\n</think>\n\nThe"
  },
  {
    "prompt": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Data provider that owns this segment. For a <a\n\t/// href='FirstPartyAudienceSegment'>FirstPartyAudienceSegment</a>, it would be the\n\t/// publisher network. For a <a\n\t/// href='SharedAudienceSegment'>SharedAudienceSegment</a> or a <a\n\t/// href='ThirdPartyAudienceSegment'>ThirdPartyAudienceSegment</a>, it would be the\n\t/// entity that provides that <a href='AudienceSegment'>AudienceSegment</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class AudienceSegmentDataProvider {\n\t\tprivate string nameField;\n\n\t\t/// <summary>Name of the data provider. This attribute is readonly and is assigned by Google.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic string name {\n\t\t\tget {\n\t\t\t\treturn this.nameField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.nameField = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>Data provider that owns this segment. For a <a\n\t/// href='FirstPartyAudienceSegment'>FirstPartyAudienceSegment</a>, it would be the\n\t/// publisher network. For a <a\n\t/// href='SharedAudienceSegment'>SharedAudienceSegment</a> or a <a\n\t/// href='ThirdPartyAudienceSegment'>ThirdPartyAudienceSegment</a>, it would be the\n\t/// entity that provides that <a href='\nAnswer:",
    "expected": "MultifacetedAbstraction_negative",
    "predicted": "FeatureEnvy_positive",
    "raw_output": "You are a code smell classification assistant. You will be given a C# method or class and must classify it using one of the following labels:\n\n- ComplexMethod_positive: The code is a complex method (too long, too many branches, hard to read).\n- ComplexConditional_positive: The code contains deeply nested or overly complicated conditionals.\n- FeatureEnvy_positive: The code depends too much on data from other classes (feature envy).\n- MultifacetedAbstraction_positive: The class or method does too many unrelated things.\n\nReturn only ONE of the exact labels above as your answer. No expalantion should return nothing.\nFor example your answer should be: Ansswer: ComplexMethod_positive\nno other words\n\nClassify this C# code:\n\n\n\t/// <summary>Data provider that owns this segment. For a <a\n\t/// href='FirstPartyAudienceSegment'>FirstPartyAudienceSegment</a>, it would be the\n\t/// publisher network. For a <a\n\t/// href='SharedAudienceSegment'>SharedAudienceSegment</a> or a <a\n\t/// href='ThirdPartyAudienceSegment'>ThirdPartyAudienceSegment</a>, it would be the\n\t/// entity that provides that <a href='AudienceSegment'>AudienceSegment</a>.\n\t/// </summary>\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"svcutil\", \"4.6.1055.0\")]\n\t[System.SerializableAttribute()]\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\n\t[System.Xml.Serialization.XmlTypeAttribute(Namespace = \"https://www.google.com/apis/ads/publisher/v201811\")]\n\tpublic partial class AudienceSegmentDataProvider {\n\t\tprivate string nameField;\n\n\t\t/// <summary>Name of the data provider. This attribute is readonly and is assigned by Google.\n\t\t/// </summary>\n\t\t[System.Xml.Serialization.XmlElementAttribute(Order = 0)]\n\t\tpublic string name {\n\t\t\tget {\n\t\t\t\treturn this.nameField;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthis.nameField = value;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/// <summary>Data provider that owns this segment. For a <a\n\t/// href='FirstPartyAudienceSegment'>FirstPartyAudienceSegment</a>, it would be the\n\t/// publisher network. For a <a\n\t/// href='SharedAudienceSegment'>SharedAudienceSegment</a> or a <a\n\t/// href='ThirdPartyAudienceSegment'>ThirdPartyAudienceSegment</a>, it would be the\n\t/// entity that provides that <a href='\nAnswer: FeatureEnvy_positive\n</think>"
  }
]