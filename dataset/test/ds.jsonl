{"text": "// Return 1 if s -> t1 is a better conversion than s -> t2 // Return -1 if s -> t2 is a better conversion than s -> t1 // Return 0 if neither conversion is better static int CompareConversions(Type s, Type t1, Type t2) { if (t1 == t2) return 0; if (s == t1) return 1; if (s == t2) return -1; bool t1t2 = IsCompatibleWith(t1, t2); bool t2t1 = IsCompatibleWith(t2, t1); if (t1t2 && !t2t1) return 1; if (t2t1 && !t1t2) return -1; if (IsSignedIntegralType(t1) && IsUnsignedIntegralType(t2)) return 1; if (IsSignedIntegralType(t2) && IsUnsignedIntegralType(t1)) return -1; return 0; }", "label": "ComplexMethod"}
{"text": "private static int[] GetPoly(int nc) { switch (nc) { case 5: return poly5; case 7: return poly7; case 10: return poly10; case 11: return poly11; case 12: return poly12; case 14: return poly14; case 18: return poly18; case 20: return poly20; case 24: return poly24; case 28: return poly28; case 36: return poly36; case 42: return poly42; case 48: return poly48; case 56: return poly56; case 62: return poly62; case 68: return poly68; } return null; }", "label": "ComplexMethod"}
{"text": "public bool GetPair(string Value, out string result) { result = \"\"; switch (Type) { case OptionType.Bool: if (Value != \"0\" && Value != \"1\") return false; result = ConstructLine(Value); return true; case OptionType.Number: double d; if (!double.TryParse(Value, out d)) return false; if (d < min || d > max) return false; result = ConstructLine(Value); return true; case OptionType.String: if (strMaxLen != 0 && Value.Length > strMaxLen) return false; result = ConstructLine(Value); return true; case OptionType.List: foreach (var lop in ListOptions) { if (lop.Key == Value) { result = ConstructLine(lop.Key); return true; } } return false; } return false; }", "label": "ComplexMethod"}
{"text": "public static Sprite VesselIcon(VesselType type) { switch(type) { case VesselType.Base: return _baseIcon; case VesselType.Debris: return _debrisIcon; case VesselType.EVA: return _evaIcon; case VesselType.Flag: return _flagIcon; case VesselType.Lander: return _landerIcon; case VesselType.Plane: return _planeIcon; case VesselType.Probe: return _probeIcon; case VesselType.Relay: return _relayIcon; case VesselType.Rover: return _roverIcon; case VesselType.Ship: return _podIcon; case VesselType.SpaceObject: return _asteroidIcon; case VesselType.Station: return _stationIcon; case VesselType.Unknown: return _mysteryIcon; default: return _mysteryIcon; } }", "label": "ComplexMethod"}
{"text": "public override string ToString() { switch (~mSignature) { case kCopy: return nameof(Copy); case kDelta: return nameof(Delta); case kLZMA2: return nameof(LZMA2); case kLZMA: return nameof(LZMA); case kPPMD: return nameof(PPMD); case kBCJ: return nameof(BCJ); case kBCJ2: return nameof(BCJ2); case kDeflate: return nameof(Deflate); case kBZip2: return nameof(BZip2); case kAES: return nameof(AES); default: return nameof(Undefined); } }", "label": "ComplexMethod"}
{"text": "internal static int RegisterSerializers<T>() { var i = 0; i += Register<T, JsonTypeSerializer>(); if (jsonSerializer.GetParseFn<T>() != null) i++; if (jsonSerializer.GetWriteFn<T>() != null) i++; if (jsonReader.GetParseFn<T>() != null) i++; if (jsonWriter.GetWriteFn<T>() != null) i++; i += Register<T, JsvTypeSerializer>(); if (jsvSerializer.GetParseFn<T>() != null) i++; if (jsvSerializer.GetWriteFn<T>() != null) i++; if (jsvReader.GetParseFn<T>() != null) i++; if (jsvWriter.GetWriteFn<T>() != null) i++; //RegisterCsvSerializer<T>(); RegisterQueryStringWriter(); return i; }", "label": "ComplexMethod"}
{"text": "public int ReplaceMany(string table, MySQLData[][] batch) { if (IsDisposed || !Connected || String.IsNullOrWhiteSpace(table) || batch == null || batch.Length == 0) { return -1; } return InsertMany(table, batch, true); }", "label": "ComplexConditional"}
{"text": "// immutable, can share. class ThrottleFirstFrameTick : IObserver<long> { readonly ThrottleFirstFrame parent; public ThrottleFirstFrameTick(ThrottleFirstFrame parent) { this.parent = parent; } public void OnCompleted() { } public void OnError(Exception error) { } public void OnNext(long _) { lock (parent.gate) { parent.open = true; } } }", "label": "FeatureEnvy"}
{"text": "#endregion public void Normalize() public bool IsValid() { if(double.IsNaN(X) || double.IsInfinity(X) || double.IsNaN(Y) || double.IsInfinity(Y) || double.IsNaN(Z) || double.IsInfinity(Z) || double.IsNaN(W) || double.IsInfinity(W)) { return false; } return true; }", "label": "ComplexConditional"}
{"text": "public static string StripQuotes(this string value) { if (!string.IsNullOrEmpty(value) && value.Length > 2 && value.StartsWith(\"\\\"\") && value.EndsWith(\"\\\"\")) { return value.Substring(1, value.Length - 2); } return value; }", "label": "ComplexConditional"}
{"text": "public class VkExecuteRequest { private readonly Vkontakte _vkontakte; internal VkExecuteRequest(Vkontakte vkontakte) { _vkontakte = vkontakte; } //this method used by vk to mark access token as \"true\" (obtained from official app) public async Task GetBaseData(Dictionary<string, string> parameters) { if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) throw new Exception(\"Access token is not valid.\"); _vkontakte.SignMethod(parameters); var response = await new VkRequest(new Uri(VkConst.MethodBase + \"execute.getBaseData\"), parameters).Execute(); } }", "label": "FeatureEnvy"}
{"text": "public static string IRCtoMC(byte str) { switch (str) { case 0: return white; case 1: return black; case 2: return navy; case 3: return green; case 4: return red; case 5: return maroon; case 6: return purple; case 7: return gold; case 8: return yellow; case 9: return lime; case 10: return teal; case 11: return aqua; case 12: return blue; case 13: return pink; case 14: return gray; case 15: return silver; default: return \"\"; } }", "label": "ComplexMethod"}
{"text": "private static double GetExactMilliseconds(double factor, TimeUnit interval) { switch (interval) { case TimeUnit.Day: return factor * MillisecondsInADay; case TimeUnit.Hour: return factor * MillisecondsInAnHour; case TimeUnit.Minute: return factor * MillisecondsInAMinute; case TimeUnit.Second: return factor * MillisecondsInASecond; case TimeUnit.Millisecond: return factor; case TimeUnit.Microseconds: return factor * MillisecondsInAMicrosecond; case TimeUnit.Nanoseconds: return factor * MillisecondsInANanosecond; default: throw new ArgumentOutOfRangeException(nameof(interval), interval, null); } }", "label": "ComplexMethod"}
{"text": "string tvpdToCategory(Type t) { if (t.Equals(typeof(EnumChooserCTD))) return \"Values\"; if (t.Equals(typeof(EnumFlagsCTD))) return \"Fields\"; if (t.Equals(typeof(AsHexCTD))) return \"Values\"; if (t.Equals(typeof(ArrayCTD))) return \"Lists\"; if (t.Equals(typeof(AApiVersionedFieldsCTD))) return \"Fields\"; if (t.Equals(typeof(ICollectionAApiVersionedFieldsCTD))) return \"Lists\"; if (t.Equals(typeof(TGIBlockListCTD))) return \"Lists\"; if (t.Equals(typeof(IDictionaryCTD))) return \"Lists\"; if (t.Equals(typeof(ReaderCTD))) return \"Readers\"; return \"Values\"; }", "label": "ComplexMethod"}
{"text": "private void PutString (string str) { Put (String.Empty); writer.Write ('\"'); int n = str.Length; for (int i = 0; i < n; i++) { switch (str[i]) { case '\\n': writer.Write (\"\\\\n\"); continue; case '\\r': writer.Write (\"\\\\r\"); continue; case '\\t': writer.Write (\"\\\\t\"); continue; case '\"': case '\\\\': writer.Write ('\\\\'); writer.Write (str[i]); continue; case '\\f': writer.Write (\"\\\\f\"); continue; case '\\b': writer.Write (\"\\\\b\"); continue; } if ((int) str[i] >= 32 && (int) str[i] <= 126) { writer.Write (str[i]); continue; } // Default, turn into a \\uXXXX sequence IntToHex ((int) str[i], hex_seq); writer.Write (\"\\\\u\"); writer.Write (hex_seq); } writer.Write ('\"'); }", "label": "ComplexMethod"}
{"text": "/// <summary> /// Interaction logic for Window1.xaml /// </summary> [Example(null, \"Solar system demo.\")] public partial class Window1 : Window { SolarSystem3D SolarSystem; public Window1() { InitializeComponent(); view1.Camera.Position = new Point3D(0, 400, 500); view1.Camera.LookDirection = new Vector3D(0, -400, -500); SolarSystem = view1.Children[2] as SolarSystem3D; DataContext = SolarSystem; Loaded += new RoutedEventHandler(Window1_Loaded); } void Window1_Loaded(object sender, RoutedEventArgs e) { SolarSystem.InitModel(); SolarSystem.UpdateModel(); } }", "label": "FeatureEnvy"}
{"text": "public class Client { MessageClient client; public Client() { } public void Run(int serverPort) { client = new MessageClient( new FramedClient(new SocketClient(useIPv6: true)), new ProtoBufStacksSerializer(), new ClientMessageHandler()); client.PreLoadTypesFromAssemblyOfType<TemperatureResponse>(); client.Connect(new IPEndPoint(IPAddress.IPv6Loopback, serverPort)) .Subscribe(_ => { Console.WriteLine(\"Querying for temperature in London, Warsaw, Madrid\"); client.Send(new TemperatureRequest { City = \"London\" }); client.Send(new TemperatureRequest { City = \"Warsaw\" }); client.Send(new TemperatureRequest { City = \"Madrid\" }); }); } }", "label": "FeatureEnvy"}
{"text": "class ConsumerConnectionEventListener : IConnectionEventListener { private BrokerController _brokerController; public ConsumerConnectionEventListener(BrokerController brokerController) { _brokerController = brokerController; } public void OnConnectionAccepted(ITcpConnection connection) { } public void OnConnectionEstablished(ITcpConnection connection) { } public void OnConnectionFailed(EndPoint remotingEndPoint, SocketError socketError) { } public void OnConnectionClosed(ITcpConnection connection, SocketError socketError) { var connectionId = connection.RemotingEndPoint.ToAddress(); if (_brokerController.Setting.RemoveConsumerWhenDisconnect) { _brokerController._consumerManager.RemoveConsumer(connectionId); } } }", "label": "FeatureEnvy"}
{"text": "public override void AlterMeleeDamageTo(Mobile to, ref int damage) { if (to is Dragon || to is WhiteWyrm || to is SwampDragon || to is Drake || to is Nightmare || to is Hiryu || to is LesserHiryu || to is Daemon) damage *= 3; }", "label": "ComplexConditional"}
{"text": "public class CodeFormatHandler { readonly OmniSharpConfiguration _config; public CodeFormatHandler(OmniSharpConfiguration config) { _config = config; } public CodeFormatResponse Format(CodeFormatRequest request) { var options = _config.TextEditorOptions; var policy = _config.CSharpFormattingOptions; var formatter = new CSharpFormatter(policy, options); formatter.FormattingMode = FormattingMode.Intrusive; var output = formatter.Format(request.Buffer); return new CodeFormatResponse(output); } }", "label": "FeatureEnvy"}
{"text": "public sealed class AsciiMessage : Packet { public AsciiMessage(Serial serial, int graphic, MessageType type, int hue, int font, string name, string text) : base(0x1C) { if (name == null) { name = \"\"; } if (text == null) { text = \"\"; } if (hue == 0) { hue = 0x3B2; } EnsureCapacity(45 + text.Length); m_Stream.Write(serial); m_Stream.Write((short)graphic); m_Stream.Write((byte)type); m_Stream.Write((short)hue); m_Stream.Write((short)font); m_Stream.WriteAsciiFixed(name, 30); m_Stream.WriteAsciiNull(text); } }", "label": "FeatureEnvy"}
{"text": "bool Deobfuscate3(Block block, int i) { var instrs = block.Instructions; if (i + 1 >= instrs.Count) return false; int start = i; var ldsfld = instrs[i]; if (ldsfld.OpCode.Code != Code.Ldsfld) return false; var info = arrayBlockState.GetFieldInfo(ldsfld.Operand as IField); if (info == null) return false; if (!instrs[i + 1].IsLdcI4()) return false; var constants = GetConstantsReader(block); int value; i += 2; if (!constants.GetInt32(ref i, out value)) return false; if (i >= instrs.Count) return false; var stelem = instrs[i]; if (!IsStelem(info, stelem.OpCode.Code)) return false; block.Remove(start, i - start + 1); return true; }", "label": "ComplexMethod"}
{"text": "public static bool CheckSuddenDeath(Mobile mob) { if (mob is PlayerMobile) { PlayerMobile pm = (PlayerMobile)mob; if (pm.DuelPlayer != null && !pm.DuelPlayer.Eliminated && pm.DuelContext != null && pm.DuelContext.IsSuddenDeath) return true; } return false; }", "label": "ComplexConditional"}
{"text": "public sealed class DisplayProfile : Packet { public DisplayProfile(bool realSerial, Mobile m, string header, string body, string footer) : base(0xB8) { if (header == null) { header = \"\"; } if (body == null) { body = \"\"; } if (footer == null) { footer = \"\"; } EnsureCapacity(12 + header.Length + (footer.Length * 2) + (body.Length * 2)); m_Stream.Write((realSerial ? m.Serial : Serial.Zero)); m_Stream.WriteAsciiNull(header); m_Stream.WriteBigUniNull(footer); m_Stream.WriteBigUniNull(body); } }", "label": "FeatureEnvy"}
{"text": "public class FullHtmlSourceTabPresenter: IPresenter<FullHtmlSourceTabView> { private FullHtmlSourceTabView view; public void InitWithView(FullHtmlSourceTabView view) { this.view = view; // Subscribe to WebDriverUtils events SwdBrowser.OnDriverStarted += InitControls; SwdBrowser.OnDriverClosed += InitControls; InitControls(); } private void InitControls() { var shouldControlBeEnabled = SwdBrowser.IsWorking; view.btnGetHtmlSource.Enabled = shouldControlBeEnabled; view.txtHtmlPageSource.Enabled = shouldControlBeEnabled; } internal void DisplayHtmlPageSource() { string htmlSource = SwdBrowser.GetHtml(); view.FillHtmlCodeBox(htmlSource); } internal void TidyHtml(string htmlContent) { throw new NotImplementedException(); } }", "label": "FeatureEnvy"}
{"text": "private class QListener { private readonly QCallbackConnection _connection; internal volatile bool Running; internal QListener(QCallbackConnection connection) { _connection = connection; Running = true; } internal void Run() { while (Running && _connection.IsConnected()) { try { var data = _connection.Receive(false); _connection.OnDataReceived(new QMessageEvent((QMessage) data)); } catch (QException e) { _connection.OnErrorOccured(new QErrorEvent(e)); } catch (Exception e) { _connection.OnErrorOccured(new QErrorEvent(e)); Running = false; break; } } } }", "label": "FeatureEnvy"}
{"text": "public void OnPageVisible() { if (ViewModel == null || !ViewModel.CanLoadMore || ViewModel.IsBusy || ViewModel.Tweets.Count > 0) return; ViewModel.LoadCommand.Execute(null); }", "label": "ComplexConditional"}
{"text": "private static DynValue ReadValue(BinaryReader rd, Table envTable) { bool isnull = !rd.ReadBoolean(); if (isnull) return null; DataType dt = (DataType)rd.ReadByte(); switch (dt) { case DataType.Nil: return DynValue.NewNil(); case DataType.Void: return DynValue.Void; case DataType.Boolean: return DynValue.NewBoolean(rd.ReadBoolean()); case DataType.Number: return DynValue.NewNumber(rd.ReadDouble()); case DataType.String: return DynValue.NewString(rd.ReadString()); case DataType.Table : return DynValue.NewTable(envTable); default: throw new NotSupportedException(string.Format(\"Unsupported type in chunk dump : {0}\", dt)); } }", "label": "ComplexMethod"}
{"text": "public override bool AcceptsSpawnsFrom(Region region) { if (Battle != null && Battle.State != PvPBattleState.Internal && !Battle.Hidden && !Battle.AcceptsSpawnsFrom(region)) { return false; } return base.AcceptsSpawnsFrom(region); }", "label": "ComplexConditional"}
{"text": "public struct IndexReaderLease : IDisposable { private IndexReaderPool _pool; public IndexReaderLease(IndexReaderPool pool, IndexReader reader) { _pool = pool; Interlocked.Increment(ref _pool._count); IndexReader = reader; } public IndexReader IndexReader { get; } public void Dispose() { var count = Interlocked.Decrement(ref _pool._count); _pool.Release(); } }", "label": "FeatureEnvy"}
{"text": "//public void SetProxy() //{ //} public void SetAudioFormat(string fmt) { if ((fmt != PAudioFormat.AACPlus && fmt != PAudioFormat.MP3 && fmt != PAudioFormat.MP3_HIFI) || (!HasSubscription && fmt == PAudioFormat.MP3_HIFI)) { fmt = PAudioFormat.MP3; } _audioFormat = fmt; }", "label": "ComplexConditional"}
{"text": "class ZipLatestObserver : IObserver<T> { readonly ZipLatest parent; readonly int index; public ZipLatestObserver(ZipLatest parent, int index) { this.parent = parent; this.index = index; } public void OnNext(T value) { lock (parent.gate) { parent.values[index] = value; parent.Publish(index); } } public void OnError(Exception ex) { lock (parent.gate) { parent.OnError(ex); } } public void OnCompleted() { lock (parent.gate) { parent.isCompleted[index] = true; var allTrue = true; for (int i = 0; i < parent.length; i++) { if (!parent.isCompleted[i]) { allTrue = false; break; } } if (allTrue) { parent.OnCompleted(); } } } }", "label": "FeatureEnvy"}
{"text": "void Visit(MTypeDef type) { if (visited.ContainsKey(type)) return; visited[type] = true; if (type.baseType != null) Visit(type.baseType.typeDef); foreach (var ifaceInfo in type.interfaces) Visit(ifaceInfo.typeDef); TypeInfo info; if (!memberInfos.TryGetType(type, out info)) return; foreach (var method in type.AllMethodsSorted) { MethodNameGroup group; if (!methodToGroup.TryGetValue(method, out group)) continue; foreach (var m in group.Methods) methodToGroup.Remove(m); func(group); } }", "label": "ComplexMethod"}
{"text": "private void tbName_KeyPress(object sender, KeyPressEventArgs e) { if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_') { e.Handled = true; } }", "label": "ComplexConditional"}
{"text": "public sealed class ExecutorThread { private readonly Executor parent; private readonly MultiCommand command; public ExecutorThread(Executor parent, MultiCommand command) { this.parent = parent; this.command = command; } public void Run(object obj) { try { if (command.IsValid()) { command.Execute(parent.cluster, parent.policy); } parent.ThreadCompleted(); } catch (Exception e) { // Terminate other scan threads. parent.StopThreads(e); } } /// <summary> /// Send stop signal to each thread. /// </summary> public void Stop() { command.Stop(); } }", "label": "FeatureEnvy"}
{"text": "//------------------------------------------------------------------------------ private TEdge FindNextLocMin(TEdge E) { TEdge E2; for (;;) { while (E.Bot != E.Prev.Bot || E.Curr == E.Top) E = E.Next; if (E.Dx != horizontal && E.Prev.Dx != horizontal) break; while (E.Prev.Dx == horizontal) E = E.Prev; E2 = E; while (E.Dx == horizontal) E = E.Next; if (E.Top.Y == E.Prev.Bot.Y) continue; //ie just an intermediate horz. if (E2.Prev.Bot.X < E.Bot.X) E = E2; break; } return E; }", "label": "ComplexMethod"}
{"text": "private void GenerateConstInt(int value) { switch(value) { case 0: gen.Emit(OpCodes.Ldc_I4_0); break; case 1: gen.Emit(OpCodes.Ldc_I4_1); break; case 2: gen.Emit(OpCodes.Ldc_I4_2); break; case 3: gen.Emit(OpCodes.Ldc_I4_3); break; case 4: gen.Emit(OpCodes.Ldc_I4_4); break; case 5: gen.Emit(OpCodes.Ldc_I4_5); break; case 6: gen.Emit(OpCodes.Ldc_I4_6); break; case 7: gen.Emit(OpCodes.Ldc_I4_7); break; case 8: gen.Emit(OpCodes.Ldc_I4_8); break; default: if(value == -1) { gen.Emit(OpCodes.Ldc_I4_M1); } else if(value >= -127 && value < 128) { gen.Emit(OpCodes.Ldc_I4_S, (sbyte)value); } else { gen.Emit(OpCodes.Ldc_I4, value); } break; } }", "label": "ComplexMethod"}
{"text": "#endregion private void DefineEnums(string[] names, int[] values) { if (names == null || names.Length == 0 || values == null || names.Length != values.Length) throw new ArgumentException(); m_names = names; m_values = values; }", "label": "ComplexConditional"}
{"text": "protected virtual void ShowOptionMenu(GumpButton button) { if (User != null && !User.Deleted && Options != null && Options.Count > 0) { Send(new MenuGump(User, Refresh(), Options, button)); } }", "label": "ComplexConditional"}
{"text": "public class ContextMenuEditorCanvas : Canvas { public ContextMenuItem MovingItem; public ContextMenuItem GhostItem = new ContextMenuItem(); public Rectangle SelectionRect = new Rectangle() { Height = 4, Fill = System.Windows.Media.Brushes.Black, Opacity = 0.5f }; public int InsertAtIndex = -1; public ContextMenuEditorCanvas() : base() { } protected override void OnMouseUp(MouseButtonEventArgs e) { base.OnMouseUp(e); if (MovingItem != null) MovingItem.Dragging = false; } public void SetupGhost(ContextMenuItem item) { if (GhostItem.Parent != null) return; GhostItem.UpdateCustomActions(); GhostItem.ItemName.Text = item.ItemName.Text; GhostItem.ItemFunction.Text = item.ItemFunction.Text; GhostItem.Indent = item.Indent; GhostItem.IsEnabled = false; } }", "label": "FeatureEnvy"}
{"text": "public class EventsView : UserControl { private readonly ListBox _events; public EventsView() { InitializeComponent(); _events = this.FindControl<ListBox>(\"events\"); } private void RecordedEvents_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { _events.ScrollIntoView(_events.Items.OfType<FiredEvent>().LastOrDefault()); } private void InitializeComponent() { AvaloniaXamlLoader.Load(this); } }", "label": "FeatureEnvy"}
{"text": "public override void OnEnter(Mobile m) { if (m != null && this.m_Occupant == null && m is PlayerMobile && m.Alive) this.m_Occupant = m; }", "label": "ComplexConditional"}
{"text": "internal static string[] SafeSplit(string s) { var parenthCount = 0; var items = new List<string>(); var charSoFar = new List<char>(); var length = s.Length; for (int i = 0; i < length; i++) { var c = s[i]; if (c == '(') { parenthCount++; charSoFar.Add(c); } else if (c == ')') { parenthCount--; charSoFar.Add(c); } else if (parenthCount != 0) { charSoFar.Add(c); } if (parenthCount == 0) { if (i == length - 1) { charSoFar.Add(c); } if (c == ',' || i == length - 1) { var charsCopy = new List<char>(charSoFar); charSoFar = new List<char>(); var item = new String(charsCopy.ToArray()).Trim(); items.Add(item); } else { charSoFar.Add(c); } } } return items.ToArray(); }", "label": "ComplexMethod"}
{"text": "private static string GetMessageForCode(int errorCode) { switch (errorCode) { case 0: return \"Success\"; case 1: return \"general SOCKS server failure\"; case 2: return \"connection not allowed by ruleset\"; case 3: return \"Network unreachable\"; case 4: return \"Host unreachable\"; case 5: return \"Connection refused\"; case 6: return \"TTL expired\"; case 7: return \"Command not supported\"; case 8: return \"Address type not supported\"; default: return \"Unknown code\"; } }", "label": "ComplexMethod"}
{"text": "class CsvmDataReader { IBinaryReader reader; public CsvmDataReader(IBinaryReader reader) { reader.Position = 0; this.reader = reader; } public List<CsvmMethodData> Read() { int numMethods = reader.ReadInt32(); if (numMethods < 0) throw new ApplicationException(\"Invalid number of methods\"); var methods = new List<CsvmMethodData>(numMethods); for (int i = 0; i < numMethods; i++) { var csvmMethod = new CsvmMethodData(); csvmMethod.Guid = new Guid(reader.ReadBytes(16)); csvmMethod.Token = reader.ReadInt32(); csvmMethod.Locals = reader.ReadBytes(reader.ReadInt32()); csvmMethod.Instructions = reader.ReadBytes(reader.ReadInt32()); csvmMethod.Exceptions = reader.ReadBytes(reader.ReadInt32()); methods.Add(csvmMethod); } return methods; } }", "label": "FeatureEnvy"}
{"text": "[RPlotExporter, RankColumn] public class Serialization { BlockSample Sample; [GlobalSetup] public void Setup() { Sample = new BlockSample(); Sample.Download(); } [Benchmark] public void SerializeBigBlock() { MemoryStream ms = new MemoryStream(Sample.BigBlockBytes.Length + 100); var bstream = new BitcoinStream(ms, true); Sample.BigBlock.ReadWrite(bstream); } [Benchmark] public void DeserializeBigBlock() { MemoryStream ms = new MemoryStream(Sample.BigBlockBytes); var bstream = new BitcoinStream(ms, false); Block.CreateBlock(Network.Main).ReadWrite(bstream); } }", "label": "FeatureEnvy"}
{"text": "public BigInteger ModPow(BigInteger e, BigInteger m) { if (m.sign < 1) throw new ArithmeticException(\"Modulus must be positive\"); if (m.Equals(One)) return Zero; if (e.sign == 0) return One; if (sign == 0) return Zero; bool negExp = e.sign < 0; if (negExp) e = e.Negate(); BigInteger result = this.Mod(m); if (!e.Equals(One)) { if ((m.magnitude[m.magnitude.Length - 1] & 1) == 0) { result = ModPowBarrett(result, e, m); } else { result = ModPowMonty(result, e, m, true); } } if (negExp) result = result.ModInverse(m); return result; }", "label": "ComplexMethod"}
{"text": "public Spell RandomOffenseSpell() { int maxCircle = (int)((m_Guard.Skills.Magery.Value + 20.0) / (100.0 / 7.0)); if (maxCircle < 1) { maxCircle = 1; } switch (Utility.Random(maxCircle * 2)) { case 0: case 1: return new MagicArrowSpell(m_Guard, null); case 2: case 3: return new HarmSpell(m_Guard, null); case 4: case 5: return new FireballSpell(m_Guard, null); case 6: case 7: return new LightningSpell(m_Guard, null); case 8: return new MindBlastSpell(m_Guard, null); case 9: return new ParalyzeSpell(m_Guard, null); case 10: return new EnergyBoltSpell(m_Guard, null); case 11: return new ExplosionSpell(m_Guard, null); default: return new FlameStrikeSpell(m_Guard, null); } }", "label": "ComplexMethod"}
{"text": "private static bool TryInsertIntoState(DesignState state, int itemID, int x, int y, int z) { MultiComponentList mcl = state.Components; if (x < mcl.Min.X || y < mcl.Min.Y || x > mcl.Max.X || y > mcl.Max.Y) return false; mcl.Add(itemID, x, y, z); state.OnRevised(); return true; }", "label": "ComplexConditional"}
{"text": "public override bool ValidLocation(Coordinates3D location) { if (location.X - LeafRadius < 0 || location.X + LeafRadius >= Chunk.Width || location.Z - LeafRadius < 0 || location.Z + LeafRadius >= Chunk.Depth) return false; return true; }", "label": "ComplexConditional"}
{"text": "public override void AlterMeleeDamageTo(Mobile to, ref int damage) { if (to is Dragon || to is WhiteWyrm || to is SwampDragon || to is Drake || to is Nightmare || to is Hiryu || to is LesserHiryu || to is Daemon) damage *= 3; }", "label": "ComplexConditional"}
{"text": "// This exists just so that we can use ActivatorUtilities.CreateInstance on the Startup class private class HostServiceProvider : IServiceProvider { private readonly WebHostBuilderContext _context; public HostServiceProvider(WebHostBuilderContext context) { _context = context; } public object GetService(Type serviceType) { // The implementation of the HostingEnvironment supports both interfaces if (serviceType == typeof(Microsoft.AspNetCore.Hosting.IHostingEnvironment) || serviceType == typeof(IHostingEnvironment)) { return _context.HostingEnvironment; } if (serviceType == typeof(IConfiguration)) { return _context.Configuration; } return null; } }", "label": "FeatureEnvy"}
{"text": "public static XmlSpawner FindInRecentSpawnerSearchList(XmlSpawner spawner, string name) { if (spawner == null || name == null || spawner.RecentSpawnerSearchList == null) return null; List<XmlSpawner> deletelist = null; XmlSpawner foundspawner = null; foreach (XmlSpawner s in spawner.RecentSpawnerSearchList) { if (s.Deleted) { // clean it up if (deletelist == null) deletelist = new List<XmlSpawner>(); deletelist.Add(s); } else if (String.Compare(s.Name, name, true) == 0) { foundspawner = s; break; } } if (deletelist != null) { foreach (XmlSpawner i in deletelist) spawner.RecentSpawnerSearchList.Remove(i); } return (foundspawner); }", "label": "ComplexMethod"}
{"text": "private static int match_class(char c, char cl) { bool res; switch (tolower(cl)) { case 'a': res = isalpha(c); break; case 'c': res = iscntrl(c); break; case 'd': res = isdigit(c); break; case 'l': res = islower(c); break; case 'p': res = ispunct(c); break; case 's': res = isspace(c); break; case 'g': res = isgraph(c); break; case 'u': res = isupper(c); break; case 'w': res = isalnum(c); break; case 'x': res = isxdigit((char)c); break; case 'z': res = (c == 0); break; default: return (cl == c) ? 1 : 0; } return (islower(cl) ? (res ? 1 : 0) : ((!res) ? 1 : 0)); }", "label": "ComplexMethod"}
{"text": "internal static bool IsSafe(char ch) { if ((((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))) { return true; } switch (ch) { case '\\'': case '(': case ')': case '*': case '-': case '.': case '_': case '!': return true; } return false; }", "label": "ComplexConditional"}
{"text": "public void TouchEnded(CCTouch touch) { var pos = Layer.ScreenToWorldspace(touch.LocationOnScreen); if (pos.X >= 0 && pos.X < ContentSize.Width && pos.Y >= 0 && pos.Y <= ContentSize.Height) { Edit(); } }", "label": "ComplexConditional"}
{"text": "public sealed class SpellbookContent : Packet { public SpellbookContent(int count, int offset, ulong content, Item item) : base(0x3C) { EnsureCapacity(5 + (count * 19)); int written = 0; m_Stream.Write((ushort)0); ulong mask = 1; for (int i = 0; i < 64; ++i, mask <<= 1) { if ((content & mask) != 0) { m_Stream.Write((0x7FFFFFFF - i)); m_Stream.Write((ushort)0); m_Stream.Write((byte)0); m_Stream.Write((ushort)(i + offset)); m_Stream.Write((short)0); m_Stream.Write((short)0); m_Stream.Write(item.Serial); m_Stream.Write((short)0); ++written; } } m_Stream.Seek(3, SeekOrigin.Begin); m_Stream.Write((ushort)written); } }", "label": "FeatureEnvy"}
{"text": "private void TestChange() { if (m_floatWindowBounds != m_oldFloatWindowBounds || m_dockTo != m_oldDockTo || m_dock != m_oldDock || m_contentIndex != m_oldContentIndex) OnShow(); }", "label": "ComplexConditional"}
{"text": "//1075272 = You drink from the goblet of celebration public override int ComputeItemID() { if (ItemID == 0x99A || ItemID == 0x9B3 || ItemID == 0x9BF || ItemID == 0x9CB) return ItemID; return 0x99A; }", "label": "ComplexConditional"}
{"text": "public override int RandomFace(bool female) { switch (Utility.Random(10)) { case 0: return 0x3B44; // face1 case 1: return 0x3B45; // face2 case 2: return 0x3B46; // face3 case 3: return 0x3B47; // face4 case 4: return 0x3B48; // face5 case 5: return 0x3B49; // face6 case 6: return 0x3B4A; // face7 case 7: return 0x3B4B; // face8 case 8: return 0x3B4C; // face9 case 9: return 0x3B4D; // face10 default: return 0x3B44; // face1 } }", "label": "ComplexMethod"}
{"text": "List<Fold> GetFoldsByEndAfterColumn(int lineNumber, int column, bool forceFolded) { List<Fold> foldings = new List<Fold>(); if (_folds != null) { Fold reference = new Fold(_document, lineNumber, column, lineNumber, column); int index = _foldsByEnd.BinarySearch(reference, FoldEndComparer.Instance); if (index < 0) index = ~index; for (; index < _foldsByEnd.Count; index++) { Fold fold = _foldsByEnd[index]; if (fold.EndLine < lineNumber) continue; else if (fold.EndLine > lineNumber) break; if (fold.EndColumn <= column) continue; if (!forceFolded || fold.IsFolded) foldings.Add(fold); } } return foldings; }", "label": "ComplexMethod"}
{"text": "class ThrottleFrameTick : IObserver<long> { readonly ThrottleFrame parent; readonly ulong currentid; public ThrottleFrameTick(ThrottleFrame parent, ulong currentid) { this.parent = parent; this.currentid = currentid; } public void OnCompleted() { } public void OnError(Exception error) { } public void OnNext(long _) { lock (parent.gate) { if (parent.hasValue && parent.id == currentid) { parent.observer.OnNext(parent.latestValue); } parent.hasValue = false; } } }", "label": "FeatureEnvy"}
{"text": "private void tbName_KeyPress(object sender, KeyPressEventArgs e) { if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_') { e.Handled = true; } }", "label": "ComplexConditional"}
{"text": "public void OnPageVisible() { if (ViewModel == null || !ViewModel.CanLoadMore || ViewModel.IsBusy || ViewModel.FeedItems.Count > 0) return; ViewModel.LoadCommand.Execute(null); }", "label": "ComplexConditional"}
{"text": "private void UpdateDealer(bool message) { if (this.IsInGamePlayer(this.m_DealerPosition)) return; for (int i = this.m_DealerPosition + 1; i < this.m_Players.Length; i++) { if (this.IsInGamePlayer(i)) { this.m_DealerPosition = i; if (message) this.SendDealerChangedMessage(); return; } } for (int i = 0; i < this.m_DealerPosition; i++) { if (this.IsInGamePlayer(i)) { this.m_DealerPosition = i; if (message) this.SendDealerChangedMessage(); return; } } }", "label": "ComplexMethod"}
{"text": "public class VkStatsRequest { private readonly Vkontakte _vkontakte; internal VkStatsRequest(Vkontakte vkontakte) { _vkontakte = vkontakte; } /// <summary> /// Tracks user in stats /// </summary> /// <returns></returns> public async Task<bool> TrackVisitor() { if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) throw new Exception(\"Access token is not valid.\"); var parameters = new Dictionary<string, string>(); _vkontakte.SignMethod(parameters); var response = await new VkRequest(new Uri(VkConst.MethodBase + \"stats.trackVisitor\"), parameters).Execute(); if (response != null && response[\"response\"] != null) { return true; } return false; } }", "label": "FeatureEnvy"}
{"text": "public sealed class SpellbookContent6017 : Packet { public SpellbookContent6017(int count, int offset, ulong content, Item item) : base(0x3C) { EnsureCapacity(5 + (count * 20)); int written = 0; m_Stream.Write((ushort)0); ulong mask = 1; for (int i = 0; i < 64; ++i, mask <<= 1) { if ((content & mask) != 0) { m_Stream.Write((0x7FFFFFFF - i)); m_Stream.Write((ushort)0); m_Stream.Write((byte)0); m_Stream.Write((ushort)(i + offset)); m_Stream.Write((short)0); m_Stream.Write((short)0); m_Stream.Write((byte)0); // Grid Location? m_Stream.Write(item.Serial); m_Stream.Write((short)0); ++written; } } m_Stream.Seek(3, SeekOrigin.Begin); m_Stream.Write((ushort)written); } }", "label": "FeatureEnvy"}
{"text": "[global::System.Diagnostics.DebuggerNonUserCodeAttribute] public override int GetHashCode() { int hash = 1; if (LowerBound != 0) hash ^= LowerBound.GetHashCode(); if (UpperBound != 0) hash ^= UpperBound.GetHashCode(); if (PressureThreshold != 0) hash ^= PressureThreshold.GetHashCode(); if (RampupRate != 0D) hash ^= RampupRate.GetHashCode(); if (BackoffThreshold != 0D) hash ^= BackoffThreshold.GetHashCode(); if (BackoffRate != 0D) hash ^= BackoffRate.GetHashCode(); if (MessagesPerResize != 0) hash ^= MessagesPerResize.GetHashCode(); return hash; }", "label": "ComplexMethod"}
{"text": "#endregion //------------------------------------------------------------------------------------ #region ** nested classes /// <summary> /// Class that handles deferring notifications while the view is modified. /// </summary> class DeferNotifications : IDisposable { ListCollectionView _view; object _currentItem; internal DeferNotifications(ListCollectionView view) { _view = view; _currentItem = _view.CurrentItem; _view._updating++; } public void Dispose() { _view.MoveCurrentTo(_currentItem); _view._updating--; _view.Refresh(); } }", "label": "FeatureEnvy"}
{"text": "/// <exception cref=\"IOException\"/> public static ProtocolVersion Get(int major, int minor) { switch (major) { case 0x03: { switch (minor) { case 0x00: return SSLv3; case 0x01: return TLSv10; case 0x02: return TLSv11; case 0x03: return TLSv12; } return GetUnknownVersion(major, minor, \"TLS\"); } case 0xFE: { switch (minor) { case 0xFF: return DTLSv10; case 0xFE: throw new TlsFatalAlert(AlertDescription.illegal_parameter); case 0xFD: return DTLSv12; } return GetUnknownVersion(major, minor, \"DTLS\"); } default: { throw new TlsFatalAlert(AlertDescription.illegal_parameter); } } }", "label": "ComplexMethod"}
{"text": "private static Item CreatePowerScroll(int type) { if (type == 5 || type == 10 || type == 15 || type == 20) return new PowerScroll(SkillName.Tailoring, 100 + type); throw new InvalidOperationException(); }", "label": "ComplexConditional"}
{"text": "public int Compare(object x, object y) { string a = null, b = null; if (x is CategoryEntry) a = ((CategoryEntry)x).Title; else if (x is CategoryTypeEntry) a = ((CategoryTypeEntry)x).Type.Name; if (y is CategoryEntry) b = ((CategoryEntry)y).Title; else if (y is CategoryTypeEntry) b = ((CategoryTypeEntry)y).Type.Name; if (a == null && b == null) return 0; if (a == null) return 1; if (b == null) return -1; return a.CompareTo(b); }", "label": "ComplexMethod"}
{"text": "public virtual void InvalidateStraySpawn(BaseCreature creature) { if (creature == null || creature.Deleted || creature.Region == null || State == PvPBattleState.Internal || Hidden) { return; } if (!AllowSpawn()) { Eject(creature, creature.ControlMaster != null); } }", "label": "ComplexConditional"}
{"text": "private class ShutdownMonitor : IRegisteredObject { private readonly IMonitor _monitor; public ShutdownMonitor(IMonitor monitor) { _monitor = monitor; } public void Stop(bool immediate) { if (immediate) return; try { _monitor.Event(\"Application Shutdown\", null, new Dictionary<string, string> { { \"Reason\", HostingEnvironment.ShutdownReason.ToString() } }); } catch (Exception ex) { _monitor.Exception(ex, null); } } }", "label": "FeatureEnvy"}
{"text": "public class CodeFormatHandler { readonly OmniSharpConfiguration _config; public CodeFormatHandler(OmniSharpConfiguration config) { _config = config; } public CodeFormatResponse Format(CodeFormatRequest request) { var options = _config.TextEditorOptions; var policy = _config.CSharpFormattingOptions; var formatter = new CSharpFormatter(policy, options); formatter.FormattingMode = FormattingMode.Intrusive; var output = formatter.Format(request.Buffer); return new CodeFormatResponse(output); } }", "label": "FeatureEnvy"}
{"text": "public virtual void TeleportToSpawnPoint(PvPTeam team, PlayerMobile pm) { if (pm != null && !pm.Deleted && team != null && !team.Deleted && team.IsMember(pm)) { Teleport(pm, team.SpawnPoint, Options.Locations.Map); } }", "label": "ComplexConditional"}
{"text": "internal class LoadingBlock : IDisposable { public LoadingBlock(EntityManager entityManager, bool allowHasChangesAction) { _entityManager = entityManager; _wasLoadingEntity = _entityManager.IsLoadingEntity; if (!allowHasChangesAction) { // makes the HasChangesAction a noop if not already set; _entityManager.HasChangesAction = entityManager.HasChangesAction ?? (() => { return; }); } entityManager.IsLoadingEntity = true; } public void Dispose() { if (!_wasLoadingEntity) { _entityManager.FireQueuedEvents(); if (_entityManager.HasChangesAction != null) { _entityManager.HasChangesAction(); _entityManager.HasChangesAction = null; } } _entityManager.IsLoadingEntity = _wasLoadingEntity; } private EntityManager _entityManager; private bool _wasLoadingEntity; }", "label": "FeatureEnvy"}
{"text": "public class AddedVertex { private Vector2 position; public Vector2 Position { get { return position; } } internal AddedVertex(double x, double y) { position.X = x; position.Y = y; } }", "label": "FeatureEnvy"}
{"text": "public void Trade(ItemsInterface DistInter) { Log.Success(\"Trade\", \"TRADE !\"); Player Me = GetPlayer(); Player Other = DistInter.GetPlayer(); bool AllOk = true; if (DistInter.TradingMoney > 0) if (!Other.HaveMoney(DistInter.TradingMoney)) AllOk = false; if (TradingMoney > 0) if (!Me.HaveMoney(TradingMoney)) AllOk = false; // TODO : CheckItem if (AllOk) { if (Other.RemoveMoney(DistInter.TradingMoney)) Me.AddMoney(DistInter.TradingMoney); if (Me.RemoveMoney(TradingMoney)) Other.AddMoney(TradingMoney); } SendTradeClose(Other.Oid); DistInter.SendTradeClose(Me.Oid); CloseTrade(); }", "label": "ComplexMethod"}
{"text": "public static void ValidateSharedName(PlayerMobile m) { if (m != null && !CSOptions.NameSharing && FindPlayers(m.RawName, p => p != m && p.GameTime > m.GameTime).Any()) { new ForcePlayerRenameDialog(m).Send(); } }", "label": "ComplexConditional"}
{"text": "public sealed class CancelTarget : Packet { public static readonly Packet Instance = SetStatic(new CancelTarget()); public CancelTarget() : base(0x6C, 19) { m_Stream.Write((byte)0); m_Stream.Write(0); m_Stream.Write((byte)3); m_Stream.Fill(); } }", "label": "FeatureEnvy"}
{"text": "internal static Type GetType(string name) { Type type = null; Assembly callingAssembly = Assembly.GetCallingAssembly(); if (callingAssembly != null) { type = callingAssembly.GetType(name); if (type != null) return type; } Assembly executingAssembly = Assembly.GetExecutingAssembly(); if (executingAssembly != null) { type = executingAssembly.GetType(name); if (type != null) return type; } Assembly entryAssembly = Assembly.GetEntryAssembly(); if (entryAssembly != null) { type = entryAssembly.GetType(name); if (type != null) return type; } foreach (Assembly asm in GetAllAssemblies()) { type = asm.GetType(name); if (type != null) return type; } return type; }", "label": "ComplexMethod"}
{"text": "private static Item CreateAncientHammer(int type) { if (type == 10 || type == 15 || type == 30 || type == 60) return new AncientSmithyHammer(type); throw new InvalidOperationException(); }", "label": "ComplexConditional"}
{"text": "public override T GetOption<T>(ChannelOption<T> option) { if (ChannelOption.SoRcvbuf.Equals(option)) { return (T) (object) ReceiveBufferSize; } if (ChannelOption.SoSndbuf.Equals(option)) { return (T) (object) SendBufferSize; } if (ChannelOption.TcpNodelay.Equals(option)) { return (T) (object) TcpNoDelay; } if (ChannelOption.SoKeepalive.Equals(option)) { return (T) (object) KeepAlive; } if (ChannelOption.SoReuseaddr.Equals(option)) { return (T) (object) ReuseAddress; } if (ChannelOption.SoLinger.Equals(option)) { return (T) (object) Linger; } if (ChannelOption.AllowHalfClosure.Equals(option)) { return (T) (object) AllowHalfClosure; } return base.GetOption(option); }", "label": "ComplexMethod"}
{"text": "public static string GetDigestName( HashAlgorithmTag hashAlgorithm) { switch (hashAlgorithm) { case HashAlgorithmTag.Sha1: return \"SHA1\"; case HashAlgorithmTag.MD2: return \"MD2\"; case HashAlgorithmTag.MD5: return \"MD5\"; case HashAlgorithmTag.RipeMD160: return \"RIPEMD160\"; case HashAlgorithmTag.Sha224: return \"SHA224\"; case HashAlgorithmTag.Sha256: return \"SHA256\"; case HashAlgorithmTag.Sha384: return \"SHA384\"; case HashAlgorithmTag.Sha512: return \"SHA512\"; default: throw new PgpException(\"unknown hash algorithm tag in GetDigestName: \" + hashAlgorithm); } }", "label": "ComplexMethod"}
{"text": "internal void ProcessType(Type type) { if (this.alreadyProcessed.Contains(type) || type.IsInterface || type.IsAbstract || !this.condition(type)) return; this.alreadyProcessed.Add(type); this.callback(type); }", "label": "ComplexConditional"}
{"text": "public override DataTemplate SelectTemplate(object item, DependencyObject container) { if (item is LocalAudio) return LocalTrackTemplate; else if (item is Audio) return TrackTemplate; else if (item is LastFmAlbum) return AlbumTemplate; else if (item is LastFmArtist) return ArtistTemplate; else if (item is VkGroup) return SocietyTemplate; else if (item is AudioAlbum) return LocalAlbumTemplate; else if (item is AudioArtist) return LocalArtistTemplate; return null; }", "label": "ComplexMethod"}
{"text": "public override void CheckProgress() { Mobile from = System.From; if (from.Map == Map.Malas && from.X > 399 && from.X < 408 && from.Y > 1091 && from.Y < 1099) Complete(); }", "label": "ComplexConditional"}
{"text": "public class InnerListener : IObserver<object>, IDisposable { private readonly BindingExpression _owner; private readonly IDisposable _dispose; public InnerListener(BindingExpression owner) { _owner = owner; _dispose = owner._inner.Subscribe(this); } public void Dispose() => _dispose.Dispose(); public void OnCompleted() => _owner.PublishCompleted(); public void OnError(Exception error) => _owner.PublishError(error); public void OnNext(object value) { if (value == BindingOperations.DoNothing) { return; } var converted = _owner.ConvertValue(value); if (converted == BindingOperations.DoNothing) { return; } _owner._value = new WeakReference<object>(converted); _owner.PublishNext(converted); } }", "label": "FeatureEnvy"}
{"text": "#if DEBUG public override string ToString() { StringBuilder stbuilder = new StringBuilder(); bool appendComma = false; if (XPlacement != 0) { stbuilder.Append(\"XPlacement=\" + XPlacement); appendComma = true; } if (YPlacement != 0) { if (appendComma) { stbuilder.Append(','); } stbuilder.Append(\" YPlacement=\" + YPlacement); appendComma = true; } if (XAdvance != 0) { if (appendComma) { stbuilder.Append(','); } stbuilder.Append(\" XAdvance=\" + XAdvance); appendComma = true; } if (YAdvance != 0) { if (appendComma) { stbuilder.Append(','); } stbuilder.Append(\" YAdvance=\" + YAdvance); appendComma = true; } return stbuilder.ToString(); }", "label": "ComplexMethod"}
{"text": "public int Compare(Guild x, Guild y) { if (x == null && y == null) return 0; else if (x == null) return -1; else if (y == null) return 1; GuildCompareStatus aStatus = GuildCompareStatus.Peace; GuildCompareStatus bStatus = GuildCompareStatus.Peace; if (this.m_Guild.IsAlly(x)) aStatus = GuildCompareStatus.Ally; else if (this.m_Guild.IsWar(x)) aStatus = GuildCompareStatus.War; if (this.m_Guild.IsAlly(y)) bStatus = GuildCompareStatus.Ally; else if (this.m_Guild.IsWar(y)) bStatus = GuildCompareStatus.War; return ((int)aStatus).CompareTo((int)bStatus); }", "label": "ComplexMethod"}
{"text": "public static void Offset(Direction d, ref int x, ref int y) { switch (d & Direction.Mask) { case Direction.North: --y; break; case Direction.South: ++y; break; case Direction.West: --x; break; case Direction.East: ++x; break; case Direction.Right: ++x; --y; break; case Direction.Left: --x; ++y; break; case Direction.Down: ++x; ++y; break; case Direction.Up: --x; --y; break; } }", "label": "ComplexMethod"}
{"text": "public sealed class LoginConfirm : Packet { public LoginConfirm(Mobile m) : base(0x1B, 37) { m_Stream.Write(m.Serial); m_Stream.Write(0); m_Stream.Write((short)m.Body); m_Stream.Write((short)m.X); m_Stream.Write((short)m.Y); m_Stream.Write((short)m.Z); m_Stream.Write((byte)m.Direction); m_Stream.Write((byte)0); m_Stream.Write(-1); Map map = m.Map; if (map == null || map == Map.Internal) { map = m.LogoutMap; } m_Stream.Write((short)0); m_Stream.Write((short)0); m_Stream.Write((short)(map == null ? 6144 : map.Width)); m_Stream.Write((short)(map == null ? 4096 : map.Height)); m_Stream.Fill(); } }", "label": "FeatureEnvy"}
{"text": "private int GetSpaceOnSingleLine(Analyzer.AnalysisResult result) { if (result.HasTrailingSpace || result.HasUnknownWhitespace || result.LineBreaks > 0 || result.Tab > 0) { return -1; } return result.Space; }", "label": "ComplexConditional"}
{"text": "public class LogStructureWithInput { private readonly LogFlowStructure _flowStructure; internal LogStructureWithInput(LogFlowStructure flowStructure) { _flowStructure = flowStructure; } public LogStructureWithInput Then(ILogProcessor processor) { processor.SetContext(_flowStructure.Context); _flowStructure.Processors.Add(processor); return new LogStructureWithInput(_flowStructure); } [Obsolete(\"Use then method\")] public void ToOutput(ILogOutput output) { output.SetContext(_flowStructure.Context); _flowStructure.Output = output; } }", "label": "FeatureEnvy"}
{"text": "private static string Unescape(string str) { StringBuilder sb = null; bool escaped = false; for (var i = 0; i < str.Length; i++) { var c = str[i]; if (escaped) { if (sb == null) { sb = new StringBuilder(str.Length); if (i > 1) { sb.Append(str.Substring(0, i - 1)); } } char unescaped; if (_escapeTranslations.TryGetValue(c, out unescaped)) { sb.Append(unescaped); } else { // General rule: \\x ==> x sb.Append(c); } escaped = false; } else { if (c == '\\\\') { escaped = true; } else if (sb != null) { sb.Append(c); } } } return sb == null ? str : sb.ToString(); }", "label": "ComplexMethod"}
{"text": "public void SelfCheck(int tileNumber) { if (version != 1 || tileSize != 32 || compressionType != 1 || magic != \"spring tilefile\" || tileNumber != numTiles) throw new Exception(\"Invalid SMT\"); }", "label": "ComplexConditional"}
{"text": "// Quote items that contain commas and are not already quoted. private static string QuoteIfNeeded(string value) { if (!string.IsNullOrEmpty(value) && value.Contains(',') && (value[0] != '\"' || value[value.Length - 1] != '\"')) { return $\"\\\"{value}\\\"\"; } return value; }", "label": "ComplexConditional"}
{"text": "[global::System.Diagnostics.DebuggerNonUserCodeAttribute] public override bool Equals(object other) { return Equals(other as BenchmarkType); }[global::System.Diagnostics.DebuggerNonUserCodeAttribute] public bool Equals(BenchmarkType other) { if (ReferenceEquals(other, null)) { return false; } if (ReferenceEquals(other, this)) { return true; } if (BenchmarkTypeId != other.BenchmarkTypeId) return false; if (BenchmarkRunId != other.BenchmarkRunId) return false; if (FullTypeName != other.FullTypeName) return false; if (Namespace != other.Namespace) return false; if (Type != other.Type) return false; if(!benchmarks_.Equals(other.benchmarks_)) return false; return true; }", "label": "ComplexMethod"}
{"text": "private void Sistema_KeyUp(object sender, KeyEventArgs e) { if (e.KeyCode == Keys.P || e.KeyCode == Keys.T || e.KeyCode == Keys.M || e.KeyCode == Keys.D) keyDown = Keys.Escape; }", "label": "ComplexConditional"}
{"text": "public void BuildCache(RantDictionaryTable table) { lock (syncObject) { ClearAll(); foreach (var entry in table.GetEntries()) { foreach (var cl in entry.GetClasses()) { HashSet<RantDictionaryEntry> set; _allClasses.Add(cl); if (!_cache.TryGetValue(cl, out set)) { set = _cache[cl] = GetPool(); } set.Add(entry); } } foreach (var cl in _allClasses) { if (!_invCache.TryGetValue(cl, out HashSet<RantDictionaryEntry> set)) { set = _invCache[cl] = GetPool(); } foreach (var entry in table.GetEntries()) { if (!entry.ContainsClass(cl)) set.Add(entry); } } } }", "label": "ComplexMethod"}
{"text": "public bool TouchBegan(CCTouch touch) { var pos = Layer.ScreenToWorldspace(touch.LocationOnScreen); if (pos.X >= 0 && pos.X < ContentSize.Width && pos.Y >= 0 && pos.Y <= ContentSize.Height) { return true; } return false; }", "label": "ComplexConditional"}
{"text": "public override bool ValidLocation(Coordinates3D location) { if (location.X - LeafRadius < 0 || location.X + LeafRadius >= Chunk.Width || location.Z - LeafRadius < 0 || location.Z + LeafRadius >= Chunk.Depth) return false; return true; }", "label": "ComplexConditional"}
{"text": "static bool CheckMarker(String s) { if (s.Length != 4) return false; for (int k = 0; k < 4; ++k) { char c = s[k]; if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) return false; } return true; }", "label": "ComplexConditional"}
{"text": "public void SelfCheck() { if (magic != \"spring map file\" || version != 1 || mapx%128 != 0 || mapy%128 != 0 || squareSize != 8 || texelPerSquare != 8 || tilesize != 32) { throw new Exception(\"Invalid SMF header\"); } }", "label": "ComplexConditional"}
{"text": "public override void OnMovement(Mobile m, Point3D oldLocation) { base.OnMovement(m, oldLocation); if (Backpack != null && IsAccessibleTo(m) && m.InRange(oldLocation, 3) && !m.InRange(this, 3)) Backpack.SendRemovePacket(); }", "label": "ComplexConditional"}
{"text": "public override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list) { base.GetContextMenuEntries(from, list); if (from.Alive && m_Quantity >= m_Partial && m_Quantity < m_Completed && IsChildOf(from.Backpack)) list.Add(new DisassembleEntry(this)); }", "label": "ComplexConditional"}
{"text": "class Switch : IObserver<T> { readonly SwitchObserver parent; readonly ulong id; public Switch(SwitchObserver observer, ulong id) { this.parent = observer; this.id = id; } public void OnNext(T value) { lock (parent.gate) { if (parent.latest == id) { parent.observer.OnNext(value); } } } public void OnError(Exception error) { lock (parent.gate) { if (parent.latest == id) { parent.observer.OnError(error); } } } public void OnCompleted() { lock (parent.gate) { if (parent.latest == id) { parent.hasLatest = false; if (parent.isStopped) { parent.observer.OnCompleted(); } } } } }", "label": "FeatureEnvy"}
{"text": "public class UserViewModel : BaseViewModel { private UserInfo userInfo; private string displayAddress; public UserViewModel() { userInfo = AuthInfo.Instance.UserInfo; //userInfo = null; } //public UserViewModel(UserInfo userInfo) //{ // this.userInfo = userInfo; //} //end ctor public UserInfo UserInfo { get { return userInfo; } set { userInfo = value; this.SetLocationInfo(); OnPropertyChanged(\"UserInfo\"); } } private async Task SetLocationInfo() { this.DisplayAddress = userInfo.StreetAddress + Environment.NewLine + userInfo.City + \", \" + userInfo.State + \" \" + userInfo.PostalCode + \", \" + userInfo.Country; } public string DisplayAddress { get { return displayAddress; } set { displayAddress = value; OnPropertyChanged(\"DisplayAddress\"); } } }", "label": "FeatureEnvy"}
{"text": "private static string GetNintendoRegionCode(string serial) { char region = serial[3]; switch (region) { case 'D': // germany return \"DE\"; case 'E': // usa case 'N': // jp import to usa return \"US\"; case 'F': return \"FR\"; case 'I': return \"IT\"; case 'J': return \"JP\"; case 'Q': // kr with japanese lang case 'K': return \"KR\"; case 'P': // pal case 'L': case 'M': // jp import to eu return \"EU\"; case 'R': return \"RU\"; case 'S': return \"ES\"; case 'T': return \"TW\"; case 'U': // u for australia return \"AU\"; case 'C': return \"CN\"; default: return \"ZZ\"; } }", "label": "ComplexMethod"}
{"text": "public override void AlterMeleeDamageTo(Mobile to, ref int damage) { if (to is Dragon || to is WhiteWyrm || to is SwampDragon || to is Drake || to is Nightmare || to is Hiryu || to is LesserHiryu || to is Daemon) damage *= 3; }", "label": "ComplexConditional"}
{"text": "// unsure of proper format, client crashes public sealed class MobileName : Packet { public MobileName(Mobile m) : base(0x98) { string name = m.Name; if (name == null) { name = \"\"; } EnsureCapacity(37); m_Stream.Write(m.Serial); m_Stream.WriteAsciiFixed(name, 30); } }", "label": "FeatureEnvy"}
{"text": "public sealed class TargetReq : Packet { public TargetReq(Target t) : base(0x6C, 19) { m_Stream.Write(t.AllowGround); m_Stream.Write(t.TargetID); m_Stream.Write((byte)t.Flags); m_Stream.Fill(); } }", "label": "FeatureEnvy"}
{"text": "public T? DataAs<T>() where T : struct { Type dataTypeType = null; switch (DataType) { case MetaDataType.Bool: dataTypeType = typeof(bool); break; case MetaDataType.Float: dataTypeType = typeof(float); break; case MetaDataType.Double: dataTypeType = typeof(double); break; case MetaDataType.Int32: dataTypeType = typeof(int); break; case MetaDataType.String: dataTypeType = typeof(String); break; case MetaDataType.UInt64: dataTypeType = typeof(UInt64); break; case MetaDataType.Vector3D: dataTypeType = typeof(Vector3); break; } if (dataTypeType == typeof(T)) return (T)Data; return null; }", "label": "ComplexMethod"}
{"text": "public sealed class MultiTargetReq : Packet { public MultiTargetReq(MultiTarget t) : base(0x99, 26) { m_Stream.Write(t.AllowGround); m_Stream.Write(t.TargetID); m_Stream.Write((byte)t.Flags); m_Stream.Fill(); m_Stream.Seek(18, SeekOrigin.Begin); m_Stream.Write((short)t.MultiID); m_Stream.Write((short)t.Offset.X); m_Stream.Write((short)t.Offset.Y); m_Stream.Write((short)t.Offset.Z); } }", "label": "FeatureEnvy"}
{"text": "public override bool AllowHarmful(Mobile from, Mobile target) { if (Battle != null && Battle.State != PvPBattleState.Internal && !Battle.Hidden && !Battle.AllowHarmful(from, target)) { return false; } return base.AllowHarmful(from, target); }", "label": "ComplexConditional"}
{"text": "static List<int> getNoteTech(SongNote2014 n) { // TODO: adjust these values var t = new List<int>(); if (1 == n.Accent) t.Add(0); if (0 != n.Bend) t.Add(1); if (1 == n.Mute) t.Add(2); if (1 == n.HammerOn) t.Add(3); if (1 == n.Harmonic) t.Add(4); if (1 == n.HarmonicPinch) t.Add(5); if (1 == n.Hopo) t.Add(6); if (1 == n.PalmMute) t.Add(7); if (1 == n.Pluck) t.Add(8); if (1 == n.PullOff) t.Add(9); if (1 == n.Slap) t.Add(10); if (n.SlideTo > 0) t.Add(11); if (n.SlideUnpitchTo > 0) t.Add(12); if (n.Sustain > 0) t.Add(13); if (1 == n.Tap) t.Add(14); if (1 == n.Tremolo) t.Add(15); if (1 == n.Vibrato) t.Add(16); // TODO: determine other dependencies return t; }", "label": "ComplexMethod"}
{"text": "public sealed class CharacterListUpdate : Packet { public CharacterListUpdate(IAccount a) : base(0x86) { EnsureCapacity(4 + (a.Length * 60)); int highSlot = -1; for (int i = 0; i < a.Length; ++i) { if (a[i] != null) { highSlot = i; } } int count = Math.Max(Math.Max(highSlot + 1, a.Limit), 5); m_Stream.Write((byte)count); for (int i = 0; i < count; ++i) { Mobile m = a[i]; if (m != null) { m_Stream.WriteAsciiFixed(m.Name, 30); m_Stream.Fill(30); // password } else { m_Stream.Fill(60); } } } }", "label": "FeatureEnvy"}
{"text": "public sealed class VendorBuyList : Packet { public VendorBuyList(Mobile vendor, List<BuyItemState> list) : base(0x74) { EnsureCapacity(256); var BuyPack = vendor.FindItemOnLayer(Layer.ShopBuy) as Container; m_Stream.Write((BuyPack == null ? Serial.MinusOne : BuyPack.Serial)); m_Stream.Write((byte)list.Count); for (int i = 0; i < list.Count; ++i) { BuyItemState bis = list[i]; m_Stream.Write(bis.Price); string desc = bis.Description; if (desc == null) { desc = \"\"; } m_Stream.Write((byte)(desc.Length + 1)); m_Stream.WriteAsciiNull(desc); } } }", "label": "FeatureEnvy"}
{"text": "public string MapInfo(Vector2 mapPos) { Vector2d pos = MousePosition(mapPos); double mlon = pos.x; double mlat = pos.y; if (mlon >= -180 && mlon <= 180 && mlat >= -90 && mlat <= 90) return mouseOverInfo(mlon, mlat); else return \"\"; }", "label": "ComplexConditional"}
{"text": "private class DisposableTag : IDisposable { private readonly TagSet _items; public DisposableTag(TagSet items, string value) { _items = items; Value = value; } public string Value { get; private set; } public void Dispose() { if (_items.Contains(Value)) _items.Remove(Value); } }", "label": "FeatureEnvy"}
{"text": "public class Food : IMod { public void PreStart(ModManager m) { m.RequireMod(\"CoreBlocks\"); } public void Start(ModManager manager) { m = manager; m.RegisterOnBlockUse(OnUse); Cake = m.GetBlockId(\"Cake\"); Apples = m.GetBlockId(\"Apples\"); } ModManager m; int Cake, Apples; void OnUse(int player, int x, int y, int z) { int[] food = { Cake, Apples }; for(int i = 0; i < food.Length; i++) { if (m.GetBlock(x, y, z) == food[i]) { int health = m.GetPlayerHealth(player); int maxhealth = m.GetPlayerMaxHealth(player); health += 30; if (health > maxhealth) { health = maxhealth; } m.SetPlayerHealth(player, health, maxhealth); m.SetBlock(x, y, z, 0); } } } }", "label": "FeatureEnvy"}
{"text": "private static object CreateOne(SpecialType specialType) { switch (specialType) { case SpecialType.System_SByte: return (sbyte)1; case SpecialType.System_Byte: return (byte)1; case SpecialType.System_Int16: return (short)1; case SpecialType.System_UInt16: return (ushort)1; case SpecialType.System_Int32: return (int)1; case SpecialType.System_UInt32: return (uint)1; case SpecialType.System_Int64: return (long)1; case SpecialType.System_UInt64: return (ulong)1; default: return 1; } }", "label": "ComplexMethod"}
{"text": "public sealed class VendorSellList : Packet { public VendorSellList(Mobile shopkeeper, Hashtable table) : base(0x9E) { EnsureCapacity(256); m_Stream.Write(shopkeeper.Serial); m_Stream.Write((ushort)table.Count); foreach (SellItemState state in table.Values) { m_Stream.Write(state.Item.Serial); m_Stream.Write((ushort)state.Item.ItemID); m_Stream.Write((ushort)state.Item.Hue); m_Stream.Write((ushort)state.Item.Amount); m_Stream.Write((ushort)state.Price); string name = state.Item.Name; if (name == null || (name = name.Trim()).Length <= 0) { name = state.Name; } if (name == null) { name = \"\"; } m_Stream.Write((ushort)(name.Length)); m_Stream.WriteAsciiFixed(name, (ushort)(name.Length)); } } }", "label": "FeatureEnvy"}
{"text": "private static void CheckCoordVar(string s) { if (string.IsNullOrWhiteSpace(s) || (s != \"x\" && s != \"y\" && s != \"z\")) throw new ArgumentException(\"expected assignment of x, y, or z (e.g. x=2*t)\"); }", "label": "ComplexConditional"}
{"text": "public class Food : IMod { public void PreStart(ModManager m) { m.RequireMod(\"CoreBlocks\"); } public void Start(ModManager manager) { m = manager; m.RegisterOnBlockUse(OnUse); Cake = m.GetBlockId(\"Cake\"); Apples = m.GetBlockId(\"Apples\"); } ModManager m; int Cake, Apples; void OnUse(int player, int x, int y, int z) { int[] food = { Cake, Apples }; for(int i = 0; i < food.Length; i++) { if (m.GetBlock(x, y, z) == food[i]) { int health = m.GetPlayerHealth(player); int maxhealth = m.GetPlayerMaxHealth(player); health += 30; if (health > maxhealth) { health = maxhealth; } m.SetPlayerHealth(player, health, maxhealth); m.SetBlock(x, y, z, 0); } } } }", "label": "FeatureEnvy"}
{"text": "private class ConnectionClosingClosure { private readonly AsyncServer _server; private readonly UserId _id; public ConnectionClosingClosure(AsyncServer server, UserId id) { _id = id; _server = server; } [SecuritySafeCritical] public void Callback(Exception e) { try { _server.CloseConnection(_id); _server._notifier.ConnectionClosed(new ConnectionEventArgs(_id)); if (e != null) _server._logger.Write(e); } catch(Exception e2) { _server._logger.Write(e2); } } }", "label": "FeatureEnvy"}
{"text": "public class CCGeometryInstance { public CCGeometryPacket GeometryPacket; public CCGeometryInstanceAttributes InstanceAttributes; internal CCGeometryInstance () { GeometryPacket = new CCGeometryPacket(); InstanceAttributes = new CCGeometryInstanceAttributes(); } internal void Clear() { GeometryPacket.Texture = null; InstanceAttributes.AdditionalTransform = CCAffineTransform.Identity; InstanceAttributes.BlendState = BlendState.AlphaBlend; InstanceAttributes.PrimitiveType = PrimitiveType.TriangleList; } }", "label": "FeatureEnvy"}
{"text": "public override bool CheckPoisonImmunity(Mobile from, Poison poison) { if (Young && (DuelContext == null || !DuelContext.Started || DuelContext.Finished)) { return true; } return base.CheckPoisonImmunity(from, poison); }", "label": "ComplexConditional"}
{"text": "internal class WeaverReferences { private readonly ModuleWeaver _weaver; public WeaverReferences(ModuleWeaver weaver) { _weaver = weaver; Orm = LoadAssemblyReference(\"RomanticWeb\"); } public AssemblyDefinition Orm { get; private set; } private AssemblyDefinition LoadAssemblyReference(string assemblyFullName) { var existingReference = _weaver.ModuleDefinition.AssemblyReferences.FirstOrDefault(x => x.Name == assemblyFullName); if (existingReference != null) { return _weaver.AssemblyResolver.Resolve(existingReference); } var reference = _weaver.AssemblyResolver.Resolve(assemblyFullName); if (reference != null) { return reference; } throw new Exception(string.Format(\"Could not resolve a reference to {0}.\", assemblyFullName)); } }", "label": "FeatureEnvy"}
{"text": "public virtual bool Validate(Mobile m) { if (Core.AOS || m == null || !m.Player || m.IsStaff()) return true; Guild g = m.Guild as Guild; if (g == null || g.Type != GuildType.Order) { m.FixedEffect(0x3728, 10, 13); this.Delete(); return false; } return true; }", "label": "ComplexConditional"}
{"text": "public class StepServiceConnection : Java.Lang.Object, IServiceConnection { MainActivity activity; public StepServiceConnection (MainActivity activity) { this.activity = activity; } public void OnServiceConnected (ComponentName name, IBinder service) { var serviceBinder = service as StepServiceBinder; if (serviceBinder != null) { activity.Binder = serviceBinder; activity.IsBound = true; } } public void OnServiceDisconnected (ComponentName name) { activity.IsBound = false; } }", "label": "FeatureEnvy"}
{"text": "public class PositionFromText { public XYInt Pos; public bool Translate(string Text) { var A = 0; var Positions = new SplitCommaText(Text); if ( Positions.PartCount < 2 ) { return false; } if ( IOUtil.InvariantParse(Positions.Parts[0], ref A) ) { Pos.X = A; } else { return false; } if ( IOUtil.InvariantParse(Positions.Parts[1], ref A) ) { Pos.Y = A; } else { return false; } return true; } }", "label": "FeatureEnvy"}
{"text": "private void NumberColumn_KeyPress(object sender, KeyPressEventArgs e) { if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != ',') { e.Handled = true; } }", "label": "ComplexConditional"}
{"text": "public sealed class DisplayGump : Packet { public DisplayGump(Gump g, string layout, string[] text) : base(0xB0) { if (layout == null) { layout = \"\"; } EnsureCapacity(256); m_Stream.Write(g.Serial); m_Stream.Write(g.TypeID); m_Stream.Write(g.X); m_Stream.Write(g.Y); m_Stream.Write((ushort)(layout.Length + 1)); m_Stream.WriteAsciiNull(layout); m_Stream.Write((ushort)text.Length); for (int i = 0; i < text.Length; ++i) { string v = text[i]; if (v == null) { v = \"\"; } int length = (ushort)v.Length; m_Stream.Write((ushort)length); m_Stream.WriteBigUniFixed(v, length); } } }", "label": "FeatureEnvy"}
{"text": "private int GetCountIndicatorLength(int version, EncodingMode encMode) { if (version < 10) { if (encMode.Equals(EncodingMode.Numeric)) return 10; else if (encMode.Equals(EncodingMode.Alphanumeric)) return 9; else return 8; } else if (version < 27) { if (encMode.Equals(EncodingMode.Numeric)) return 12; else if (encMode.Equals(EncodingMode.Alphanumeric)) return 11; else if (encMode.Equals(EncodingMode.Byte)) return 16; else return 10; } else { if (encMode.Equals(EncodingMode.Numeric)) return 14; else if (encMode.Equals(EncodingMode.Alphanumeric)) return 13; else if (encMode.Equals(EncodingMode.Byte)) return 16; else return 12; } }", "label": "ComplexMethod"}
{"text": "public sealed class MessageLocalizedAffix : Packet { public MessageLocalizedAffix( Serial serial, int graphic, MessageType messageType, int hue, int font, int number, string name, AffixType affixType, string affix, string args) : base(0xCC) { if (name == null) { name = \"\"; } if (affix == null) { affix = \"\"; } if (args == null) { args = \"\"; } if (hue == 0) { hue = 0x3B2; } EnsureCapacity(52 + affix.Length + (args.Length * 2)); m_Stream.Write(serial); m_Stream.Write((short)graphic); m_Stream.Write((byte)messageType); m_Stream.Write((short)hue); m_Stream.Write((short)font); m_Stream.Write(number); m_Stream.Write((byte)affixType); m_Stream.WriteAsciiFixed(name, 30); m_Stream.WriteAsciiNull(affix); m_Stream.WriteBigUniNull(args); } }", "label": "FeatureEnvy"}
{"text": "public sealed class AccountLoginAck : Packet { public AccountLoginAck(ServerInfo[] info) : base(0xA8) { EnsureCapacity(6 + (info.Length * 40)); m_Stream.Write((byte)0x5D); // Unknown m_Stream.Write((ushort)info.Length); for (int i = 0; i < info.Length; ++i) { ServerInfo si = info[i]; m_Stream.Write((ushort)i); m_Stream.WriteAsciiFixed(si.Name, 32); m_Stream.Write((byte)si.FullPercent); m_Stream.Write((sbyte)si.TimeZone); m_Stream.Write(Utility.GetAddressValue(si.Address.Address)); } } }", "label": "FeatureEnvy"}
{"text": "public bool GetAllChildren( ICollection<T> list, int limit ) { if( list.Count >= limit ) return false; if( Payload != null ) { list.Add( Payload ); } if( Children == null ) return true; switch( Tag ) { case MultiNode: // ReSharper disable LoopCanBeConvertedToQuery for( int i = 0; i < Children.Length; i++ ) { if( Children[i] == null ) continue; if( !Children[i].GetAllChildren( list, limit ) ) return false; } // ReSharper restore LoopCanBeConvertedToQuery return true; case LeafNode: return true; default: return Children[0].GetAllChildren( list, limit ); } }", "label": "ComplexMethod"}
{"text": "class ZipObserver : IObserver<T> { readonly Zip parent; readonly int index; public ZipObserver(Zip parent, int index) { this.parent = parent; this.index = index; } public void OnNext(T value) { lock (parent.gate) { parent.queues[index].Enqueue(value); parent.Dequeue(index); } } public void OnError(Exception ex) { lock (parent.gate) { parent.OnError(ex); } } public void OnCompleted() { lock (parent.gate) { parent.isDone[index] = true; var allTrue = true; for (int i = 0; i < parent.length; i++) { if (!parent.isDone[i]) { allTrue = false; break; } } if (allTrue) { parent.OnCompleted(); } } } }", "label": "FeatureEnvy"}
{"text": "#endregion public void Normalize() public bool IsValid() { if (double.IsNaN(X) || double.IsInfinity(X) || double.IsNaN(Y) || double.IsInfinity(Y)) { return false; } return true; }", "label": "ComplexConditional"}
{"text": "public virtual bool CheckContentDisplay(Mobile from) { if (!DisplaysContent) { return false; } object root = RootParent; if (root == null || root is Item || root == from || from.IsStaff()) { return true; } return false; }", "label": "ComplexConditional"}
{"text": "protected override bool TradeOT(ITrainerInfo tr) { // Check to see if the OT matches the SAV's OT info. if (!(tr.OT == OT_Name && tr.TID == TID && tr.SID == SID && tr.Gender == OT_Gender)) return false; CurrentHandler = 0; return true; }", "label": "ComplexConditional"}
{"text": "public override void Slice() { if (!m_SentRadarConversion && (From.Map != Map.Malas || From.X < 407 || From.X > 431 || From.Y < 801 || From.Y > 830)) { m_SentRadarConversion = true; AddConversation(new RadarConversation()); } base.Slice(); }", "label": "ComplexConditional"}
{"text": "public void Disband() { m_Leader = null; List.Remove(Id); foreach (Mobile m in m_Members) { m.SendLocalizedMessage(502131); // Your guild has disbanded. if (m is PlayerMobile) { ((PlayerMobile)m).GuildRank = RankDefinition.Lowest; } m.Guild = null; } m_Members.Clear(); for (int i = m_Allies.Count - 1; i >= 0; --i) { if (i < m_Allies.Count) { RemoveAlly(m_Allies[i]); } } for (int i = m_Enemies.Count - 1; i >= 0; --i) { if (i < m_Enemies.Count) { RemoveEnemy(m_Enemies[i]); } } if (!NewGuildSystem && m_Guildstone != null) { m_Guildstone.Delete(); } m_Guildstone = null; CheckExpiredWars(); Alliance = null; }", "label": "ComplexMethod"}
{"text": "private static int Comparison(uint160 a, uint160 b) { if (a is null && b is null) return 0; if (a is null && !(b is null)) return -1; if (!(a is null) && b is null) return 1; if (a.pn4 < b.pn4) return -1; if (a.pn4 > b.pn4) return 1; if (a.pn3 < b.pn3) return -1; if (a.pn3 > b.pn3) return 1; if (a.pn2 < b.pn2) return -1; if (a.pn2 > b.pn2) return 1; if (a.pn1 < b.pn1) return -1; if (a.pn1 > b.pn1) return 1; if (a.pn0 < b.pn0) return -1; if (a.pn0 > b.pn0) return 1; return 0; }", "label": "ComplexMethod"}
{"text": "internal static bool CharacterNeedsEscaping(char ch) { if (ch == Keys.SlashForward || ch == Keys.DoubleQuote || ch < Keys.Space || ch == Keys.BackSlash) return true; if (ch < HIGH_SURROGATE_START) return false; if (ch > LOW_SURROGATE_END) return ch >= MAX_CHAR; return true; }", "label": "ComplexConditional"}
{"text": "protected virtual void OnSpeech(SpeechEventArgs e) { if (BlockSpeech && !IsDisposed && IsOpen && !Hidden && !e.Blocked && User.AccessLevel < AccessLevel.Counselor) { e.Blocked = true; } }", "label": "ComplexConditional"}
{"text": "public void Read (TProtocol iprot) { TField field; iprot.ReadStructBegin(); while (true) { field = iprot.ReadFieldBegin(); if (field.Type == TType.Stop) { break; } switch (field.ID) { case 1: if (field.Type == TType.String) { Id = iprot.ReadString(); } else { TProtocolUtil.Skip(iprot, field.Type); } break; case 10: if (field.Type == TType.I64) { ExpirationTime = iprot.ReadI64(); } else { TProtocolUtil.Skip(iprot, field.Type); } break; case 21: if (field.Type == TType.I32) { MaxUseCount = iprot.ReadI32(); } else { TProtocolUtil.Skip(iprot, field.Type); } break; default: TProtocolUtil.Skip(iprot, field.Type); break; } iprot.ReadFieldEnd(); } iprot.ReadStructEnd(); }", "label": "ComplexMethod"}
{"text": "public sealed class MultiTargetReqHS : Packet { public MultiTargetReqHS(MultiTarget t) : base(0x99, 30) { m_Stream.Write((bool)t.AllowGround); m_Stream.Write((int)t.TargetID); m_Stream.Write((byte)t.Flags); m_Stream.Fill(); m_Stream.Seek(18, SeekOrigin.Begin); m_Stream.Write((short)t.MultiID); m_Stream.Write((short)t.Offset.X); m_Stream.Write((short)t.Offset.Y); m_Stream.Write((short)t.Offset.Z); /* m_Stream.Write(t.AllowGround); m_Stream.Write(t.TargetID); m_Stream.Write((byte)t.Flags); m_Stream.Fill(); m_Stream.Seek(18, SeekOrigin.Begin); m_Stream.Write((short)t.MultiID); m_Stream.Write((short)t.Offset.X); m_Stream.Write((short)t.Offset.Y); m_Stream.Write((short)t.Offset.Z); */ } }", "label": "FeatureEnvy"}
{"text": "class X11Timer : IDisposable { private readonly X11PlatformThreading _parent; public X11Timer(X11PlatformThreading parent, DispatcherPriority prio, TimeSpan interval, Action tick) { _parent = parent; Priority = prio; Tick = tick; Interval = interval; Reschedule(); } public DispatcherPriority Priority { get; } public TimeSpan NextTick { get; private set; } public TimeSpan Interval { get; } public Action Tick { get; } public bool Disposed { get; private set; } public void Reschedule() { NextTick = _parent._clock.Elapsed + Interval; } public void Dispose() { Disposed = true; lock (_parent._lock) _parent._timers.Remove(this); } }", "label": "FeatureEnvy"}
{"text": "public override void GenerateLoot() { switch( Utility.Random(10) ) { case 0: this.PackItem(new LeftArm()); break; case 1: this.PackItem(new RightArm()); break; case 2: this.PackItem(new Torso()); break; case 3: this.PackItem(new Bone()); break; case 4: this.PackItem(new RibCage()); break; case 5: if (this.m_DeadPlayer != null && !this.m_DeadPlayer.Deleted) { this.PackItem(new PlayerBones(this.m_DeadPlayer.Name)); } break; default: break; } this.AddLoot(LootPack.Meager); }", "label": "ComplexMethod"}
{"text": "/// <summary> /// Gets the correct Transfer Met location for the origin game. /// </summary> /// <param name=\"pkm\">Pokémon data to suggest for</param> /// <remarks> /// Returns -1 if the met location is not overriden with a transfer location /// </remarks> public static int GetSuggestedTransferLocation(PKM pkm) { if (pkm.HasOriginalMetLocation) return -1; if (pkm.Version == (int) GameVersion.GO) return 30012; if (pkm.VC1) return Legal.Transfer1; if (pkm.VC2) return Legal.Transfer2; if (pkm.Format == 4) // Pal Park return Locations.Transfer3; if (pkm.GenNumber >= 5) return -1; if (pkm.Format >= 5) // Transporter return Legal.GetTransfer45MetLocation(pkm); return -1; }", "label": "ComplexMethod"}
{"text": "public sealed class UnicodeMessage : Packet { public UnicodeMessage( Serial serial, int graphic, MessageType type, int hue, int font, string lang, string name, string text) : base(0xAE) { if (string.IsNullOrEmpty(lang)) { lang = \"ENU\"; } if (name == null) { name = \"\"; } if (text == null) { text = \"\"; } if (hue == 0) { hue = 0x3B2; } EnsureCapacity(50 + (text.Length * 2)); m_Stream.Write(serial); m_Stream.Write((short)graphic); m_Stream.Write((byte)type); m_Stream.Write((short)hue); m_Stream.Write((short)font); m_Stream.WriteAsciiFixed(lang, 4); m_Stream.WriteAsciiFixed(name, 30); m_Stream.WriteBigUniNull(text); } }", "label": "FeatureEnvy"}
{"text": "void HandOffTransactionIfPossible() { if (gotResponse && (body == null || (body != null && bodyFinished)) && transaction != null && next != null) { next.AttachTransaction(transaction); transaction = null; next = null; body = null; } }", "label": "ComplexConditional"}
{"text": "static void EscapeString(StringBuilder sb, string s, bool addQuotes) { if (s == null) { sb.Append(\"null\"); return; } if (addQuotes) sb.Append('\"'); foreach (var c in s) { if ((int)c < 0x20) { switch (c) { case '\\a': sb.Append(@\"\\a\"); break; case '\\b': sb.Append(@\"\\b\"); break; case '\\f': sb.Append(@\"\\f\"); break; case '\\n': sb.Append(@\"\\n\"); break; case '\\r': sb.Append(@\"\\r\"); break; case '\\t': sb.Append(@\"\\t\"); break; case '\\v': sb.Append(@\"\\v\"); break; default: sb.Append(string.Format(@\"\\u{0:X4}\", (int)c)); break; } } else if (c == '\\\\' || c == '\"') { sb.Append('\\\\'); sb.Append(c); } else sb.Append(c); } if (addQuotes) sb.Append('\"'); }", "label": "ComplexMethod"}
{"text": "public class CommandBlockContainer : ParameterContainer { public CommandBlockContainer(int commandCode, params uint[] parameters) : base(parameters) { Header.Code = commandCode; Header.ContainerType = ContainerType.CommandBlock; } }", "label": "FeatureEnvy"}
{"text": "private static void CheckParamVar(string s) { if (string.IsNullOrWhiteSpace(s) || (s != \"t\" && s != \"u\" && s != \"v\")) throw new ArgumentException(\"expected parametrization variable name is t, u, or v\"); }", "label": "ComplexConditional"}
{"text": "class CombineLatestObserver : IObserver<T> { readonly CombineLatest parent; readonly int index; public CombineLatestObserver(CombineLatest parent, int index) { this.parent = parent; this.index = index; } public void OnNext(T value) { lock (parent.gate) { parent.values[index] = value; parent.Publish(index); } } public void OnError(Exception ex) { lock (parent.gate) { parent.OnError(ex); } } public void OnCompleted() { lock (parent.gate) { parent.isCompleted[index] = true; var allTrue = true; for (int i = 0; i < parent.length; i++) { if (!parent.isCompleted[i]) { allTrue = false; break; } } if (allTrue) { parent.OnCompleted(); } } } }", "label": "FeatureEnvy"}
{"text": "/// <summary> /// This recipe step creates a lucene index. /// </summary> public class LuceneIndexStep : IRecipeStepHandler { private readonly LuceneIndexManager _luceneIndexManager; public LuceneIndexStep(LuceneIndexManager luceneIndexManager) { _luceneIndexManager = luceneIndexManager; } public Task ExecuteAsync(RecipeExecutionContext context) { if (!String.Equals(context.Name, \"lucene-index\", StringComparison.OrdinalIgnoreCase)) { return Task.CompletedTask; } var model = context.Step.ToObject<LuceneIndexModel>(); foreach(var index in model.Indices) { if (!_luceneIndexManager.Exists(index)) { _luceneIndexManager.CreateIndex(index); } } return Task.CompletedTask; } private class LuceneIndexModel { public string[] Indices { get; set; } } }", "label": "FeatureEnvy"}
{"text": "public override bool AllowHousing(Mobile from, Point3D p) { if (Battle != null && Battle.State != PvPBattleState.Internal && !Battle.Hidden && !Battle.AllowHousing(from, p)) { return false; } return base.AllowHousing(from, p); }", "label": "ComplexConditional"}
{"text": "/// <summary> /// Retrieve the current unit precision of the map based on the given unit. /// </summary> /// <param name=\"map\">The given unit.</param> /// <returns>The unit precision of the given unit.</returns> public static int GetUnitPrecision(MS_UNITS unit) { switch (unit) { case MS_UNITS.MS_DD: return 5; case MS_UNITS.MS_FEET: return 0; case MS_UNITS.MS_INCHES: return 0; case MS_UNITS.MS_KILOMETERS: return 3; case MS_UNITS.MS_METERS: return 0; case MS_UNITS.MS_MILES: return 3; case MS_UNITS.MS_PERCENTAGES: return 2; case MS_UNITS.MS_PIXELS: return 0; } return 0; }", "label": "ComplexMethod"}
{"text": "public class ScreenEffect : Packet { public ScreenEffect(ScreenEffectType type) : base(0x70, 28) { m_Stream.Write((byte)0x04); m_Stream.Fill(8); m_Stream.Write((short)type); m_Stream.Fill(16); } }", "label": "FeatureEnvy"}
{"text": "public int CompareTo(PatternMatch other) { int diff; if ((diff = CompareType(this, other)) != 0 || (diff = CompareCamelCase(this, other)) != 0 || (diff = CompareCase(this, other)) != 0 || (diff = ComparePunctuation(this, other)) != 0) { return diff; } return 0; }", "label": "ComplexConditional"}
{"text": "private static bool Match(string mask, string value) { if (value == null) value = string.Empty; int i = 0; int j = 0; for (; j < value.Length && i < mask.Length; j++) { if (mask[i] == '?') i++; else if (mask[i] == '*') { i++; if (i >= mask.Length) return true; while (++j < value.Length && value[j] != mask[i]) ; if (j-- == value.Length) return false; } else { if (char.ToUpper(mask[i]) != char.ToUpper(value[j])) return false; i++; } } return i == mask.Length && j == value.Length; }", "label": "ComplexMethod"}
{"text": "override public string getParameterString() { string retstring = base.getParameterString(); if (sourceText != SourceTextMode.NONE) { if( sourceText == SourceTextMode.CLEANED_OR_RAW ) retstring += \"&sourceText=cleaned_or_raw\"; else if( sourceText == SourceTextMode.CQUERY ) retstring += \"&sourceText=cquery\"; else if( sourceText == SourceTextMode.CQUERY ) retstring += \"&sourceText=xpath\"; } if (cQuery != null) retstring += \"&cquery=\" + HttpUtility.UrlEncode(cQuery); if (xPath != null) retstring += \"&xpath=\" + HttpUtility.UrlEncode(xPath); if (baseUrl != null) retstring += \"&baseUrl=\" + HttpUtility.UrlEncode(baseUrl); return retstring; }", "label": "ComplexMethod"}
{"text": "//------------------------------------------------------------------------------ private OutPt GetBottomPt(OutPt pp) { OutPt dups = null; OutPt p = pp.Next; while (p != pp) { if (p.Pt.Y > pp.Pt.Y) { pp = p; dups = null; } else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X) { if (p.Pt.X < pp.Pt.X) { dups = null; pp = p; } else { if (p.Next != pp && p.Prev != pp) dups = p; } } p = p.Next; } if (dups != null) { //there appears to be at least 2 vertices at bottomPt so ... while (dups != p) { if (!FirstIsBottomPt(p, dups)) pp = dups; dups = dups.Next; while (dups.Pt != pp.Pt) dups = dups.Next; } } return pp; }", "label": "ComplexMethod"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat160.MulWordsAdd(PInv, x, z, 0) != 0) || (z[4] == P4 && Nat160.Gte(z, P))) { Nat.AddWordTo(5, PInv, z); } }", "label": "ComplexConditional"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat192.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[5] == P5 && Nat192.Gte(z, P))) { Nat.Add33To(6, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "private static int match_class(char c, char cl) { bool res; switch (tolower(cl)) { case 'a': res = isalpha(c); break; case 'c': res = iscntrl(c); break; case 'd': res = isdigit(c); break; case 'l': res = islower(c); break; case 'p': res = ispunct(c); break; case 's': res = isspace(c); break; case 'g': res = isgraph(c); break; case 'u': res = isupper(c); break; case 'w': res = isalnum(c); break; case 'x': res = isxdigit((char)c); break; case 'z': res = (c == 0); break; default: return (cl == c) ? 1 : 0; } return (islower(cl) ? (res ? 1 : 0) : ((!res) ? 1 : 0)); }", "label": "ComplexMethod"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat256.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[7] == P7 && Nat256.Gte(z, P))) { Nat.Add33To(8, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "public override void InitSBInfo() { if (Title == \"the waiter\" || Title == \"the barkeeper\" || Title == \"the baker\" || Title == \"the innkeeper\" || Title == \"the chef\") { if (m_SBInfos.Count == 0) { m_SBInfos.Add(new SBPlayerBarkeeper()); } } else { m_SBInfos.Clear(); } }", "label": "ComplexConditional"}
{"text": "private static void DoShowGump(Mobile from, XmlSpawner x) { if(from == null || from.Deleted) return; if(x == null || x.Deleted || x.Map == null || x.Map == Map.Internal) return; x.OnDoubleClick( from); }", "label": "ComplexConditional"}
{"text": "public sealed class ChangeCharacter : Packet { public ChangeCharacter(IAccount a) : base(0x81) { EnsureCapacity(305); int count = 0; for (int i = 0; i < a.Length; ++i) { if (a[i] != null) { ++count; } } m_Stream.Write((byte)count); m_Stream.Write((byte)0); for (int i = 0; i < a.Length; ++i) { if (a[i] != null) { string name = a[i].Name; if (name == null) { name = \"-null-\"; } else if ((name = name.Trim()).Length == 0) { name = \"-empty-\"; } m_Stream.WriteAsciiFixed(name, 30); m_Stream.Fill(30); // password } else { m_Stream.Fill(60); } } } }", "label": "FeatureEnvy"}
{"text": "class TimeoutFrameTick : IObserver<long> { readonly TimeoutFrame parent; readonly ulong timerId; public TimeoutFrameTick(TimeoutFrame parent, ulong timerId) { this.parent = parent; this.timerId = timerId; } public void OnCompleted() { } public void OnError(Exception error) { } public void OnNext(long _) { lock (parent.gate) { if (parent.objectId == timerId) { parent.isTimeout = true; } } if (parent.isTimeout) { try { parent.observer.OnError(new TimeoutException()); } finally { parent.Dispose(); } } } }", "label": "FeatureEnvy"}
{"text": "private void OnVesselRecovered(ProtoVessel v, bool quick) { // Don't check if we're not ready to complete if (!ReadyToComplete()) { return; } // EVA vessel if (v.vesselType == VesselType.EVA) { if (v.protoPartSnapshots != null) { foreach (ProtoPartSnapshot p in v.protoPartSnapshots) { foreach (ProtoCrewMember pcm in p.protoModuleCrew) { recovered[pcm.name] = true; } } } } else { foreach (ProtoCrewMember crew in v.GetVesselCrew()) { if (recovered.ContainsKey(crew.name)) { recovered[crew.name] = true; } } } TestConditions(); }", "label": "ComplexMethod"}
{"text": "public abstract class AbstractGenerator : ICodeGenerator, IConfigurable { public abstract string name { get; } public int priority { get { return 0; } } public bool runInDryMode { get { return true; } } public Dictionary<string, string> defaultProperties { get { return _ignoreNamespacesConfig.defaultProperties; } } readonly IgnoreNamespacesConfig _ignoreNamespacesConfig = new IgnoreNamespacesConfig(); public void Configure(Preferences preferences) { _ignoreNamespacesConfig.Configure(preferences); CodeGeneratorExtentions.ignoreNamespaces = _ignoreNamespacesConfig.ignoreNamespaces; } public abstract CodeGenFile[] Generate(CodeGeneratorData[] data); }", "label": "FeatureEnvy"}
{"text": "class RightZipObserver : IObserver<TRight> { readonly Zip parent; public RightZipObserver(Zip parent) { this.parent = parent; } public void OnNext(TRight value) { lock (parent.gate) { parent.rightQ.Enqueue(value); parent.Dequeue(); } } public void OnError(Exception ex) { lock (parent.gate) { parent.OnError(ex); } } public void OnCompleted() { lock (parent.gate) { parent.rightCompleted = true; if (parent.leftCompleted) parent.OnCompleted(); } } }", "label": "FeatureEnvy"}
{"text": "#endregion public static bool IsMatch(object v1, object v2) { if (IsPrimitive(v1) && IsPrimitive(v2)) { if (v1.GetType() != v2.GetType()) return false; var d1 = ToDecimal(v1); var d2 = ToDecimal(v2); return d1 == d2; } string s1 = null, s2 = null; if (v1 is Text.XivString) s1 = ((Text.XivString)v1).ToString(); else if (v1 is string) s1 = (string)v1; if (v2 is Text.XivString) s2 = ((Text.XivString)v2).ToString(); else if (v2 is string) s2 = (string)v2; if (s1 == null || s2 == null) return false; var maxDistance = Math.Ceiling(RelativeLevenshteinDistance * (s1.Length + s2.Length) / 2.0); var d = Levenshtein.Compute(s1, s2); return (d <= maxDistance); }", "label": "ComplexMethod"}
{"text": "protected override bool CheckScriptPubKeyCore(Script scriptPubKey, Op[] scriptPubKeyOps) { var ops = scriptPubKeyOps; if (ops.Length < 3) return false; var sigCount = ops[0].GetInt(); var keyCount = ops[ops.Length - 2].GetInt(); if (sigCount == null || keyCount == null) return false; if (keyCount.Value < 0 || keyCount.Value > 20) return false; if (sigCount.Value < 0 || sigCount.Value > keyCount.Value) return false; if (1 + keyCount + 1 + 1 != ops.Length) return false; for (int i = 1; i < keyCount + 1; i++) { if (ops[i].PushData == null) return false; } return ops[ops.Length - 1].Code == OpcodeType.OP_CHECKMULTISIG; }", "label": "ComplexMethod"}
{"text": "private static string UnquoteToken(string token) { if (!string.IsNullOrWhiteSpace(token) && ((token.StartsWith(\"\\\"\", StringComparison.Ordinal) && token.EndsWith(\"\\\"\", StringComparison.Ordinal)) && (token.Length > 1))) { return token.Substring(1, token.Length - 2); } return token; }", "label": "ComplexConditional"}
{"text": "public class BackgroundRefreshJob : Shiny.Jobs.IJob { DataService dataService; public BackgroundRefreshJob() { dataService = new DataService(); } public async Task<bool> Run(JobInfo jobInfo, CancellationToken cancelToken) { try { var getTweets = dataService.GetTweetsAsync(true); var getBlogs = dataService.GetBlogItemsAsync(true); await Task.WhenAll(getTweets, getBlogs); } catch (Exception ex) { Debug.WriteLine($\"Unable to refresh items: {ex}\"); return false; } return true; } }", "label": "FeatureEnvy"}
{"text": "private static Cursor SelectCursor(SizeGrip sizeGrip) { switch (sizeGrip) { case SizeGrip.Left: return Cursors.SizeWE; case SizeGrip.TopLeft: return Cursors.SizeNWSE; case SizeGrip.Top: return Cursors.SizeNS; case SizeGrip.TopRight: return Cursors.SizeNESW; case SizeGrip.Right: return Cursors.SizeWE; case SizeGrip.BottomRight: return Cursors.SizeNWSE; case SizeGrip.Bottom: return Cursors.SizeNS; case SizeGrip.BottomLeft: return Cursors.SizeNESW; default: return Cursors.Arrow; } }", "label": "ComplexMethod"}
{"text": "public sealed class ScrollMessage : Packet { public ScrollMessage(int type, int tip, string text) : base(0xA6) { if (text == null) { text = \"\"; } EnsureCapacity(10 + text.Length); m_Stream.Write((byte)type); m_Stream.Write(tip); m_Stream.Write((ushort)text.Length); m_Stream.WriteAsciiFixed(text, text.Length); } }", "label": "FeatureEnvy"}
{"text": "private string GetPlatform(Region region) { switch (region) { case Region.Br: return \"br1\"; case Region.Eune: return \"eun1\"; case Region.Euw: return \"euw1\"; case Region.Jp: return \"jp1\"; case Region.Kr: return \"kr\"; case Region.Lan: return \"la1\"; case Region.Las: return \"la2\"; case Region.Na: return \"na1\"; case Region.Oce: return \"oc1\"; case Region.Tr: return \"tr1\"; case Region.Ru: return \"ru\"; case Region.Global: return \"global\"; case Region.Americas: return \"americas\"; case Region.Europe: return \"europe\"; case Region.Asia: return \"asia\"; default: throw new NotImplementedException(); } }", "label": "ComplexMethod"}
{"text": "private void AddToHouse() { BaseHouse house = BaseHouse.FindHouseAt(this); if (Guild.NewGuildSystem && this.m_BeforeChangeover && house != null && !house.Addons.Contains(this)) { house.Addons.Add(this); this.m_BeforeChangeover = false; } }", "label": "ComplexConditional"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat256.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[7] == P7 && Nat256.Gte(z, P))) { Nat.Add33To(8, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "public static void CleanUp() { // clean up any unowned attachments foreach (XmlAttachment a in XmlAttach.Values) { if (a.OwnedBy == null || (a.OwnedBy is Mobile && ((Mobile)a.OwnedBy).Deleted) || (a.OwnedBy is Item && ((Item)a.OwnedBy).Deleted)) { a.Delete(); } } }", "label": "ComplexConditional"}
{"text": "private void ReportError(Mobile mob, string status_str) { if (status_str != null && mob != null && !mob.Deleted && mob is PlayerMobile && mob.AccessLevel > AccessLevel.Player) { mob.SendMessage(33, String.Format(\"{0}:{1}\", AttachedTo.GetType().Name, status_str)); } }", "label": "ComplexConditional"}
{"text": "public override IEnumerable<JToken> ExecuteFilter(IEnumerable<JToken> current, bool errorWhenNoMatch) { foreach (JToken root in current) { if (Name == null) yield return root; JToken value = root; JToken container = root; while (true) { if (container != null && container.HasValues) { value = container.First; } else { while (value != null && value != root && value == value.Parent.Last) { value = value.Parent; } if (value == null || value == root) break; value = value.Next; } JProperty e = value as JProperty; if (e != null) { if (e.Name == Name) yield return e.Value; } else { if (Name == null) yield return value; } container = value as JContainer; } } }", "label": "ComplexMethod"}
{"text": "public string MapInfo(Vector2 mapPos) { Vector2d pos = MousePosition(mapPos); double mlon = pos.x; double mlat = pos.y; if (mlon >= -180 && mlon <= 180 && mlat >= -90 && mlat <= 90) return mouseOverInfo(mlon, mlat); else return \"\"; }", "label": "ComplexConditional"}
{"text": "static int ilog_10(uint aI) { if (aI == 0) return 0; else if (aI >= 1 && aI <= 9) return 1; else if (aI >= 10 && aI <= 99) return 2; else if (aI >= 100 && aI <= 999) return 3; else if (aI >= 1000 && aI <= 9999) return 4; else if (aI >= 10000 && aI <= 99999) return 5; else if (aI >= 100000 && aI <= 999999) return 6; else if (aI >= 1000000 && aI <= 9999999) return 7; else if (aI >= 10000000 && aI <= 99999999) return 8; else if (aI >= 100000000 && aI <= 999999999) return 9; return 10; }", "label": "ComplexMethod"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat160.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[4] == P4 && Nat160.Gte(z, P))) { Nat.Add33To(5, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "/// <inheritdoc cref=\"IComparer{Member}.Compare\"/> public int Compare(Member a, Member b) { var @as = a.Status; var bs = b.Status; if (@as == bs) return Ordering.Compare(a, b); if (@as == MemberStatus.Down) return 1; if (@bs == MemberStatus.Down) return -1; if (@as == MemberStatus.Exiting) return 1; if (@bs == MemberStatus.Exiting) return -1; if (@as == MemberStatus.Joining) return 1; if (@bs == MemberStatus.Joining) return -1; if (@as == MemberStatus.WeaklyUp) return 1; if (@bs == MemberStatus.WeaklyUp) return -1; return Ordering.Compare(a, b); }", "label": "ComplexMethod"}
{"text": "protected bool IsNumeric(string data) { char c; for (int i = 0; i < data.Length; i++) { c = data[i]; if (c >= '0' && c <= '9' || c == '-' || c == '+' || c == 'E' || c == 'e' || c == '.') { continue; } return false; } return true; }", "label": "ComplexConditional"}
{"text": "private bool SelectionsOk() { if (cbTryStart.SelectedItem == null || cbTryEnd.SelectedItem == null || cbHandlerStart.SelectedItem == null || cbHandlerEnd.SelectedItem == null) return false; return true; }", "label": "ComplexConditional"}
{"text": "public sealed class DisplaySecureTrade : Packet { public DisplaySecureTrade(Mobile them, Container first, Container second, string name) : base(0x6F) { if (name == null) { name = \"\"; } EnsureCapacity(18 + name.Length); m_Stream.Write((byte)0); // Display m_Stream.Write(them.Serial); m_Stream.Write(first.Serial); m_Stream.Write(second.Serial); m_Stream.Write(true); m_Stream.WriteAsciiFixed(name, 30); } }", "label": "FeatureEnvy"}
{"text": "public void Add(SxzPoint point) { if (UpperLeft.X == -1) { UpperLeft.X = point.X; } if (LowerRight.X == -1) { LowerRight.X = point.X; } if (UpperLeft.Y == -1) { UpperLeft.Y = point.Y; } if (LowerRight.Y == -1) { LowerRight.Y = point.Y; } if (point.X < UpperLeft.X) { UpperLeft.X = point.X; } if (point.X > LowerRight.X) { LowerRight.X = point.X; } if (point.Y < UpperLeft.Y) { UpperLeft.Y = point.Y; } if (point.Y > LowerRight.Y) { LowerRight.Y = point.Y; } }", "label": "ComplexMethod"}
{"text": "private double EvalArithmetic(DynValue v1, DynValue v2) { double? nd1 = v1.CastToNumber(); double? nd2 = v2.CastToNumber(); if (nd1 == null || nd2 == null) throw new DynamicExpressionException(\"Attempt to perform arithmetic on non-numbers.\"); double d1 = nd1.Value; double d2 = nd2.Value; switch (m_Operator) { case Operator.Add: return d1 + d2; case Operator.Sub: return d1 - d2; case Operator.Mul: return d1 * d2; case Operator.Div: return d1 / d2; case Operator.Mod: { double mod = Math.IEEERemainder(d1, d2); if (mod < 0) mod += d2; return mod; } default: throw new DynamicExpressionException(\"Unsupported operator {0}\", m_Operator); } }", "label": "ComplexMethod"}
{"text": "public class PostedFileViewModel : BaseViewModel { private PostedFileRoomViewModel _parent; public FileId FileId { get; private set; } public string FileName { get; private set; } public ICommand RemoveCommand { get; private set; } public PostedFileViewModel(ClientGuard client, PostedFile postedFile, PostedFileRoomViewModel parent) : base(parent, false) { this._parent = parent; FileId = postedFile.File.Id; FileName = postedFile.File.Name; RemoveCommand = new Command(Remove, _ => ClientModel.Api != null); } private void Remove(object o) { _parent.RemoveFile(this); ClientModel.Api.Perform(new ClientRemoveFileAction(_parent.RoomName, FileId)); } }", "label": "FeatureEnvy"}
{"text": "private void CheckAIActive() { Map map = Map; if (PlayerRangeSensitive && m_AI != null && map != null && map.GetSector(Location).Active) { m_AI.Activate(); } }", "label": "ComplexConditional"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat192.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[5] == P5 && Nat192.Gte(z, P))) { Nat.Add33To(6, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "private bool CollectionsAreEqual(ICollection coll1, ICollection coll2) { if (coll1 == coll2) { return true; } if (coll1 == null || coll2 == null) { return false; } if (coll1.Count != coll2.Count) { return false; } IEnumerator it1 = coll1.GetEnumerator(); while (it1.MoveNext()) { Object a = it1.Current; IEnumerator it2 = coll2.GetEnumerator(); bool found = false; while (it2.MoveNext()) { Object b = it2.Current; if (SpecialEquals(a, b)) { found = true; break; } } if (!found) { return false; } } return true; }", "label": "ComplexMethod"}
{"text": "public static void Reduce32(uint x, uint[] z) { if ((x != 0 && Nat224.Mul33WordAdd(PInv33, x, z, 0) != 0) || (z[6] == P6 && Nat224.Gte(z, P))) { Nat.Add33To(7, PInv33, z); } }", "label": "ComplexConditional"}
{"text": "class SampleTick : IObserver<T2> { readonly Sample parent; public SampleTick(Sample parent) { this.parent = parent; } public void OnCompleted() { lock (parent.gate) { if (parent.isUpdated) { parent.isUpdated = false; parent.observer.OnNext(parent.latestValue); } if (parent.isCompleted) { try { parent.observer.OnCompleted(); } finally { parent.Dispose(); } } } } public void OnError(Exception error) { } public void OnNext(T2 _) { lock (parent.gate) { if (parent.isUpdated) { var value = parent.latestValue; parent.isUpdated = false; parent.observer.OnNext(value); } if (parent.isCompleted) { try { parent.observer.OnCompleted(); } finally { parent.Dispose(); } } } } }", "label": "FeatureEnvy"}
{"text": "public static class NotificationService { private static NotificationControl _control; public static void Initialize(NotificationControl control) { _control = control; } public static void Notify(string message) { _control.Status = message; } public static void NotifyProgressStarted(string message = null) { _control.Progress = 0; if (!string.IsNullOrEmpty(message)) _control.Status = message; } public static void NotifyProgressChanged(int progress, string message = null) { _control.Progress += progress; if (!string.IsNullOrEmpty(message)) _control.Status = message; } public static void NotifyProgressFinished(string message = null) { _control.Progress = 100; if (!string.IsNullOrEmpty(message)) _control.Status = message; } }", "label": "FeatureEnvy"}
{"text": "public virtual void BeginRelease(Mobile from) { if (!Deleted && Controlled && from == ControlMaster && from.CheckAlive()) { EndRelease(from); } }", "label": "ComplexConditional"}
{"text": "class SampleFrameTick : IObserver<long> { readonly SampleFrame parent; public SampleFrameTick(SampleFrame parent) { this.parent = parent; } public void OnCompleted() { } public void OnError(Exception error) { } public void OnNext(long _) { lock (parent.gate) { if (parent.isUpdated) { var value = parent.latestValue; parent.isUpdated = false; parent.observer.OnNext(value); } if (parent.isCompleted) { try { parent.observer.OnCompleted(); } finally { parent.Dispose(); } } } } }", "label": "FeatureEnvy"}
{"text": "static class Program { public static socks5.Socks5Server sock5; /// <summary> /// The main entry point for the application. /// </summary> [STAThread] static void Main(string[] args) { AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; sock5 = new Socks5Server(IPAddress.Any, 7777); sock5.PacketSize = 65535; sock5.Start(); Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new MainForm()); sock5.Stop(); //output to console instead. Environment.Exit(0); } static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { Console.WriteLine(e.ToString()); } }", "label": "FeatureEnvy"}
{"text": "private static void InternalSiteSort() { if (VoteSites.Count < 2) { return; } var list = VoteSites.Values.ToList(); VoteSites.Clear(); list.Sort(InternalSiteSort); list.ForEach(s => VoteSites.Add(s.UID, s)); list.Clear(); }private static int InternalSiteSort(IVoteSite a, IVoteSite b) { if (a == b) { return 0; } if (a == null) { return 1; } if (b == null) { return -1; } if (!a.Valid && !b.Valid) { return 0; } if (!a.Valid) { return 1; } if (!b.Valid) { return -1; } if (a.Interval > b.Interval) { return 1; } if (a.Interval < b.Interval) { return -1; } return 0; }", "label": "ComplexMethod"}
{"text": "/// <summary> /// Interaction logic for MainWindow.xaml /// </summary> [Example(null, \"Visualization of view and projection matrices (under construction).\")] public partial class MainWindow : Window { private MainViewModel vm; public MainWindow() { this.InitializeComponent(); this.vm = new MainViewModel(); this.DataContext = this.vm; } private void OnCameraChanged(object sender, RoutedEventArgs e) { var vp = (HelixViewport3D)sender; vm.ViewMatrix = vp.Viewport.GetViewMatrix(); vm.ViewportMatrix = vp.Viewport.GetViewportTransform(); vm.ProjectionMatrix = vp.Viewport.GetProjectionMatrix(); } }", "label": "FeatureEnvy"}
{"text": "private static bool IsCharHexDigit(char c) { if (((c < '0') || (c > '9')) && ((c < 'a') || (c > 'f'))) { return ((c >= 'A') && (c <= 'F')); } return true; }", "label": "ComplexConditional"}
{"text": "internal static class ExifHelper { //const int MOTOROLA_TIFF_MAGIC_NUMBER = 0x4D4D; //const int INTEL_TIFF_MAGIC_NUMBER = 0x4949; static readonly ExifReader _exifReader = new ExifReader(); public static IList<Directory> Read(Stream stream) { if (stream.Position != 0) stream.Position = 0; var segmentTypes = _exifReader.SegmentTypes; var segments = JpegSegmentReader.ReadSegments(new SequentialStreamReader(stream), segmentTypes); var directories = new List<Directory>(); var readerSegmentTypes = _exifReader.SegmentTypes; var readerSegments = segments.Where(s => readerSegmentTypes.Contains(s.Type)); directories.AddRange(_exifReader.ReadJpegSegments(readerSegments)); return directories; } }", "label": "FeatureEnvy"}
{"text": "/// Used for computing contact manifolds. public struct b2ClipVertex { public b2Vec2 v; public b2ContactFeature id; public void Dump() { System.Diagnostics.Debug.WriteLine(\"b2ClipVertex {{ v={0},{1} - feature={4}@{2},{5}@{3} }}\", v.x, v.y, id.indexA, id.indexB, id.typeA, id.typeB); } };", "label": "FeatureEnvy"}
{"text": "object FixIntArg(TypeSig type, long value) { switch (type.ElementType) { case ElementType.Boolean: return value != 0; case ElementType.Char: return (char)value; case ElementType.I1: return (sbyte)value; case ElementType.U1: return (byte)value; case ElementType.I2: return (short)value; case ElementType.U2: return (ushort)value; case ElementType.I4: return (int)value; case ElementType.U4: return (uint)value; case ElementType.I8: return (long)value; case ElementType.U8: return (ulong)value; } throw new ApplicationException(string.Format(\"Wrong type {0}\", type)); }", "label": "ComplexMethod"}
{"text": "public sealed class DisplaySignGump : Packet { public DisplaySignGump(Serial serial, int gumpID, string unknown, string caption) : base(0x8B) { if (unknown == null) { unknown = \"\"; } if (caption == null) { caption = \"\"; } EnsureCapacity(16 + unknown.Length + caption.Length); m_Stream.Write(serial); m_Stream.Write((short)gumpID); m_Stream.Write((short)(unknown.Length)); m_Stream.WriteAsciiFixed(unknown, unknown.Length); m_Stream.Write((short)(caption.Length + 1)); m_Stream.WriteAsciiFixed(caption, caption.Length + 1); } }", "label": "FeatureEnvy"}
{"text": "private class WorkerThread { private readonly AsyncWriter m_Owner; public WorkerThread(AsyncWriter owner) { m_Owner = owner; } public void Worker() { m_ThreadCount++; while (m_Owner.m_WriteQueue.Count > 0) { var mem = (MemoryStream)m_Owner.m_WriteQueue.Dequeue(); if (mem != null && mem.Length > 0) { mem.WriteTo(m_Owner.m_File); } } if (m_Owner.m_Closed) { m_Owner.m_File.Close(); } m_ThreadCount--; if (m_ThreadCount <= 0) { World.NotifyDiskWriteComplete(); } } }", "label": "FeatureEnvy"}
{"text": "public static string ToFullString(this ClilocLNG lng) { if (lng == ClilocLNG.NULL) { lng = Clilocs.DefaultLanguage; } switch (lng) { case ClilocLNG.ENU: return \"English\"; case ClilocLNG.DEU: return \"German\"; case ClilocLNG.ESP: return \"Spanish\"; case ClilocLNG.FRA: return \"French\"; case ClilocLNG.JPN: return \"Japanese\"; case ClilocLNG.KOR: return \"Korean\"; case ClilocLNG.CHT: return \"Chinese\"; } return lng.ToString(); }", "label": "ComplexMethod"}
{"text": "private class ListenerInfo { public WeakReference targetRef; public MethodInfo method; public IPartMessageListenerV1 attr; public object Target { get { return targetRef.Target; } } private Part TargetPart { get { object target = Target; return AsPart(target); } } public bool CheckPrereq(ICurrentEventInfo info) { if (!attr.Scenes.IsLoaded()) return false; // ReSharper disable once InvokeAsExtensionMethod SourcePart can be null if (!PartUtils.RelationTest(info.SourcePart, TargetPart, attr.Relations)) return false; return true; } }", "label": "FeatureEnvy"}
{"text": "public static string GetClassification(this ITypeSymbol type) { switch (type.TypeKind) { case TypeKind.Class: return ClassificationTypeNames.ClassName; case TypeKind.Module: return ClassificationTypeNames.ModuleName; case TypeKind.Struct: return ClassificationTypeNames.StructName; case TypeKind.Interface: return ClassificationTypeNames.InterfaceName; case TypeKind.Enum: return ClassificationTypeNames.EnumName; case TypeKind.Delegate: return ClassificationTypeNames.DelegateName; case TypeKind.TypeParameter: return ClassificationTypeNames.TypeParameterName; case TypeKind.Dynamic: return ClassificationTypeNames.Keyword; default: return null; } }", "label": "ComplexMethod"}
{"text": "public static bool IsDockWindowState(DockState state) { if (state == DockState.DockTop || state == DockState.DockBottom || state == DockState.DockLeft || state == DockState.DockRight || state == DockState.Document) return true; else return false; }", "label": "ComplexConditional"}
{"text": "private static bool IsCompatibleObject(object value) { if (!(value is T) && (value != null || (typeof(T).IsValueType() && !ReflectionUtils.IsNullableType(typeof(T))))) { return false; } return true; }", "label": "ComplexConditional"}
{"text": "private bool ParseObject() { while (true) { char currentChar = _chars[_charPos]; switch (currentChar) { case '\\0': if (_charsUsed == _charPos) { if (ReadData(false) == 0) return false; } else { _charPos++; } break; case '}': SetToken(JsonToken.EndObject); _charPos++; return true; case '/': ParseComment(); return true; case StringUtils.CarriageReturn: ProcessCarriageReturn(false); break; case StringUtils.LineFeed: ProcessLineFeed(); break; case ' ': case StringUtils.Tab: // eat _charPos++; break; default: if (char.IsWhiteSpace(currentChar)) { // eat _charPos++; } else { return ParseProperty(); } break; } } }", "label": "ComplexMethod"}
{"text": "protected virtual void ShowOptionMenu(GumpButton button) { if (User != null && !User.Deleted && Options != null && Options.Count >= 0) { Send(new MenuGump(User, Refresh(), Options, button)); } }", "label": "ComplexConditional"}
{"text": "class TaskKey : IComparable<TaskKey> { IIntervalCallback m_task; public TimeSpan Interval { get; private set; } public DateTime LastCalled { get; private set; } public bool Elapsed { get { return NextTime <= DateTime.Now; } } public DateTime NextTime { get { return LastCalled.Add(Interval); } } public void Call() { LastCalled = DateTime.Now; Interval = m_task.Interval; m_task.Callback(); } public TaskKey(IIntervalCallback task) { m_task = task; Interval = task.Interval; LastCalled = DateTime.Now; } public int CompareTo(TaskKey rhs) { if (rhs == null) throw new ArgumentNullException(\"rhs\"); if (this == rhs) return 0; int result = NextTime.CompareTo(rhs.NextTime); return result != 0 ? result : -1; } }", "label": "FeatureEnvy"}
{"text": "public sealed class DisplayPaperdoll : Packet { public DisplayPaperdoll(Mobile m, string text, bool canLift) : base(0x88, 66) { byte flags = 0x00; if (m.Warmode) { flags |= 0x01; } if (canLift) { flags |= 0x02; } m_Stream.Write(m.Serial); m_Stream.WriteAsciiFixed(text, 60); m_Stream.Write(flags); } }", "label": "FeatureEnvy"}
{"text": "internal static bool CharacterNeedsEscaping(char ch) { if (ch == Keys.SlashForward || ch == Keys.DoubleQuote || ch < Keys.Space || ch == Keys.BackSlash) return true; if (ch < HIGH_SURROGATE_START) return false; if (ch > LOW_SURROGATE_END) return ch >= MAX_CHAR; return true; }", "label": "ComplexConditional"}
{"text": "public static class AnonymizerExtensions { private static readonly Inferrer Infer = new Inferrer(new ConnectionSettings(new InMemoryConnection()).ApplyDomainSettings()); public static object ToAnonymousObject(this JoinField field) => field.Match<object>(p => Infer.RelationName(p.Name), c => new { parent = Infer.Id(c.ParentId), name = Infer.RelationName(c.Name) }); }", "label": "FeatureEnvy"}
{"text": "/// <seealso cref= Options#defineOptionName(int) </seealso> protected internal override string DefineOptionName(uint option) { switch (option) { case OMIT_PACKET_WRAPPER: return \"OMIT_PACKET_WRAPPER\"; case READONLY_PACKET: return \"READONLY_PACKET\"; case USE_COMPACT_FORMAT: return \"USE_COMPACT_FORMAT\"; // case USE_CANONICAL_FORMAT : return \"USE_CANONICAL_FORMAT\"; case INCLUDE_THUMBNAIL_PAD: return \"INCLUDE_THUMBNAIL_PAD\"; case EXACT_PACKET_LENGTH: return \"EXACT_PACKET_LENGTH\"; case OMIT_XMPMETA_ELEMENT: return \"OMIT_XMPMETA_ELEMENT\"; case SORT: return \"NORMALIZED\"; default: return null; } }", "label": "ComplexMethod"}
{"text": "private void SetOpacity() { if (Control == null || Control.Handle == IntPtr.Zero || Element == null || _isDisposed) return; #if __IOS__ Control.Opaque = Element.IsOpaque; #elif __MACOS__ Control.SetIsOpaque(Element.IsOpaque); #endif }", "label": "ComplexConditional"}
{"text": "private class LocationComparer : IComparer<IEntity> { private static LocationComparer _Instance; public static LocationComparer GetInstance(IEntity relativeTo) { if (_Instance == null) { _Instance = new LocationComparer(relativeTo); } else { _Instance._RelativeTo = relativeTo; } return _Instance; } private IEntity _RelativeTo; public IEntity RelativeTo { get { return _RelativeTo; } set { _RelativeTo = value; } } public LocationComparer(IEntity relativeTo) { _RelativeTo = relativeTo; } private int GetDistance(IEntity p) { int x = _RelativeTo.X - p.X; int y = _RelativeTo.Y - p.Y; int z = _RelativeTo.Z - p.Z; x *= 11; y *= 11; return (x * x) + (y * y) + (z * z); } public int Compare(IEntity x, IEntity y) { return GetDistance(x) - GetDistance(y); } }", "label": "FeatureEnvy"}
{"text": "protected virtual void LoginHandler(LoginEventArgs e) { if (e != null && e.Mobile != null && !e.Mobile.Deleted && e.Mobile.Region != null && (e.Mobile.Region.IsPartOf(BattleRegion) || e.Mobile.Region.IsPartOf(SpectateRegion))) { InvalidateStray(e.Mobile); } }", "label": "ComplexConditional"}
{"text": "public override bool OnTarget(Mobile m, Target t, object o) { if (Battle != null && Battle.State != PvPBattleState.Internal && !Battle.Hidden && !Battle.OnTarget(m, t, o)) { return false; } return base.OnTarget(m, t, o); }", "label": "ComplexConditional"}
{"text": "internal void RefreshChanges() { if (IsDisposed) return; if (VisibleNestedPanes.Count == 0) { ControlBox = true; return; } for (int i=VisibleNestedPanes.Count - 1; i>=0; i--) { DockContentCollection contents = VisibleNestedPanes[i].Contents; for (int j=contents.Count - 1; j>=0; j--) { IDockContent content = contents[j]; if (content.DockHandler.DockState != DockState.Float) continue; if (content.DockHandler.CloseButton && content.DockHandler.CloseButtonVisible) { ControlBox = true; return; } } } //Only if there is a ControlBox do we turn it off //old code caused a flash of the window. if (ControlBox) ControlBox = false; }", "label": "ComplexMethod"}
{"text": "protected override void Dispose(bool disposing) { if (disposing) { if (this.brushBgValueCurrent != null) this.brushBgValueCurrent.Dispose(); if (this.brushBgMouseOver != null) this.brushBgMouseOver.Dispose(); if (this.brushBgValueCurrentDisabled != null) this.brushBgValueCurrentDisabled.Dispose(); //if (this.brushBgMouseOverDisabled != null) this.brushBgMouseOverDisabled.Dispose(); if (this.brushFgParameterLabel != null) this.brushFgParameterLabel.Dispose(); if (this.brushFgText != null) this.brushFgText.Dispose(); if (this.brushBgControl != null) this.brushBgControl.Dispose(); } base.Dispose(disposing); }", "label": "ComplexMethod"}
{"text": "/* m() measures the number of consonant sequences between 0 and j. if c is a consonant sequence and v a vowel sequence, and <..> indicates arbitrary presence, <c><v> gives 0 <c>vc<v> gives 1 <c>vcvc<v> gives 2 <c>vcvcvc<v> gives 3 .... */ private int m() { int n = 0; int i = 0; while(true) { if (i > _j) return n; if (! cons(i)) break; i++; } i++; while(true) { while(true) { if (i > _j) return n; if (cons(i)) break; i++; } i++; n++; while(true) { if (i > _j) return n; if (! cons(i)) break; i++; } i++; } }", "label": "ComplexMethod"}
{"text": "TypeDef GetNestedType(int n) { var type = stringDecrypter.Type; if (n == 0) { foreach (var nested in type.NestedTypes) { if (nested.NestedTypes.Count == 1) return nested; } } else if (n == 1) { foreach (var nested in type.NestedTypes) { if (nested.IsEnum) continue; if (nested.NestedTypes.Count != 0) continue; return nested; } } else if (n == 2) { foreach (var nested in type.NestedTypes) { if (nested.IsEnum) return nested; } } return null; }", "label": "ComplexMethod"}
{"text": "public static string GetStringValue(this DateMathTimeUnit value) { switch (value) { case DateMathTimeUnit.Second: return \"s\"; case DateMathTimeUnit.Minute: return \"m\"; case DateMathTimeUnit.Hour: return \"h\"; case DateMathTimeUnit.Day: return \"d\"; case DateMathTimeUnit.Week: return \"w\"; case DateMathTimeUnit.Month: return \"M\"; case DateMathTimeUnit.Year: return \"y\"; default: throw new ArgumentOutOfRangeException(nameof(value), value, null); } }", "label": "ComplexMethod"}
{"text": "public void UnfreezeMember(PlayerMobile pm) { if (pm == null || pm.Deleted || !pm.Frozen || !IsMember(pm)) { return; } pm.Frozen = false; OnUnfrozen(pm); Battle.OnTeamMemberUnfrozen(this, pm); }", "label": "ComplexConditional"}
{"text": "public virtual bool Validate() { if (TypeOf == null || String.IsNullOrWhiteSpace(Name)) { return false; } if (_IncludeChildTypes && (TypeOf == null || !TypeOf.IsNotNull || TypeOf.InternalType.IsSealed)) { _IncludeChildTypes = false; } return true; }", "label": "ComplexConditional"}
{"text": "public static InteractionType FromValue(string value) { switch (value) { case CHOICE: return Choice; case SEQUENCING: return Sequencing; case LIKERT: return Likert; case MATCHING: return Matching; case PERFORMANCE: return Performance; case TRUEFALSE: return TrueFalse; case FILLIN: return FillIn; case LONGFILLIN: return LongFillIn; case NUMERIC: return Numeric; case OTHER: return Other; default: throw new ArgumentOutOfRangeException(nameof(value), $\"'{value}' is not a valid interactionType.\"); } }", "label": "ComplexMethod"}
{"text": "private void AddCollisionAt(Vec2I anchor, int x, int y) { if (x >= Width || x < 0 || y >= Height || y < 0) return; if (m_collisionMap[x, y] == null) { m_collisionMap[x, y] = new HashSet<Vec2I>(); } m_collisionMap[x, y].Add(anchor); }", "label": "ComplexConditional"}
{"text": "internal class GeneratorThunk { private Native.bn_gencb_st gencb = new Native.bn_gencb_st(); private GeneratorHandler OnGenerator; private object arg; public Native.bn_gencb_st CallbackStruct { get { return gencb; } } public GeneratorThunk(GeneratorHandler client, object arg) { OnGenerator = client; this.arg = arg; gencb.ver = 2; gencb.arg = IntPtr.Zero; gencb.cb = OnGeneratorThunk; } internal int OnGeneratorThunk(int p, int n, IntPtr arg) { if (OnGenerator != null) { try { return OnGenerator(p, n, this.arg); } catch (Exception) { return 0; } } else { // return 1 to allow generation to succeed with // no user callback return 1; } } }", "label": "FeatureEnvy"}
{"text": "public class Controller { public static Controller Instance { get { return GetInstance(); } } public static Controller GetInstance() { return _controller ?? (_controller = new Controller()); } private static Controller _controller; private List<Bot> _bots; public List<Bot> Bots { get; private set; } public readonly Config Config = new Config(); private Controller() { Load(); } public void Load() { Config.LoadServers(); Bots = new List<Bot>(); foreach (ServerConfig server in Config.Servers) { Bot Combot = new Bot(server); Bots.Add(Combot); } } public void AutoConnect() { Bots.ForEach(bot => { if (bot.ServerConfig.AutoConnect) { bot.Connect(); } }); } public Bot GetBot(string server) { return Bots.Find(bot => bot.ServerConfig.Name == server); } }", "label": "FeatureEnvy"}
{"text": "public class VNScreenEffect : Packet { public VNScreenEffect(ScreenEffectType type) : base(0x70, 28) { m_Stream.Write((byte)0x04); m_Stream.Fill(8); m_Stream.Write((short)type); m_Stream.Fill(16); } }", "label": "FeatureEnvy"}
{"text": "internal static int GetMaxSpeciesOrigin(PKM pkm) { if (pkm.Format == 1) return GetMaxSpeciesOrigin(1); if (pkm.Format == 2 || pkm.VC) return GetMaxSpeciesOrigin(2); return GetMaxSpeciesOrigin(pkm.GenNumber); }internal static int GetMaxSpeciesOrigin(int generation) { switch (generation) { case 1: return MaxSpeciesID_1; case 2: return MaxSpeciesID_2; case 3: return MaxSpeciesID_3; case 4: return MaxSpeciesID_4; case 5: return MaxSpeciesID_5; case 6: return MaxSpeciesID_6; case 7: return MaxSpeciesID_7b; default: return -1; } }", "label": "ComplexMethod"}
{"text": "public class OpenIdApplicationRoleRemovedEventHandler : IRoleRemovedEventHandler { private readonly IOpenIdApplicationManager _manager; public OpenIdApplicationRoleRemovedEventHandler(IOpenIdApplicationManager manager) { _manager = manager; } public async Task RoleRemovedAsync(string roleName) { foreach (var application in await _manager.ListInRoleAsync(roleName)) { await _manager.RemoveFromRoleAsync(application, roleName); } } }", "label": "FeatureEnvy"}
{"text": "// 3.2+ bool FindInt3New() { var instrs = stringMethod.Body.Instructions; for (int i = 0; i < instrs.Count; i++) { int index = i; var ldarg0 = instrs[index++]; if (ldarg0.OpCode.Code != Code.Ldarg_0) continue; int value; if (!stringMethodConsts.GetInt32(ref index, out value)) continue; if (index + 3 >= instrs.Count) break; if (instrs[index++].OpCode.Code != Code.Xor) continue; if (!instrs[index++].IsLdloc()) continue; if (instrs[index++].OpCode.Code != Code.Xor) continue; i3 = value; if (!FindInt6(index++)) return false; return true; } return false; }", "label": "ComplexMethod"}
{"text": "[MethodImpl(MethodImplOptions.AggressiveInlining)] public static int CountDigits(ulong value) { int digits = 1; uint part; if (value >= 10000000) { if (value >= 100000000000000) { part = (uint)(value / 100000000000000); digits += 14; } else { part = (uint)(value / 10000000); digits += 7; } } else { part = (uint)value; } if (part < 10) { // no-op } else if (part < 100) { digits += 1; } else if (part < 1000) { digits += 2; } else if (part < 10000) { digits += 3; } else if (part < 100000) { digits += 4; } else if (part < 1000000) { digits += 5; } else { Debug.Assert(part < 10000000); digits += 6; } return digits; }", "label": "ComplexMethod"}
{"text": "public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { BuildStatus status = (BuildStatus) value; string text; switch (status) { case BuildStatus.Success: text = \"Successful\"; break; case BuildStatus.SuccessAndBuilding: text = \"Successful and building\"; break; case BuildStatus.Failed: text = \"Failed\"; break; case BuildStatus.FailedAndBuilding: text = \"Failed and building\"; break; case BuildStatus.Aborted: text = \"Aborted\"; break; case BuildStatus.Disabled: text = \"Disabled\"; break; case BuildStatus.Unstable: text = \"Unstable\"; break; default: text = status.ToString(); break; } return text; }", "label": "ComplexMethod"}
{"text": "public static bool VectorEqualsUnordered<T>(List<T> lhs, List<T> rhs) { if (lhs == rhs) return true; int lhsCount = lhs == null ? 0 : lhs.Count; int rhsCount = rhs == null ? 0 : rhs.Count; if (lhsCount != rhsCount) return false; if (lhsCount == 0) return true; bool[] matchedRhsElems = new bool[rhsCount]; for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) { Object lhsElem = lhs[lhsIdx]; int rhsIdx = 0; for (; rhsIdx < rhsCount; ++rhsIdx) { if (matchedRhsElems[rhsIdx]) { continue; } if (lhsElem.Equals(rhs[rhsIdx])) { matchedRhsElems[rhsIdx] = true; break; } } if (rhsIdx >= rhsCount) { // no matching elem found return false; } } return true; }", "label": "ComplexMethod"}
{"text": "class LeftZipObserver : IObserver<TLeft> { readonly Zip parent; public LeftZipObserver(Zip parent) { this.parent = parent; } public void OnNext(TLeft value) { lock (parent.gate) { parent.leftQ.Enqueue(value); parent.Dequeue(); } } public void OnError(Exception ex) { lock (parent.gate) { parent.OnError(ex); } } public void OnCompleted() { lock (parent.gate) { parent.leftCompleted = true; if (parent.rightCompleted) parent.OnCompleted(); } } }", "label": "FeatureEnvy"}
{"text": "private void ChangeKey(IEnumerable<Key> keys, bool enabled) { foreach (Key k in keys) { switch (k) { case Key.Blue: this.BlueKey = enabled; break; case Key.Green: this.GreenKey = enabled; break; case Key.Red: this.RedKey = enabled; break; case Key.Cyan: this.CyanKey = enabled; break; case Key.Magenta: this.MagentaKey = enabled; break; case Key.Yellow: this.YellowKey = enabled; break; case Key.TimeDoor: this.TimeDoor = enabled; break; } } }", "label": "ComplexMethod"}
{"text": "private void EventNextPhoto() { while (_cameraDevice.IsBusy) { Thread.Sleep(1); } if (PhotoCaptured != null) PhotoCaptured(this, new EventArgs()); switch (Mode) { case 0: { if (Index < ExposureValues.Count) { CaptureNextPhoto(); } else { Stop(); } } break; case 1: { if (Index < ShutterValues.Count) { CaptureNextPhoto(); } else { Stop(); } } break; case 2: { if (Index < PresetValues.Count) { CaptureNextPhoto(); } else { Stop(); } } break; case 3: { if (Index < ApertureValues.Count) { CaptureNextPhoto(); } else { Stop(); } } break; } }", "label": "ComplexMethod"}
{"text": "static int ListPrefixLevel(LinkedListNode<Tag> star) { var el = star?.Previous?.Previous?.Value; var prefix = star?.Previous?.Value as SpaceTag; if ((el == null || el is NewLineTag) && prefix != null && star.Next?.Value is SpaceTag) return prefix.Text.Length; return 0; }", "label": "ComplexConditional"}
